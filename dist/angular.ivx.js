(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
/*istanbul ignore next*/"use strict";

/*istanbul ignore next*/require("core-js/shim");

/*istanbul ignore next*/require("babel-regenerator-runtime");

/*istanbul ignore next*/require("core-js/fn/regexp/escape");

/* eslint max-len: 0 */

if (global._babelPolyfill) {
  throw new Error("only one instance of babel-polyfill is allowed");
}
global._babelPolyfill = true;

// Should be removed in the next major release:

var DEFINE_PROPERTY = "defineProperty";
function define(O, key, value) {
  O[key] || Object[DEFINE_PROPERTY](O, key, {
    writable: true,
    configurable: true,
    value: value
  });
}

define(String.prototype, "padLeft", "".padStart);
define(String.prototype, "padRight", "".padEnd);

"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (key) {
  [][key] && define(Array, key, Function.call.bind([][key]));
});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"babel-regenerator-runtime":296,"core-js/fn/regexp/escape":2,"core-js/shim":295}],2:[function(require,module,exports){
require('../../modules/core.regexp.escape');
module.exports = require('../../modules/_core').RegExp.escape;
},{"../../modules/_core":23,"../../modules/core.regexp.escape":119}],3:[function(require,module,exports){
module.exports = function(it){
  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
  return it;
};
},{}],4:[function(require,module,exports){
var cof = require('./_cof');
module.exports = function(it, msg){
  if(typeof it != 'number' && cof(it) != 'Number')throw TypeError(msg);
  return +it;
};
},{"./_cof":18}],5:[function(require,module,exports){
// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = require('./_wks')('unscopables')
  , ArrayProto  = Array.prototype;
if(ArrayProto[UNSCOPABLES] == undefined)require('./_hide')(ArrayProto, UNSCOPABLES, {});
module.exports = function(key){
  ArrayProto[UNSCOPABLES][key] = true;
};
},{"./_hide":40,"./_wks":117}],6:[function(require,module,exports){
module.exports = function(it, Constructor, name, forbiddenField){
  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};
},{}],7:[function(require,module,exports){
var isObject = require('./_is-object');
module.exports = function(it){
  if(!isObject(it))throw TypeError(it + ' is not an object!');
  return it;
};
},{"./_is-object":49}],8:[function(require,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
'use strict';
var toObject = require('./_to-object')
  , toIndex  = require('./_to-index')
  , toLength = require('./_to-length');

module.exports = [].copyWithin || function copyWithin(target/*= 0*/, start/*= 0, end = @length*/){
  var O     = toObject(this)
    , len   = toLength(O.length)
    , to    = toIndex(target, len)
    , from  = toIndex(start, len)
    , end   = arguments.length > 2 ? arguments[2] : undefined
    , count = Math.min((end === undefined ? len : toIndex(end, len)) - from, len - to)
    , inc   = 1;
  if(from < to && to < from + count){
    inc  = -1;
    from += count - 1;
    to   += count - 1;
  }
  while(count-- > 0){
    if(from in O)O[to] = O[from];
    else delete O[to];
    to   += inc;
    from += inc;
  } return O;
};
},{"./_to-index":105,"./_to-length":108,"./_to-object":109}],9:[function(require,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
'use strict';
var toObject = require('./_to-object')
  , toIndex  = require('./_to-index')
  , toLength = require('./_to-length');
module.exports = function fill(value /*, start = 0, end = @length */){
  var O      = toObject(this)
    , length = toLength(O.length)
    , aLen   = arguments.length
    , index  = toIndex(aLen > 1 ? arguments[1] : undefined, length)
    , end    = aLen > 2 ? arguments[2] : undefined
    , endPos = end === undefined ? length : toIndex(end, length);
  while(endPos > index)O[index++] = value;
  return O;
};
},{"./_to-index":105,"./_to-length":108,"./_to-object":109}],10:[function(require,module,exports){
var forOf = require('./_for-of');

module.exports = function(iter, ITERATOR){
  var result = [];
  forOf(iter, false, result.push, result, ITERATOR);
  return result;
};

},{"./_for-of":37}],11:[function(require,module,exports){
// false -> Array#indexOf
// true  -> Array#includes
var toIObject = require('./_to-iobject')
  , toLength  = require('./_to-length')
  , toIndex   = require('./_to-index');
module.exports = function(IS_INCLUDES){
  return function($this, el, fromIndex){
    var O      = toIObject($this)
      , length = toLength(O.length)
      , index  = toIndex(fromIndex, length)
      , value;
    // Array#includes uses SameValueZero equality algorithm
    if(IS_INCLUDES && el != el)while(length > index){
      value = O[index++];
      if(value != value)return true;
    // Array#toIndex ignores holes, Array#includes - not
    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
      if(O[index] === el)return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};
},{"./_to-index":105,"./_to-iobject":107,"./_to-length":108}],12:[function(require,module,exports){
// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx      = require('./_ctx')
  , IObject  = require('./_iobject')
  , toObject = require('./_to-object')
  , toLength = require('./_to-length')
  , asc      = require('./_array-species-create');
module.exports = function(TYPE, $create){
  var IS_MAP        = TYPE == 1
    , IS_FILTER     = TYPE == 2
    , IS_SOME       = TYPE == 3
    , IS_EVERY      = TYPE == 4
    , IS_FIND_INDEX = TYPE == 6
    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX
    , create        = $create || asc;
  return function($this, callbackfn, that){
    var O      = toObject($this)
      , self   = IObject(O)
      , f      = ctx(callbackfn, that, 3)
      , length = toLength(self.length)
      , index  = 0
      , result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined
      , val, res;
    for(;length > index; index++)if(NO_HOLES || index in self){
      val = self[index];
      res = f(val, index, O);
      if(TYPE){
        if(IS_MAP)result[index] = res;            // map
        else if(res)switch(TYPE){
          case 3: return true;                    // some
          case 5: return val;                     // find
          case 6: return index;                   // findIndex
          case 2: result.push(val);               // filter
        } else if(IS_EVERY)return false;          // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};
},{"./_array-species-create":15,"./_ctx":25,"./_iobject":45,"./_to-length":108,"./_to-object":109}],13:[function(require,module,exports){
var aFunction = require('./_a-function')
  , toObject  = require('./_to-object')
  , IObject   = require('./_iobject')
  , toLength  = require('./_to-length');

module.exports = function(that, callbackfn, aLen, memo, isRight){
  aFunction(callbackfn);
  var O      = toObject(that)
    , self   = IObject(O)
    , length = toLength(O.length)
    , index  = isRight ? length - 1 : 0
    , i      = isRight ? -1 : 1;
  if(aLen < 2)for(;;){
    if(index in self){
      memo = self[index];
      index += i;
      break;
    }
    index += i;
    if(isRight ? index < 0 : length <= index){
      throw TypeError('Reduce of empty array with no initial value');
    }
  }
  for(;isRight ? index >= 0 : length > index; index += i)if(index in self){
    memo = callbackfn(memo, self[index], index, O);
  }
  return memo;
};
},{"./_a-function":3,"./_iobject":45,"./_to-length":108,"./_to-object":109}],14:[function(require,module,exports){
var isObject = require('./_is-object')
  , isArray  = require('./_is-array')
  , SPECIES  = require('./_wks')('species');

module.exports = function(original){
  var C;
  if(isArray(original)){
    C = original.constructor;
    // cross-realm fallback
    if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;
    if(isObject(C)){
      C = C[SPECIES];
      if(C === null)C = undefined;
    }
  } return C === undefined ? Array : C;
};
},{"./_is-array":47,"./_is-object":49,"./_wks":117}],15:[function(require,module,exports){
// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = require('./_array-species-constructor');

module.exports = function(original, length){
  return new (speciesConstructor(original))(length);
};
},{"./_array-species-constructor":14}],16:[function(require,module,exports){
'use strict';
var aFunction  = require('./_a-function')
  , isObject   = require('./_is-object')
  , invoke     = require('./_invoke')
  , arraySlice = [].slice
  , factories  = {};

var construct = function(F, len, args){
  if(!(len in factories)){
    for(var n = [], i = 0; i < len; i++)n[i] = 'a[' + i + ']';
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  } return factories[len](F, args);
};

module.exports = Function.bind || function bind(that /*, args... */){
  var fn       = aFunction(this)
    , partArgs = arraySlice.call(arguments, 1);
  var bound = function(/* args... */){
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
  };
  if(isObject(fn.prototype))bound.prototype = fn.prototype;
  return bound;
};
},{"./_a-function":3,"./_invoke":44,"./_is-object":49}],17:[function(require,module,exports){
// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = require('./_cof')
  , TAG = require('./_wks')('toStringTag')
  // ES3 wrong here
  , ARG = cof(function(){ return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function(it, key){
  try {
    return it[key];
  } catch(e){ /* empty */ }
};

module.exports = function(it){
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};
},{"./_cof":18,"./_wks":117}],18:[function(require,module,exports){
var toString = {}.toString;

module.exports = function(it){
  return toString.call(it).slice(8, -1);
};
},{}],19:[function(require,module,exports){
'use strict';
var dP          = require('./_object-dp').f
  , create      = require('./_object-create')
  , redefineAll = require('./_redefine-all')
  , ctx         = require('./_ctx')
  , anInstance  = require('./_an-instance')
  , defined     = require('./_defined')
  , forOf       = require('./_for-of')
  , $iterDefine = require('./_iter-define')
  , step        = require('./_iter-step')
  , setSpecies  = require('./_set-species')
  , DESCRIPTORS = require('./_descriptors')
  , fastKey     = require('./_meta').fastKey
  , SIZE        = DESCRIPTORS ? '_s' : 'size';

var getEntry = function(that, key){
  // fast case
  var index = fastKey(key), entry;
  if(index !== 'F')return that._i[index];
  // frozen object case
  for(entry = that._f; entry; entry = entry.n){
    if(entry.k == key)return entry;
  }
};

module.exports = {
  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
    var C = wrapper(function(that, iterable){
      anInstance(that, C, NAME, '_i');
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear(){
        for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){
          entry.r = true;
          if(entry.p)entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function(key){
        var that  = this
          , entry = getEntry(that, key);
        if(entry){
          var next = entry.n
            , prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if(prev)prev.n = next;
          if(next)next.p = prev;
          if(that._f == entry)that._f = next;
          if(that._l == entry)that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /*, that = undefined */){
        anInstance(this, C, 'forEach');
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)
          , entry;
        while(entry = entry ? entry.n : this._f){
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while(entry && entry.r)entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key){
        return !!getEntry(this, key);
      }
    });
    if(DESCRIPTORS)dP(C.prototype, 'size', {
      get: function(){
        return defined(this[SIZE]);
      }
    });
    return C;
  },
  def: function(that, key, value){
    var entry = getEntry(that, key)
      , prev, index;
    // change existing entry
    if(entry){
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if(!that._f)that._f = entry;
      if(prev)prev.n = entry;
      that[SIZE]++;
      // add to index
      if(index !== 'F')that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function(C, NAME, IS_MAP){
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function(iterated, kind){
      this._t = iterated;  // target
      this._k = kind;      // kind
      this._l = undefined; // previous
    }, function(){
      var that  = this
        , kind  = that._k
        , entry = that._l;
      // revert to the last existing entry
      while(entry && entry.r)entry = entry.p;
      // get next entry
      if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if(kind == 'keys'  )return step(0, entry.k);
      if(kind == 'values')return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};
},{"./_an-instance":6,"./_ctx":25,"./_defined":27,"./_descriptors":28,"./_for-of":37,"./_iter-define":53,"./_iter-step":55,"./_meta":62,"./_object-create":66,"./_object-dp":67,"./_redefine-all":86,"./_set-species":91}],20:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var classof = require('./_classof')
  , from    = require('./_array-from-iterable');
module.exports = function(NAME){
  return function toJSON(){
    if(classof(this) != NAME)throw TypeError(NAME + "#toJSON isn't generic");
    return from(this);
  };
};
},{"./_array-from-iterable":10,"./_classof":17}],21:[function(require,module,exports){
'use strict';
var redefineAll       = require('./_redefine-all')
  , getWeak           = require('./_meta').getWeak
  , anObject          = require('./_an-object')
  , isObject          = require('./_is-object')
  , anInstance        = require('./_an-instance')
  , forOf             = require('./_for-of')
  , createArrayMethod = require('./_array-methods')
  , $has              = require('./_has')
  , arrayFind         = createArrayMethod(5)
  , arrayFindIndex    = createArrayMethod(6)
  , id                = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function(that){
  return that._l || (that._l = new UncaughtFrozenStore);
};
var UncaughtFrozenStore = function(){
  this.a = [];
};
var findUncaughtFrozen = function(store, key){
  return arrayFind(store.a, function(it){
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function(key){
    var entry = findUncaughtFrozen(this, key);
    if(entry)return entry[1];
  },
  has: function(key){
    return !!findUncaughtFrozen(this, key);
  },
  set: function(key, value){
    var entry = findUncaughtFrozen(this, key);
    if(entry)entry[1] = value;
    else this.a.push([key, value]);
  },
  'delete': function(key){
    var index = arrayFindIndex(this.a, function(it){
      return it[0] === key;
    });
    if(~index)this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
    var C = wrapper(function(that, iterable){
      anInstance(that, C, NAME, '_i');
      that._i = id++;      // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function(key){
        if(!isObject(key))return false;
        var data = getWeak(key);
        if(data === true)return uncaughtFrozenStore(this)['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key){
        if(!isObject(key))return false;
        var data = getWeak(key);
        if(data === true)return uncaughtFrozenStore(this).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function(that, key, value){
    var data = getWeak(anObject(key), true);
    if(data === true)uncaughtFrozenStore(that).set(key, value);
    else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};
},{"./_an-instance":6,"./_an-object":7,"./_array-methods":12,"./_for-of":37,"./_has":39,"./_is-object":49,"./_meta":62,"./_redefine-all":86}],22:[function(require,module,exports){
'use strict';
var global            = require('./_global')
  , $export           = require('./_export')
  , redefine          = require('./_redefine')
  , redefineAll       = require('./_redefine-all')
  , meta              = require('./_meta')
  , forOf             = require('./_for-of')
  , anInstance        = require('./_an-instance')
  , isObject          = require('./_is-object')
  , fails             = require('./_fails')
  , $iterDetect       = require('./_iter-detect')
  , setToStringTag    = require('./_set-to-string-tag')
  , inheritIfRequired = require('./_inherit-if-required');

module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){
  var Base  = global[NAME]
    , C     = Base
    , ADDER = IS_MAP ? 'set' : 'add'
    , proto = C && C.prototype
    , O     = {};
  var fixMethod = function(KEY){
    var fn = proto[KEY];
    redefine(proto, KEY,
      KEY == 'delete' ? function(a){
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a){
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a){
        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'add' ? function add(a){ fn.call(this, a === 0 ? 0 : a); return this; }
        : function set(a, b){ fn.call(this, a === 0 ? 0 : a, b); return this; }
    );
  };
  if(typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){
    new C().entries().next();
  }))){
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance             = new C
      // early implementations not supports chaining
      , HASNT_CHAINING       = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance
      // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
      , THROWS_ON_PRIMITIVES = fails(function(){ instance.has(1); })
      // most early implementations doesn't supports iterables, most modern - not close it correctly
      , ACCEPT_ITERABLES     = $iterDetect(function(iter){ new C(iter); }) // eslint-disable-line no-new
      // for early implementations -0 and +0 not the same
      , BUGGY_ZERO = !IS_WEAK && fails(function(){
        // V8 ~ Chromium 42- fails only with 5+ elements
        var $instance = new C()
          , index     = 5;
        while(index--)$instance[ADDER](index, index);
        return !$instance.has(-0);
      });
    if(!ACCEPT_ITERABLES){ 
      C = wrapper(function(target, iterable){
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base, target, C);
        if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    if(THROWS_ON_PRIMITIVES || BUGGY_ZERO){
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if(BUGGY_ZERO || HASNT_CHAINING)fixMethod(ADDER);
    // weak collections should not contains .clear method
    if(IS_WEAK && proto.clear)delete proto.clear;
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);

  if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);

  return C;
};
},{"./_an-instance":6,"./_export":32,"./_fails":34,"./_for-of":37,"./_global":38,"./_inherit-if-required":43,"./_is-object":49,"./_iter-detect":54,"./_meta":62,"./_redefine":87,"./_redefine-all":86,"./_set-to-string-tag":92}],23:[function(require,module,exports){
var core = module.exports = {version: '2.4.0'};
if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
},{}],24:[function(require,module,exports){
'use strict';
var $defineProperty = require('./_object-dp')
  , createDesc      = require('./_property-desc');

module.exports = function(object, index, value){
  if(index in object)$defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};
},{"./_object-dp":67,"./_property-desc":85}],25:[function(require,module,exports){
// optional / simple context binding
var aFunction = require('./_a-function');
module.exports = function(fn, that, length){
  aFunction(fn);
  if(that === undefined)return fn;
  switch(length){
    case 1: return function(a){
      return fn.call(that, a);
    };
    case 2: return function(a, b){
      return fn.call(that, a, b);
    };
    case 3: return function(a, b, c){
      return fn.call(that, a, b, c);
    };
  }
  return function(/* ...args */){
    return fn.apply(that, arguments);
  };
};
},{"./_a-function":3}],26:[function(require,module,exports){
'use strict';
var anObject    = require('./_an-object')
  , toPrimitive = require('./_to-primitive')
  , NUMBER      = 'number';

module.exports = function(hint){
  if(hint !== 'string' && hint !== NUMBER && hint !== 'default')throw TypeError('Incorrect hint');
  return toPrimitive(anObject(this), hint != NUMBER);
};
},{"./_an-object":7,"./_to-primitive":110}],27:[function(require,module,exports){
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function(it){
  if(it == undefined)throw TypeError("Can't call method on  " + it);
  return it;
};
},{}],28:[function(require,module,exports){
// Thank's IE8 for his funny defineProperty
module.exports = !require('./_fails')(function(){
  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
});
},{"./_fails":34}],29:[function(require,module,exports){
var isObject = require('./_is-object')
  , document = require('./_global').document
  // in old IE typeof document.createElement is 'object'
  , is = isObject(document) && isObject(document.createElement);
module.exports = function(it){
  return is ? document.createElement(it) : {};
};
},{"./_global":38,"./_is-object":49}],30:[function(require,module,exports){
// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');
},{}],31:[function(require,module,exports){
// all enumerable object keys, includes symbols
var getKeys = require('./_object-keys')
  , gOPS    = require('./_object-gops')
  , pIE     = require('./_object-pie');
module.exports = function(it){
  var result     = getKeys(it)
    , getSymbols = gOPS.f;
  if(getSymbols){
    var symbols = getSymbols(it)
      , isEnum  = pIE.f
      , i       = 0
      , key;
    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
  } return result;
};
},{"./_object-gops":73,"./_object-keys":76,"./_object-pie":77}],32:[function(require,module,exports){
var global    = require('./_global')
  , core      = require('./_core')
  , hide      = require('./_hide')
  , redefine  = require('./_redefine')
  , ctx       = require('./_ctx')
  , PROTOTYPE = 'prototype';

var $export = function(type, name, source){
  var IS_FORCED = type & $export.F
    , IS_GLOBAL = type & $export.G
    , IS_STATIC = type & $export.S
    , IS_PROTO  = type & $export.P
    , IS_BIND   = type & $export.B
    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE]
    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
    , expProto  = exports[PROTOTYPE] || (exports[PROTOTYPE] = {})
    , key, own, out, exp;
  if(IS_GLOBAL)source = name;
  for(key in source){
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if(target)redefine(target, key, out, type & $export.U);
    // export
    if(exports[key] != out)hide(exports, key, exp);
    if(IS_PROTO && expProto[key] != out)expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library` 
module.exports = $export;
},{"./_core":23,"./_ctx":25,"./_global":38,"./_hide":40,"./_redefine":87}],33:[function(require,module,exports){
var MATCH = require('./_wks')('match');
module.exports = function(KEY){
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch(e){
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch(f){ /* empty */ }
  } return true;
};
},{"./_wks":117}],34:[function(require,module,exports){
module.exports = function(exec){
  try {
    return !!exec();
  } catch(e){
    return true;
  }
};
},{}],35:[function(require,module,exports){
'use strict';
var hide     = require('./_hide')
  , redefine = require('./_redefine')
  , fails    = require('./_fails')
  , defined  = require('./_defined')
  , wks      = require('./_wks');

module.exports = function(KEY, length, exec){
  var SYMBOL   = wks(KEY)
    , fns      = exec(defined, SYMBOL, ''[KEY])
    , strfn    = fns[0]
    , rxfn     = fns[1];
  if(fails(function(){
    var O = {};
    O[SYMBOL] = function(){ return 7; };
    return ''[KEY](O) != 7;
  })){
    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function(string, arg){ return rxfn.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function(string){ return rxfn.call(string, this); }
    );
  }
};
},{"./_defined":27,"./_fails":34,"./_hide":40,"./_redefine":87,"./_wks":117}],36:[function(require,module,exports){
'use strict';
// 21.2.5.3 get RegExp.prototype.flags
var anObject = require('./_an-object');
module.exports = function(){
  var that   = anObject(this)
    , result = '';
  if(that.global)     result += 'g';
  if(that.ignoreCase) result += 'i';
  if(that.multiline)  result += 'm';
  if(that.unicode)    result += 'u';
  if(that.sticky)     result += 'y';
  return result;
};
},{"./_an-object":7}],37:[function(require,module,exports){
var ctx         = require('./_ctx')
  , call        = require('./_iter-call')
  , isArrayIter = require('./_is-array-iter')
  , anObject    = require('./_an-object')
  , toLength    = require('./_to-length')
  , getIterFn   = require('./core.get-iterator-method')
  , BREAK       = {}
  , RETURN      = {};
var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
    , f      = ctx(fn, that, entries ? 2 : 1)
    , index  = 0
    , length, step, iterator, result;
  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if(result === BREAK || result === RETURN)return result;
  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
    result = call(iterator, f, step.value, entries);
    if(result === BREAK || result === RETURN)return result;
  }
};
exports.BREAK  = BREAK;
exports.RETURN = RETURN;
},{"./_an-object":7,"./_ctx":25,"./_is-array-iter":46,"./_iter-call":51,"./_to-length":108,"./core.get-iterator-method":118}],38:[function(require,module,exports){
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
},{}],39:[function(require,module,exports){
var hasOwnProperty = {}.hasOwnProperty;
module.exports = function(it, key){
  return hasOwnProperty.call(it, key);
};
},{}],40:[function(require,module,exports){
var dP         = require('./_object-dp')
  , createDesc = require('./_property-desc');
module.exports = require('./_descriptors') ? function(object, key, value){
  return dP.f(object, key, createDesc(1, value));
} : function(object, key, value){
  object[key] = value;
  return object;
};
},{"./_descriptors":28,"./_object-dp":67,"./_property-desc":85}],41:[function(require,module,exports){
module.exports = require('./_global').document && document.documentElement;
},{"./_global":38}],42:[function(require,module,exports){
module.exports = !require('./_descriptors') && !require('./_fails')(function(){
  return Object.defineProperty(require('./_dom-create')('div'), 'a', {get: function(){ return 7; }}).a != 7;
});
},{"./_descriptors":28,"./_dom-create":29,"./_fails":34}],43:[function(require,module,exports){
var isObject       = require('./_is-object')
  , setPrototypeOf = require('./_set-proto').set;
module.exports = function(that, target, C){
  var P, S = target.constructor;
  if(S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf){
    setPrototypeOf(that, P);
  } return that;
};
},{"./_is-object":49,"./_set-proto":90}],44:[function(require,module,exports){
// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function(fn, args, that){
  var un = that === undefined;
  switch(args.length){
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return              fn.apply(that, args);
};
},{}],45:[function(require,module,exports){
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = require('./_cof');
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
  return cof(it) == 'String' ? it.split('') : Object(it);
};
},{"./_cof":18}],46:[function(require,module,exports){
// check on default Array iterator
var Iterators  = require('./_iterators')
  , ITERATOR   = require('./_wks')('iterator')
  , ArrayProto = Array.prototype;

module.exports = function(it){
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};
},{"./_iterators":56,"./_wks":117}],47:[function(require,module,exports){
// 7.2.2 IsArray(argument)
var cof = require('./_cof');
module.exports = Array.isArray || function isArray(arg){
  return cof(arg) == 'Array';
};
},{"./_cof":18}],48:[function(require,module,exports){
// 20.1.2.3 Number.isInteger(number)
var isObject = require('./_is-object')
  , floor    = Math.floor;
module.exports = function isInteger(it){
  return !isObject(it) && isFinite(it) && floor(it) === it;
};
},{"./_is-object":49}],49:[function(require,module,exports){
module.exports = function(it){
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};
},{}],50:[function(require,module,exports){
// 7.2.8 IsRegExp(argument)
var isObject = require('./_is-object')
  , cof      = require('./_cof')
  , MATCH    = require('./_wks')('match');
module.exports = function(it){
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};
},{"./_cof":18,"./_is-object":49,"./_wks":117}],51:[function(require,module,exports){
// call something on iterator step with safe closing on error
var anObject = require('./_an-object');
module.exports = function(iterator, fn, value, entries){
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch(e){
    var ret = iterator['return'];
    if(ret !== undefined)anObject(ret.call(iterator));
    throw e;
  }
};
},{"./_an-object":7}],52:[function(require,module,exports){
'use strict';
var create         = require('./_object-create')
  , descriptor     = require('./_property-desc')
  , setToStringTag = require('./_set-to-string-tag')
  , IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function(){ return this; });

module.exports = function(Constructor, NAME, next){
  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
  setToStringTag(Constructor, NAME + ' Iterator');
};
},{"./_hide":40,"./_object-create":66,"./_property-desc":85,"./_set-to-string-tag":92,"./_wks":117}],53:[function(require,module,exports){
'use strict';
var LIBRARY        = require('./_library')
  , $export        = require('./_export')
  , redefine       = require('./_redefine')
  , hide           = require('./_hide')
  , has            = require('./_has')
  , Iterators      = require('./_iterators')
  , $iterCreate    = require('./_iter-create')
  , setToStringTag = require('./_set-to-string-tag')
  , getPrototypeOf = require('./_object-gpo')
  , ITERATOR       = require('./_wks')('iterator')
  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
  , FF_ITERATOR    = '@@iterator'
  , KEYS           = 'keys'
  , VALUES         = 'values';

var returnThis = function(){ return this; };

module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
  $iterCreate(Constructor, NAME, next);
  var getMethod = function(kind){
    if(!BUGGY && kind in proto)return proto[kind];
    switch(kind){
      case KEYS: return function keys(){ return new Constructor(this, kind); };
      case VALUES: return function values(){ return new Constructor(this, kind); };
    } return function entries(){ return new Constructor(this, kind); };
  };
  var TAG        = NAME + ' Iterator'
    , DEF_VALUES = DEFAULT == VALUES
    , VALUES_BUG = false
    , proto      = Base.prototype
    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
    , $default   = $native || getMethod(DEFAULT)
    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
    , methods, key, IteratorPrototype;
  // Fix native
  if($anyNative){
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
    if(IteratorPrototype !== Object.prototype){
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if(DEF_VALUES && $native && $native.name !== VALUES){
    VALUES_BUG = true;
    $default = function values(){ return $native.call(this); };
  }
  // Define iterator
  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG]  = returnThis;
  if(DEFAULT){
    methods = {
      values:  DEF_VALUES ? $default : getMethod(VALUES),
      keys:    IS_SET     ? $default : getMethod(KEYS),
      entries: $entries
    };
    if(FORCED)for(key in methods){
      if(!(key in proto))redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};
},{"./_export":32,"./_has":39,"./_hide":40,"./_iter-create":52,"./_iterators":56,"./_library":58,"./_object-gpo":74,"./_redefine":87,"./_set-to-string-tag":92,"./_wks":117}],54:[function(require,module,exports){
var ITERATOR     = require('./_wks')('iterator')
  , SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function(){ SAFE_CLOSING = true; };
  Array.from(riter, function(){ throw 2; });
} catch(e){ /* empty */ }

module.exports = function(exec, skipClosing){
  if(!skipClosing && !SAFE_CLOSING)return false;
  var safe = false;
  try {
    var arr  = [7]
      , iter = arr[ITERATOR]();
    iter.next = function(){ return {done: safe = true}; };
    arr[ITERATOR] = function(){ return iter; };
    exec(arr);
  } catch(e){ /* empty */ }
  return safe;
};
},{"./_wks":117}],55:[function(require,module,exports){
module.exports = function(done, value){
  return {value: value, done: !!done};
};
},{}],56:[function(require,module,exports){
module.exports = {};
},{}],57:[function(require,module,exports){
var getKeys   = require('./_object-keys')
  , toIObject = require('./_to-iobject');
module.exports = function(object, el){
  var O      = toIObject(object)
    , keys   = getKeys(O)
    , length = keys.length
    , index  = 0
    , key;
  while(length > index)if(O[key = keys[index++]] === el)return key;
};
},{"./_object-keys":76,"./_to-iobject":107}],58:[function(require,module,exports){
module.exports = false;
},{}],59:[function(require,module,exports){
// 20.2.2.14 Math.expm1(x)
var $expm1 = Math.expm1;
module.exports = (!$expm1
  // Old FF bug
  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
  // Tor Browser bug
  || $expm1(-2e-17) != -2e-17
) ? function expm1(x){
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
} : $expm1;
},{}],60:[function(require,module,exports){
// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x){
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};
},{}],61:[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x){
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};
},{}],62:[function(require,module,exports){
var META     = require('./_uid')('meta')
  , isObject = require('./_is-object')
  , has      = require('./_has')
  , setDesc  = require('./_object-dp').f
  , id       = 0;
var isExtensible = Object.isExtensible || function(){
  return true;
};
var FREEZE = !require('./_fails')(function(){
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function(it){
  setDesc(it, META, {value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  }});
};
var fastKey = function(it, create){
  // return primitive with prefix
  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if(!has(it, META)){
    // can't set metadata to uncaught frozen object
    if(!isExtensible(it))return 'F';
    // not necessary to add metadata
    if(!create)return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function(it, create){
  if(!has(it, META)){
    // can't set metadata to uncaught frozen object
    if(!isExtensible(it))return true;
    // not necessary to add metadata
    if(!create)return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function(it){
  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY:      META,
  NEED:     false,
  fastKey:  fastKey,
  getWeak:  getWeak,
  onFreeze: onFreeze
};
},{"./_fails":34,"./_has":39,"./_is-object":49,"./_object-dp":67,"./_uid":114}],63:[function(require,module,exports){
var Map     = require('./es6.map')
  , $export = require('./_export')
  , shared  = require('./_shared')('metadata')
  , store   = shared.store || (shared.store = new (require('./es6.weak-map')));

var getOrCreateMetadataMap = function(target, targetKey, create){
  var targetMetadata = store.get(target);
  if(!targetMetadata){
    if(!create)return undefined;
    store.set(target, targetMetadata = new Map);
  }
  var keyMetadata = targetMetadata.get(targetKey);
  if(!keyMetadata){
    if(!create)return undefined;
    targetMetadata.set(targetKey, keyMetadata = new Map);
  } return keyMetadata;
};
var ordinaryHasOwnMetadata = function(MetadataKey, O, P){
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
};
var ordinaryGetOwnMetadata = function(MetadataKey, O, P){
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
};
var ordinaryDefineOwnMetadata = function(MetadataKey, MetadataValue, O, P){
  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
};
var ordinaryOwnMetadataKeys = function(target, targetKey){
  var metadataMap = getOrCreateMetadataMap(target, targetKey, false)
    , keys        = [];
  if(metadataMap)metadataMap.forEach(function(_, key){ keys.push(key); });
  return keys;
};
var toMetaKey = function(it){
  return it === undefined || typeof it == 'symbol' ? it : String(it);
};
var exp = function(O){
  $export($export.S, 'Reflect', O);
};

module.exports = {
  store: store,
  map: getOrCreateMetadataMap,
  has: ordinaryHasOwnMetadata,
  get: ordinaryGetOwnMetadata,
  set: ordinaryDefineOwnMetadata,
  keys: ordinaryOwnMetadataKeys,
  key: toMetaKey,
  exp: exp
};
},{"./_export":32,"./_shared":94,"./es6.map":149,"./es6.weak-map":255}],64:[function(require,module,exports){
var global    = require('./_global')
  , macrotask = require('./_task').set
  , Observer  = global.MutationObserver || global.WebKitMutationObserver
  , process   = global.process
  , Promise   = global.Promise
  , isNode    = require('./_cof')(process) == 'process';

module.exports = function(){
  var head, last, notify;

  var flush = function(){
    var parent, fn;
    if(isNode && (parent = process.domain))parent.exit();
    while(head){
      fn   = head.fn;
      head = head.next;
      try {
        fn();
      } catch(e){
        if(head)notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if(parent)parent.enter();
  };

  // Node.js
  if(isNode){
    notify = function(){
      process.nextTick(flush);
    };
  // browsers with MutationObserver
  } else if(Observer){
    var toggle = true
      , node   = document.createTextNode('');
    new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
    notify = function(){
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if(Promise && Promise.resolve){
    var promise = Promise.resolve();
    notify = function(){
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function(){
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function(fn){
    var task = {fn: fn, next: undefined};
    if(last)last.next = task;
    if(!head){
      head = task;
      notify();
    } last = task;
  };
};
},{"./_cof":18,"./_global":38,"./_task":104}],65:[function(require,module,exports){
'use strict';
// 19.1.2.1 Object.assign(target, source, ...)
var getKeys  = require('./_object-keys')
  , gOPS     = require('./_object-gops')
  , pIE      = require('./_object-pie')
  , toObject = require('./_to-object')
  , IObject  = require('./_iobject')
  , $assign  = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || require('./_fails')(function(){
  var A = {}
    , B = {}
    , S = Symbol()
    , K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function(k){ B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
  var T     = toObject(target)
    , aLen  = arguments.length
    , index = 1
    , getSymbols = gOPS.f
    , isEnum     = pIE.f;
  while(aLen > index){
    var S      = IObject(arguments[index++])
      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
      , length = keys.length
      , j      = 0
      , key;
    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
  } return T;
} : $assign;
},{"./_fails":34,"./_iobject":45,"./_object-gops":73,"./_object-keys":76,"./_object-pie":77,"./_to-object":109}],66:[function(require,module,exports){
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject    = require('./_an-object')
  , dPs         = require('./_object-dps')
  , enumBugKeys = require('./_enum-bug-keys')
  , IE_PROTO    = require('./_shared-key')('IE_PROTO')
  , Empty       = function(){ /* empty */ }
  , PROTOTYPE   = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function(){
  // Thrash, waste and sodomy: IE GC bug
  var iframe = require('./_dom-create')('iframe')
    , i      = enumBugKeys.length
    , lt     = '<'
    , gt     = '>'
    , iframeDocument;
  iframe.style.display = 'none';
  require('./_html').appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties){
  var result;
  if(O !== null){
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty;
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};

},{"./_an-object":7,"./_dom-create":29,"./_enum-bug-keys":30,"./_html":41,"./_object-dps":68,"./_shared-key":93}],67:[function(require,module,exports){
var anObject       = require('./_an-object')
  , IE8_DOM_DEFINE = require('./_ie8-dom-define')
  , toPrimitive    = require('./_to-primitive')
  , dP             = Object.defineProperty;

exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes){
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if(IE8_DOM_DEFINE)try {
    return dP(O, P, Attributes);
  } catch(e){ /* empty */ }
  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
  if('value' in Attributes)O[P] = Attributes.value;
  return O;
};
},{"./_an-object":7,"./_descriptors":28,"./_ie8-dom-define":42,"./_to-primitive":110}],68:[function(require,module,exports){
var dP       = require('./_object-dp')
  , anObject = require('./_an-object')
  , getKeys  = require('./_object-keys');

module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties){
  anObject(O);
  var keys   = getKeys(Properties)
    , length = keys.length
    , i = 0
    , P;
  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
  return O;
};
},{"./_an-object":7,"./_descriptors":28,"./_object-dp":67,"./_object-keys":76}],69:[function(require,module,exports){
// Forced replacement prototype accessors methods
module.exports = require('./_library')|| !require('./_fails')(function(){
  var K = Math.random();
  // In FF throws only define methods
  __defineSetter__.call(null, K, function(){ /* empty */});
  delete require('./_global')[K];
});
},{"./_fails":34,"./_global":38,"./_library":58}],70:[function(require,module,exports){
var pIE            = require('./_object-pie')
  , createDesc     = require('./_property-desc')
  , toIObject      = require('./_to-iobject')
  , toPrimitive    = require('./_to-primitive')
  , has            = require('./_has')
  , IE8_DOM_DEFINE = require('./_ie8-dom-define')
  , gOPD           = Object.getOwnPropertyDescriptor;

exports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P){
  O = toIObject(O);
  P = toPrimitive(P, true);
  if(IE8_DOM_DEFINE)try {
    return gOPD(O, P);
  } catch(e){ /* empty */ }
  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
};
},{"./_descriptors":28,"./_has":39,"./_ie8-dom-define":42,"./_object-pie":77,"./_property-desc":85,"./_to-iobject":107,"./_to-primitive":110}],71:[function(require,module,exports){
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = require('./_to-iobject')
  , gOPN      = require('./_object-gopn').f
  , toString  = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function(it){
  try {
    return gOPN(it);
  } catch(e){
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it){
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};

},{"./_object-gopn":72,"./_to-iobject":107}],72:[function(require,module,exports){
// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys      = require('./_object-keys-internal')
  , hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
  return $keys(O, hiddenKeys);
};
},{"./_enum-bug-keys":30,"./_object-keys-internal":75}],73:[function(require,module,exports){
exports.f = Object.getOwnPropertySymbols;
},{}],74:[function(require,module,exports){
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has         = require('./_has')
  , toObject    = require('./_to-object')
  , IE_PROTO    = require('./_shared-key')('IE_PROTO')
  , ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function(O){
  O = toObject(O);
  if(has(O, IE_PROTO))return O[IE_PROTO];
  if(typeof O.constructor == 'function' && O instanceof O.constructor){
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};
},{"./_has":39,"./_shared-key":93,"./_to-object":109}],75:[function(require,module,exports){
var has          = require('./_has')
  , toIObject    = require('./_to-iobject')
  , arrayIndexOf = require('./_array-includes')(false)
  , IE_PROTO     = require('./_shared-key')('IE_PROTO');

module.exports = function(object, names){
  var O      = toIObject(object)
    , i      = 0
    , result = []
    , key;
  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while(names.length > i)if(has(O, key = names[i++])){
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};
},{"./_array-includes":11,"./_has":39,"./_shared-key":93,"./_to-iobject":107}],76:[function(require,module,exports){
// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys       = require('./_object-keys-internal')
  , enumBugKeys = require('./_enum-bug-keys');

module.exports = Object.keys || function keys(O){
  return $keys(O, enumBugKeys);
};
},{"./_enum-bug-keys":30,"./_object-keys-internal":75}],77:[function(require,module,exports){
exports.f = {}.propertyIsEnumerable;
},{}],78:[function(require,module,exports){
// most Object methods by ES6 should accept primitives
var $export = require('./_export')
  , core    = require('./_core')
  , fails   = require('./_fails');
module.exports = function(KEY, exec){
  var fn  = (core.Object || {})[KEY] || Object[KEY]
    , exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
};
},{"./_core":23,"./_export":32,"./_fails":34}],79:[function(require,module,exports){
var getKeys   = require('./_object-keys')
  , toIObject = require('./_to-iobject')
  , isEnum    = require('./_object-pie').f;
module.exports = function(isEntries){
  return function(it){
    var O      = toIObject(it)
      , keys   = getKeys(O)
      , length = keys.length
      , i      = 0
      , result = []
      , key;
    while(length > i)if(isEnum.call(O, key = keys[i++])){
      result.push(isEntries ? [key, O[key]] : O[key]);
    } return result;
  };
};
},{"./_object-keys":76,"./_object-pie":77,"./_to-iobject":107}],80:[function(require,module,exports){
// all object keys, includes non-enumerable and symbols
var gOPN     = require('./_object-gopn')
  , gOPS     = require('./_object-gops')
  , anObject = require('./_an-object')
  , Reflect  = require('./_global').Reflect;
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it){
  var keys       = gOPN.f(anObject(it))
    , getSymbols = gOPS.f;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};
},{"./_an-object":7,"./_global":38,"./_object-gopn":72,"./_object-gops":73}],81:[function(require,module,exports){
var $parseFloat = require('./_global').parseFloat
  , $trim       = require('./_string-trim').trim;

module.exports = 1 / $parseFloat(require('./_string-ws') + '-0') !== -Infinity ? function parseFloat(str){
  var string = $trim(String(str), 3)
    , result = $parseFloat(string);
  return result === 0 && string.charAt(0) == '-' ? -0 : result;
} : $parseFloat;
},{"./_global":38,"./_string-trim":102,"./_string-ws":103}],82:[function(require,module,exports){
var $parseInt = require('./_global').parseInt
  , $trim     = require('./_string-trim').trim
  , ws        = require('./_string-ws')
  , hex       = /^[\-+]?0[xX]/;

module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix){
  var string = $trim(String(str), 3);
  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
} : $parseInt;
},{"./_global":38,"./_string-trim":102,"./_string-ws":103}],83:[function(require,module,exports){
'use strict';
var path      = require('./_path')
  , invoke    = require('./_invoke')
  , aFunction = require('./_a-function');
module.exports = function(/* ...pargs */){
  var fn     = aFunction(this)
    , length = arguments.length
    , pargs  = Array(length)
    , i      = 0
    , _      = path._
    , holder = false;
  while(length > i)if((pargs[i] = arguments[i++]) === _)holder = true;
  return function(/* ...args */){
    var that = this
      , aLen = arguments.length
      , j = 0, k = 0, args;
    if(!holder && !aLen)return invoke(fn, pargs, that);
    args = pargs.slice();
    if(holder)for(;length > j; j++)if(args[j] === _)args[j] = arguments[k++];
    while(aLen > k)args.push(arguments[k++]);
    return invoke(fn, args, that);
  };
};
},{"./_a-function":3,"./_invoke":44,"./_path":84}],84:[function(require,module,exports){
module.exports = require('./_global');
},{"./_global":38}],85:[function(require,module,exports){
module.exports = function(bitmap, value){
  return {
    enumerable  : !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable    : !(bitmap & 4),
    value       : value
  };
};
},{}],86:[function(require,module,exports){
var redefine = require('./_redefine');
module.exports = function(target, src, safe){
  for(var key in src)redefine(target, key, src[key], safe);
  return target;
};
},{"./_redefine":87}],87:[function(require,module,exports){
var global    = require('./_global')
  , hide      = require('./_hide')
  , has       = require('./_has')
  , SRC       = require('./_uid')('src')
  , TO_STRING = 'toString'
  , $toString = Function[TO_STRING]
  , TPL       = ('' + $toString).split(TO_STRING);

require('./_core').inspectSource = function(it){
  return $toString.call(it);
};

(module.exports = function(O, key, val, safe){
  var isFunction = typeof val == 'function';
  if(isFunction)has(val, 'name') || hide(val, 'name', key);
  if(O[key] === val)return;
  if(isFunction)has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if(O === global){
    O[key] = val;
  } else {
    if(!safe){
      delete O[key];
      hide(O, key, val);
    } else {
      if(O[key])O[key] = val;
      else hide(O, key, val);
    }
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString(){
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});
},{"./_core":23,"./_global":38,"./_has":39,"./_hide":40,"./_uid":114}],88:[function(require,module,exports){
module.exports = function(regExp, replace){
  var replacer = replace === Object(replace) ? function(part){
    return replace[part];
  } : replace;
  return function(it){
    return String(it).replace(regExp, replacer);
  };
};
},{}],89:[function(require,module,exports){
// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y){
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};
},{}],90:[function(require,module,exports){
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = require('./_is-object')
  , anObject = require('./_an-object');
var check = function(O, proto){
  anObject(O);
  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function(test, buggy, set){
      try {
        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch(e){ buggy = true; }
      return function setPrototypeOf(O, proto){
        check(O, proto);
        if(buggy)O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};
},{"./_an-object":7,"./_ctx":25,"./_is-object":49,"./_object-gopd":70}],91:[function(require,module,exports){
'use strict';
var global      = require('./_global')
  , dP          = require('./_object-dp')
  , DESCRIPTORS = require('./_descriptors')
  , SPECIES     = require('./_wks')('species');

module.exports = function(KEY){
  var C = global[KEY];
  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
    configurable: true,
    get: function(){ return this; }
  });
};
},{"./_descriptors":28,"./_global":38,"./_object-dp":67,"./_wks":117}],92:[function(require,module,exports){
var def = require('./_object-dp').f
  , has = require('./_has')
  , TAG = require('./_wks')('toStringTag');

module.exports = function(it, tag, stat){
  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
};
},{"./_has":39,"./_object-dp":67,"./_wks":117}],93:[function(require,module,exports){
var shared = require('./_shared')('keys')
  , uid    = require('./_uid');
module.exports = function(key){
  return shared[key] || (shared[key] = uid(key));
};
},{"./_shared":94,"./_uid":114}],94:[function(require,module,exports){
var global = require('./_global')
  , SHARED = '__core-js_shared__'
  , store  = global[SHARED] || (global[SHARED] = {});
module.exports = function(key){
  return store[key] || (store[key] = {});
};
},{"./_global":38}],95:[function(require,module,exports){
// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject  = require('./_an-object')
  , aFunction = require('./_a-function')
  , SPECIES   = require('./_wks')('species');
module.exports = function(O, D){
  var C = anObject(O).constructor, S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};
},{"./_a-function":3,"./_an-object":7,"./_wks":117}],96:[function(require,module,exports){
var fails = require('./_fails');

module.exports = function(method, arg){
  return !!method && fails(function(){
    arg ? method.call(null, function(){}, 1) : method.call(null);
  });
};
},{"./_fails":34}],97:[function(require,module,exports){
var toInteger = require('./_to-integer')
  , defined   = require('./_defined');
// true  -> String#at
// false -> String#codePointAt
module.exports = function(TO_STRING){
  return function(that, pos){
    var s = String(defined(that))
      , i = toInteger(pos)
      , l = s.length
      , a, b;
    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};
},{"./_defined":27,"./_to-integer":106}],98:[function(require,module,exports){
// helper for String#{startsWith, endsWith, includes}
var isRegExp = require('./_is-regexp')
  , defined  = require('./_defined');

module.exports = function(that, searchString, NAME){
  if(isRegExp(searchString))throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};
},{"./_defined":27,"./_is-regexp":50}],99:[function(require,module,exports){
var $export = require('./_export')
  , fails   = require('./_fails')
  , defined = require('./_defined')
  , quot    = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
var createHTML = function(string, tag, attribute, value) {
  var S  = String(defined(string))
    , p1 = '<' + tag;
  if(attribute !== '')p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};
module.exports = function(NAME, exec){
  var O = {};
  O[NAME] = exec(createHTML);
  $export($export.P + $export.F * fails(function(){
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};
},{"./_defined":27,"./_export":32,"./_fails":34}],100:[function(require,module,exports){
// https://github.com/tc39/proposal-string-pad-start-end
var toLength = require('./_to-length')
  , repeat   = require('./_string-repeat')
  , defined  = require('./_defined');

module.exports = function(that, maxLength, fillString, left){
  var S            = String(defined(that))
    , stringLength = S.length
    , fillStr      = fillString === undefined ? ' ' : String(fillString)
    , intMaxLength = toLength(maxLength);
  if(intMaxLength <= stringLength || fillStr == '')return S;
  var fillLen = intMaxLength - stringLength
    , stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
  if(stringFiller.length > fillLen)stringFiller = stringFiller.slice(0, fillLen);
  return left ? stringFiller + S : S + stringFiller;
};

},{"./_defined":27,"./_string-repeat":101,"./_to-length":108}],101:[function(require,module,exports){
'use strict';
var toInteger = require('./_to-integer')
  , defined   = require('./_defined');

module.exports = function repeat(count){
  var str = String(defined(this))
    , res = ''
    , n   = toInteger(count);
  if(n < 0 || n == Infinity)throw RangeError("Count can't be negative");
  for(;n > 0; (n >>>= 1) && (str += str))if(n & 1)res += str;
  return res;
};
},{"./_defined":27,"./_to-integer":106}],102:[function(require,module,exports){
var $export = require('./_export')
  , defined = require('./_defined')
  , fails   = require('./_fails')
  , spaces  = require('./_string-ws')
  , space   = '[' + spaces + ']'
  , non     = '\u200b\u0085'
  , ltrim   = RegExp('^' + space + space + '*')
  , rtrim   = RegExp(space + space + '*$');

var exporter = function(KEY, exec, ALIAS){
  var exp   = {};
  var FORCE = fails(function(){
    return !!spaces[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
  if(ALIAS)exp[ALIAS] = fn;
  $export($export.P + $export.F * FORCE, 'String', exp);
};

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = exporter.trim = function(string, TYPE){
  string = String(defined(string));
  if(TYPE & 1)string = string.replace(ltrim, '');
  if(TYPE & 2)string = string.replace(rtrim, '');
  return string;
};

module.exports = exporter;
},{"./_defined":27,"./_export":32,"./_fails":34,"./_string-ws":103}],103:[function(require,module,exports){
module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';
},{}],104:[function(require,module,exports){
var ctx                = require('./_ctx')
  , invoke             = require('./_invoke')
  , html               = require('./_html')
  , cel                = require('./_dom-create')
  , global             = require('./_global')
  , process            = global.process
  , setTask            = global.setImmediate
  , clearTask          = global.clearImmediate
  , MessageChannel     = global.MessageChannel
  , counter            = 0
  , queue              = {}
  , ONREADYSTATECHANGE = 'onreadystatechange'
  , defer, channel, port;
var run = function(){
  var id = +this;
  if(queue.hasOwnProperty(id)){
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function(event){
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if(!setTask || !clearTask){
  setTask = function setImmediate(fn){
    var args = [], i = 1;
    while(arguments.length > i)args.push(arguments[i++]);
    queue[++counter] = function(){
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id){
    delete queue[id];
  };
  // Node.js 0.8-
  if(require('./_cof')(process) == 'process'){
    defer = function(id){
      process.nextTick(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if(MessageChannel){
    channel = new MessageChannel;
    port    = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
    defer = function(id){
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if(ONREADYSTATECHANGE in cel('script')){
    defer = function(id){
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function(id){
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set:   setTask,
  clear: clearTask
};
},{"./_cof":18,"./_ctx":25,"./_dom-create":29,"./_global":38,"./_html":41,"./_invoke":44}],105:[function(require,module,exports){
var toInteger = require('./_to-integer')
  , max       = Math.max
  , min       = Math.min;
module.exports = function(index, length){
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};
},{"./_to-integer":106}],106:[function(require,module,exports){
// 7.1.4 ToInteger
var ceil  = Math.ceil
  , floor = Math.floor;
module.exports = function(it){
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};
},{}],107:[function(require,module,exports){
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = require('./_iobject')
  , defined = require('./_defined');
module.exports = function(it){
  return IObject(defined(it));
};
},{"./_defined":27,"./_iobject":45}],108:[function(require,module,exports){
// 7.1.15 ToLength
var toInteger = require('./_to-integer')
  , min       = Math.min;
module.exports = function(it){
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};
},{"./_to-integer":106}],109:[function(require,module,exports){
// 7.1.13 ToObject(argument)
var defined = require('./_defined');
module.exports = function(it){
  return Object(defined(it));
};
},{"./_defined":27}],110:[function(require,module,exports){
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = require('./_is-object');
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function(it, S){
  if(!isObject(it))return it;
  var fn, val;
  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  throw TypeError("Can't convert object to primitive value");
};
},{"./_is-object":49}],111:[function(require,module,exports){
'use strict';
if(require('./_descriptors')){
  var LIBRARY             = require('./_library')
    , global              = require('./_global')
    , fails               = require('./_fails')
    , $export             = require('./_export')
    , $typed              = require('./_typed')
    , $buffer             = require('./_typed-buffer')
    , ctx                 = require('./_ctx')
    , anInstance          = require('./_an-instance')
    , propertyDesc        = require('./_property-desc')
    , hide                = require('./_hide')
    , redefineAll         = require('./_redefine-all')
    , toInteger           = require('./_to-integer')
    , toLength            = require('./_to-length')
    , toIndex             = require('./_to-index')
    , toPrimitive         = require('./_to-primitive')
    , has                 = require('./_has')
    , same                = require('./_same-value')
    , classof             = require('./_classof')
    , isObject            = require('./_is-object')
    , toObject            = require('./_to-object')
    , isArrayIter         = require('./_is-array-iter')
    , create              = require('./_object-create')
    , getPrototypeOf      = require('./_object-gpo')
    , gOPN                = require('./_object-gopn').f
    , getIterFn           = require('./core.get-iterator-method')
    , uid                 = require('./_uid')
    , wks                 = require('./_wks')
    , createArrayMethod   = require('./_array-methods')
    , createArrayIncludes = require('./_array-includes')
    , speciesConstructor  = require('./_species-constructor')
    , ArrayIterators      = require('./es6.array.iterator')
    , Iterators           = require('./_iterators')
    , $iterDetect         = require('./_iter-detect')
    , setSpecies          = require('./_set-species')
    , arrayFill           = require('./_array-fill')
    , arrayCopyWithin     = require('./_array-copy-within')
    , $DP                 = require('./_object-dp')
    , $GOPD               = require('./_object-gopd')
    , dP                  = $DP.f
    , gOPD                = $GOPD.f
    , RangeError          = global.RangeError
    , TypeError           = global.TypeError
    , Uint8Array          = global.Uint8Array
    , ARRAY_BUFFER        = 'ArrayBuffer'
    , SHARED_BUFFER       = 'Shared' + ARRAY_BUFFER
    , BYTES_PER_ELEMENT   = 'BYTES_PER_ELEMENT'
    , PROTOTYPE           = 'prototype'
    , ArrayProto          = Array[PROTOTYPE]
    , $ArrayBuffer        = $buffer.ArrayBuffer
    , $DataView           = $buffer.DataView
    , arrayForEach        = createArrayMethod(0)
    , arrayFilter         = createArrayMethod(2)
    , arraySome           = createArrayMethod(3)
    , arrayEvery          = createArrayMethod(4)
    , arrayFind           = createArrayMethod(5)
    , arrayFindIndex      = createArrayMethod(6)
    , arrayIncludes       = createArrayIncludes(true)
    , arrayIndexOf        = createArrayIncludes(false)
    , arrayValues         = ArrayIterators.values
    , arrayKeys           = ArrayIterators.keys
    , arrayEntries        = ArrayIterators.entries
    , arrayLastIndexOf    = ArrayProto.lastIndexOf
    , arrayReduce         = ArrayProto.reduce
    , arrayReduceRight    = ArrayProto.reduceRight
    , arrayJoin           = ArrayProto.join
    , arraySort           = ArrayProto.sort
    , arraySlice          = ArrayProto.slice
    , arrayToString       = ArrayProto.toString
    , arrayToLocaleString = ArrayProto.toLocaleString
    , ITERATOR            = wks('iterator')
    , TAG                 = wks('toStringTag')
    , TYPED_CONSTRUCTOR   = uid('typed_constructor')
    , DEF_CONSTRUCTOR     = uid('def_constructor')
    , ALL_CONSTRUCTORS    = $typed.CONSTR
    , TYPED_ARRAY         = $typed.TYPED
    , VIEW                = $typed.VIEW
    , WRONG_LENGTH        = 'Wrong length!';

  var $map = createArrayMethod(1, function(O, length){
    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
  });

  var LITTLE_ENDIAN = fails(function(){
    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
  });

  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function(){
    new Uint8Array(1).set({});
  });

  var strictToLength = function(it, SAME){
    if(it === undefined)throw TypeError(WRONG_LENGTH);
    var number = +it
      , length = toLength(it);
    if(SAME && !same(number, length))throw RangeError(WRONG_LENGTH);
    return length;
  };

  var toOffset = function(it, BYTES){
    var offset = toInteger(it);
    if(offset < 0 || offset % BYTES)throw RangeError('Wrong offset!');
    return offset;
  };

  var validate = function(it){
    if(isObject(it) && TYPED_ARRAY in it)return it;
    throw TypeError(it + ' is not a typed array!');
  };

  var allocate = function(C, length){
    if(!(isObject(C) && TYPED_CONSTRUCTOR in C)){
      throw TypeError('It is not a typed array constructor!');
    } return new C(length);
  };

  var speciesFromList = function(O, list){
    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
  };

  var fromList = function(C, list){
    var index  = 0
      , length = list.length
      , result = allocate(C, length);
    while(length > index)result[index] = list[index++];
    return result;
  };

  var addGetter = function(it, key, internal){
    dP(it, key, {get: function(){ return this._d[internal]; }});
  };

  var $from = function from(source /*, mapfn, thisArg */){
    var O       = toObject(source)
      , aLen    = arguments.length
      , mapfn   = aLen > 1 ? arguments[1] : undefined
      , mapping = mapfn !== undefined
      , iterFn  = getIterFn(O)
      , i, length, values, result, step, iterator;
    if(iterFn != undefined && !isArrayIter(iterFn)){
      for(iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++){
        values.push(step.value);
      } O = values;
    }
    if(mapping && aLen > 2)mapfn = ctx(mapfn, arguments[2], 2);
    for(i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++){
      result[i] = mapping ? mapfn(O[i], i) : O[i];
    }
    return result;
  };

  var $of = function of(/*...items*/){
    var index  = 0
      , length = arguments.length
      , result = allocate(this, length);
    while(length > index)result[index] = arguments[index++];
    return result;
  };

  // iOS Safari 6.x fails here
  var TO_LOCALE_BUG = !!Uint8Array && fails(function(){ arrayToLocaleString.call(new Uint8Array(1)); });

  var $toLocaleString = function toLocaleString(){
    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
  };

  var proto = {
    copyWithin: function copyWithin(target, start /*, end */){
      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
    },
    every: function every(callbackfn /*, thisArg */){
      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    fill: function fill(value /*, start, end */){ // eslint-disable-line no-unused-vars
      return arrayFill.apply(validate(this), arguments);
    },
    filter: function filter(callbackfn /*, thisArg */){
      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
        arguments.length > 1 ? arguments[1] : undefined));
    },
    find: function find(predicate /*, thisArg */){
      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    findIndex: function findIndex(predicate /*, thisArg */){
      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    forEach: function forEach(callbackfn /*, thisArg */){
      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    indexOf: function indexOf(searchElement /*, fromIndex */){
      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    includes: function includes(searchElement /*, fromIndex */){
      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    join: function join(separator){ // eslint-disable-line no-unused-vars
      return arrayJoin.apply(validate(this), arguments);
    },
    lastIndexOf: function lastIndexOf(searchElement /*, fromIndex */){ // eslint-disable-line no-unused-vars
      return arrayLastIndexOf.apply(validate(this), arguments);
    },
    map: function map(mapfn /*, thisArg */){
      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    reduce: function reduce(callbackfn /*, initialValue */){ // eslint-disable-line no-unused-vars
      return arrayReduce.apply(validate(this), arguments);
    },
    reduceRight: function reduceRight(callbackfn /*, initialValue */){ // eslint-disable-line no-unused-vars
      return arrayReduceRight.apply(validate(this), arguments);
    },
    reverse: function reverse(){
      var that   = this
        , length = validate(that).length
        , middle = Math.floor(length / 2)
        , index  = 0
        , value;
      while(index < middle){
        value         = that[index];
        that[index++] = that[--length];
        that[length]  = value;
      } return that;
    },
    some: function some(callbackfn /*, thisArg */){
      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    sort: function sort(comparefn){
      return arraySort.call(validate(this), comparefn);
    },
    subarray: function subarray(begin, end){
      var O      = validate(this)
        , length = O.length
        , $begin = toIndex(begin, length);
      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
        O.buffer,
        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
        toLength((end === undefined ? length : toIndex(end, length)) - $begin)
      );
    }
  };

  var $slice = function slice(start, end){
    return speciesFromList(this, arraySlice.call(validate(this), start, end));
  };

  var $set = function set(arrayLike /*, offset */){
    validate(this);
    var offset = toOffset(arguments[1], 1)
      , length = this.length
      , src    = toObject(arrayLike)
      , len    = toLength(src.length)
      , index  = 0;
    if(len + offset > length)throw RangeError(WRONG_LENGTH);
    while(index < len)this[offset + index] = src[index++];
  };

  var $iterators = {
    entries: function entries(){
      return arrayEntries.call(validate(this));
    },
    keys: function keys(){
      return arrayKeys.call(validate(this));
    },
    values: function values(){
      return arrayValues.call(validate(this));
    }
  };

  var isTAIndex = function(target, key){
    return isObject(target)
      && target[TYPED_ARRAY]
      && typeof key != 'symbol'
      && key in target
      && String(+key) == String(key);
  };
  var $getDesc = function getOwnPropertyDescriptor(target, key){
    return isTAIndex(target, key = toPrimitive(key, true))
      ? propertyDesc(2, target[key])
      : gOPD(target, key);
  };
  var $setDesc = function defineProperty(target, key, desc){
    if(isTAIndex(target, key = toPrimitive(key, true))
      && isObject(desc)
      && has(desc, 'value')
      && !has(desc, 'get')
      && !has(desc, 'set')
      // TODO: add validation descriptor w/o calling accessors
      && !desc.configurable
      && (!has(desc, 'writable') || desc.writable)
      && (!has(desc, 'enumerable') || desc.enumerable)
    ){
      target[key] = desc.value;
      return target;
    } else return dP(target, key, desc);
  };

  if(!ALL_CONSTRUCTORS){
    $GOPD.f = $getDesc;
    $DP.f   = $setDesc;
  }

  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
    getOwnPropertyDescriptor: $getDesc,
    defineProperty:           $setDesc
  });

  if(fails(function(){ arrayToString.call({}); })){
    arrayToString = arrayToLocaleString = function toString(){
      return arrayJoin.call(this);
    }
  }

  var $TypedArrayPrototype$ = redefineAll({}, proto);
  redefineAll($TypedArrayPrototype$, $iterators);
  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
  redefineAll($TypedArrayPrototype$, {
    slice:          $slice,
    set:            $set,
    constructor:    function(){ /* noop */ },
    toString:       arrayToString,
    toLocaleString: $toLocaleString
  });
  addGetter($TypedArrayPrototype$, 'buffer', 'b');
  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
  addGetter($TypedArrayPrototype$, 'length', 'e');
  dP($TypedArrayPrototype$, TAG, {
    get: function(){ return this[TYPED_ARRAY]; }
  });

  module.exports = function(KEY, BYTES, wrapper, CLAMPED){
    CLAMPED = !!CLAMPED;
    var NAME       = KEY + (CLAMPED ? 'Clamped' : '') + 'Array'
      , ISNT_UINT8 = NAME != 'Uint8Array'
      , GETTER     = 'get' + KEY
      , SETTER     = 'set' + KEY
      , TypedArray = global[NAME]
      , Base       = TypedArray || {}
      , TAC        = TypedArray && getPrototypeOf(TypedArray)
      , FORCED     = !TypedArray || !$typed.ABV
      , O          = {}
      , TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
    var getter = function(that, index){
      var data = that._d;
      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
    };
    var setter = function(that, index, value){
      var data = that._d;
      if(CLAMPED)value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
    };
    var addElement = function(that, index){
      dP(that, index, {
        get: function(){
          return getter(this, index);
        },
        set: function(value){
          return setter(this, index, value);
        },
        enumerable: true
      });
    };
    if(FORCED){
      TypedArray = wrapper(function(that, data, $offset, $length){
        anInstance(that, TypedArray, NAME, '_d');
        var index  = 0
          , offset = 0
          , buffer, byteLength, length, klass;
        if(!isObject(data)){
          length     = strictToLength(data, true)
          byteLength = length * BYTES;
          buffer     = new $ArrayBuffer(byteLength);
        } else if(data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER){
          buffer = data;
          offset = toOffset($offset, BYTES);
          var $len = data.byteLength;
          if($length === undefined){
            if($len % BYTES)throw RangeError(WRONG_LENGTH);
            byteLength = $len - offset;
            if(byteLength < 0)throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if(byteLength + offset > $len)throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if(TYPED_ARRAY in data){
          return fromList(TypedArray, data);
        } else {
          return $from.call(TypedArray, data);
        }
        hide(that, '_d', {
          b: buffer,
          o: offset,
          l: byteLength,
          e: length,
          v: new $DataView(buffer)
        });
        while(index < length)addElement(that, index++);
      });
      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
      hide(TypedArrayPrototype, 'constructor', TypedArray);
    } else if(!$iterDetect(function(iter){
      // V8 works with iterators, but fails in many other cases
      // https://code.google.com/p/v8/issues/detail?id=4552
      new TypedArray(null); // eslint-disable-line no-new
      new TypedArray(iter); // eslint-disable-line no-new
    }, true)){
      TypedArray = wrapper(function(that, data, $offset, $length){
        anInstance(that, TypedArray, NAME);
        var klass;
        // `ws` module bug, temporarily remove validation length for Uint8Array
        // https://github.com/websockets/ws/pull/645
        if(!isObject(data))return new Base(strictToLength(data, ISNT_UINT8));
        if(data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER){
          return $length !== undefined
            ? new Base(data, toOffset($offset, BYTES), $length)
            : $offset !== undefined
              ? new Base(data, toOffset($offset, BYTES))
              : new Base(data);
        }
        if(TYPED_ARRAY in data)return fromList(TypedArray, data);
        return $from.call(TypedArray, data);
      });
      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function(key){
        if(!(key in TypedArray))hide(TypedArray, key, Base[key]);
      });
      TypedArray[PROTOTYPE] = TypedArrayPrototype;
      if(!LIBRARY)TypedArrayPrototype.constructor = TypedArray;
    }
    var $nativeIterator   = TypedArrayPrototype[ITERATOR]
      , CORRECT_ITER_NAME = !!$nativeIterator && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined)
      , $iterator         = $iterators.values;
    hide(TypedArray, TYPED_CONSTRUCTOR, true);
    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
    hide(TypedArrayPrototype, VIEW, true);
    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

    if(CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)){
      dP(TypedArrayPrototype, TAG, {
        get: function(){ return NAME; }
      });
    }

    O[NAME] = TypedArray;

    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

    $export($export.S, NAME, {
      BYTES_PER_ELEMENT: BYTES,
      from: $from,
      of: $of
    });

    if(!(BYTES_PER_ELEMENT in TypedArrayPrototype))hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

    $export($export.P, NAME, proto);

    setSpecies(NAME);

    $export($export.P + $export.F * FORCED_SET, NAME, {set: $set});

    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

    $export($export.P + $export.F * (TypedArrayPrototype.toString != arrayToString), NAME, {toString: arrayToString});

    $export($export.P + $export.F * fails(function(){
      new TypedArray(1).slice();
    }), NAME, {slice: $slice});

    $export($export.P + $export.F * (fails(function(){
      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString()
    }) || !fails(function(){
      TypedArrayPrototype.toLocaleString.call([1, 2]);
    })), NAME, {toLocaleString: $toLocaleString});

    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
    if(!LIBRARY && !CORRECT_ITER_NAME)hide(TypedArrayPrototype, ITERATOR, $iterator);
  };
} else module.exports = function(){ /* empty */ };
},{"./_an-instance":6,"./_array-copy-within":8,"./_array-fill":9,"./_array-includes":11,"./_array-methods":12,"./_classof":17,"./_ctx":25,"./_descriptors":28,"./_export":32,"./_fails":34,"./_global":38,"./_has":39,"./_hide":40,"./_is-array-iter":46,"./_is-object":49,"./_iter-detect":54,"./_iterators":56,"./_library":58,"./_object-create":66,"./_object-dp":67,"./_object-gopd":70,"./_object-gopn":72,"./_object-gpo":74,"./_property-desc":85,"./_redefine-all":86,"./_same-value":89,"./_set-species":91,"./_species-constructor":95,"./_to-index":105,"./_to-integer":106,"./_to-length":108,"./_to-object":109,"./_to-primitive":110,"./_typed":113,"./_typed-buffer":112,"./_uid":114,"./_wks":117,"./core.get-iterator-method":118,"./es6.array.iterator":130}],112:[function(require,module,exports){
'use strict';
var global         = require('./_global')
  , DESCRIPTORS    = require('./_descriptors')
  , LIBRARY        = require('./_library')
  , $typed         = require('./_typed')
  , hide           = require('./_hide')
  , redefineAll    = require('./_redefine-all')
  , fails          = require('./_fails')
  , anInstance     = require('./_an-instance')
  , toInteger      = require('./_to-integer')
  , toLength       = require('./_to-length')
  , gOPN           = require('./_object-gopn').f
  , dP             = require('./_object-dp').f
  , arrayFill      = require('./_array-fill')
  , setToStringTag = require('./_set-to-string-tag')
  , ARRAY_BUFFER   = 'ArrayBuffer'
  , DATA_VIEW      = 'DataView'
  , PROTOTYPE      = 'prototype'
  , WRONG_LENGTH   = 'Wrong length!'
  , WRONG_INDEX    = 'Wrong index!'
  , $ArrayBuffer   = global[ARRAY_BUFFER]
  , $DataView      = global[DATA_VIEW]
  , Math           = global.Math
  , RangeError     = global.RangeError
  , Infinity       = global.Infinity
  , BaseBuffer     = $ArrayBuffer
  , abs            = Math.abs
  , pow            = Math.pow
  , floor          = Math.floor
  , log            = Math.log
  , LN2            = Math.LN2
  , BUFFER         = 'buffer'
  , BYTE_LENGTH    = 'byteLength'
  , BYTE_OFFSET    = 'byteOffset'
  , $BUFFER        = DESCRIPTORS ? '_b' : BUFFER
  , $LENGTH        = DESCRIPTORS ? '_l' : BYTE_LENGTH
  , $OFFSET        = DESCRIPTORS ? '_o' : BYTE_OFFSET;

// IEEE754 conversions based on https://github.com/feross/ieee754
var packIEEE754 = function(value, mLen, nBytes){
  var buffer = Array(nBytes)
    , eLen   = nBytes * 8 - mLen - 1
    , eMax   = (1 << eLen) - 1
    , eBias  = eMax >> 1
    , rt     = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0
    , i      = 0
    , s      = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0
    , e, m, c;
  value = abs(value)
  if(value != value || value === Infinity){
    m = value != value ? 1 : 0;
    e = eMax;
  } else {
    e = floor(log(value) / LN2);
    if(value * (c = pow(2, -e)) < 1){
      e--;
      c *= 2;
    }
    if(e + eBias >= 1){
      value += rt / c;
    } else {
      value += rt * pow(2, 1 - eBias);
    }
    if(value * c >= 2){
      e++;
      c /= 2;
    }
    if(e + eBias >= eMax){
      m = 0;
      e = eMax;
    } else if(e + eBias >= 1){
      m = (value * c - 1) * pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * pow(2, eBias - 1) * pow(2, mLen);
      e = 0;
    }
  }
  for(; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
  e = e << mLen | m;
  eLen += mLen;
  for(; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
  buffer[--i] |= s * 128;
  return buffer;
};
var unpackIEEE754 = function(buffer, mLen, nBytes){
  var eLen  = nBytes * 8 - mLen - 1
    , eMax  = (1 << eLen) - 1
    , eBias = eMax >> 1
    , nBits = eLen - 7
    , i     = nBytes - 1
    , s     = buffer[i--]
    , e     = s & 127
    , m;
  s >>= 7;
  for(; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for(; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
  if(e === 0){
    e = 1 - eBias;
  } else if(e === eMax){
    return m ? NaN : s ? -Infinity : Infinity;
  } else {
    m = m + pow(2, mLen);
    e = e - eBias;
  } return (s ? -1 : 1) * m * pow(2, e - mLen);
};

var unpackI32 = function(bytes){
  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
};
var packI8 = function(it){
  return [it & 0xff];
};
var packI16 = function(it){
  return [it & 0xff, it >> 8 & 0xff];
};
var packI32 = function(it){
  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
};
var packF64 = function(it){
  return packIEEE754(it, 52, 8);
};
var packF32 = function(it){
  return packIEEE754(it, 23, 4);
};

var addGetter = function(C, key, internal){
  dP(C[PROTOTYPE], key, {get: function(){ return this[internal]; }});
};

var get = function(view, bytes, index, isLittleEndian){
  var numIndex = +index
    , intIndex = toInteger(numIndex);
  if(numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b
    , start = intIndex + view[$OFFSET]
    , pack  = store.slice(start, start + bytes);
  return isLittleEndian ? pack : pack.reverse();
};
var set = function(view, bytes, index, conversion, value, isLittleEndian){
  var numIndex = +index
    , intIndex = toInteger(numIndex);
  if(numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b
    , start = intIndex + view[$OFFSET]
    , pack  = conversion(+value);
  for(var i = 0; i < bytes; i++)store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
};

var validateArrayBufferArguments = function(that, length){
  anInstance(that, $ArrayBuffer, ARRAY_BUFFER);
  var numberLength = +length
    , byteLength   = toLength(numberLength);
  if(numberLength != byteLength)throw RangeError(WRONG_LENGTH);
  return byteLength;
};

if(!$typed.ABV){
  $ArrayBuffer = function ArrayBuffer(length){
    var byteLength = validateArrayBufferArguments(this, length);
    this._b       = arrayFill.call(Array(byteLength), 0);
    this[$LENGTH] = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength){
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = buffer[$LENGTH]
      , offset       = toInteger(byteOffset);
    if(offset < 0 || offset > bufferLength)throw RangeError('Wrong offset!');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if(offset + byteLength > bufferLength)throw RangeError(WRONG_LENGTH);
    this[$BUFFER] = buffer;
    this[$OFFSET] = offset;
    this[$LENGTH] = byteLength;
  };

  if(DESCRIPTORS){
    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
    addGetter($DataView, BUFFER, '_b');
    addGetter($DataView, BYTE_LENGTH, '_l');
    addGetter($DataView, BYTE_OFFSET, '_o');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset){
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset){
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /*, littleEndian */){
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /*, littleEndian */){
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /*, littleEndian */){
      return unpackI32(get(this, 4, byteOffset, arguments[1]));
    },
    getUint32: function getUint32(byteOffset /*, littleEndian */){
      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /*, littleEndian */){
      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
    },
    getFloat64: function getFloat64(byteOffset /*, littleEndian */){
      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
    },
    setInt8: function setInt8(byteOffset, value){
      set(this, 1, byteOffset, packI8, value);
    },
    setUint8: function setUint8(byteOffset, value){
      set(this, 1, byteOffset, packI8, value);
    },
    setInt16: function setInt16(byteOffset, value /*, littleEndian */){
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setUint16: function setUint16(byteOffset, value /*, littleEndian */){
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setInt32: function setInt32(byteOffset, value /*, littleEndian */){
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setUint32: function setUint32(byteOffset, value /*, littleEndian */){
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setFloat32: function setFloat32(byteOffset, value /*, littleEndian */){
      set(this, 4, byteOffset, packF32, value, arguments[2]);
    },
    setFloat64: function setFloat64(byteOffset, value /*, littleEndian */){
      set(this, 8, byteOffset, packF64, value, arguments[2]);
    }
  });
} else {
  if(!fails(function(){
    new $ArrayBuffer;     // eslint-disable-line no-new
  }) || !fails(function(){
    new $ArrayBuffer(.5); // eslint-disable-line no-new
  })){
    $ArrayBuffer = function ArrayBuffer(length){
      return new BaseBuffer(validateArrayBufferArguments(this, length));
    };
    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
    for(var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j; ){
      if(!((key = keys[j++]) in $ArrayBuffer))hide($ArrayBuffer, key, BaseBuffer[key]);
    };
    if(!LIBRARY)ArrayBufferProto.constructor = $ArrayBuffer;
  }
  // iOS Safari 7.x bug
  var view = new $DataView(new $ArrayBuffer(2))
    , $setInt8 = $DataView[PROTOTYPE].setInt8;
  view.setInt8(0, 2147483648);
  view.setInt8(1, 2147483649);
  if(view.getInt8(0) || !view.getInt8(1))redefineAll($DataView[PROTOTYPE], {
    setInt8: function setInt8(byteOffset, value){
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value){
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, true);
}
setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
hide($DataView[PROTOTYPE], $typed.VIEW, true);
exports[ARRAY_BUFFER] = $ArrayBuffer;
exports[DATA_VIEW] = $DataView;
},{"./_an-instance":6,"./_array-fill":9,"./_descriptors":28,"./_fails":34,"./_global":38,"./_hide":40,"./_library":58,"./_object-dp":67,"./_object-gopn":72,"./_redefine-all":86,"./_set-to-string-tag":92,"./_to-integer":106,"./_to-length":108,"./_typed":113}],113:[function(require,module,exports){
var global = require('./_global')
  , hide   = require('./_hide')
  , uid    = require('./_uid')
  , TYPED  = uid('typed_array')
  , VIEW   = uid('view')
  , ABV    = !!(global.ArrayBuffer && global.DataView)
  , CONSTR = ABV
  , i = 0, l = 9, Typed;

var TypedArrayConstructors = (
  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
).split(',');

while(i < l){
  if(Typed = global[TypedArrayConstructors[i++]]){
    hide(Typed.prototype, TYPED, true);
    hide(Typed.prototype, VIEW, true);
  } else CONSTR = false;
}

module.exports = {
  ABV:    ABV,
  CONSTR: CONSTR,
  TYPED:  TYPED,
  VIEW:   VIEW
};
},{"./_global":38,"./_hide":40,"./_uid":114}],114:[function(require,module,exports){
var id = 0
  , px = Math.random();
module.exports = function(key){
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};
},{}],115:[function(require,module,exports){
var global         = require('./_global')
  , core           = require('./_core')
  , LIBRARY        = require('./_library')
  , wksExt         = require('./_wks-ext')
  , defineProperty = require('./_object-dp').f;
module.exports = function(name){
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
};
},{"./_core":23,"./_global":38,"./_library":58,"./_object-dp":67,"./_wks-ext":116}],116:[function(require,module,exports){
exports.f = require('./_wks');
},{"./_wks":117}],117:[function(require,module,exports){
var store      = require('./_shared')('wks')
  , uid        = require('./_uid')
  , Symbol     = require('./_global').Symbol
  , USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function(name){
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;
},{"./_global":38,"./_shared":94,"./_uid":114}],118:[function(require,module,exports){
var classof   = require('./_classof')
  , ITERATOR  = require('./_wks')('iterator')
  , Iterators = require('./_iterators');
module.exports = require('./_core').getIteratorMethod = function(it){
  if(it != undefined)return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};
},{"./_classof":17,"./_core":23,"./_iterators":56,"./_wks":117}],119:[function(require,module,exports){
// https://github.com/benjamingr/RexExp.escape
var $export = require('./_export')
  , $re     = require('./_replacer')(/[\\^$*+?.()|[\]{}]/g, '\\$&');

$export($export.S, 'RegExp', {escape: function escape(it){ return $re(it); }});

},{"./_export":32,"./_replacer":88}],120:[function(require,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
var $export = require('./_export');

$export($export.P, 'Array', {copyWithin: require('./_array-copy-within')});

require('./_add-to-unscopables')('copyWithin');
},{"./_add-to-unscopables":5,"./_array-copy-within":8,"./_export":32}],121:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $every  = require('./_array-methods')(4);

$export($export.P + $export.F * !require('./_strict-method')([].every, true), 'Array', {
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
  every: function every(callbackfn /* , thisArg */){
    return $every(this, callbackfn, arguments[1]);
  }
});
},{"./_array-methods":12,"./_export":32,"./_strict-method":96}],122:[function(require,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export = require('./_export');

$export($export.P, 'Array', {fill: require('./_array-fill')});

require('./_add-to-unscopables')('fill');
},{"./_add-to-unscopables":5,"./_array-fill":9,"./_export":32}],123:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $filter = require('./_array-methods')(2);

$export($export.P + $export.F * !require('./_strict-method')([].filter, true), 'Array', {
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: function filter(callbackfn /* , thisArg */){
    return $filter(this, callbackfn, arguments[1]);
  }
});
},{"./_array-methods":12,"./_export":32,"./_strict-method":96}],124:[function(require,module,exports){
'use strict';
// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
var $export = require('./_export')
  , $find   = require('./_array-methods')(6)
  , KEY     = 'findIndex'
  , forced  = true;
// Shouldn't skip holes
if(KEY in [])Array(1)[KEY](function(){ forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn/*, that = undefined */){
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);
},{"./_add-to-unscopables":5,"./_array-methods":12,"./_export":32}],125:[function(require,module,exports){
'use strict';
// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
var $export = require('./_export')
  , $find   = require('./_array-methods')(5)
  , KEY     = 'find'
  , forced  = true;
// Shouldn't skip holes
if(KEY in [])Array(1)[KEY](function(){ forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn/*, that = undefined */){
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);
},{"./_add-to-unscopables":5,"./_array-methods":12,"./_export":32}],126:[function(require,module,exports){
'use strict';
var $export  = require('./_export')
  , $forEach = require('./_array-methods')(0)
  , STRICT   = require('./_strict-method')([].forEach, true);

$export($export.P + $export.F * !STRICT, 'Array', {
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
  forEach: function forEach(callbackfn /* , thisArg */){
    return $forEach(this, callbackfn, arguments[1]);
  }
});
},{"./_array-methods":12,"./_export":32,"./_strict-method":96}],127:[function(require,module,exports){
'use strict';
var ctx            = require('./_ctx')
  , $export        = require('./_export')
  , toObject       = require('./_to-object')
  , call           = require('./_iter-call')
  , isArrayIter    = require('./_is-array-iter')
  , toLength       = require('./_to-length')
  , createProperty = require('./_create-property')
  , getIterFn      = require('./core.get-iterator-method');

$export($export.S + $export.F * !require('./_iter-detect')(function(iter){ Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
    var O       = toObject(arrayLike)
      , C       = typeof this == 'function' ? this : Array
      , aLen    = arguments.length
      , mapfn   = aLen > 1 ? arguments[1] : undefined
      , mapping = mapfn !== undefined
      , index   = 0
      , iterFn  = getIterFn(O)
      , length, result, step, iterator;
    if(mapping)mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){
      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for(result = new C(length); length > index; index++){
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});

},{"./_create-property":24,"./_ctx":25,"./_export":32,"./_is-array-iter":46,"./_iter-call":51,"./_iter-detect":54,"./_to-length":108,"./_to-object":109,"./core.get-iterator-method":118}],128:[function(require,module,exports){
'use strict';
var $export       = require('./_export')
  , $indexOf      = require('./_array-includes')(false)
  , $native       = [].indexOf
  , NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: function indexOf(searchElement /*, fromIndex = 0 */){
    return NEGATIVE_ZERO
      // convert -0 to +0
      ? $native.apply(this, arguments) || 0
      : $indexOf(this, searchElement, arguments[1]);
  }
});
},{"./_array-includes":11,"./_export":32,"./_strict-method":96}],129:[function(require,module,exports){
// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
var $export = require('./_export');

$export($export.S, 'Array', {isArray: require('./_is-array')});
},{"./_export":32,"./_is-array":47}],130:[function(require,module,exports){
'use strict';
var addToUnscopables = require('./_add-to-unscopables')
  , step             = require('./_iter-step')
  , Iterators        = require('./_iterators')
  , toIObject        = require('./_to-iobject');

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = require('./_iter-define')(Array, 'Array', function(iterated, kind){
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , kind  = this._k
    , index = this._i++;
  if(!O || index >= O.length){
    this._t = undefined;
    return step(1);
  }
  if(kind == 'keys'  )return step(0, index);
  if(kind == 'values')return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');
},{"./_add-to-unscopables":5,"./_iter-define":53,"./_iter-step":55,"./_iterators":56,"./_to-iobject":107}],131:[function(require,module,exports){
'use strict';
// 22.1.3.13 Array.prototype.join(separator)
var $export   = require('./_export')
  , toIObject = require('./_to-iobject')
  , arrayJoin = [].join;

// fallback for not array-like strings
$export($export.P + $export.F * (require('./_iobject') != Object || !require('./_strict-method')(arrayJoin)), 'Array', {
  join: function join(separator){
    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
  }
});
},{"./_export":32,"./_iobject":45,"./_strict-method":96,"./_to-iobject":107}],132:[function(require,module,exports){
'use strict';
var $export       = require('./_export')
  , toIObject     = require('./_to-iobject')
  , toInteger     = require('./_to-integer')
  , toLength      = require('./_to-length')
  , $native       = [].lastIndexOf
  , NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
  lastIndexOf: function lastIndexOf(searchElement /*, fromIndex = @[*-1] */){
    // convert -0 to +0
    if(NEGATIVE_ZERO)return $native.apply(this, arguments) || 0;
    var O      = toIObject(this)
      , length = toLength(O.length)
      , index  = length - 1;
    if(arguments.length > 1)index = Math.min(index, toInteger(arguments[1]));
    if(index < 0)index = length + index;
    for(;index >= 0; index--)if(index in O)if(O[index] === searchElement)return index || 0;
    return -1;
  }
});
},{"./_export":32,"./_strict-method":96,"./_to-integer":106,"./_to-iobject":107,"./_to-length":108}],133:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $map    = require('./_array-methods')(1);

$export($export.P + $export.F * !require('./_strict-method')([].map, true), 'Array', {
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: function map(callbackfn /* , thisArg */){
    return $map(this, callbackfn, arguments[1]);
  }
});
},{"./_array-methods":12,"./_export":32,"./_strict-method":96}],134:[function(require,module,exports){
'use strict';
var $export        = require('./_export')
  , createProperty = require('./_create-property');

// WebKit Array.of isn't generic
$export($export.S + $export.F * require('./_fails')(function(){
  function F(){}
  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of(/* ...args */){
    var index  = 0
      , aLen   = arguments.length
      , result = new (typeof this == 'function' ? this : Array)(aLen);
    while(aLen > index)createProperty(result, index, arguments[index++]);
    result.length = aLen;
    return result;
  }
});
},{"./_create-property":24,"./_export":32,"./_fails":34}],135:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $reduce = require('./_array-reduce');

$export($export.P + $export.F * !require('./_strict-method')([].reduceRight, true), 'Array', {
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
  reduceRight: function reduceRight(callbackfn /* , initialValue */){
    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
  }
});
},{"./_array-reduce":13,"./_export":32,"./_strict-method":96}],136:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $reduce = require('./_array-reduce');

$export($export.P + $export.F * !require('./_strict-method')([].reduce, true), 'Array', {
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
  reduce: function reduce(callbackfn /* , initialValue */){
    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
  }
});
},{"./_array-reduce":13,"./_export":32,"./_strict-method":96}],137:[function(require,module,exports){
'use strict';
var $export    = require('./_export')
  , html       = require('./_html')
  , cof        = require('./_cof')
  , toIndex    = require('./_to-index')
  , toLength   = require('./_to-length')
  , arraySlice = [].slice;

// fallback for not array-like ES3 strings and DOM objects
$export($export.P + $export.F * require('./_fails')(function(){
  if(html)arraySlice.call(html);
}), 'Array', {
  slice: function slice(begin, end){
    var len   = toLength(this.length)
      , klass = cof(this);
    end = end === undefined ? len : end;
    if(klass == 'Array')return arraySlice.call(this, begin, end);
    var start  = toIndex(begin, len)
      , upTo   = toIndex(end, len)
      , size   = toLength(upTo - start)
      , cloned = Array(size)
      , i      = 0;
    for(; i < size; i++)cloned[i] = klass == 'String'
      ? this.charAt(start + i)
      : this[start + i];
    return cloned;
  }
});
},{"./_cof":18,"./_export":32,"./_fails":34,"./_html":41,"./_to-index":105,"./_to-length":108}],138:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $some   = require('./_array-methods')(3);

$export($export.P + $export.F * !require('./_strict-method')([].some, true), 'Array', {
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
  some: function some(callbackfn /* , thisArg */){
    return $some(this, callbackfn, arguments[1]);
  }
});
},{"./_array-methods":12,"./_export":32,"./_strict-method":96}],139:[function(require,module,exports){
'use strict';
var $export   = require('./_export')
  , aFunction = require('./_a-function')
  , toObject  = require('./_to-object')
  , fails     = require('./_fails')
  , $sort     = [].sort
  , test      = [1, 2, 3];

$export($export.P + $export.F * (fails(function(){
  // IE8-
  test.sort(undefined);
}) || !fails(function(){
  // V8 bug
  test.sort(null);
  // Old WebKit
}) || !require('./_strict-method')($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn){
    return comparefn === undefined
      ? $sort.call(toObject(this))
      : $sort.call(toObject(this), aFunction(comparefn));
  }
});
},{"./_a-function":3,"./_export":32,"./_fails":34,"./_strict-method":96,"./_to-object":109}],140:[function(require,module,exports){
require('./_set-species')('Array');
},{"./_set-species":91}],141:[function(require,module,exports){
// 20.3.3.1 / 15.9.4.4 Date.now()
var $export = require('./_export');

$export($export.S, 'Date', {now: function(){ return new Date().getTime(); }});
},{"./_export":32}],142:[function(require,module,exports){
'use strict';
// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var $export = require('./_export')
  , fails   = require('./_fails')
  , getTime = Date.prototype.getTime;

var lz = function(num){
  return num > 9 ? num : '0' + num;
};

// PhantomJS / old WebKit has a broken implementations
$export($export.P + $export.F * (fails(function(){
  return new Date(-5e13 - 1).toISOString() != '0385-07-25T07:06:39.999Z';
}) || !fails(function(){
  new Date(NaN).toISOString();
})), 'Date', {
  toISOString: function toISOString(){
    if(!isFinite(getTime.call(this)))throw RangeError('Invalid time value');
    var d = this
      , y = d.getUTCFullYear()
      , m = d.getUTCMilliseconds()
      , s = y < 0 ? '-' : y > 9999 ? '+' : '';
    return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
      '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
      'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
      ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
  }
});
},{"./_export":32,"./_fails":34}],143:[function(require,module,exports){
'use strict';
var $export     = require('./_export')
  , toObject    = require('./_to-object')
  , toPrimitive = require('./_to-primitive');

$export($export.P + $export.F * require('./_fails')(function(){
  return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({toISOString: function(){ return 1; }}) !== 1;
}), 'Date', {
  toJSON: function toJSON(key){
    var O  = toObject(this)
      , pv = toPrimitive(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});
},{"./_export":32,"./_fails":34,"./_to-object":109,"./_to-primitive":110}],144:[function(require,module,exports){
var TO_PRIMITIVE = require('./_wks')('toPrimitive')
  , proto        = Date.prototype;

if(!(TO_PRIMITIVE in proto))require('./_hide')(proto, TO_PRIMITIVE, require('./_date-to-primitive'));
},{"./_date-to-primitive":26,"./_hide":40,"./_wks":117}],145:[function(require,module,exports){
var DateProto    = Date.prototype
  , INVALID_DATE = 'Invalid Date'
  , TO_STRING    = 'toString'
  , $toString    = DateProto[TO_STRING]
  , getTime      = DateProto.getTime;
if(new Date(NaN) + '' != INVALID_DATE){
  require('./_redefine')(DateProto, TO_STRING, function toString(){
    var value = getTime.call(this);
    return value === value ? $toString.call(this) : INVALID_DATE;
  });
}
},{"./_redefine":87}],146:[function(require,module,exports){
// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
var $export = require('./_export');

$export($export.P, 'Function', {bind: require('./_bind')});
},{"./_bind":16,"./_export":32}],147:[function(require,module,exports){
'use strict';
var isObject       = require('./_is-object')
  , getPrototypeOf = require('./_object-gpo')
  , HAS_INSTANCE   = require('./_wks')('hasInstance')
  , FunctionProto  = Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
if(!(HAS_INSTANCE in FunctionProto))require('./_object-dp').f(FunctionProto, HAS_INSTANCE, {value: function(O){
  if(typeof this != 'function' || !isObject(O))return false;
  if(!isObject(this.prototype))return O instanceof this;
  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
  while(O = getPrototypeOf(O))if(this.prototype === O)return true;
  return false;
}});
},{"./_is-object":49,"./_object-dp":67,"./_object-gpo":74,"./_wks":117}],148:[function(require,module,exports){
var dP         = require('./_object-dp').f
  , createDesc = require('./_property-desc')
  , has        = require('./_has')
  , FProto     = Function.prototype
  , nameRE     = /^\s*function ([^ (]*)/
  , NAME       = 'name';

var isExtensible = Object.isExtensible || function(){
  return true;
};

// 19.2.4.2 name
NAME in FProto || require('./_descriptors') && dP(FProto, NAME, {
  configurable: true,
  get: function(){
    try {
      var that = this
        , name = ('' + that).match(nameRE)[1];
      has(that, NAME) || !isExtensible(that) || dP(that, NAME, createDesc(5, name));
      return name;
    } catch(e){
      return '';
    }
  }
});
},{"./_descriptors":28,"./_has":39,"./_object-dp":67,"./_property-desc":85}],149:[function(require,module,exports){
'use strict';
var strong = require('./_collection-strong');

// 23.1 Map Objects
module.exports = require('./_collection')('Map', function(get){
  return function Map(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key){
    var entry = strong.getEntry(this, key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value){
    return strong.def(this, key === 0 ? 0 : key, value);
  }
}, strong, true);
},{"./_collection":22,"./_collection-strong":19}],150:[function(require,module,exports){
// 20.2.2.3 Math.acosh(x)
var $export = require('./_export')
  , log1p   = require('./_math-log1p')
  , sqrt    = Math.sqrt
  , $acosh  = Math.acosh;

$export($export.S + $export.F * !($acosh
  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  && Math.floor($acosh(Number.MAX_VALUE)) == 710
  // Tor Browser bug: Math.acosh(Infinity) -> NaN 
  && $acosh(Infinity) == Infinity
), 'Math', {
  acosh: function acosh(x){
    return (x = +x) < 1 ? NaN : x > 94906265.62425156
      ? Math.log(x) + Math.LN2
      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});
},{"./_export":32,"./_math-log1p":60}],151:[function(require,module,exports){
// 20.2.2.5 Math.asinh(x)
var $export = require('./_export')
  , $asinh  = Math.asinh;

function asinh(x){
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
}

// Tor Browser bug: Math.asinh(0) -> -0 
$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', {asinh: asinh});
},{"./_export":32}],152:[function(require,module,exports){
// 20.2.2.7 Math.atanh(x)
var $export = require('./_export')
  , $atanh  = Math.atanh;

// Tor Browser bug: Math.atanh(-0) -> 0 
$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
  atanh: function atanh(x){
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});
},{"./_export":32}],153:[function(require,module,exports){
// 20.2.2.9 Math.cbrt(x)
var $export = require('./_export')
  , sign    = require('./_math-sign');

$export($export.S, 'Math', {
  cbrt: function cbrt(x){
    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});
},{"./_export":32,"./_math-sign":61}],154:[function(require,module,exports){
// 20.2.2.11 Math.clz32(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  clz32: function clz32(x){
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
  }
});
},{"./_export":32}],155:[function(require,module,exports){
// 20.2.2.12 Math.cosh(x)
var $export = require('./_export')
  , exp     = Math.exp;

$export($export.S, 'Math', {
  cosh: function cosh(x){
    return (exp(x = +x) + exp(-x)) / 2;
  }
});
},{"./_export":32}],156:[function(require,module,exports){
// 20.2.2.14 Math.expm1(x)
var $export = require('./_export')
  , $expm1  = require('./_math-expm1');

$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', {expm1: $expm1});
},{"./_export":32,"./_math-expm1":59}],157:[function(require,module,exports){
// 20.2.2.16 Math.fround(x)
var $export   = require('./_export')
  , sign      = require('./_math-sign')
  , pow       = Math.pow
  , EPSILON   = pow(2, -52)
  , EPSILON32 = pow(2, -23)
  , MAX32     = pow(2, 127) * (2 - EPSILON32)
  , MIN32     = pow(2, -126);

var roundTiesToEven = function(n){
  return n + 1 / EPSILON - 1 / EPSILON;
};


$export($export.S, 'Math', {
  fround: function fround(x){
    var $abs  = Math.abs(x)
      , $sign = sign(x)
      , a, result;
    if($abs < MIN32)return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
    a = (1 + EPSILON32 / EPSILON) * $abs;
    result = a - (a - $abs);
    if(result > MAX32 || result != result)return $sign * Infinity;
    return $sign * result;
  }
});
},{"./_export":32,"./_math-sign":61}],158:[function(require,module,exports){
// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
var $export = require('./_export')
  , abs     = Math.abs;

$export($export.S, 'Math', {
  hypot: function hypot(value1, value2){ // eslint-disable-line no-unused-vars
    var sum  = 0
      , i    = 0
      , aLen = arguments.length
      , larg = 0
      , arg, div;
    while(i < aLen){
      arg = abs(arguments[i++]);
      if(larg < arg){
        div  = larg / arg;
        sum  = sum * div * div + 1;
        larg = arg;
      } else if(arg > 0){
        div  = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }
});
},{"./_export":32}],159:[function(require,module,exports){
// 20.2.2.18 Math.imul(x, y)
var $export = require('./_export')
  , $imul   = Math.imul;

// some WebKit versions fails with big numbers, some has wrong arity
$export($export.S + $export.F * require('./_fails')(function(){
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
}), 'Math', {
  imul: function imul(x, y){
    var UINT16 = 0xffff
      , xn = +x
      , yn = +y
      , xl = UINT16 & xn
      , yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});
},{"./_export":32,"./_fails":34}],160:[function(require,module,exports){
// 20.2.2.21 Math.log10(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  log10: function log10(x){
    return Math.log(x) / Math.LN10;
  }
});
},{"./_export":32}],161:[function(require,module,exports){
// 20.2.2.20 Math.log1p(x)
var $export = require('./_export');

$export($export.S, 'Math', {log1p: require('./_math-log1p')});
},{"./_export":32,"./_math-log1p":60}],162:[function(require,module,exports){
// 20.2.2.22 Math.log2(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  log2: function log2(x){
    return Math.log(x) / Math.LN2;
  }
});
},{"./_export":32}],163:[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
var $export = require('./_export');

$export($export.S, 'Math', {sign: require('./_math-sign')});
},{"./_export":32,"./_math-sign":61}],164:[function(require,module,exports){
// 20.2.2.30 Math.sinh(x)
var $export = require('./_export')
  , expm1   = require('./_math-expm1')
  , exp     = Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
$export($export.S + $export.F * require('./_fails')(function(){
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x){
    return Math.abs(x = +x) < 1
      ? (expm1(x) - expm1(-x)) / 2
      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});
},{"./_export":32,"./_fails":34,"./_math-expm1":59}],165:[function(require,module,exports){
// 20.2.2.33 Math.tanh(x)
var $export = require('./_export')
  , expm1   = require('./_math-expm1')
  , exp     = Math.exp;

$export($export.S, 'Math', {
  tanh: function tanh(x){
    var a = expm1(x = +x)
      , b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});
},{"./_export":32,"./_math-expm1":59}],166:[function(require,module,exports){
// 20.2.2.34 Math.trunc(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  trunc: function trunc(it){
    return (it > 0 ? Math.floor : Math.ceil)(it);
  }
});
},{"./_export":32}],167:[function(require,module,exports){
'use strict';
var global            = require('./_global')
  , has               = require('./_has')
  , cof               = require('./_cof')
  , inheritIfRequired = require('./_inherit-if-required')
  , toPrimitive       = require('./_to-primitive')
  , fails             = require('./_fails')
  , gOPN              = require('./_object-gopn').f
  , gOPD              = require('./_object-gopd').f
  , dP                = require('./_object-dp').f
  , $trim             = require('./_string-trim').trim
  , NUMBER            = 'Number'
  , $Number           = global[NUMBER]
  , Base              = $Number
  , proto             = $Number.prototype
  // Opera ~12 has broken Object#toString
  , BROKEN_COF        = cof(require('./_object-create')(proto)) == NUMBER
  , TRIM              = 'trim' in String.prototype;

// 7.1.3 ToNumber(argument)
var toNumber = function(argument){
  var it = toPrimitive(argument, false);
  if(typeof it == 'string' && it.length > 2){
    it = TRIM ? it.trim() : $trim(it, 3);
    var first = it.charCodeAt(0)
      , third, radix, maxCode;
    if(first === 43 || first === 45){
      third = it.charCodeAt(2);
      if(third === 88 || third === 120)return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if(first === 48){
      switch(it.charCodeAt(1)){
        case 66 : case 98  : radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
        case 79 : case 111 : radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
        default : return +it;
      }
      for(var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++){
        code = digits.charCodeAt(i);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if(code < 48 || code > maxCode)return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

if(!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')){
  $Number = function Number(value){
    var it = arguments.length < 1 ? 0 : value
      , that = this;
    return that instanceof $Number
      // check on 1..constructor(foo) case
      && (BROKEN_COF ? fails(function(){ proto.valueOf.call(that); }) : cof(that) != NUMBER)
        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
  };
  for(var keys = require('./_descriptors') ? gOPN(Base) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES6 (in case, if modules with ES6 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
  ).split(','), j = 0, key; keys.length > j; j++){
    if(has(Base, key = keys[j]) && !has($Number, key)){
      dP($Number, key, gOPD(Base, key));
    }
  }
  $Number.prototype = proto;
  proto.constructor = $Number;
  require('./_redefine')(global, NUMBER, $Number);
}
},{"./_cof":18,"./_descriptors":28,"./_fails":34,"./_global":38,"./_has":39,"./_inherit-if-required":43,"./_object-create":66,"./_object-dp":67,"./_object-gopd":70,"./_object-gopn":72,"./_redefine":87,"./_string-trim":102,"./_to-primitive":110}],168:[function(require,module,exports){
// 20.1.2.1 Number.EPSILON
var $export = require('./_export');

$export($export.S, 'Number', {EPSILON: Math.pow(2, -52)});
},{"./_export":32}],169:[function(require,module,exports){
// 20.1.2.2 Number.isFinite(number)
var $export   = require('./_export')
  , _isFinite = require('./_global').isFinite;

$export($export.S, 'Number', {
  isFinite: function isFinite(it){
    return typeof it == 'number' && _isFinite(it);
  }
});
},{"./_export":32,"./_global":38}],170:[function(require,module,exports){
// 20.1.2.3 Number.isInteger(number)
var $export = require('./_export');

$export($export.S, 'Number', {isInteger: require('./_is-integer')});
},{"./_export":32,"./_is-integer":48}],171:[function(require,module,exports){
// 20.1.2.4 Number.isNaN(number)
var $export = require('./_export');

$export($export.S, 'Number', {
  isNaN: function isNaN(number){
    return number != number;
  }
});
},{"./_export":32}],172:[function(require,module,exports){
// 20.1.2.5 Number.isSafeInteger(number)
var $export   = require('./_export')
  , isInteger = require('./_is-integer')
  , abs       = Math.abs;

$export($export.S, 'Number', {
  isSafeInteger: function isSafeInteger(number){
    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});
},{"./_export":32,"./_is-integer":48}],173:[function(require,module,exports){
// 20.1.2.6 Number.MAX_SAFE_INTEGER
var $export = require('./_export');

$export($export.S, 'Number', {MAX_SAFE_INTEGER: 0x1fffffffffffff});
},{"./_export":32}],174:[function(require,module,exports){
// 20.1.2.10 Number.MIN_SAFE_INTEGER
var $export = require('./_export');

$export($export.S, 'Number', {MIN_SAFE_INTEGER: -0x1fffffffffffff});
},{"./_export":32}],175:[function(require,module,exports){
var $export     = require('./_export')
  , $parseFloat = require('./_parse-float');
// 20.1.2.12 Number.parseFloat(string)
$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', {parseFloat: $parseFloat});
},{"./_export":32,"./_parse-float":81}],176:[function(require,module,exports){
var $export   = require('./_export')
  , $parseInt = require('./_parse-int');
// 20.1.2.13 Number.parseInt(string, radix)
$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', {parseInt: $parseInt});
},{"./_export":32,"./_parse-int":82}],177:[function(require,module,exports){
'use strict';
var $export      = require('./_export')
  , toInteger    = require('./_to-integer')
  , aNumberValue = require('./_a-number-value')
  , repeat       = require('./_string-repeat')
  , $toFixed     = 1..toFixed
  , floor        = Math.floor
  , data         = [0, 0, 0, 0, 0, 0]
  , ERROR        = 'Number.toFixed: incorrect invocation!'
  , ZERO         = '0';

var multiply = function(n, c){
  var i  = -1
    , c2 = c;
  while(++i < 6){
    c2 += n * data[i];
    data[i] = c2 % 1e7;
    c2 = floor(c2 / 1e7);
  }
};
var divide = function(n){
  var i = 6
    , c = 0;
  while(--i >= 0){
    c += data[i];
    data[i] = floor(c / n);
    c = (c % n) * 1e7;
  }
};
var numToString = function(){
  var i = 6
    , s = '';
  while(--i >= 0){
    if(s !== '' || i === 0 || data[i] !== 0){
      var t = String(data[i]);
      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
    }
  } return s;
};
var pow = function(x, n, acc){
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};
var log = function(x){
  var n  = 0
    , x2 = x;
  while(x2 >= 4096){
    n += 12;
    x2 /= 4096;
  }
  while(x2 >= 2){
    n  += 1;
    x2 /= 2;
  } return n;
};

$export($export.P + $export.F * (!!$toFixed && (
  0.00008.toFixed(3) !== '0.000' ||
  0.9.toFixed(0) !== '1' ||
  1.255.toFixed(2) !== '1.25' ||
  1000000000000000128..toFixed(0) !== '1000000000000000128'
) || !require('./_fails')(function(){
  // V8 ~ Android 4.3-
  $toFixed.call({});
})), 'Number', {
  toFixed: function toFixed(fractionDigits){
    var x = aNumberValue(this, ERROR)
      , f = toInteger(fractionDigits)
      , s = ''
      , m = ZERO
      , e, z, j, k;
    if(f < 0 || f > 20)throw RangeError(ERROR);
    if(x != x)return 'NaN';
    if(x <= -1e21 || x >= 1e21)return String(x);
    if(x < 0){
      s = '-';
      x = -x;
    }
    if(x > 1e-21){
      e = log(x * pow(2, 69, 1)) - 69;
      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if(e > 0){
        multiply(0, z);
        j = f;
        while(j >= 7){
          multiply(1e7, 0);
          j -= 7;
        }
        multiply(pow(10, j, 1), 0);
        j = e - 1;
        while(j >= 23){
          divide(1 << 23);
          j -= 23;
        }
        divide(1 << j);
        multiply(1, 1);
        divide(2);
        m = numToString();
      } else {
        multiply(0, z);
        multiply(1 << -e, 0);
        m = numToString() + repeat.call(ZERO, f);
      }
    }
    if(f > 0){
      k = m.length;
      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
    } else {
      m = s + m;
    } return m;
  }
});
},{"./_a-number-value":4,"./_export":32,"./_fails":34,"./_string-repeat":101,"./_to-integer":106}],178:[function(require,module,exports){
'use strict';
var $export      = require('./_export')
  , $fails       = require('./_fails')
  , aNumberValue = require('./_a-number-value')
  , $toPrecision = 1..toPrecision;

$export($export.P + $export.F * ($fails(function(){
  // IE7-
  return $toPrecision.call(1, undefined) !== '1';
}) || !$fails(function(){
  // V8 ~ Android 4.3-
  $toPrecision.call({});
})), 'Number', {
  toPrecision: function toPrecision(precision){
    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision); 
  }
});
},{"./_a-number-value":4,"./_export":32,"./_fails":34}],179:[function(require,module,exports){
// 19.1.3.1 Object.assign(target, source)
var $export = require('./_export');

$export($export.S + $export.F, 'Object', {assign: require('./_object-assign')});
},{"./_export":32,"./_object-assign":65}],180:[function(require,module,exports){
var $export = require('./_export')
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', {create: require('./_object-create')});
},{"./_export":32,"./_object-create":66}],181:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', {defineProperties: require('./_object-dps')});
},{"./_descriptors":28,"./_export":32,"./_object-dps":68}],182:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', {defineProperty: require('./_object-dp').f});
},{"./_descriptors":28,"./_export":32,"./_object-dp":67}],183:[function(require,module,exports){
// 19.1.2.5 Object.freeze(O)
var isObject = require('./_is-object')
  , meta     = require('./_meta').onFreeze;

require('./_object-sap')('freeze', function($freeze){
  return function freeze(it){
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});
},{"./_is-object":49,"./_meta":62,"./_object-sap":78}],184:[function(require,module,exports){
// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject                 = require('./_to-iobject')
  , $getOwnPropertyDescriptor = require('./_object-gopd').f;

require('./_object-sap')('getOwnPropertyDescriptor', function(){
  return function getOwnPropertyDescriptor(it, key){
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});
},{"./_object-gopd":70,"./_object-sap":78,"./_to-iobject":107}],185:[function(require,module,exports){
// 19.1.2.7 Object.getOwnPropertyNames(O)
require('./_object-sap')('getOwnPropertyNames', function(){
  return require('./_object-gopn-ext').f;
});
},{"./_object-gopn-ext":71,"./_object-sap":78}],186:[function(require,module,exports){
// 19.1.2.9 Object.getPrototypeOf(O)
var toObject        = require('./_to-object')
  , $getPrototypeOf = require('./_object-gpo');

require('./_object-sap')('getPrototypeOf', function(){
  return function getPrototypeOf(it){
    return $getPrototypeOf(toObject(it));
  };
});
},{"./_object-gpo":74,"./_object-sap":78,"./_to-object":109}],187:[function(require,module,exports){
// 19.1.2.11 Object.isExtensible(O)
var isObject = require('./_is-object');

require('./_object-sap')('isExtensible', function($isExtensible){
  return function isExtensible(it){
    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
  };
});
},{"./_is-object":49,"./_object-sap":78}],188:[function(require,module,exports){
// 19.1.2.12 Object.isFrozen(O)
var isObject = require('./_is-object');

require('./_object-sap')('isFrozen', function($isFrozen){
  return function isFrozen(it){
    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
  };
});
},{"./_is-object":49,"./_object-sap":78}],189:[function(require,module,exports){
// 19.1.2.13 Object.isSealed(O)
var isObject = require('./_is-object');

require('./_object-sap')('isSealed', function($isSealed){
  return function isSealed(it){
    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
  };
});
},{"./_is-object":49,"./_object-sap":78}],190:[function(require,module,exports){
// 19.1.3.10 Object.is(value1, value2)
var $export = require('./_export');
$export($export.S, 'Object', {is: require('./_same-value')});
},{"./_export":32,"./_same-value":89}],191:[function(require,module,exports){
// 19.1.2.14 Object.keys(O)
var toObject = require('./_to-object')
  , $keys    = require('./_object-keys');

require('./_object-sap')('keys', function(){
  return function keys(it){
    return $keys(toObject(it));
  };
});
},{"./_object-keys":76,"./_object-sap":78,"./_to-object":109}],192:[function(require,module,exports){
// 19.1.2.15 Object.preventExtensions(O)
var isObject = require('./_is-object')
  , meta     = require('./_meta').onFreeze;

require('./_object-sap')('preventExtensions', function($preventExtensions){
  return function preventExtensions(it){
    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
  };
});
},{"./_is-object":49,"./_meta":62,"./_object-sap":78}],193:[function(require,module,exports){
// 19.1.2.17 Object.seal(O)
var isObject = require('./_is-object')
  , meta     = require('./_meta').onFreeze;

require('./_object-sap')('seal', function($seal){
  return function seal(it){
    return $seal && isObject(it) ? $seal(meta(it)) : it;
  };
});
},{"./_is-object":49,"./_meta":62,"./_object-sap":78}],194:[function(require,module,exports){
// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = require('./_export');
$export($export.S, 'Object', {setPrototypeOf: require('./_set-proto').set});
},{"./_export":32,"./_set-proto":90}],195:[function(require,module,exports){
'use strict';
// 19.1.3.6 Object.prototype.toString()
var classof = require('./_classof')
  , test    = {};
test[require('./_wks')('toStringTag')] = 'z';
if(test + '' != '[object z]'){
  require('./_redefine')(Object.prototype, 'toString', function toString(){
    return '[object ' + classof(this) + ']';
  }, true);
}
},{"./_classof":17,"./_redefine":87,"./_wks":117}],196:[function(require,module,exports){
var $export     = require('./_export')
  , $parseFloat = require('./_parse-float');
// 18.2.4 parseFloat(string)
$export($export.G + $export.F * (parseFloat != $parseFloat), {parseFloat: $parseFloat});
},{"./_export":32,"./_parse-float":81}],197:[function(require,module,exports){
var $export   = require('./_export')
  , $parseInt = require('./_parse-int');
// 18.2.5 parseInt(string, radix)
$export($export.G + $export.F * (parseInt != $parseInt), {parseInt: $parseInt});
},{"./_export":32,"./_parse-int":82}],198:[function(require,module,exports){
'use strict';
var LIBRARY            = require('./_library')
  , global             = require('./_global')
  , ctx                = require('./_ctx')
  , classof            = require('./_classof')
  , $export            = require('./_export')
  , isObject           = require('./_is-object')
  , aFunction          = require('./_a-function')
  , anInstance         = require('./_an-instance')
  , forOf              = require('./_for-of')
  , speciesConstructor = require('./_species-constructor')
  , task               = require('./_task').set
  , microtask          = require('./_microtask')()
  , PROMISE            = 'Promise'
  , TypeError          = global.TypeError
  , process            = global.process
  , $Promise           = global[PROMISE]
  , process            = global.process
  , isNode             = classof(process) == 'process'
  , empty              = function(){ /* empty */ }
  , Internal, GenericPromiseCapability, Wrapper;

var USE_NATIVE = !!function(){
  try {
    // correct subclassing with @@species support
    var promise     = $Promise.resolve(1)
      , FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function(exec){ exec(empty, empty); };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
  } catch(e){ /* empty */ }
}();

// helpers
var sameConstructor = function(a, b){
  // with library wrapper special case
  return a === b || a === $Promise && b === Wrapper;
};
var isThenable = function(it){
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var newPromiseCapability = function(C){
  return sameConstructor($Promise, C)
    ? new PromiseCapability(C)
    : new GenericPromiseCapability(C);
};
var PromiseCapability = GenericPromiseCapability = function(C){
  var resolve, reject;
  this.promise = new C(function($$resolve, $$reject){
    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject  = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject  = aFunction(reject);
};
var perform = function(exec){
  try {
    exec();
  } catch(e){
    return {error: e};
  }
};
var notify = function(promise, isReject){
  if(promise._n)return;
  promise._n = true;
  var chain = promise._c;
  microtask(function(){
    var value = promise._v
      , ok    = promise._s == 1
      , i     = 0;
    var run = function(reaction){
      var handler = ok ? reaction.ok : reaction.fail
        , resolve = reaction.resolve
        , reject  = reaction.reject
        , domain  = reaction.domain
        , result, then;
      try {
        if(handler){
          if(!ok){
            if(promise._h == 2)onHandleUnhandled(promise);
            promise._h = 1;
          }
          if(handler === true)result = value;
          else {
            if(domain)domain.enter();
            result = handler(value);
            if(domain)domain.exit();
          }
          if(result === reaction.promise){
            reject(TypeError('Promise-chain cycle'));
          } else if(then = isThenable(result)){
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch(e){
        reject(e);
      }
    };
    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if(isReject && !promise._h)onUnhandled(promise);
  });
};
var onUnhandled = function(promise){
  task.call(global, function(){
    var value = promise._v
      , abrupt, handler, console;
    if(isUnhandled(promise)){
      abrupt = perform(function(){
        if(isNode){
          process.emit('unhandledRejection', value, promise);
        } else if(handler = global.onunhandledrejection){
          handler({promise: promise, reason: value});
        } else if((console = global.console) && console.error){
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if(abrupt)throw abrupt.error;
  });
};
var isUnhandled = function(promise){
  if(promise._h == 1)return false;
  var chain = promise._a || promise._c
    , i     = 0
    , reaction;
  while(chain.length > i){
    reaction = chain[i++];
    if(reaction.fail || !isUnhandled(reaction.promise))return false;
  } return true;
};
var onHandleUnhandled = function(promise){
  task.call(global, function(){
    var handler;
    if(isNode){
      process.emit('rejectionHandled', promise);
    } else if(handler = global.onrejectionhandled){
      handler({promise: promise, reason: promise._v});
    }
  });
};
var $reject = function(value){
  var promise = this;
  if(promise._d)return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if(!promise._a)promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function(value){
  var promise = this
    , then;
  if(promise._d)return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if(promise === value)throw TypeError("Promise can't be resolved itself");
    if(then = isThenable(value)){
      microtask(function(){
        var wrapper = {_w: promise, _d: false}; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch(e){
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch(e){
    $reject.call({_w: promise, _d: false}, e); // wrap
  }
};

// constructor polyfill
if(!USE_NATIVE){
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor){
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch(err){
      $reject.call(this, err);
    }
  };
  Internal = function Promise(executor){
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = require('./_redefine-all')($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected){
      var reaction    = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail   = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if(this._a)this._a.push(reaction);
      if(this._s)notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function(onRejected){
      return this.then(undefined, onRejected);
    }
  });
  PromiseCapability = function(){
    var promise  = new Internal;
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject  = ctx($reject, promise, 1);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});
require('./_set-to-string-tag')($Promise, PROMISE);
require('./_set-species')(PROMISE);
Wrapper = require('./_core')[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r){
    var capability = newPromiseCapability(this)
      , $$reject   = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x){
    // instanceof instead of internal slot check because we should fix it without replacement native Promise core
    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;
    var capability = newPromiseCapability(this)
      , $$resolve  = capability.resolve;
    $$resolve(x);
    return capability.promise;
  }
});
$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function(iter){
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable){
    var C          = this
      , capability = newPromiseCapability(C)
      , resolve    = capability.resolve
      , reject     = capability.reject;
    var abrupt = perform(function(){
      var values    = []
        , index     = 0
        , remaining = 1;
      forOf(iterable, false, function(promise){
        var $index        = index++
          , alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function(value){
          if(alreadyCalled)return;
          alreadyCalled  = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if(abrupt)reject(abrupt.error);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable){
    var C          = this
      , capability = newPromiseCapability(C)
      , reject     = capability.reject;
    var abrupt = perform(function(){
      forOf(iterable, false, function(promise){
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if(abrupt)reject(abrupt.error);
    return capability.promise;
  }
});
},{"./_a-function":3,"./_an-instance":6,"./_classof":17,"./_core":23,"./_ctx":25,"./_export":32,"./_for-of":37,"./_global":38,"./_is-object":49,"./_iter-detect":54,"./_library":58,"./_microtask":64,"./_redefine-all":86,"./_set-species":91,"./_set-to-string-tag":92,"./_species-constructor":95,"./_task":104,"./_wks":117}],199:[function(require,module,exports){
// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $export   = require('./_export')
  , aFunction = require('./_a-function')
  , anObject  = require('./_an-object')
  , rApply    = (require('./_global').Reflect || {}).apply
  , fApply    = Function.apply;
// MS Edge argumentsList argument is optional
$export($export.S + $export.F * !require('./_fails')(function(){
  rApply(function(){});
}), 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList){
    var T = aFunction(target)
      , L = anObject(argumentsList);
    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
  }
});
},{"./_a-function":3,"./_an-object":7,"./_export":32,"./_fails":34,"./_global":38}],200:[function(require,module,exports){
// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $export    = require('./_export')
  , create     = require('./_object-create')
  , aFunction  = require('./_a-function')
  , anObject   = require('./_an-object')
  , isObject   = require('./_is-object')
  , fails      = require('./_fails')
  , bind       = require('./_bind')
  , rConstruct = (require('./_global').Reflect || {}).construct;

// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function(){
  function F(){}
  return !(rConstruct(function(){}, [], F) instanceof F);
});
var ARGS_BUG = !fails(function(){
  rConstruct(function(){});
});

$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args /*, newTarget*/){
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if(ARGS_BUG && !NEW_TARGET_BUG)return rConstruct(Target, args, newTarget);
    if(Target == newTarget){
      // w/o altered newTarget, optimization for 0-4 arguments
      switch(args.length){
        case 0: return new Target;
        case 1: return new Target(args[0]);
        case 2: return new Target(args[0], args[1]);
        case 3: return new Target(args[0], args[1], args[2]);
        case 4: return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args));
    }
    // with altered newTarget, not support built-in constructors
    var proto    = newTarget.prototype
      , instance = create(isObject(proto) ? proto : Object.prototype)
      , result   = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});
},{"./_a-function":3,"./_an-object":7,"./_bind":16,"./_export":32,"./_fails":34,"./_global":38,"./_is-object":49,"./_object-create":66}],201:[function(require,module,exports){
// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var dP          = require('./_object-dp')
  , $export     = require('./_export')
  , anObject    = require('./_an-object')
  , toPrimitive = require('./_to-primitive');

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
$export($export.S + $export.F * require('./_fails')(function(){
  Reflect.defineProperty(dP.f({}, 1, {value: 1}), 1, {value: 2});
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes){
    anObject(target);
    propertyKey = toPrimitive(propertyKey, true);
    anObject(attributes);
    try {
      dP.f(target, propertyKey, attributes);
      return true;
    } catch(e){
      return false;
    }
  }
});
},{"./_an-object":7,"./_export":32,"./_fails":34,"./_object-dp":67,"./_to-primitive":110}],202:[function(require,module,exports){
// 26.1.4 Reflect.deleteProperty(target, propertyKey)
var $export  = require('./_export')
  , gOPD     = require('./_object-gopd').f
  , anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  deleteProperty: function deleteProperty(target, propertyKey){
    var desc = gOPD(anObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  }
});
},{"./_an-object":7,"./_export":32,"./_object-gopd":70}],203:[function(require,module,exports){
'use strict';
// 26.1.5 Reflect.enumerate(target)
var $export  = require('./_export')
  , anObject = require('./_an-object');
var Enumerate = function(iterated){
  this._t = anObject(iterated); // target
  this._i = 0;                  // next index
  var keys = this._k = []       // keys
    , key;
  for(key in iterated)keys.push(key);
};
require('./_iter-create')(Enumerate, 'Object', function(){
  var that = this
    , keys = that._k
    , key;
  do {
    if(that._i >= keys.length)return {value: undefined, done: true};
  } while(!((key = keys[that._i++]) in that._t));
  return {value: key, done: false};
});

$export($export.S, 'Reflect', {
  enumerate: function enumerate(target){
    return new Enumerate(target);
  }
});
},{"./_an-object":7,"./_export":32,"./_iter-create":52}],204:[function(require,module,exports){
// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
var gOPD     = require('./_object-gopd')
  , $export  = require('./_export')
  , anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey){
    return gOPD.f(anObject(target), propertyKey);
  }
});
},{"./_an-object":7,"./_export":32,"./_object-gopd":70}],205:[function(require,module,exports){
// 26.1.8 Reflect.getPrototypeOf(target)
var $export  = require('./_export')
  , getProto = require('./_object-gpo')
  , anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  getPrototypeOf: function getPrototypeOf(target){
    return getProto(anObject(target));
  }
});
},{"./_an-object":7,"./_export":32,"./_object-gpo":74}],206:[function(require,module,exports){
// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var gOPD           = require('./_object-gopd')
  , getPrototypeOf = require('./_object-gpo')
  , has            = require('./_has')
  , $export        = require('./_export')
  , isObject       = require('./_is-object')
  , anObject       = require('./_an-object');

function get(target, propertyKey/*, receiver*/){
  var receiver = arguments.length < 3 ? target : arguments[2]
    , desc, proto;
  if(anObject(target) === receiver)return target[propertyKey];
  if(desc = gOPD.f(target, propertyKey))return has(desc, 'value')
    ? desc.value
    : desc.get !== undefined
      ? desc.get.call(receiver)
      : undefined;
  if(isObject(proto = getPrototypeOf(target)))return get(proto, propertyKey, receiver);
}

$export($export.S, 'Reflect', {get: get});
},{"./_an-object":7,"./_export":32,"./_has":39,"./_is-object":49,"./_object-gopd":70,"./_object-gpo":74}],207:[function(require,module,exports){
// 26.1.9 Reflect.has(target, propertyKey)
var $export = require('./_export');

$export($export.S, 'Reflect', {
  has: function has(target, propertyKey){
    return propertyKey in target;
  }
});
},{"./_export":32}],208:[function(require,module,exports){
// 26.1.10 Reflect.isExtensible(target)
var $export       = require('./_export')
  , anObject      = require('./_an-object')
  , $isExtensible = Object.isExtensible;

$export($export.S, 'Reflect', {
  isExtensible: function isExtensible(target){
    anObject(target);
    return $isExtensible ? $isExtensible(target) : true;
  }
});
},{"./_an-object":7,"./_export":32}],209:[function(require,module,exports){
// 26.1.11 Reflect.ownKeys(target)
var $export = require('./_export');

$export($export.S, 'Reflect', {ownKeys: require('./_own-keys')});
},{"./_export":32,"./_own-keys":80}],210:[function(require,module,exports){
// 26.1.12 Reflect.preventExtensions(target)
var $export            = require('./_export')
  , anObject           = require('./_an-object')
  , $preventExtensions = Object.preventExtensions;

$export($export.S, 'Reflect', {
  preventExtensions: function preventExtensions(target){
    anObject(target);
    try {
      if($preventExtensions)$preventExtensions(target);
      return true;
    } catch(e){
      return false;
    }
  }
});
},{"./_an-object":7,"./_export":32}],211:[function(require,module,exports){
// 26.1.14 Reflect.setPrototypeOf(target, proto)
var $export  = require('./_export')
  , setProto = require('./_set-proto');

if(setProto)$export($export.S, 'Reflect', {
  setPrototypeOf: function setPrototypeOf(target, proto){
    setProto.check(target, proto);
    try {
      setProto.set(target, proto);
      return true;
    } catch(e){
      return false;
    }
  }
});
},{"./_export":32,"./_set-proto":90}],212:[function(require,module,exports){
// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
var dP             = require('./_object-dp')
  , gOPD           = require('./_object-gopd')
  , getPrototypeOf = require('./_object-gpo')
  , has            = require('./_has')
  , $export        = require('./_export')
  , createDesc     = require('./_property-desc')
  , anObject       = require('./_an-object')
  , isObject       = require('./_is-object');

function set(target, propertyKey, V/*, receiver*/){
  var receiver = arguments.length < 4 ? target : arguments[3]
    , ownDesc  = gOPD.f(anObject(target), propertyKey)
    , existingDescriptor, proto;
  if(!ownDesc){
    if(isObject(proto = getPrototypeOf(target))){
      return set(proto, propertyKey, V, receiver);
    }
    ownDesc = createDesc(0);
  }
  if(has(ownDesc, 'value')){
    if(ownDesc.writable === false || !isObject(receiver))return false;
    existingDescriptor = gOPD.f(receiver, propertyKey) || createDesc(0);
    existingDescriptor.value = V;
    dP.f(receiver, propertyKey, existingDescriptor);
    return true;
  }
  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}

$export($export.S, 'Reflect', {set: set});
},{"./_an-object":7,"./_export":32,"./_has":39,"./_is-object":49,"./_object-dp":67,"./_object-gopd":70,"./_object-gpo":74,"./_property-desc":85}],213:[function(require,module,exports){
var global            = require('./_global')
  , inheritIfRequired = require('./_inherit-if-required')
  , dP                = require('./_object-dp').f
  , gOPN              = require('./_object-gopn').f
  , isRegExp          = require('./_is-regexp')
  , $flags            = require('./_flags')
  , $RegExp           = global.RegExp
  , Base              = $RegExp
  , proto             = $RegExp.prototype
  , re1               = /a/g
  , re2               = /a/g
  // "new" creates a new object, old webkit buggy here
  , CORRECT_NEW       = new $RegExp(re1) !== re1;

if(require('./_descriptors') && (!CORRECT_NEW || require('./_fails')(function(){
  re2[require('./_wks')('match')] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))){
  $RegExp = function RegExp(p, f){
    var tiRE = this instanceof $RegExp
      , piRE = isRegExp(p)
      , fiU  = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
      : inheritIfRequired(CORRECT_NEW
        ? new Base(piRE && !fiU ? p.source : p, f)
        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
      , tiRE ? this : proto, $RegExp);
  };
  var proxy = function(key){
    key in $RegExp || dP($RegExp, key, {
      configurable: true,
      get: function(){ return Base[key]; },
      set: function(it){ Base[key] = it; }
    });
  };
  for(var keys = gOPN(Base), i = 0; keys.length > i; )proxy(keys[i++]);
  proto.constructor = $RegExp;
  $RegExp.prototype = proto;
  require('./_redefine')(global, 'RegExp', $RegExp);
}

require('./_set-species')('RegExp');
},{"./_descriptors":28,"./_fails":34,"./_flags":36,"./_global":38,"./_inherit-if-required":43,"./_is-regexp":50,"./_object-dp":67,"./_object-gopn":72,"./_redefine":87,"./_set-species":91,"./_wks":117}],214:[function(require,module,exports){
// 21.2.5.3 get RegExp.prototype.flags()
if(require('./_descriptors') && /./g.flags != 'g')require('./_object-dp').f(RegExp.prototype, 'flags', {
  configurable: true,
  get: require('./_flags')
});
},{"./_descriptors":28,"./_flags":36,"./_object-dp":67}],215:[function(require,module,exports){
// @@match logic
require('./_fix-re-wks')('match', 1, function(defined, MATCH, $match){
  // 21.1.3.11 String.prototype.match(regexp)
  return [function match(regexp){
    'use strict';
    var O  = defined(this)
      , fn = regexp == undefined ? undefined : regexp[MATCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
  }, $match];
});
},{"./_fix-re-wks":35}],216:[function(require,module,exports){
// @@replace logic
require('./_fix-re-wks')('replace', 2, function(defined, REPLACE, $replace){
  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
  return [function replace(searchValue, replaceValue){
    'use strict';
    var O  = defined(this)
      , fn = searchValue == undefined ? undefined : searchValue[REPLACE];
    return fn !== undefined
      ? fn.call(searchValue, O, replaceValue)
      : $replace.call(String(O), searchValue, replaceValue);
  }, $replace];
});
},{"./_fix-re-wks":35}],217:[function(require,module,exports){
// @@search logic
require('./_fix-re-wks')('search', 1, function(defined, SEARCH, $search){
  // 21.1.3.15 String.prototype.search(regexp)
  return [function search(regexp){
    'use strict';
    var O  = defined(this)
      , fn = regexp == undefined ? undefined : regexp[SEARCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
  }, $search];
});
},{"./_fix-re-wks":35}],218:[function(require,module,exports){
// @@split logic
require('./_fix-re-wks')('split', 2, function(defined, SPLIT, $split){
  'use strict';
  var isRegExp   = require('./_is-regexp')
    , _split     = $split
    , $push      = [].push
    , $SPLIT     = 'split'
    , LENGTH     = 'length'
    , LAST_INDEX = 'lastIndex';
  if(
    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
    ''[$SPLIT](/.?/)[LENGTH]
  ){
    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
    // based on es5-shim implementation, need to rework it
    $split = function(separator, limit){
      var string = String(this);
      if(separator === undefined && limit === 0)return [];
      // If `separator` is not a regex, use native split
      if(!isRegExp(separator))return _split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var separator2, match, lastIndex, lastLength, i;
      // Doesn't need flags gy, but they don't hurt
      if(!NPCG)separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
      while(match = separatorCopy.exec(string)){
        // `separatorCopy.lastIndex` is not reliable cross-browser
        lastIndex = match.index + match[0][LENGTH];
        if(lastIndex > lastLastIndex){
          output.push(string.slice(lastLastIndex, match.index));
          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
          if(!NPCG && match[LENGTH] > 1)match[0].replace(separator2, function(){
            for(i = 1; i < arguments[LENGTH] - 2; i++)if(arguments[i] === undefined)match[i] = undefined;
          });
          if(match[LENGTH] > 1 && match.index < string[LENGTH])$push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if(output[LENGTH] >= splitLimit)break;
        }
        if(separatorCopy[LAST_INDEX] === match.index)separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }
      if(lastLastIndex === string[LENGTH]){
        if(lastLength || !separatorCopy.test(''))output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
  // Chakra, V8
  } else if('0'[$SPLIT](undefined, 0)[LENGTH]){
    $split = function(separator, limit){
      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
    };
  }
  // 21.1.3.17 String.prototype.split(separator, limit)
  return [function split(separator, limit){
    var O  = defined(this)
      , fn = separator == undefined ? undefined : separator[SPLIT];
    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
  }, $split];
});
},{"./_fix-re-wks":35,"./_is-regexp":50}],219:[function(require,module,exports){
'use strict';
require('./es6.regexp.flags');
var anObject    = require('./_an-object')
  , $flags      = require('./_flags')
  , DESCRIPTORS = require('./_descriptors')
  , TO_STRING   = 'toString'
  , $toString   = /./[TO_STRING];

var define = function(fn){
  require('./_redefine')(RegExp.prototype, TO_STRING, fn, true);
};

// 21.2.5.14 RegExp.prototype.toString()
if(require('./_fails')(function(){ return $toString.call({source: 'a', flags: 'b'}) != '/a/b'; })){
  define(function toString(){
    var R = anObject(this);
    return '/'.concat(R.source, '/',
      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
  });
// FF44- RegExp#toString has a wrong name
} else if($toString.name != TO_STRING){
  define(function toString(){
    return $toString.call(this);
  });
}
},{"./_an-object":7,"./_descriptors":28,"./_fails":34,"./_flags":36,"./_redefine":87,"./es6.regexp.flags":214}],220:[function(require,module,exports){
'use strict';
var strong = require('./_collection-strong');

// 23.2 Set Objects
module.exports = require('./_collection')('Set', function(get){
  return function Set(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value){
    return strong.def(this, value = value === 0 ? 0 : value, value);
  }
}, strong);
},{"./_collection":22,"./_collection-strong":19}],221:[function(require,module,exports){
'use strict';
// B.2.3.2 String.prototype.anchor(name)
require('./_string-html')('anchor', function(createHTML){
  return function anchor(name){
    return createHTML(this, 'a', 'name', name);
  }
});
},{"./_string-html":99}],222:[function(require,module,exports){
'use strict';
// B.2.3.3 String.prototype.big()
require('./_string-html')('big', function(createHTML){
  return function big(){
    return createHTML(this, 'big', '', '');
  }
});
},{"./_string-html":99}],223:[function(require,module,exports){
'use strict';
// B.2.3.4 String.prototype.blink()
require('./_string-html')('blink', function(createHTML){
  return function blink(){
    return createHTML(this, 'blink', '', '');
  }
});
},{"./_string-html":99}],224:[function(require,module,exports){
'use strict';
// B.2.3.5 String.prototype.bold()
require('./_string-html')('bold', function(createHTML){
  return function bold(){
    return createHTML(this, 'b', '', '');
  }
});
},{"./_string-html":99}],225:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $at     = require('./_string-at')(false);
$export($export.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos){
    return $at(this, pos);
  }
});
},{"./_export":32,"./_string-at":97}],226:[function(require,module,exports){
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
'use strict';
var $export   = require('./_export')
  , toLength  = require('./_to-length')
  , context   = require('./_string-context')
  , ENDS_WITH = 'endsWith'
  , $endsWith = ''[ENDS_WITH];

$export($export.P + $export.F * require('./_fails-is-regexp')(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString /*, endPosition = @length */){
    var that = context(this, searchString, ENDS_WITH)
      , endPosition = arguments.length > 1 ? arguments[1] : undefined
      , len    = toLength(that.length)
      , end    = endPosition === undefined ? len : Math.min(toLength(endPosition), len)
      , search = String(searchString);
    return $endsWith
      ? $endsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});
},{"./_export":32,"./_fails-is-regexp":33,"./_string-context":98,"./_to-length":108}],227:[function(require,module,exports){
'use strict';
// B.2.3.6 String.prototype.fixed()
require('./_string-html')('fixed', function(createHTML){
  return function fixed(){
    return createHTML(this, 'tt', '', '');
  }
});
},{"./_string-html":99}],228:[function(require,module,exports){
'use strict';
// B.2.3.7 String.prototype.fontcolor(color)
require('./_string-html')('fontcolor', function(createHTML){
  return function fontcolor(color){
    return createHTML(this, 'font', 'color', color);
  }
});
},{"./_string-html":99}],229:[function(require,module,exports){
'use strict';
// B.2.3.8 String.prototype.fontsize(size)
require('./_string-html')('fontsize', function(createHTML){
  return function fontsize(size){
    return createHTML(this, 'font', 'size', size);
  }
});
},{"./_string-html":99}],230:[function(require,module,exports){
var $export        = require('./_export')
  , toIndex        = require('./_to-index')
  , fromCharCode   = String.fromCharCode
  , $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x){ // eslint-disable-line no-unused-vars
    var res  = []
      , aLen = arguments.length
      , i    = 0
      , code;
    while(aLen > i){
      code = +arguments[i++];
      if(toIndex(code, 0x10ffff) !== code)throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
      );
    } return res.join('');
  }
});
},{"./_export":32,"./_to-index":105}],231:[function(require,module,exports){
// 21.1.3.7 String.prototype.includes(searchString, position = 0)
'use strict';
var $export  = require('./_export')
  , context  = require('./_string-context')
  , INCLUDES = 'includes';

$export($export.P + $export.F * require('./_fails-is-regexp')(INCLUDES), 'String', {
  includes: function includes(searchString /*, position = 0 */){
    return !!~context(this, searchString, INCLUDES)
      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});
},{"./_export":32,"./_fails-is-regexp":33,"./_string-context":98}],232:[function(require,module,exports){
'use strict';
// B.2.3.9 String.prototype.italics()
require('./_string-html')('italics', function(createHTML){
  return function italics(){
    return createHTML(this, 'i', '', '');
  }
});
},{"./_string-html":99}],233:[function(require,module,exports){
'use strict';
var $at  = require('./_string-at')(true);

// 21.1.3.27 String.prototype[@@iterator]()
require('./_iter-define')(String, 'String', function(iterated){
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , index = this._i
    , point;
  if(index >= O.length)return {value: undefined, done: true};
  point = $at(O, index);
  this._i += point.length;
  return {value: point, done: false};
});
},{"./_iter-define":53,"./_string-at":97}],234:[function(require,module,exports){
'use strict';
// B.2.3.10 String.prototype.link(url)
require('./_string-html')('link', function(createHTML){
  return function link(url){
    return createHTML(this, 'a', 'href', url);
  }
});
},{"./_string-html":99}],235:[function(require,module,exports){
var $export   = require('./_export')
  , toIObject = require('./_to-iobject')
  , toLength  = require('./_to-length');

$export($export.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite){
    var tpl  = toIObject(callSite.raw)
      , len  = toLength(tpl.length)
      , aLen = arguments.length
      , res  = []
      , i    = 0;
    while(len > i){
      res.push(String(tpl[i++]));
      if(i < aLen)res.push(String(arguments[i]));
    } return res.join('');
  }
});
},{"./_export":32,"./_to-iobject":107,"./_to-length":108}],236:[function(require,module,exports){
var $export = require('./_export');

$export($export.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: require('./_string-repeat')
});
},{"./_export":32,"./_string-repeat":101}],237:[function(require,module,exports){
'use strict';
// B.2.3.11 String.prototype.small()
require('./_string-html')('small', function(createHTML){
  return function small(){
    return createHTML(this, 'small', '', '');
  }
});
},{"./_string-html":99}],238:[function(require,module,exports){
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])
'use strict';
var $export     = require('./_export')
  , toLength    = require('./_to-length')
  , context     = require('./_string-context')
  , STARTS_WITH = 'startsWith'
  , $startsWith = ''[STARTS_WITH];

$export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString /*, position = 0 */){
    var that   = context(this, searchString, STARTS_WITH)
      , index  = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length))
      , search = String(searchString);
    return $startsWith
      ? $startsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});
},{"./_export":32,"./_fails-is-regexp":33,"./_string-context":98,"./_to-length":108}],239:[function(require,module,exports){
'use strict';
// B.2.3.12 String.prototype.strike()
require('./_string-html')('strike', function(createHTML){
  return function strike(){
    return createHTML(this, 'strike', '', '');
  }
});
},{"./_string-html":99}],240:[function(require,module,exports){
'use strict';
// B.2.3.13 String.prototype.sub()
require('./_string-html')('sub', function(createHTML){
  return function sub(){
    return createHTML(this, 'sub', '', '');
  }
});
},{"./_string-html":99}],241:[function(require,module,exports){
'use strict';
// B.2.3.14 String.prototype.sup()
require('./_string-html')('sup', function(createHTML){
  return function sup(){
    return createHTML(this, 'sup', '', '');
  }
});
},{"./_string-html":99}],242:[function(require,module,exports){
'use strict';
// 21.1.3.25 String.prototype.trim()
require('./_string-trim')('trim', function($trim){
  return function trim(){
    return $trim(this, 3);
  };
});
},{"./_string-trim":102}],243:[function(require,module,exports){
'use strict';
// ECMAScript 6 symbols shim
var global         = require('./_global')
  , has            = require('./_has')
  , DESCRIPTORS    = require('./_descriptors')
  , $export        = require('./_export')
  , redefine       = require('./_redefine')
  , META           = require('./_meta').KEY
  , $fails         = require('./_fails')
  , shared         = require('./_shared')
  , setToStringTag = require('./_set-to-string-tag')
  , uid            = require('./_uid')
  , wks            = require('./_wks')
  , wksExt         = require('./_wks-ext')
  , wksDefine      = require('./_wks-define')
  , keyOf          = require('./_keyof')
  , enumKeys       = require('./_enum-keys')
  , isArray        = require('./_is-array')
  , anObject       = require('./_an-object')
  , toIObject      = require('./_to-iobject')
  , toPrimitive    = require('./_to-primitive')
  , createDesc     = require('./_property-desc')
  , _create        = require('./_object-create')
  , gOPNExt        = require('./_object-gopn-ext')
  , $GOPD          = require('./_object-gopd')
  , $DP            = require('./_object-dp')
  , $keys          = require('./_object-keys')
  , gOPD           = $GOPD.f
  , dP             = $DP.f
  , gOPN           = gOPNExt.f
  , $Symbol        = global.Symbol
  , $JSON          = global.JSON
  , _stringify     = $JSON && $JSON.stringify
  , PROTOTYPE      = 'prototype'
  , HIDDEN         = wks('_hidden')
  , TO_PRIMITIVE   = wks('toPrimitive')
  , isEnum         = {}.propertyIsEnumerable
  , SymbolRegistry = shared('symbol-registry')
  , AllSymbols     = shared('symbols')
  , OPSymbols      = shared('op-symbols')
  , ObjectProto    = Object[PROTOTYPE]
  , USE_NATIVE     = typeof $Symbol == 'function'
  , QObject        = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function(){
  return _create(dP({}, 'a', {
    get: function(){ return dP(this, 'a', {value: 7}).a; }
  })).a != 7;
}) ? function(it, key, D){
  var protoDesc = gOPD(ObjectProto, key);
  if(protoDesc)delete ObjectProto[key];
  dP(it, key, D);
  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function(tag){
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
  return typeof it == 'symbol';
} : function(it){
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D){
  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if(has(AllSymbols, key)){
    if(!D.enumerable){
      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
      D = _create(D, {enumerable: createDesc(0, false)});
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P){
  anObject(it);
  var keys = enumKeys(P = toIObject(P))
    , i    = 0
    , l = keys.length
    , key;
  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P){
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key){
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
  it  = toIObject(it);
  key = toPrimitive(key, true);
  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
  var D = gOPD(it, key);
  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it){
  var names  = gOPN(toIObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i){
    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
  var IS_OP  = it === ObjectProto
    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i){
    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if(!USE_NATIVE){
  $Symbol = function Symbol(){
    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function(value){
      if(this === ObjectProto)$set.call(OPSymbols, value);
      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f   = $defineProperty;
  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;
  require('./_object-pie').f  = $propertyIsEnumerable;
  require('./_object-gops').f = $getOwnPropertySymbols;

  if(DESCRIPTORS && !require('./_library')){
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function(name){
    return wrap(wks(name));
  }
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});

for(var symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);

for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function(key){
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(key){
    if(isSymbol(key))return keyOf(SymbolRegistry, key);
    throw TypeError(key + ' is not a symbol!');
  },
  useSetter: function(){ setter = true; },
  useSimple: function(){ setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it){
    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
    var args = [it]
      , i    = 1
      , replacer, $replacer;
    while(arguments.length > i)args.push(arguments[i++]);
    replacer = args[1];
    if(typeof replacer == 'function')$replacer = replacer;
    if($replacer || !isArray(replacer))replacer = function(key, value){
      if($replacer)value = $replacer.call(this, key, value);
      if(!isSymbol(value))return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);
},{"./_an-object":7,"./_descriptors":28,"./_enum-keys":31,"./_export":32,"./_fails":34,"./_global":38,"./_has":39,"./_hide":40,"./_is-array":47,"./_keyof":57,"./_library":58,"./_meta":62,"./_object-create":66,"./_object-dp":67,"./_object-gopd":70,"./_object-gopn":72,"./_object-gopn-ext":71,"./_object-gops":73,"./_object-keys":76,"./_object-pie":77,"./_property-desc":85,"./_redefine":87,"./_set-to-string-tag":92,"./_shared":94,"./_to-iobject":107,"./_to-primitive":110,"./_uid":114,"./_wks":117,"./_wks-define":115,"./_wks-ext":116}],244:[function(require,module,exports){
'use strict';
var $export      = require('./_export')
  , $typed       = require('./_typed')
  , buffer       = require('./_typed-buffer')
  , anObject     = require('./_an-object')
  , toIndex      = require('./_to-index')
  , toLength     = require('./_to-length')
  , isObject     = require('./_is-object')
  , ArrayBuffer  = require('./_global').ArrayBuffer
  , speciesConstructor = require('./_species-constructor')
  , $ArrayBuffer = buffer.ArrayBuffer
  , $DataView    = buffer.DataView
  , $isView      = $typed.ABV && ArrayBuffer.isView
  , $slice       = $ArrayBuffer.prototype.slice
  , VIEW         = $typed.VIEW
  , ARRAY_BUFFER = 'ArrayBuffer';

$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), {ArrayBuffer: $ArrayBuffer});

$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
  // 24.1.3.1 ArrayBuffer.isView(arg)
  isView: function isView(it){
    return $isView && $isView(it) || isObject(it) && VIEW in it;
  }
});

$export($export.P + $export.U + $export.F * require('./_fails')(function(){
  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
}), ARRAY_BUFFER, {
  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
  slice: function slice(start, end){
    if($slice !== undefined && end === undefined)return $slice.call(anObject(this), start); // FF fix
    var len    = anObject(this).byteLength
      , first  = toIndex(start, len)
      , final  = toIndex(end === undefined ? len : end, len)
      , result = new (speciesConstructor(this, $ArrayBuffer))(toLength(final - first))
      , viewS  = new $DataView(this)
      , viewT  = new $DataView(result)
      , index  = 0;
    while(first < final){
      viewT.setUint8(index++, viewS.getUint8(first++));
    } return result;
  }
});

require('./_set-species')(ARRAY_BUFFER);
},{"./_an-object":7,"./_export":32,"./_fails":34,"./_global":38,"./_is-object":49,"./_set-species":91,"./_species-constructor":95,"./_to-index":105,"./_to-length":108,"./_typed":113,"./_typed-buffer":112}],245:[function(require,module,exports){
var $export = require('./_export');
$export($export.G + $export.W + $export.F * !require('./_typed').ABV, {
  DataView: require('./_typed-buffer').DataView
});
},{"./_export":32,"./_typed":113,"./_typed-buffer":112}],246:[function(require,module,exports){
require('./_typed-array')('Float32', 4, function(init){
  return function Float32Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":111}],247:[function(require,module,exports){
require('./_typed-array')('Float64', 8, function(init){
  return function Float64Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":111}],248:[function(require,module,exports){
require('./_typed-array')('Int16', 2, function(init){
  return function Int16Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":111}],249:[function(require,module,exports){
require('./_typed-array')('Int32', 4, function(init){
  return function Int32Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":111}],250:[function(require,module,exports){
require('./_typed-array')('Int8', 1, function(init){
  return function Int8Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":111}],251:[function(require,module,exports){
require('./_typed-array')('Uint16', 2, function(init){
  return function Uint16Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":111}],252:[function(require,module,exports){
require('./_typed-array')('Uint32', 4, function(init){
  return function Uint32Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":111}],253:[function(require,module,exports){
require('./_typed-array')('Uint8', 1, function(init){
  return function Uint8Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":111}],254:[function(require,module,exports){
require('./_typed-array')('Uint8', 1, function(init){
  return function Uint8ClampedArray(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
}, true);
},{"./_typed-array":111}],255:[function(require,module,exports){
'use strict';
var each         = require('./_array-methods')(0)
  , redefine     = require('./_redefine')
  , meta         = require('./_meta')
  , assign       = require('./_object-assign')
  , weak         = require('./_collection-weak')
  , isObject     = require('./_is-object')
  , getWeak      = meta.getWeak
  , isExtensible = Object.isExtensible
  , uncaughtFrozenStore = weak.ufstore
  , tmp          = {}
  , InternalMap;

var wrapper = function(get){
  return function WeakMap(){
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key){
    if(isObject(key)){
      var data = getWeak(key);
      if(data === true)return uncaughtFrozenStore(this).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value){
    return weak.def(this, key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = require('./_collection')('WeakMap', wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
if(new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7){
  InternalMap = weak.getConstructor(wrapper);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function(key){
    var proto  = $WeakMap.prototype
      , method = proto[key];
    redefine(proto, key, function(a, b){
      // store frozen objects on internal weakmap shim
      if(isObject(a) && !isExtensible(a)){
        if(!this._f)this._f = new InternalMap;
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}
},{"./_array-methods":12,"./_collection":22,"./_collection-weak":21,"./_is-object":49,"./_meta":62,"./_object-assign":65,"./_redefine":87}],256:[function(require,module,exports){
'use strict';
var weak = require('./_collection-weak');

// 23.4 WeakSet Objects
require('./_collection')('WeakSet', function(get){
  return function WeakSet(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value){
    return weak.def(this, value, true);
  }
}, weak, false, true);
},{"./_collection":22,"./_collection-weak":21}],257:[function(require,module,exports){
'use strict';
// https://github.com/tc39/Array.prototype.includes
var $export   = require('./_export')
  , $includes = require('./_array-includes')(true);

$export($export.P, 'Array', {
  includes: function includes(el /*, fromIndex = 0 */){
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

require('./_add-to-unscopables')('includes');
},{"./_add-to-unscopables":5,"./_array-includes":11,"./_export":32}],258:[function(require,module,exports){
// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
var $export   = require('./_export')
  , microtask = require('./_microtask')()
  , process   = require('./_global').process
  , isNode    = require('./_cof')(process) == 'process';

$export($export.G, {
  asap: function asap(fn){
    var domain = isNode && process.domain;
    microtask(domain ? domain.bind(fn) : fn);
  }
});
},{"./_cof":18,"./_export":32,"./_global":38,"./_microtask":64}],259:[function(require,module,exports){
// https://github.com/ljharb/proposal-is-error
var $export = require('./_export')
  , cof     = require('./_cof');

$export($export.S, 'Error', {
  isError: function isError(it){
    return cof(it) === 'Error';
  }
});
},{"./_cof":18,"./_export":32}],260:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export  = require('./_export');

$export($export.P + $export.R, 'Map', {toJSON: require('./_collection-to-json')('Map')});
},{"./_collection-to-json":20,"./_export":32}],261:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  iaddh: function iaddh(x0, x1, y0, y1){
    var $x0 = x0 >>> 0
      , $x1 = x1 >>> 0
      , $y0 = y0 >>> 0;
    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
  }
});
},{"./_export":32}],262:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  imulh: function imulh(u, v){
    var UINT16 = 0xffff
      , $u = +u
      , $v = +v
      , u0 = $u & UINT16
      , v0 = $v & UINT16
      , u1 = $u >> 16
      , v1 = $v >> 16
      , t  = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
  }
});
},{"./_export":32}],263:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  isubh: function isubh(x0, x1, y0, y1){
    var $x0 = x0 >>> 0
      , $x1 = x1 >>> 0
      , $y0 = y0 >>> 0;
    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
  }
});
},{"./_export":32}],264:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  umulh: function umulh(u, v){
    var UINT16 = 0xffff
      , $u = +u
      , $v = +v
      , u0 = $u & UINT16
      , v0 = $v & UINT16
      , u1 = $u >>> 16
      , v1 = $v >>> 16
      , t  = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
  }
});
},{"./_export":32}],265:[function(require,module,exports){
'use strict';
var $export         = require('./_export')
  , toObject        = require('./_to-object')
  , aFunction       = require('./_a-function')
  , $defineProperty = require('./_object-dp');

// B.2.2.2 Object.prototype.__defineGetter__(P, getter)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __defineGetter__: function __defineGetter__(P, getter){
    $defineProperty.f(toObject(this), P, {get: aFunction(getter), enumerable: true, configurable: true});
  }
});
},{"./_a-function":3,"./_descriptors":28,"./_export":32,"./_object-dp":67,"./_object-forced-pam":69,"./_to-object":109}],266:[function(require,module,exports){
'use strict';
var $export         = require('./_export')
  , toObject        = require('./_to-object')
  , aFunction       = require('./_a-function')
  , $defineProperty = require('./_object-dp');

// B.2.2.3 Object.prototype.__defineSetter__(P, setter)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __defineSetter__: function __defineSetter__(P, setter){
    $defineProperty.f(toObject(this), P, {set: aFunction(setter), enumerable: true, configurable: true});
  }
});
},{"./_a-function":3,"./_descriptors":28,"./_export":32,"./_object-dp":67,"./_object-forced-pam":69,"./_to-object":109}],267:[function(require,module,exports){
// https://github.com/tc39/proposal-object-values-entries
var $export  = require('./_export')
  , $entries = require('./_object-to-array')(true);

$export($export.S, 'Object', {
  entries: function entries(it){
    return $entries(it);
  }
});
},{"./_export":32,"./_object-to-array":79}],268:[function(require,module,exports){
// https://github.com/tc39/proposal-object-getownpropertydescriptors
var $export        = require('./_export')
  , ownKeys        = require('./_own-keys')
  , toIObject      = require('./_to-iobject')
  , gOPD           = require('./_object-gopd')
  , createProperty = require('./_create-property');

$export($export.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object){
    var O       = toIObject(object)
      , getDesc = gOPD.f
      , keys    = ownKeys(O)
      , result  = {}
      , i       = 0
      , key;
    while(keys.length > i)createProperty(result, key = keys[i++], getDesc(O, key));
    return result;
  }
});
},{"./_create-property":24,"./_export":32,"./_object-gopd":70,"./_own-keys":80,"./_to-iobject":107}],269:[function(require,module,exports){
'use strict';
var $export                  = require('./_export')
  , toObject                 = require('./_to-object')
  , toPrimitive              = require('./_to-primitive')
  , getPrototypeOf           = require('./_object-gpo')
  , getOwnPropertyDescriptor = require('./_object-gopd').f;

// B.2.2.4 Object.prototype.__lookupGetter__(P)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __lookupGetter__: function __lookupGetter__(P){
    var O = toObject(this)
      , K = toPrimitive(P, true)
      , D;
    do {
      if(D = getOwnPropertyDescriptor(O, K))return D.get;
    } while(O = getPrototypeOf(O));
  }
});
},{"./_descriptors":28,"./_export":32,"./_object-forced-pam":69,"./_object-gopd":70,"./_object-gpo":74,"./_to-object":109,"./_to-primitive":110}],270:[function(require,module,exports){
'use strict';
var $export                  = require('./_export')
  , toObject                 = require('./_to-object')
  , toPrimitive              = require('./_to-primitive')
  , getPrototypeOf           = require('./_object-gpo')
  , getOwnPropertyDescriptor = require('./_object-gopd').f;

// B.2.2.5 Object.prototype.__lookupSetter__(P)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __lookupSetter__: function __lookupSetter__(P){
    var O = toObject(this)
      , K = toPrimitive(P, true)
      , D;
    do {
      if(D = getOwnPropertyDescriptor(O, K))return D.set;
    } while(O = getPrototypeOf(O));
  }
});
},{"./_descriptors":28,"./_export":32,"./_object-forced-pam":69,"./_object-gopd":70,"./_object-gpo":74,"./_to-object":109,"./_to-primitive":110}],271:[function(require,module,exports){
// https://github.com/tc39/proposal-object-values-entries
var $export = require('./_export')
  , $values = require('./_object-to-array')(false);

$export($export.S, 'Object', {
  values: function values(it){
    return $values(it);
  }
});
},{"./_export":32,"./_object-to-array":79}],272:[function(require,module,exports){
'use strict';
// https://github.com/zenparsing/es-observable
var $export     = require('./_export')
  , global      = require('./_global')
  , core        = require('./_core')
  , microtask   = require('./_microtask')()
  , OBSERVABLE  = require('./_wks')('observable')
  , aFunction   = require('./_a-function')
  , anObject    = require('./_an-object')
  , anInstance  = require('./_an-instance')
  , redefineAll = require('./_redefine-all')
  , hide        = require('./_hide')
  , forOf       = require('./_for-of')
  , RETURN      = forOf.RETURN;

var getMethod = function(fn){
  return fn == null ? undefined : aFunction(fn);
};

var cleanupSubscription = function(subscription){
  var cleanup = subscription._c;
  if(cleanup){
    subscription._c = undefined;
    cleanup();
  }
};

var subscriptionClosed = function(subscription){
  return subscription._o === undefined;
};

var closeSubscription = function(subscription){
  if(!subscriptionClosed(subscription)){
    subscription._o = undefined;
    cleanupSubscription(subscription);
  }
};

var Subscription = function(observer, subscriber){
  anObject(observer);
  this._c = undefined;
  this._o = observer;
  observer = new SubscriptionObserver(this);
  try {
    var cleanup      = subscriber(observer)
      , subscription = cleanup;
    if(cleanup != null){
      if(typeof cleanup.unsubscribe === 'function')cleanup = function(){ subscription.unsubscribe(); };
      else aFunction(cleanup);
      this._c = cleanup;
    }
  } catch(e){
    observer.error(e);
    return;
  } if(subscriptionClosed(this))cleanupSubscription(this);
};

Subscription.prototype = redefineAll({}, {
  unsubscribe: function unsubscribe(){ closeSubscription(this); }
});

var SubscriptionObserver = function(subscription){
  this._s = subscription;
};

SubscriptionObserver.prototype = redefineAll({}, {
  next: function next(value){
    var subscription = this._s;
    if(!subscriptionClosed(subscription)){
      var observer = subscription._o;
      try {
        var m = getMethod(observer.next);
        if(m)return m.call(observer, value);
      } catch(e){
        try {
          closeSubscription(subscription);
        } finally {
          throw e;
        }
      }
    }
  },
  error: function error(value){
    var subscription = this._s;
    if(subscriptionClosed(subscription))throw value;
    var observer = subscription._o;
    subscription._o = undefined;
    try {
      var m = getMethod(observer.error);
      if(!m)throw value;
      value = m.call(observer, value);
    } catch(e){
      try {
        cleanupSubscription(subscription);
      } finally {
        throw e;
      }
    } cleanupSubscription(subscription);
    return value;
  },
  complete: function complete(value){
    var subscription = this._s;
    if(!subscriptionClosed(subscription)){
      var observer = subscription._o;
      subscription._o = undefined;
      try {
        var m = getMethod(observer.complete);
        value = m ? m.call(observer, value) : undefined;
      } catch(e){
        try {
          cleanupSubscription(subscription);
        } finally {
          throw e;
        }
      } cleanupSubscription(subscription);
      return value;
    }
  }
});

var $Observable = function Observable(subscriber){
  anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
};

redefineAll($Observable.prototype, {
  subscribe: function subscribe(observer){
    return new Subscription(observer, this._f);
  },
  forEach: function forEach(fn){
    var that = this;
    return new (core.Promise || global.Promise)(function(resolve, reject){
      aFunction(fn);
      var subscription = that.subscribe({
        next : function(value){
          try {
            return fn(value);
          } catch(e){
            reject(e);
            subscription.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
    });
  }
});

redefineAll($Observable, {
  from: function from(x){
    var C = typeof this === 'function' ? this : $Observable;
    var method = getMethod(anObject(x)[OBSERVABLE]);
    if(method){
      var observable = anObject(method.call(x));
      return observable.constructor === C ? observable : new C(function(observer){
        return observable.subscribe(observer);
      });
    }
    return new C(function(observer){
      var done = false;
      microtask(function(){
        if(!done){
          try {
            if(forOf(x, false, function(it){
              observer.next(it);
              if(done)return RETURN;
            }) === RETURN)return;
          } catch(e){
            if(done)throw e;
            observer.error(e);
            return;
          } observer.complete();
        }
      });
      return function(){ done = true; };
    });
  },
  of: function of(){
    for(var i = 0, l = arguments.length, items = Array(l); i < l;)items[i] = arguments[i++];
    return new (typeof this === 'function' ? this : $Observable)(function(observer){
      var done = false;
      microtask(function(){
        if(!done){
          for(var i = 0; i < items.length; ++i){
            observer.next(items[i]);
            if(done)return;
          } observer.complete();
        }
      });
      return function(){ done = true; };
    });
  }
});

hide($Observable.prototype, OBSERVABLE, function(){ return this; });

$export($export.G, {Observable: $Observable});

require('./_set-species')('Observable');
},{"./_a-function":3,"./_an-instance":6,"./_an-object":7,"./_core":23,"./_export":32,"./_for-of":37,"./_global":38,"./_hide":40,"./_microtask":64,"./_redefine-all":86,"./_set-species":91,"./_wks":117}],273:[function(require,module,exports){
var metadata                  = require('./_metadata')
  , anObject                  = require('./_an-object')
  , toMetaKey                 = metadata.key
  , ordinaryDefineOwnMetadata = metadata.set;

metadata.exp({defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey){
  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
}});
},{"./_an-object":7,"./_metadata":63}],274:[function(require,module,exports){
var metadata               = require('./_metadata')
  , anObject               = require('./_an-object')
  , toMetaKey              = metadata.key
  , getOrCreateMetadataMap = metadata.map
  , store                  = metadata.store;

metadata.exp({deleteMetadata: function deleteMetadata(metadataKey, target /*, targetKey */){
  var targetKey   = arguments.length < 3 ? undefined : toMetaKey(arguments[2])
    , metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
  if(metadataMap === undefined || !metadataMap['delete'](metadataKey))return false;
  if(metadataMap.size)return true;
  var targetMetadata = store.get(target);
  targetMetadata['delete'](targetKey);
  return !!targetMetadata.size || store['delete'](target);
}});
},{"./_an-object":7,"./_metadata":63}],275:[function(require,module,exports){
var Set                     = require('./es6.set')
  , from                    = require('./_array-from-iterable')
  , metadata                = require('./_metadata')
  , anObject                = require('./_an-object')
  , getPrototypeOf          = require('./_object-gpo')
  , ordinaryOwnMetadataKeys = metadata.keys
  , toMetaKey               = metadata.key;

var ordinaryMetadataKeys = function(O, P){
  var oKeys  = ordinaryOwnMetadataKeys(O, P)
    , parent = getPrototypeOf(O);
  if(parent === null)return oKeys;
  var pKeys  = ordinaryMetadataKeys(parent, P);
  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
};

metadata.exp({getMetadataKeys: function getMetadataKeys(target /*, targetKey */){
  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
}});
},{"./_an-object":7,"./_array-from-iterable":10,"./_metadata":63,"./_object-gpo":74,"./es6.set":220}],276:[function(require,module,exports){
var metadata               = require('./_metadata')
  , anObject               = require('./_an-object')
  , getPrototypeOf         = require('./_object-gpo')
  , ordinaryHasOwnMetadata = metadata.has
  , ordinaryGetOwnMetadata = metadata.get
  , toMetaKey              = metadata.key;

var ordinaryGetMetadata = function(MetadataKey, O, P){
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if(hasOwn)return ordinaryGetOwnMetadata(MetadataKey, O, P);
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
};

metadata.exp({getMetadata: function getMetadata(metadataKey, target /*, targetKey */){
  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
}});
},{"./_an-object":7,"./_metadata":63,"./_object-gpo":74}],277:[function(require,module,exports){
var metadata                = require('./_metadata')
  , anObject                = require('./_an-object')
  , ordinaryOwnMetadataKeys = metadata.keys
  , toMetaKey               = metadata.key;

metadata.exp({getOwnMetadataKeys: function getOwnMetadataKeys(target /*, targetKey */){
  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
}});
},{"./_an-object":7,"./_metadata":63}],278:[function(require,module,exports){
var metadata               = require('./_metadata')
  , anObject               = require('./_an-object')
  , ordinaryGetOwnMetadata = metadata.get
  , toMetaKey              = metadata.key;

metadata.exp({getOwnMetadata: function getOwnMetadata(metadataKey, target /*, targetKey */){
  return ordinaryGetOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
}});
},{"./_an-object":7,"./_metadata":63}],279:[function(require,module,exports){
var metadata               = require('./_metadata')
  , anObject               = require('./_an-object')
  , getPrototypeOf         = require('./_object-gpo')
  , ordinaryHasOwnMetadata = metadata.has
  , toMetaKey              = metadata.key;

var ordinaryHasMetadata = function(MetadataKey, O, P){
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if(hasOwn)return true;
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
};

metadata.exp({hasMetadata: function hasMetadata(metadataKey, target /*, targetKey */){
  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
}});
},{"./_an-object":7,"./_metadata":63,"./_object-gpo":74}],280:[function(require,module,exports){
var metadata               = require('./_metadata')
  , anObject               = require('./_an-object')
  , ordinaryHasOwnMetadata = metadata.has
  , toMetaKey              = metadata.key;

metadata.exp({hasOwnMetadata: function hasOwnMetadata(metadataKey, target /*, targetKey */){
  return ordinaryHasOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
}});
},{"./_an-object":7,"./_metadata":63}],281:[function(require,module,exports){
var metadata                  = require('./_metadata')
  , anObject                  = require('./_an-object')
  , aFunction                 = require('./_a-function')
  , toMetaKey                 = metadata.key
  , ordinaryDefineOwnMetadata = metadata.set;

metadata.exp({metadata: function metadata(metadataKey, metadataValue){
  return function decorator(target, targetKey){
    ordinaryDefineOwnMetadata(
      metadataKey, metadataValue,
      (targetKey !== undefined ? anObject : aFunction)(target),
      toMetaKey(targetKey)
    );
  };
}});
},{"./_a-function":3,"./_an-object":7,"./_metadata":63}],282:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export  = require('./_export');

$export($export.P + $export.R, 'Set', {toJSON: require('./_collection-to-json')('Set')});
},{"./_collection-to-json":20,"./_export":32}],283:[function(require,module,exports){
'use strict';
// https://github.com/mathiasbynens/String.prototype.at
var $export = require('./_export')
  , $at     = require('./_string-at')(true);

$export($export.P, 'String', {
  at: function at(pos){
    return $at(this, pos);
  }
});
},{"./_export":32,"./_string-at":97}],284:[function(require,module,exports){
'use strict';
// https://tc39.github.io/String.prototype.matchAll/
var $export     = require('./_export')
  , defined     = require('./_defined')
  , toLength    = require('./_to-length')
  , isRegExp    = require('./_is-regexp')
  , getFlags    = require('./_flags')
  , RegExpProto = RegExp.prototype;

var $RegExpStringIterator = function(regexp, string){
  this._r = regexp;
  this._s = string;
};

require('./_iter-create')($RegExpStringIterator, 'RegExp String', function next(){
  var match = this._r.exec(this._s);
  return {value: match, done: match === null};
});

$export($export.P, 'String', {
  matchAll: function matchAll(regexp){
    defined(this);
    if(!isRegExp(regexp))throw TypeError(regexp + ' is not a regexp!');
    var S     = String(this)
      , flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp)
      , rx    = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
    rx.lastIndex = toLength(regexp.lastIndex);
    return new $RegExpStringIterator(rx, S);
  }
});
},{"./_defined":27,"./_export":32,"./_flags":36,"./_is-regexp":50,"./_iter-create":52,"./_to-length":108}],285:[function(require,module,exports){
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
var $export = require('./_export')
  , $pad    = require('./_string-pad');

$export($export.P, 'String', {
  padEnd: function padEnd(maxLength /*, fillString = ' ' */){
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
  }
});
},{"./_export":32,"./_string-pad":100}],286:[function(require,module,exports){
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
var $export = require('./_export')
  , $pad    = require('./_string-pad');

$export($export.P, 'String', {
  padStart: function padStart(maxLength /*, fillString = ' ' */){
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
  }
});
},{"./_export":32,"./_string-pad":100}],287:[function(require,module,exports){
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
require('./_string-trim')('trimLeft', function($trim){
  return function trimLeft(){
    return $trim(this, 1);
  };
}, 'trimStart');
},{"./_string-trim":102}],288:[function(require,module,exports){
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
require('./_string-trim')('trimRight', function($trim){
  return function trimRight(){
    return $trim(this, 2);
  };
}, 'trimEnd');
},{"./_string-trim":102}],289:[function(require,module,exports){
require('./_wks-define')('asyncIterator');
},{"./_wks-define":115}],290:[function(require,module,exports){
require('./_wks-define')('observable');
},{"./_wks-define":115}],291:[function(require,module,exports){
// https://github.com/ljharb/proposal-global
var $export = require('./_export');

$export($export.S, 'System', {global: require('./_global')});
},{"./_export":32,"./_global":38}],292:[function(require,module,exports){
var $iterators    = require('./es6.array.iterator')
  , redefine      = require('./_redefine')
  , global        = require('./_global')
  , hide          = require('./_hide')
  , Iterators     = require('./_iterators')
  , wks           = require('./_wks')
  , ITERATOR      = wks('iterator')
  , TO_STRING_TAG = wks('toStringTag')
  , ArrayValues   = Iterators.Array;

for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
  var NAME       = collections[i]
    , Collection = global[NAME]
    , proto      = Collection && Collection.prototype
    , key;
  if(proto){
    if(!proto[ITERATOR])hide(proto, ITERATOR, ArrayValues);
    if(!proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    for(key in $iterators)if(!proto[key])redefine(proto, key, $iterators[key], true);
  }
}
},{"./_global":38,"./_hide":40,"./_iterators":56,"./_redefine":87,"./_wks":117,"./es6.array.iterator":130}],293:[function(require,module,exports){
var $export = require('./_export')
  , $task   = require('./_task');
$export($export.G + $export.B, {
  setImmediate:   $task.set,
  clearImmediate: $task.clear
});
},{"./_export":32,"./_task":104}],294:[function(require,module,exports){
// ie9- setTimeout & setInterval additional parameters fix
var global     = require('./_global')
  , $export    = require('./_export')
  , invoke     = require('./_invoke')
  , partial    = require('./_partial')
  , navigator  = global.navigator
  , MSIE       = !!navigator && /MSIE .\./.test(navigator.userAgent); // <- dirty ie9- check
var wrap = function(set){
  return MSIE ? function(fn, time /*, ...args */){
    return set(invoke(
      partial,
      [].slice.call(arguments, 2),
      typeof fn == 'function' ? fn : Function(fn)
    ), time);
  } : set;
};
$export($export.G + $export.B + $export.F * MSIE, {
  setTimeout:  wrap(global.setTimeout),
  setInterval: wrap(global.setInterval)
});
},{"./_export":32,"./_global":38,"./_invoke":44,"./_partial":83}],295:[function(require,module,exports){
require('./modules/es6.symbol');
require('./modules/es6.object.create');
require('./modules/es6.object.define-property');
require('./modules/es6.object.define-properties');
require('./modules/es6.object.get-own-property-descriptor');
require('./modules/es6.object.get-prototype-of');
require('./modules/es6.object.keys');
require('./modules/es6.object.get-own-property-names');
require('./modules/es6.object.freeze');
require('./modules/es6.object.seal');
require('./modules/es6.object.prevent-extensions');
require('./modules/es6.object.is-frozen');
require('./modules/es6.object.is-sealed');
require('./modules/es6.object.is-extensible');
require('./modules/es6.object.assign');
require('./modules/es6.object.is');
require('./modules/es6.object.set-prototype-of');
require('./modules/es6.object.to-string');
require('./modules/es6.function.bind');
require('./modules/es6.function.name');
require('./modules/es6.function.has-instance');
require('./modules/es6.parse-int');
require('./modules/es6.parse-float');
require('./modules/es6.number.constructor');
require('./modules/es6.number.to-fixed');
require('./modules/es6.number.to-precision');
require('./modules/es6.number.epsilon');
require('./modules/es6.number.is-finite');
require('./modules/es6.number.is-integer');
require('./modules/es6.number.is-nan');
require('./modules/es6.number.is-safe-integer');
require('./modules/es6.number.max-safe-integer');
require('./modules/es6.number.min-safe-integer');
require('./modules/es6.number.parse-float');
require('./modules/es6.number.parse-int');
require('./modules/es6.math.acosh');
require('./modules/es6.math.asinh');
require('./modules/es6.math.atanh');
require('./modules/es6.math.cbrt');
require('./modules/es6.math.clz32');
require('./modules/es6.math.cosh');
require('./modules/es6.math.expm1');
require('./modules/es6.math.fround');
require('./modules/es6.math.hypot');
require('./modules/es6.math.imul');
require('./modules/es6.math.log10');
require('./modules/es6.math.log1p');
require('./modules/es6.math.log2');
require('./modules/es6.math.sign');
require('./modules/es6.math.sinh');
require('./modules/es6.math.tanh');
require('./modules/es6.math.trunc');
require('./modules/es6.string.from-code-point');
require('./modules/es6.string.raw');
require('./modules/es6.string.trim');
require('./modules/es6.string.iterator');
require('./modules/es6.string.code-point-at');
require('./modules/es6.string.ends-with');
require('./modules/es6.string.includes');
require('./modules/es6.string.repeat');
require('./modules/es6.string.starts-with');
require('./modules/es6.string.anchor');
require('./modules/es6.string.big');
require('./modules/es6.string.blink');
require('./modules/es6.string.bold');
require('./modules/es6.string.fixed');
require('./modules/es6.string.fontcolor');
require('./modules/es6.string.fontsize');
require('./modules/es6.string.italics');
require('./modules/es6.string.link');
require('./modules/es6.string.small');
require('./modules/es6.string.strike');
require('./modules/es6.string.sub');
require('./modules/es6.string.sup');
require('./modules/es6.date.now');
require('./modules/es6.date.to-json');
require('./modules/es6.date.to-iso-string');
require('./modules/es6.date.to-string');
require('./modules/es6.date.to-primitive');
require('./modules/es6.array.is-array');
require('./modules/es6.array.from');
require('./modules/es6.array.of');
require('./modules/es6.array.join');
require('./modules/es6.array.slice');
require('./modules/es6.array.sort');
require('./modules/es6.array.for-each');
require('./modules/es6.array.map');
require('./modules/es6.array.filter');
require('./modules/es6.array.some');
require('./modules/es6.array.every');
require('./modules/es6.array.reduce');
require('./modules/es6.array.reduce-right');
require('./modules/es6.array.index-of');
require('./modules/es6.array.last-index-of');
require('./modules/es6.array.copy-within');
require('./modules/es6.array.fill');
require('./modules/es6.array.find');
require('./modules/es6.array.find-index');
require('./modules/es6.array.species');
require('./modules/es6.array.iterator');
require('./modules/es6.regexp.constructor');
require('./modules/es6.regexp.to-string');
require('./modules/es6.regexp.flags');
require('./modules/es6.regexp.match');
require('./modules/es6.regexp.replace');
require('./modules/es6.regexp.search');
require('./modules/es6.regexp.split');
require('./modules/es6.promise');
require('./modules/es6.map');
require('./modules/es6.set');
require('./modules/es6.weak-map');
require('./modules/es6.weak-set');
require('./modules/es6.typed.array-buffer');
require('./modules/es6.typed.data-view');
require('./modules/es6.typed.int8-array');
require('./modules/es6.typed.uint8-array');
require('./modules/es6.typed.uint8-clamped-array');
require('./modules/es6.typed.int16-array');
require('./modules/es6.typed.uint16-array');
require('./modules/es6.typed.int32-array');
require('./modules/es6.typed.uint32-array');
require('./modules/es6.typed.float32-array');
require('./modules/es6.typed.float64-array');
require('./modules/es6.reflect.apply');
require('./modules/es6.reflect.construct');
require('./modules/es6.reflect.define-property');
require('./modules/es6.reflect.delete-property');
require('./modules/es6.reflect.enumerate');
require('./modules/es6.reflect.get');
require('./modules/es6.reflect.get-own-property-descriptor');
require('./modules/es6.reflect.get-prototype-of');
require('./modules/es6.reflect.has');
require('./modules/es6.reflect.is-extensible');
require('./modules/es6.reflect.own-keys');
require('./modules/es6.reflect.prevent-extensions');
require('./modules/es6.reflect.set');
require('./modules/es6.reflect.set-prototype-of');
require('./modules/es7.array.includes');
require('./modules/es7.string.at');
require('./modules/es7.string.pad-start');
require('./modules/es7.string.pad-end');
require('./modules/es7.string.trim-left');
require('./modules/es7.string.trim-right');
require('./modules/es7.string.match-all');
require('./modules/es7.symbol.async-iterator');
require('./modules/es7.symbol.observable');
require('./modules/es7.object.get-own-property-descriptors');
require('./modules/es7.object.values');
require('./modules/es7.object.entries');
require('./modules/es7.object.define-getter');
require('./modules/es7.object.define-setter');
require('./modules/es7.object.lookup-getter');
require('./modules/es7.object.lookup-setter');
require('./modules/es7.map.to-json');
require('./modules/es7.set.to-json');
require('./modules/es7.system.global');
require('./modules/es7.error.is-error');
require('./modules/es7.math.iaddh');
require('./modules/es7.math.isubh');
require('./modules/es7.math.imulh');
require('./modules/es7.math.umulh');
require('./modules/es7.reflect.define-metadata');
require('./modules/es7.reflect.delete-metadata');
require('./modules/es7.reflect.get-metadata');
require('./modules/es7.reflect.get-metadata-keys');
require('./modules/es7.reflect.get-own-metadata');
require('./modules/es7.reflect.get-own-metadata-keys');
require('./modules/es7.reflect.has-metadata');
require('./modules/es7.reflect.has-own-metadata');
require('./modules/es7.reflect.metadata');
require('./modules/es7.asap');
require('./modules/es7.observable');
require('./modules/web.timers');
require('./modules/web.immediate');
require('./modules/web.dom.iterable');
module.exports = require('./modules/_core');
},{"./modules/_core":23,"./modules/es6.array.copy-within":120,"./modules/es6.array.every":121,"./modules/es6.array.fill":122,"./modules/es6.array.filter":123,"./modules/es6.array.find":125,"./modules/es6.array.find-index":124,"./modules/es6.array.for-each":126,"./modules/es6.array.from":127,"./modules/es6.array.index-of":128,"./modules/es6.array.is-array":129,"./modules/es6.array.iterator":130,"./modules/es6.array.join":131,"./modules/es6.array.last-index-of":132,"./modules/es6.array.map":133,"./modules/es6.array.of":134,"./modules/es6.array.reduce":136,"./modules/es6.array.reduce-right":135,"./modules/es6.array.slice":137,"./modules/es6.array.some":138,"./modules/es6.array.sort":139,"./modules/es6.array.species":140,"./modules/es6.date.now":141,"./modules/es6.date.to-iso-string":142,"./modules/es6.date.to-json":143,"./modules/es6.date.to-primitive":144,"./modules/es6.date.to-string":145,"./modules/es6.function.bind":146,"./modules/es6.function.has-instance":147,"./modules/es6.function.name":148,"./modules/es6.map":149,"./modules/es6.math.acosh":150,"./modules/es6.math.asinh":151,"./modules/es6.math.atanh":152,"./modules/es6.math.cbrt":153,"./modules/es6.math.clz32":154,"./modules/es6.math.cosh":155,"./modules/es6.math.expm1":156,"./modules/es6.math.fround":157,"./modules/es6.math.hypot":158,"./modules/es6.math.imul":159,"./modules/es6.math.log10":160,"./modules/es6.math.log1p":161,"./modules/es6.math.log2":162,"./modules/es6.math.sign":163,"./modules/es6.math.sinh":164,"./modules/es6.math.tanh":165,"./modules/es6.math.trunc":166,"./modules/es6.number.constructor":167,"./modules/es6.number.epsilon":168,"./modules/es6.number.is-finite":169,"./modules/es6.number.is-integer":170,"./modules/es6.number.is-nan":171,"./modules/es6.number.is-safe-integer":172,"./modules/es6.number.max-safe-integer":173,"./modules/es6.number.min-safe-integer":174,"./modules/es6.number.parse-float":175,"./modules/es6.number.parse-int":176,"./modules/es6.number.to-fixed":177,"./modules/es6.number.to-precision":178,"./modules/es6.object.assign":179,"./modules/es6.object.create":180,"./modules/es6.object.define-properties":181,"./modules/es6.object.define-property":182,"./modules/es6.object.freeze":183,"./modules/es6.object.get-own-property-descriptor":184,"./modules/es6.object.get-own-property-names":185,"./modules/es6.object.get-prototype-of":186,"./modules/es6.object.is":190,"./modules/es6.object.is-extensible":187,"./modules/es6.object.is-frozen":188,"./modules/es6.object.is-sealed":189,"./modules/es6.object.keys":191,"./modules/es6.object.prevent-extensions":192,"./modules/es6.object.seal":193,"./modules/es6.object.set-prototype-of":194,"./modules/es6.object.to-string":195,"./modules/es6.parse-float":196,"./modules/es6.parse-int":197,"./modules/es6.promise":198,"./modules/es6.reflect.apply":199,"./modules/es6.reflect.construct":200,"./modules/es6.reflect.define-property":201,"./modules/es6.reflect.delete-property":202,"./modules/es6.reflect.enumerate":203,"./modules/es6.reflect.get":206,"./modules/es6.reflect.get-own-property-descriptor":204,"./modules/es6.reflect.get-prototype-of":205,"./modules/es6.reflect.has":207,"./modules/es6.reflect.is-extensible":208,"./modules/es6.reflect.own-keys":209,"./modules/es6.reflect.prevent-extensions":210,"./modules/es6.reflect.set":212,"./modules/es6.reflect.set-prototype-of":211,"./modules/es6.regexp.constructor":213,"./modules/es6.regexp.flags":214,"./modules/es6.regexp.match":215,"./modules/es6.regexp.replace":216,"./modules/es6.regexp.search":217,"./modules/es6.regexp.split":218,"./modules/es6.regexp.to-string":219,"./modules/es6.set":220,"./modules/es6.string.anchor":221,"./modules/es6.string.big":222,"./modules/es6.string.blink":223,"./modules/es6.string.bold":224,"./modules/es6.string.code-point-at":225,"./modules/es6.string.ends-with":226,"./modules/es6.string.fixed":227,"./modules/es6.string.fontcolor":228,"./modules/es6.string.fontsize":229,"./modules/es6.string.from-code-point":230,"./modules/es6.string.includes":231,"./modules/es6.string.italics":232,"./modules/es6.string.iterator":233,"./modules/es6.string.link":234,"./modules/es6.string.raw":235,"./modules/es6.string.repeat":236,"./modules/es6.string.small":237,"./modules/es6.string.starts-with":238,"./modules/es6.string.strike":239,"./modules/es6.string.sub":240,"./modules/es6.string.sup":241,"./modules/es6.string.trim":242,"./modules/es6.symbol":243,"./modules/es6.typed.array-buffer":244,"./modules/es6.typed.data-view":245,"./modules/es6.typed.float32-array":246,"./modules/es6.typed.float64-array":247,"./modules/es6.typed.int16-array":248,"./modules/es6.typed.int32-array":249,"./modules/es6.typed.int8-array":250,"./modules/es6.typed.uint16-array":251,"./modules/es6.typed.uint32-array":252,"./modules/es6.typed.uint8-array":253,"./modules/es6.typed.uint8-clamped-array":254,"./modules/es6.weak-map":255,"./modules/es6.weak-set":256,"./modules/es7.array.includes":257,"./modules/es7.asap":258,"./modules/es7.error.is-error":259,"./modules/es7.map.to-json":260,"./modules/es7.math.iaddh":261,"./modules/es7.math.imulh":262,"./modules/es7.math.isubh":263,"./modules/es7.math.umulh":264,"./modules/es7.object.define-getter":265,"./modules/es7.object.define-setter":266,"./modules/es7.object.entries":267,"./modules/es7.object.get-own-property-descriptors":268,"./modules/es7.object.lookup-getter":269,"./modules/es7.object.lookup-setter":270,"./modules/es7.object.values":271,"./modules/es7.observable":272,"./modules/es7.reflect.define-metadata":273,"./modules/es7.reflect.delete-metadata":274,"./modules/es7.reflect.get-metadata":276,"./modules/es7.reflect.get-metadata-keys":275,"./modules/es7.reflect.get-own-metadata":278,"./modules/es7.reflect.get-own-metadata-keys":277,"./modules/es7.reflect.has-metadata":279,"./modules/es7.reflect.has-own-metadata":280,"./modules/es7.reflect.metadata":281,"./modules/es7.set.to-json":282,"./modules/es7.string.at":283,"./modules/es7.string.match-all":284,"./modules/es7.string.pad-end":285,"./modules/es7.string.pad-start":286,"./modules/es7.string.trim-left":287,"./modules/es7.string.trim-right":288,"./modules/es7.symbol.async-iterator":289,"./modules/es7.symbol.observable":290,"./modules/es7.system.global":291,"./modules/web.dom.iterable":292,"./modules/web.immediate":293,"./modules/web.timers":294}],296:[function(require,module,exports){
(function (process,global){
/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
 * additional grant of patent rights can be found in the PATENTS file in
 * the same directory.
 */

!(function(global) {
  "use strict";

  var hasOwn = Object.prototype.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var iteratorSymbol =
    typeof Symbol === "function" && Symbol.iterator || "@@iterator";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided, then outerFn.prototype instanceof Generator.
    var generator = Object.create((outerFn || Generator).prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `value instanceof AwaitArgument` to determine if the yielded value is
  // meant to be awaited. Some may consider the name of this method too
  // cutesy, but they are curmudgeons.
  runtime.awrap = function(arg) {
    return new AwaitArgument(arg);
  };

  function AwaitArgument(arg) {
    this.arg = arg;
  }

  function AsyncIterator(generator) {
    // This invoke function is written in a style that assumes some
    // calling function (or Promise) will handle exceptions.
    function invoke(method, arg) {
      var result = generator[method](arg);
      var value = result.value;
      return value instanceof AwaitArgument
        ? Promise.resolve(value.arg).then(invokeNext, invokeThrow)
        : Promise.resolve(value).then(function(unwrapped) {
            // When a yielded Promise is resolved, its final value becomes
            // the .value of the Promise<{value,done}> result for the
            // current iteration. If the Promise is rejected, however, the
            // result for this iteration will be rejected with the same
            // reason. Note that rejections of yielded Promises are not
            // thrown back into the generator function, as is the case
            // when an awaited Promise is rejected. This difference in
            // behavior between yield and await is important, because it
            // allows the consumer to decide what to do with the yielded
            // rejection (swallow it and continue, manually .throw it back
            // into the generator, abandon iteration, whatever). With
            // await, by contrast, there is no opportunity to examine the
            // rejection reason outside the generator function, so the
            // only option is to throw it from the await expression, and
            // let the generator function handle the exception.
            result.value = unwrapped;
            return result;
          });
    }

    if (typeof process === "object" && process.domain) {
      invoke = process.domain.bind(invoke);
    }

    var invokeNext = invoke.bind(generator, "next");
    var invokeThrow = invoke.bind(generator, "throw");
    var invokeReturn = invoke.bind(generator, "return");
    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return invoke(method, arg);
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : new Promise(function (resolve) {
          resolve(callInvokeWithMethodAndArg());
        });
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          if (method === "return" ||
              (method === "throw" && delegate.iterator[method] === undefined)) {
            // A return or throw (when the delegate iterator has no throw
            // method) always terminates the yield* loop.
            context.delegate = null;

            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            var returnMethod = delegate.iterator["return"];
            if (returnMethod) {
              var record = tryCatch(returnMethod, delegate.iterator, arg);
              if (record.type === "throw") {
                // If the return method threw an exception, let that
                // exception prevail over the original return or throw.
                method = "throw";
                arg = record.arg;
                continue;
              }
            }

            if (method === "return") {
              // Continue with the outer return, now that the delegate
              // iterator has been terminated.
              continue;
            }
          }

          var record = tryCatch(
            delegate.iterator[method],
            delegate.iterator,
            arg
          );

          if (record.type === "throw") {
            context.delegate = null;

            // Like returning generator.throw(uncaught), but without the
            // overhead of an extra function call.
            method = "throw";
            arg = record.arg;
            continue;
          }

          // Delegate generator ran and handled its own exceptions so
          // regardless of what the method was, we continue as if it is
          // "next" with an undefined arg.
          method = "next";
          arg = undefined;

          var info = record.arg;
          if (info.done) {
            context[delegate.resultName] = info.value;
            context.next = delegate.nextLoc;
          } else {
            state = GenStateSuspendedYield;
            return info;
          }

          context.delegate = null;
        }

        if (method === "next") {
          context._sent = arg;

          if (state === GenStateSuspendedYield) {
            context.sent = arg;
          } else {
            context.sent = undefined;
          }
        } else if (method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw arg;
          }

          if (context.dispatchException(arg)) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            method = "next";
            arg = undefined;
          }

        } else if (method === "return") {
          context.abrupt("return", arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          var info = {
            value: record.arg,
            done: context.done
          };

          if (record.arg === ContinueSentinel) {
            if (context.delegate && method === "next") {
              // Deliberately forget the last sent value so that we don't
              // accidentally pass it on to the delegate.
              arg = undefined;
            }
          } else {
            return info;
          }

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(arg) call above.
          method = "throw";
          arg = record.arg;
        }
      }
    };
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      this.sent = undefined;
      this.done = false;
      this.delegate = null;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;
        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.next = finallyEntry.finallyLoc;
      } else {
        this.complete(record);
      }

      return ContinueSentinel;
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = record.arg;
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      return ContinueSentinel;
    }
  };
})(
  // Among the various tricks for obtaining a reference to the global
  // object, this seems to be the most reliable technique that does not
  // use indirect eval (which violates Content Security Policy).
  typeof global === "object" ? global :
  typeof window === "object" ? window :
  typeof self === "object" ? self : this
);

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":298}],297:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],298:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],299:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _createFactoryFunction = require('./utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _httpInterceptors = require('./services/http-interceptors.js');

var _httpInterceptors2 = _interopRequireDefault(_httpInterceptors);

var _videoEvents = require('../constants/video.events.js');

var _videoEvents2 = _interopRequireDefault(_videoEvents);

var _stateEvents = require('../constants/state.events.js');

var _stateEvents2 = _interopRequireDefault(_stateEvents);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var stateEvents = new _stateEvents2.default();

var AppConfig = function () {
    function AppConfig($stateProvider, $urlRouterProvider, $locationProvider, $compileProvider, $httpProvider, $sceDelegateProvider, $provide, iVXjs) {
        _classCallCheck(this, AppConfig);

        if (!iVXjs.config) return;

        this.createStates($stateProvider, iVXjs.config.states);

        var experience = iVXjs.experience;
        var _iVXjs$config$templat = iVXjs.config.templates,
            templates = _iVXjs$config$templat === undefined ? [] : _iVXjs$config$templat;

        var defaultStateID = iVXjs.rules(iVXjs.config.defaultState);

        var _iVXjs$config$states$ = iVXjs.config.states.find(function (state) {
            return state.id === defaultStateID;
        }),
            url = _iVXjs$config$states$.url;

        if (experience.whiteList) {
            $sceDelegateProvider.resourceUrlWhitelist(experience.whiteList);
        }

        $urlRouterProvider.otherwise(function ($injector, $location) {
            var currentUrl = $location.url();

            if (!currentUrl || currentUrl.length <= 0) {
                return url;
            }

            iVXjs.Bus.emit(stateEvents.NOT_FOUND, currentUrl);

            var pageNotFoundStateId = iVXjs.rules(iVXjs.config.pageNotFoundState);
            var pageNotFoundUrl = void 0;

            var pageNotFoundState = iVXjs.config.states.find(function (state) {
                return state.id === pageNotFoundStateId;
            });

            if (pageNotFoundState) {
                pageNotFoundUrl = pageNotFoundState.url;
            }

            return pageNotFoundUrl ? pageNotFoundUrl : url;
        });
        this.create$httpInjectors($httpProvider, $provide);
    }

    _createClass(AppConfig, [{
        key: 'create$httpInjectors',
        value: function create$httpInjectors($httpProvider, $provide) {
            $provide.factory("iVXjsHttpInterceptors", _httpInterceptors2.default);

            $httpProvider.interceptors.push("iVXjsHttpInterceptors");
        }
    }, {
        key: 'createStates',
        value: function createStates($stateProvider) {
            var states = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

            states.forEach(function (state, index) {
                var type = state.type,
                    id = state.id,
                    url = state.url,
                    _state$onEnter = state.onEnter,
                    onEnter = _state$onEnter === undefined ? [] : _state$onEnter,
                    _state$onExit = state.onExit,
                    onExit = _state$onExit === undefined ? [] : _state$onExit;

                var videoEventNames = new _videoEvents2.default();

                $stateProvider.state(id, {
                    url: url,
                    data: state,
                    template: '<ivxjs-' + type + '-state class="hide"></ivxjs-' + type + '-state>',
                    onEnter: ['$rootScope', '$state', 'iVXjs', 'ivxjs.actions', 'ivxjs.bus', 'ivxjs.modules.audio.experience', 'ivxjs.modules.audio', function ($rootScope, $state, iVXjs, iVXjsActions, iVXjsBus, iVXjsAudioExperience, iVXjsAudio) {
                        if (!iVXjsAudioExperience.eventsAdded) {
                            iVXjsAudioExperience.addEventListeners(iVXjsBus);
                            iVXjsAudio.addEventListeners(iVXjsBus);
                            iVXjs.experience.Bus = iVXjsBus;
                            iVXjsAudioExperience.eventsAdded = true;
                            iVXjsAudio.eventsAdded = true;
                            iVXjs.experience.audio = iVXjsAudioExperience;
                            iVXjs.experience.actions = iVXjsActions;
                        }

                        $rootScope.stateID = id;

                        iVXjsActions.resolveActions(onEnter, function () {});
                    }],
                    onExit: ['$rootScope', 'ivxjs.actions', 'iVXjs', 'ivxjs.bus', function ($rootScope, iVXjsActions, iVXjs, iVXjsBus) {
                        iVXjsBus.emit(videoEventNames.DISPOSE);
                        iVXjsActions.resolveActions(onExit, function () {});
                    }]
                });
            });
        }
    }]);

    return AppConfig;
}();

AppConfig.$inject = ['$stateProvider', '$urlRouterProvider', '$locationProvider', '$compileProvider', '$httpProvider', '$sceDelegateProvider', '$provide', 'iVXjs'];

exports.default = (0, _createFactoryFunction2.default)(AppConfig);

},{"../constants/state.events.js":376,"../constants/video.events.js":378,"./services/http-interceptors.js":353,"./utilities/create-factory-function.js":357}],300:[function(require,module,exports){
'use strict';

var _containerSetup = require('./utilities/container-setup.js');

var _containerSetup2 = _interopRequireDefault(_containerSetup);

var _stringParsers = require('./filters/string-parsers.js');

var _typeParsers = require('../utilities/type-parsers.js');

var _angularEvents = require('../constants/angular.events.js');

var _angularEvents2 = _interopRequireDefault(_angularEvents);

var _iVXjsConfigEvents = require('../constants/iVXjs.config.events.js');

var _iVXjsConfigEvents2 = _interopRequireDefault(_iVXjsConfigEvents);

var _registeredConstants = require('../constants/registered-constants.js');

var _registeredConstants2 = _interopRequireDefault(_registeredConstants);

var _app = require('../core/app.js');

var _eventStore = require('../core/event-store.js');

var _eventStore2 = _interopRequireDefault(_eventStore);

var _ivxjsSetup = require('./providers/ivxjs.setup.js');

var _ivxjsSetup2 = _interopRequireDefault(_ivxjsSetup);

var _stateInput = require('./directives/state.input.js');

var _stateInput2 = _interopRequireDefault(_stateInput);

var _stateVideo = require('./directives/state.video.js');

var _stateVideo2 = _interopRequireDefault(_stateVideo);

var _stateHtml = require('./directives/state.html.js');

var _stateHtml2 = _interopRequireDefault(_stateHtml);

var _stateNavigation = require('./directives/state.navigation.js');

var _stateNavigation2 = _interopRequireDefault(_stateNavigation);

var _inputForm = require('./directives/input.form.js');

var _inputForm2 = _interopRequireDefault(_inputForm);

var _inputText = require('./directives/input.text.js');

var _inputText2 = _interopRequireDefault(_inputText);

var _uiAnchor = require('./directives/ui.anchor.js');

var _uiAnchor2 = _interopRequireDefault(_uiAnchor);

var _uiCascadingOptions = require('./directives/ui.cascading-options.js');

var _uiCascadingOptions2 = _interopRequireDefault(_uiCascadingOptions);

var _inputButtons = require('./directives/input.buttons.js');

var _inputButtons2 = _interopRequireDefault(_inputButtons);

var _inputEmail = require('./directives/input.email.js');

var _inputEmail2 = _interopRequireDefault(_inputEmail);

var _inputUrl = require('./directives/input.url.js');

var _inputUrl2 = _interopRequireDefault(_inputUrl);

var _inputDate = require('./directives/input.date.js');

var _inputDate2 = _interopRequireDefault(_inputDate);

var _inputDatetimeLocal = require('./directives/input.datetime-local.js');

var _inputDatetimeLocal2 = _interopRequireDefault(_inputDatetimeLocal);

var _inputOptions = require('./directives/input.options.js');

var _inputOptions2 = _interopRequireDefault(_inputOptions);

var _inputRadio = require('./directives/input.radio.js');

var _inputRadio2 = _interopRequireDefault(_inputRadio);

var _inputCheckbox = require('./directives/input.checkbox.js');

var _inputCheckbox2 = _interopRequireDefault(_inputCheckbox);

var _inputNumber = require('./directives/input.number.js');

var _inputNumber2 = _interopRequireDefault(_inputNumber);

var _inputTextarea = require('./directives/input.textarea.js');

var _inputTextarea2 = _interopRequireDefault(_inputTextarea);

var _videoYoutube = require('./directives/video.youtube.js');

var _videoYoutube2 = _interopRequireDefault(_videoYoutube);

var _videoHtml = require('./directives/video.html5.js');

var _videoHtml2 = _interopRequireDefault(_videoHtml);

var _videoVimeo = require('./directives/video.vimeo.js');

var _videoVimeo2 = _interopRequireDefault(_videoVimeo);

var _videoControlsStandard = require('./directives/video.controls.standard.js');

var _videoControlsStandard2 = _interopRequireDefault(_videoControlsStandard);

var _actions = require('./services/actions.js');

var _actions2 = _interopRequireDefault(_actions);

var _bus = require('./services/bus.js');

var _iosInlineVideo = require('./services/ios-inline-video.js');

var _iosInlineVideo2 = _interopRequireDefault(_iosInlineVideo);

var _templateRenderer = require('./services/template-renderer.js');

var _templateRenderer2 = _interopRequireDefault(_templateRenderer);

var _templateSetData = require('./directives/template.set-data.js');

var _templateSetData2 = _interopRequireDefault(_templateSetData);

var _templateAnimateElement = require('./directives/template.animate-element.js');

var _templateAnimateElement2 = _interopRequireDefault(_templateAnimateElement);

var _templateGoToState = require('./directives/template.go-to-state.js');

var _templateGoToState2 = _interopRequireDefault(_templateGoToState);

var _templateRaiseIvxjsEvent = require('./directives/template.raise-ivxjs-event.js');

var _templateRaiseIvxjsEvent2 = _interopRequireDefault(_templateRaiseIvxjsEvent);

var _appConfig = require('./app.config.js');

var _appConfig2 = _interopRequireDefault(_appConfig);

var _appRun = require('./app.run.js');

var _appRun2 = _interopRequireDefault(_appRun);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//Utilities
var stringParser = new _stringParsers.StringParsers();
var objectParsers = new _typeParsers.ObjectParsers();
var angularEventNames = new _angularEvents2.default();
var iVXjsConfigEvents = new _iVXjsConfigEvents2.default();
var myIVXjs = new _app.iVXjs();

//Providers


// Directives

// States


// Inputs


// Video Players


// Video Controls

//Services


//Template Directives 


// Config


// Run
var _window = window,
    _window$iVXjsGlobalCo = _window.iVXjsGlobalConfigs,
    iVXjsGlobalConfigs = _window$iVXjsGlobalCo === undefined ? {} : _window$iVXjsGlobalCo;
var _iVXjsGlobalConfigs$m = iVXjsGlobalConfigs.modules,
    modules = _iVXjsGlobalConfigs$m === undefined ? [] : _iVXjsGlobalConfigs$m;

var deps = [].concat(['ui.router', 'ngSanitize'], modules);

angular.module('ivx-js', deps)
//Providers
.provider('iVXjsSetup', _ivxjsSetup2.default)

// Constants
.constant('iVXjs', myIVXjs).constant('ivxjs.constants', new _registeredConstants2.default())
//.constant('YT', YT)

// Inputs
.directive('ivxjsFormInput', _inputForm2.default).directive('ivxjsTextInput', _inputText2.default).directive('ivxjsRadioInput', _inputRadio2.default).directive('ivxjsButtonsInput', _inputButtons2.default).directive('ivxjsAnchor', _uiAnchor2.default).directive('ivxjsCascadingOptionsInput', _uiCascadingOptions2.default).directive('ivxjsOptionsInput', _inputOptions2.default).directive('ivxjsEmailInput', _inputEmail2.default).directive('ivxjsUrlInput', _inputUrl2.default).directive('ivxjsDateInput', _inputDate2.default).directive('ivxjsDatetimeLocalInput', _inputDatetimeLocal2.default).directive('ivxjsCheckboxInput', _inputCheckbox2.default).directive('ivxjsNumberInput', _inputNumber2.default).directive('ivxjsTextareaInput', _inputTextarea2.default)

// Input State
.directive('ivxjsInputState', _stateInput2.default)

// HTML State
.directive('ivxjsHtmlState', _stateHtml2.default)

// Navigation State
.directive('ivxjsNavigationState', _stateNavigation2.default)

// Video Players    
.directive('ivxjsYoutubeVideoPlayer', _videoYoutube2.default).directive('ivxjsHtml5VideoPlayer', _videoHtml2.default).directive('ivxjsVimeoVideoPlayer', _videoVimeo2.default).directive('ivxjsStandardVideoControls', _videoControlsStandard2.default)

// Video State
.directive('ivxjsVideoState', _stateVideo2.default)

//Temaplate
.directive('ivxSetData', _templateSetData2.default).directive('ivxAnimate', _templateAnimateElement2.default).directive('ivxGoToState', _templateGoToState2.default).directive('ivxEvent', _templateRaiseIvxjsEvent2.default)

//Services
.service('ivxjs.actions', _actions2.default).service('createInlineVideo', _iosInlineVideo2.default).service('ivxjs.bus', _bus.BusService).service('pullInTemplate', _templateRenderer2.default)

//Controllers

//Filters 
.filter('stringParsers', ['$rootScope', function ($rootScope) {
    return function (name, text) {
        return stringParser[name](text);
    };
}])

//Config
.config(_appConfig2.default)

//Run
.run(_appRun2.default);

// Bootstrap App
myIVXjs.Bus.on(iVXjsConfigEvents.VALIDATED, function (iVXjs) {
    var stateAudio = new iVXjs.audio('body', 'state-audio');
    var experienceAudio = new iVXjs.audio('body', 'experience-audio');

    angular.module('ivx-js').constant('ivxjs.modules.video', iVXjs.video).constant('ivxjs.modules.ui', iVXjs.ui).constant('ivxjs.log', iVXjs.log).constant('ivxjs.modules.audio', stateAudio).constant('ivxjs.modules.audio.experience', experienceAudio).c;

    objectParsers.mapKeys(iVXjs.ui.angular, function (value, key) {
        angular.module('ivx-js').directive(key, value);
    });

    if (iVXjs.experience.addEventListeners) {
        iVXjs.experience.addEventListeners(iVXjs.Bus, iVXjs.experience);
    }

    var pageSetup = new _containerSetup2.default(iVXjs.config.selector, iVXjs.config.template);

    angular.module('ivx-js').constant('ExperienceContainer', pageSetup.selector);

    angular.bootstrap(iVXjs.config.bootstrapSelector ? document.querySelector(iVXjs.config.bootstrapSelector) : document, ['ivx-js']);
    iVXjs.Bus.emit(angularEventNames.BOOTSTRAPPED);
});

},{"../constants/angular.events.js":362,"../constants/iVXjs.config.events.js":371,"../constants/registered-constants.js":375,"../core/app.js":380,"../core/event-store.js":381,"../utilities/type-parsers.js":428,"./app.config.js":299,"./app.run.js":301,"./directives/input.buttons.js":323,"./directives/input.checkbox.js":324,"./directives/input.date.js":325,"./directives/input.datetime-local.js":326,"./directives/input.email.js":327,"./directives/input.form.js":328,"./directives/input.number.js":329,"./directives/input.options.js":330,"./directives/input.radio.js":331,"./directives/input.text.js":332,"./directives/input.textarea.js":333,"./directives/input.url.js":334,"./directives/state.html.js":335,"./directives/state.input.js":336,"./directives/state.navigation.js":337,"./directives/state.video.js":338,"./directives/template.animate-element.js":339,"./directives/template.go-to-state.js":340,"./directives/template.raise-ivxjs-event.js":341,"./directives/template.set-data.js":342,"./directives/ui.anchor.js":343,"./directives/ui.cascading-options.js":344,"./directives/video.controls.standard.js":345,"./directives/video.html5.js":346,"./directives/video.vimeo.js":347,"./directives/video.youtube.js":348,"./filters/string-parsers.js":349,"./providers/ivxjs.setup.js":350,"./services/actions.js":351,"./services/bus.js":352,"./services/ios-inline-video.js":354,"./services/template-renderer.js":355,"./utilities/container-setup.js":356}],301:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createFactoryFunction = require('./utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _audioEvents = require('../constants/audio.events.js');

var _audioEvents2 = _interopRequireDefault(_audioEvents);

var _stateEvents = require('../constants/state.events.js');

var _stateEvents2 = _interopRequireDefault(_stateEvents);

var _angularEvents = require('../constants/angular.events.js');

var _angularEvents2 = _interopRequireDefault(_angularEvents);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AppRun = function AppRun($rootScope, $state, $window, $transitions, $http, iVXjs, iVXjsBus, iVXjsActions, iVXjsConstants) {
    _classCallCheck(this, AppRun);

    if (!iVXjs || !iVXjs.config) return;

    var _iVXjs$config = iVXjs.config,
        _iVXjs$config$metadat = _iVXjs$config.metadata,
        metadata = _iVXjs$config$metadat === undefined ? {} : _iVXjs$config$metadat,
        templates = _iVXjs$config.templates;
    var _metadata$title = metadata.title,
        title = _metadata$title === undefined ? 'iVX Story Player' : _metadata$title,
        description = metadata.description,
        image = metadata.image;

    var audioEventNames = new _audioEvents2.default();
    var stateEventNames = new _stateEvents2.default();
    var angularEventNames = new _angularEvents2.default();

    $rootScope.pageTitle = title;
    $rootScope.ogImage = image;
    $rootScope.ogDescription = description;

    iVXjs.experience.EventStore.run();

    iVXjs.Bus.on(stateEventNames.GO, function (state) {
        var evalState = state;

        if (Array.isArray(state)) {
            evalState = state[0];
        }

        $state.go(evalState.stateId);
    });

    $rootScope.$on("$includeContentError", function (event, args) {
        iVXjs.Bus.emit(angularEventNames.TEMPLATE_NOT_FOUND, event);
    });

    $transitions.onSuccess({ to: '*' }, ['$state', 'ivxjs.modules.audio', function ($state, iVXjsAudio) {
        var data = $state.current.data;

        iVXjs.Bus.emit(stateEventNames.CHANGE, $state.current);

        if (data.audio && data.audio.src) {
            data.audio.id = 'state-audio';

            iVXjsBus.emit(audioEventNames.SET_UP, data.audio);
        } else {
            iVXjsAudio.pause();
        }

        if ($state.current.data.restricted) {
            (function () {

                var navigateBackState = iVXjs.experience.config.pageNotFoundState ? iVXjs.experience.config.pageNotFoundState : iVXjs.experience.config.defaultState;
                var restrictRedirect = iVXjs.experience.rules(navigateBackState);

                if (iVXjs.experience.isRestricted) {
                    iVXjs.experience.isRestricted().then(function (restricted) {
                        if (restricted) {
                            $state.go(restrictRedirect);
                        }
                    });
                }
            })();
        }
    }]);

    iVXjsBus.on(audioEventNames.ENDED, function (currentAudio) {
        if (currentAudio.id === 'state-audio') {
            iVXjsActions.resolveActions(currentAudio.onEnd, function () {});
        }
    });

    iVXjsBus.on(stateEventNames.REQUEST_STATE, function () {
        var currentState = $state.current;

        if (!currentState.data) {
            (function () {
                var defaultStateRules = iVXjs.experience.config.defaultState;
                var defaultStateId = iVXjs.experience.rules(defaultStateRules);

                currentState.data = iVXjs.config.states.find(function (state) {
                    return state.id === defaultStateId;
                });
            })();
        }

        iVXjsBus.emit(stateEventNames.GET_STATE, currentState);
    });

    iVXjsBus.on(audioEventNames.TIME_UPDATE, function (currentAudio) {
        if (currentAudio.id === 'state-audio') {
            currentAudio.runCuePoints(iVXjs.experience.processor);
        }
    });
};

AppRun.$inject = ['$rootScope', '$state', '$window', '$transitions', '$http', 'iVXjs', 'ivxjs.bus', 'ivxjs.actions', 'ivxjs.constants'];

exports.default = (0, _createFactoryFunction2.default)(AppRun);

},{"../constants/angular.events.js":362,"../constants/audio.events.js":364,"../constants/state.events.js":376,"./utilities/create-factory-function.js":357}],302:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _inputController = require('../utilities/input-controller.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ButtonsInputController = function (_InputControllerHelpe) {
    _inherits(ButtonsInputController, _InputControllerHelpe);

    function ButtonsInputController($scope, iVXjs, iVXjsActions) {
        _classCallCheck(this, ButtonsInputController);

        var _this = _possibleConstructorReturn(this, (ButtonsInputController.__proto__ || Object.getPrototypeOf(ButtonsInputController)).call(this, $scope, iVXjs, iVXjsActions));

        var input = $scope.inputData;
        var $parent = $scope.$parent;
        var inputs = $parent.inputs,
            formInput = $parent.formInput,
            parentController = $parent.vm;


        _this.onClick = function ($event, button) {
            $event.preventDefault();

            var _button$onClick = button.onClick,
                onClick = _button$onClick === undefined ? [] : _button$onClick;


            onClick.unshift({ eventName: "setData", args: { key: input.name, value: button.value } });

            iVXjsActions.resolveActions(onClick, function () {
                if ($parent.hideSubmit) {
                    parentController.onSubmit();
                }
            });

            $parent.hideSubmit = inputs.length <= 1;

            return false;
        };
        return _this;
    }

    return ButtonsInputController;
}(_inputController.InputControllerHelper);

ButtonsInputController.$inject = ['$scope', 'iVXjs', 'ivxjs.actions'];

exports.default = (0, _createFactoryFunction2.default)(ButtonsInputController);

},{"../utilities/create-factory-function.js":357,"../utilities/input-controller.js":359}],303:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _inputController = require('../utilities/input-controller.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CheckboxInputController = function (_InputControllerHelpe) {
	_inherits(CheckboxInputController, _InputControllerHelpe);

	function CheckboxInputController($scope, iVXjs, iVXjsActions) {
		_classCallCheck(this, CheckboxInputController);

		return _possibleConstructorReturn(this, (CheckboxInputController.__proto__ || Object.getPrototypeOf(CheckboxInputController)).call(this, $scope, iVXjs, iVXjsActions));
	}

	return CheckboxInputController;
}(_inputController.InputControllerHelper);

CheckboxInputController.$inject = ['$scope', 'iVXjs', 'ivxjs.actions'];

exports.default = (0, _createFactoryFunction2.default)(CheckboxInputController);

},{"../utilities/create-factory-function.js":357,"../utilities/input-controller.js":359}],304:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _inputController = require('../utilities/input-controller.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DateTimeLocalController = function (_InputControllerHelpe) {
    _inherits(DateTimeLocalController, _InputControllerHelpe);

    function DateTimeLocalController($scope, iVXjs, iVXjsActions) {
        _classCallCheck(this, DateTimeLocalController);

        return _possibleConstructorReturn(this, (DateTimeLocalController.__proto__ || Object.getPrototypeOf(DateTimeLocalController)).call(this, $scope, iVXjs, iVXjsActions));
    }

    return DateTimeLocalController;
}(_inputController.InputControllerHelper);

DateTimeLocalController.$inject = ['$scope', 'iVXjs', 'ivxjs.actions'];

exports.default = (0, _createFactoryFunction2.default)(DateTimeLocalController);

},{"../utilities/create-factory-function.js":357,"../utilities/input-controller.js":359}],305:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _inputController = require('../utilities/input-controller.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DateController = function (_InputControllerHelpe) {
	_inherits(DateController, _InputControllerHelpe);

	function DateController($scope, iVXjs, iVXjsActions) {
		_classCallCheck(this, DateController);

		return _possibleConstructorReturn(this, (DateController.__proto__ || Object.getPrototypeOf(DateController)).call(this, $scope, iVXjs, iVXjsActions));
	}

	return DateController;
}(_inputController.InputControllerHelper);

DateController.$inject = ['$scope', 'iVXjs', 'ivxjs.actions'];

exports.default = (0, _createFactoryFunction2.default)(DateController);

},{"../utilities/create-factory-function.js":357,"../utilities/input-controller.js":359}],306:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _inputController = require('../utilities/input-controller.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EmailInputController = function (_InputControllerHelpe) {
	_inherits(EmailInputController, _InputControllerHelpe);

	function EmailInputController($scope, iVXjs, iVXjsActions) {
		_classCallCheck(this, EmailInputController);

		return _possibleConstructorReturn(this, (EmailInputController.__proto__ || Object.getPrototypeOf(EmailInputController)).call(this, $scope, iVXjs, iVXjsActions));
	}

	return EmailInputController;
}(_inputController.InputControllerHelper);

EmailInputController.$inject = ['$scope', 'iVXjs', 'ivxjs.actions'];

exports.default = (0, _createFactoryFunction2.default)(EmailInputController);

},{"../utilities/create-factory-function.js":357,"../utilities/input-controller.js":359}],307:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FormInputController = function FormInputController($scope, $filter) {
    _classCallCheck(this, FormInputController);

    var self = this;

    this.formController = {};
    this.onSubmit = function ($event) {
        var formInput = $scope.formInput;


        $scope.onSubmit(formInput);
    };
};

FormInputController.$inject = ['$scope', '$filter'];

exports.default = (0, _createFactoryFunction2.default)(FormInputController);

},{"../utilities/create-factory-function.js":357}],308:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _inputController = require('../utilities/input-controller.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var NumberInputController = function (_InputControllerHelpe) {
	_inherits(NumberInputController, _InputControllerHelpe);

	function NumberInputController($scope, iVXjs, iVXjsActions) {
		_classCallCheck(this, NumberInputController);

		return _possibleConstructorReturn(this, (NumberInputController.__proto__ || Object.getPrototypeOf(NumberInputController)).call(this, $scope, iVXjs, iVXjsActions));
	}

	return NumberInputController;
}(_inputController.InputControllerHelper);

NumberInputController.$inject = ['$scope', 'iVXjs', 'ivxjs.actions'];

exports.default = (0, _createFactoryFunction2.default)(NumberInputController);

},{"../utilities/create-factory-function.js":357,"../utilities/input-controller.js":359}],309:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _inputController = require('../utilities/input-controller.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OptionsInputController = function (_InputControllerHelpe) {
    _inherits(OptionsInputController, _InputControllerHelpe);

    function OptionsInputController($scope, $timeout, iVXjs, iVXjsActions) {
        _classCallCheck(this, OptionsInputController);

        var _this = _possibleConstructorReturn(this, (OptionsInputController.__proto__ || Object.getPrototypeOf(OptionsInputController)).call(this, $scope, iVXjs, iVXjsActions));

        var _$scope$inputData = $scope.inputData,
            defaultValue = _$scope$inputData.defaultValue,
            options = _$scope$inputData.options,
            name = _$scope$inputData.name,
            _$scope$inputData$att = _$scope$inputData.attributes,
            attributes = _$scope$inputData$att === undefined ? {} : _$scope$inputData$att;

        var experienceValue = iVXjs.experience.data[name];

        _this.selected = {
            value: experienceValue ? experienceValue : ''
        };

        $timeout(function () {
            if (attributes.required) {
                $scope.$parent.formInput[name].$setValidity('required', experienceValue && experienceValue.length > 0);
                $scope.$parent.formInput[name].$error.required = true;
            }
        }, 1);
        return _this;
    }

    return OptionsInputController;
}(_inputController.InputControllerHelper);

OptionsInputController.$inject = ['$scope', '$timeout', 'iVXjs', 'ivxjs.actions'];

exports.default = (0, _createFactoryFunction2.default)(OptionsInputController);

},{"../utilities/create-factory-function.js":357,"../utilities/input-controller.js":359}],310:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _inputController = require('../utilities/input-controller.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RadioInputController = function (_InputControllerHelpe) {
    _inherits(RadioInputController, _InputControllerHelpe);

    function RadioInputController($scope, iVXjs, iVXjsActions) {
        _classCallCheck(this, RadioInputController);

        var _this = _possibleConstructorReturn(this, (RadioInputController.__proto__ || Object.getPrototypeOf(RadioInputController)).call(this, $scope, iVXjs, iVXjsActions));

        var name = $scope.inputData.name;


        $scope.radioSelected = iVXjs.experience.data[name];
        return _this;
    }

    return RadioInputController;
}(_inputController.InputControllerHelper);

RadioInputController.$inject = ['$scope', 'iVXjs', 'ivxjs.actions'];

exports.default = (0, _createFactoryFunction2.default)(RadioInputController);

},{"../utilities/create-factory-function.js":357,"../utilities/input-controller.js":359}],311:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _inputController = require('../utilities/input-controller.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TextInputController = function (_InputControllerHelpe) {
	_inherits(TextInputController, _InputControllerHelpe);

	function TextInputController($scope, iVXjs, iVXjsActions) {
		_classCallCheck(this, TextInputController);

		return _possibleConstructorReturn(this, (TextInputController.__proto__ || Object.getPrototypeOf(TextInputController)).call(this, $scope, iVXjs, iVXjsActions));
	}

	return TextInputController;
}(_inputController.InputControllerHelper);

TextInputController.$inject = ['$scope', 'iVXjs', 'ivxjs.actions'];

exports.default = (0, _createFactoryFunction2.default)(TextInputController);

},{"../utilities/create-factory-function.js":357,"../utilities/input-controller.js":359}],312:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _inputController = require('../utilities/input-controller.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TextAreaInputController = function (_InputControllerHelpe) {
	_inherits(TextAreaInputController, _InputControllerHelpe);

	function TextAreaInputController($scope, iVXjs, iVXjsActions) {
		_classCallCheck(this, TextAreaInputController);

		return _possibleConstructorReturn(this, (TextAreaInputController.__proto__ || Object.getPrototypeOf(TextAreaInputController)).call(this, $scope, iVXjs, iVXjsActions));
	}

	return TextAreaInputController;
}(_inputController.InputControllerHelper);

TextAreaInputController.$inject = ['$scope', 'iVXjs', 'ivxjs.actions'];

exports.default = (0, _createFactoryFunction2.default)(TextAreaInputController);

},{"../utilities/create-factory-function.js":357,"../utilities/input-controller.js":359}],313:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _inputController = require('../utilities/input-controller.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var URLInputController = function (_InputControllerHelpe) {
	_inherits(URLInputController, _InputControllerHelpe);

	function URLInputController($scope, iVXjs, iVXjsActions) {
		_classCallCheck(this, URLInputController);

		return _possibleConstructorReturn(this, (URLInputController.__proto__ || Object.getPrototypeOf(URLInputController)).call(this, $scope, iVXjs, iVXjsActions));
	}

	return URLInputController;
}(_inputController.InputControllerHelper);

URLInputController.$inject = ['$scope', 'iVXjs', 'ivxjs.actions'];

exports.default = (0, _createFactoryFunction2.default)(URLInputController);

},{"../utilities/create-factory-function.js":357,"../utilities/input-controller.js":359}],314:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var HtmlStateController = function () {
    function HtmlStateController($state, $scope, $rootScope, iVXjsActions, iVXjsBus) {
        _classCallCheck(this, HtmlStateController);

        var _$state$current$data = $state.current.data,
            id = _$state$current$data.id,
            timeoutInMs = _$state$current$data.timeoutInMs,
            _$state$current$data$ = _$state$current$data.onTimeout,
            onTimeout = _$state$current$data$ === undefined ? [] : _$state$current$data$,
            _$state$current$data$2 = _$state$current$data.next,
            next = _$state$current$data$2 === undefined ? [] : _$state$current$data$2;


        this.id = id;
        this.iVXjsActions = iVXjsActions;
        this.iVXjsBus = iVXjsBus;

        if (typeof timeoutInMs != "undefined" && timeoutInMs > 0) {
            setTimeout(function () {
                iVXjsActions.resolveThenNavigate(onTimeout, next);
            }, timeoutInMs);
        }
    }

    _createClass(HtmlStateController, [{
        key: 'performEvents',
        value: function performEvents(events) {
            var self = this;

            self.iVXjsActions.resolveActions(events, function () {
                events.forEach(function (event, index) {
                    self.iVXjsBus.emit(event.eventName, event.args);
                });
            });
        }
    }]);

    return HtmlStateController;
}();

HtmlStateController.$inject = ['$state', '$scope', '$rootScope', 'ivxjs.actions', 'ivxjs.bus'];

exports.default = (0, _createFactoryFunction2.default)(HtmlStateController);

},{"../utilities/create-factory-function.js":357}],315:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _stateData = require('../utilities/state-data.js');

var _stateData2 = _interopRequireDefault(_stateData);

var _audioEvents = require('../../constants/audio.events.js');

var _audioEvents2 = _interopRequireDefault(_audioEvents);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var InputStateController = function InputStateController($state, $scope, $rootScope, $timeout, iVXjsActions, iVXjsBus, iVXjsUIModule) {
    _classCallCheck(this, InputStateController);

    var thisStateDataClass = new _stateData2.default($state);
    var _thisStateDataClass$s = thisStateDataClass.stateData,
        inputs = _thisStateDataClass$s.inputs,
        id = _thisStateDataClass$s.id,
        headerHTML = _thisStateDataClass$s.headerHTML,
        footerHTML = _thisStateDataClass$s.footerHTML,
        name = _thisStateDataClass$s.name,
        _thisStateDataClass$s2 = _thisStateDataClass$s.next,
        next = _thisStateDataClass$s2 === undefined ? [] : _thisStateDataClass$s2,
        _thisStateDataClass$s3 = _thisStateDataClass$s.onSubmit,
        onSubmit = _thisStateDataClass$s3 === undefined ? [] : _thisStateDataClass$s3,
        _thisStateDataClass$s4 = _thisStateDataClass$s.onInputReady,
        onInputReady = _thisStateDataClass$s4 === undefined ? [] : _thisStateDataClass$s4,
        audio = _thisStateDataClass$s.audio;

    var audioEventNames = new _audioEvents2.default();

    this.inputs = inputs;
    this.id = id;
    this.stateID = id;
    this.onSubmit = function (formInput) {
        if (formInput && formInput.$valid) {
            iVXjsActions.resolveThenNavigate(onSubmit, next);
        }
    };

    $timeout(function () {
        if (iVXjsUIModule.initializeInput) {
            iVXjsUIModule.initializeInput();
        };

        var hasTransition = onInputReady.find(function (event, index) {
            return event.eventName === "animateElement" && event.args.element === ".input-state-container";
        });

        if (!hasTransition) {
            onInputReady.push({
                eventName: "animateElement",
                args: {
                    element: ".input-state-container",
                    animationClasses: "show"
                }
            });
        }

        iVXjsActions.resolveActions(onInputReady, function () {
            if (audio && audio.src) {
                iVXjsBus.emit(audioEventNames.PLAY);
            }
        });
    }, 1);
};

InputStateController.$inject = ['$state', '$scope', '$rootScope', '$timeout', 'ivxjs.actions', 'ivxjs.bus', 'ivxjs.modules.ui'];

exports.default = (0, _createFactoryFunction2.default)(InputStateController);

},{"../../constants/audio.events.js":364,"../utilities/create-factory-function.js":357,"../utilities/state-data.js":361}],316:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _videoEvents = require('../../constants/video.events.js');

var _videoEvents2 = _interopRequireDefault(_videoEvents);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function setUpCuePoints(cuePoints) {
    var cuePointsTemp = sortCuePoints(cuePoints);

    cuePointsTemp = cuePointsTemp.map(function (cuePoint, index) {
        cuePoint.fired = false;

        return cuePoint;
    });

    return cuePointsTemp;
}

function sortCuePoints(cuePoints) {
    return cuePoints.sort(function (cuePointA, cuePointB) {
        if (cuePointA.timeAt > cuePointB.timeAt) {
            return 1;
        }

        if (cuePointA.timeAt < cuePointB.timeAt) {
            return -1;
        }

        return 0;
    });
}

var VideoStateController = function VideoStateController($rootScope, $state, iVXjsActions, iVXjsBus, iVXjs, EventStore, ExperienceContainer) {
    _classCallCheck(this, VideoStateController);

    var _$state$current$data = $state.current.data,
        playerSettings = _$state$current$data.playerSettings,
        _$state$current$data$ = _$state$current$data.onVideoEnd,
        onVideoEnd = _$state$current$data$ === undefined ? [] : _$state$current$data$,
        _$state$current$data$2 = _$state$current$data.onVideoReady,
        onVideoReady = _$state$current$data$2 === undefined ? [] : _$state$current$data$2,
        next = _$state$current$data.next,
        _$state$current$data$3 = _$state$current$data.cuePoints,
        cuePoints = _$state$current$data$3 === undefined ? [] : _$state$current$data$3;
    var _playerSettings$autop = playerSettings.autoplay,
        autoplay = _playerSettings$autop === undefined ? false : _playerSettings$autop;

    var videoEventNames = new _videoEvents2.default();

    cuePoints = setUpCuePoints(cuePoints);

    this.inputContainer = document.getElementById(ExperienceContainer.id);

    this.inputContainer.style.opacity = 0;
    this.inputContainer.style.pointerEvents = 'none';

    iVXjsBus.once(videoEventNames.CAN_PLAY, function stateVideoCanPlay(player) {
        // let transitionAnimation = onVideoReady.find((event, index) =>{
        //     return event.eventName === "animateElement" && event.args.element === ".video-state-container";
        // });

        // if(!transitionAnimation){
        //     onVideoReady.push({
        //         eventName : "animateElement",
        //         args : {
        //             element : ".video-state-container",
        //             animationClasses : "show"
        //         }
        //     })
        // }

        iVXjsActions.resolveActions(onVideoReady, function () {
            if (autoplay) {
                iVXjsBus.emit(videoEventNames.PLAY);
                iVXjsBus.emit(videoEventNames.ADD_PLAYING_CLASS);
            }
        });

        self.player = player;
        EventStore.register(update);
    });
    iVXjsBus.once(videoEventNames.ENDED, function stateVideoEnded() {
        iVXjsBus.emit(videoEventNames.DISPOSE);
        iVXjsActions.resolveThenNavigate(onVideoEnd, next);
        EventStore.remove(update);
    });
    iVXjsBus.on(videoEventNames.TIME_UPDATE, function cuePointsOnUpdate(player, stateData) {
        var currentTime = player.currentTime;

        // if (cuePoints.length <= 0) return;

        // cuePoints.forEach((cuePoint, index) => {
        //     let { timeAt, fired = false, always = false } = cuePoint;
        //     let timeUntil = Math.abs(cuePoint.timeAt - currentTime);

        //     if (timeAt <= currentTime && (always || !fired)) {
        //         cuePoint.fired = true;
        //         iVXjsBus.emit(cuePoint.eventName);
        //         iVXjsActions.resolveActions([cuePoint], () => {

        //         });
        //     }
        // });
    });

    var ball = document.getElementsByClassName('ball')[0];
    var h = 575; // x vertex, half of total bounce duration
    var k = 160; // y vertex, total bounce height
    var a = -4 * k / Math.pow(h * 2, 2); // coefficient: -.000483932
    var ypos, start, time;

    function update(timeObj) {
        var currentTime = self.player.getCurrentTime() * 1000;
        ypos = a * Math.pow((currentTime + h) % (h * 2) - h, 2) + k;
        ball.style.transform = 'translateY(' + -ypos + 'px)';
    }
};

VideoStateController.$inject = ['$rootScope', '$state', 'ivxjs.actions', 'ivxjs.bus', 'iVXjs', 'EventStore', 'ExperienceContainer'];

exports.default = (0, _createFactoryFunction2.default)(VideoStateController);

},{"../../constants/video.events.js":378,"../utilities/create-factory-function.js":357}],317:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AnchorController = function () {
	function AnchorController($scope, $window, iVXjsActions, iVXjsAudio) {
		_classCallCheck(this, AnchorController);

		this.iVXjsActions = iVXjsActions;
		this.$window = $window;
		this.iVXjsAudio = iVXjsAudio;
	}

	_createClass(AnchorController, [{
		key: 'onLinkClick',
		value: function onLinkClick($event) {
			var _anchorInfo = this.anchorInfo,
			    _anchorInfo$onClick = _anchorInfo.onClick,
			    onClickEvents = _anchorInfo$onClick === undefined ? [] : _anchorInfo$onClick,
			    href = _anchorInfo.href,
			    _anchorInfo$attribute = _anchorInfo.attributes,
			    attributes = _anchorInfo$attribute === undefined ? {} : _anchorInfo$attribute;

			var self = this;
			var hasGoToNextState = onClickEvents.find(function (clickEvent, index) {
				return clickEvent.eventName === 'goToNextState';
			});

			if (attributes.target !== '_blank') {
				$event.preventDefault();
			}

			this.iVXjsActions.resolveActions(onClickEvents, function () {
				if (hasGoToNextState) return;

				if (attributes.target !== '_blank') {
					self.$window.location = href;
				}
			});

			this.iVXjsAudio.audioElement.play();
		}
	}]);

	return AnchorController;
}();

AnchorController.$inject = ['$scope', '$window', 'ivxjs.actions', 'ivxjs.modules.audio'];

exports.default = (0, _createFactoryFunction2.default)(AnchorController);

},{"../utilities/create-factory-function.js":357}],318:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _inputController = require('../utilities/input-controller.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CascadingOptionsInputController = function (_InputControllerHelpe) {
    _inherits(CascadingOptionsInputController, _InputControllerHelpe);

    function CascadingOptionsInputController($scope, iVXjs, iVXjsBus, iVXjsActions) {
        _classCallCheck(this, CascadingOptionsInputController);

        var _this = _possibleConstructorReturn(this, (CascadingOptionsInputController.__proto__ || Object.getPrototypeOf(CascadingOptionsInputController)).call(this, $scope, iVXjs, iVXjsActions));

        var vm = _this;
        var inputData = $scope.inputData;

        var currentTree = Object.assign({}, inputData.dataTree);
        var name = inputData.name,
            _inputData$attributes = inputData.attributes,
            attributes = _inputData$attributes === undefined ? {} : _inputData$attributes;
        var _attributes$required = attributes.required,
            cascadeRequired = _attributes$required === undefined ? false : _attributes$required;
        var data = iVXjs.experience.data;
        var labels = currentTree.labels,
            items = currentTree.items,
            isStatic = currentTree.isStatic;


        vm.viewSettings = {
            labels: currentTree.labels,
            options: [currentTree.items],
            isStatic: isStatic
        };
        vm.currentSelection = [];
        vm.currentTree = currentTree;
        vm.modelUpdate = function (selectedItem) {
            var _vm$viewSettings = vm.viewSettings,
                isStatic = _vm$viewSettings.isStatic,
                options = _vm$viewSettings.options;

            var mustBeAnswered = cascadeRequired || isStatic;

            if (selectedItem) {
                var hasItems = selectedItem && selectedItem.items && selectedItem.items.length && selectedItem.items.length > 0;

                if (mustBeAnswered && !hasItems) {
                    var _ret = function () {
                        var finalKeyParts = selectedItem.key.split('~');
                        var editSelections = options.map(function (option, index) {
                            var hasSelection = typeof vm.currentSelection[index] !== 'undefined';

                            if (hasSelection) {
                                var hasKey = vm.currentSelection[index].key ? vm.currentSelection[index].key : false;
                                var tooFar = hasKey && hasKey.split("~").length > finalKeyParts.length ? true : false;

                                return tooFar ? {} : vm.currentSelection[index];
                            } else {
                                return {};
                            }
                        });

                        var newOptions = options.map(function (option, index) {
                            var hasSelection = typeof vm.currentSelection[index] !== 'undefined';

                            if (hasSelection) {
                                var hasKey = vm.currentSelection[index].key ? vm.currentSelection[index].key : false;
                                var tooFar = hasKey && hasKey.split("~").length > finalKeyParts.length ? true : false;

                                return tooFar ? [] : option;
                            } else {
                                return [];
                            }
                        });

                        vm.viewSettings = Object.assign({}, vm.viewSettings, {
                            options: newOptions
                        });
                        vm.currentSelection = editSelections;
                        vm.onChange(selectedItem.key);

                        updateModel();
                        return {
                            v: void 0
                        };
                    }();

                    if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
                } else if (!mustBeAnswered) {
                    vm.onChange(selectedItem.key);
                }
            }
            var makeNull = false;

            var editSelections = options.map(function (option, index) {
                var hasSelection = typeof vm.currentSelection[index] !== 'undefined' && vm.currentSelection[index].items;

                if (hasSelection && !makeNull) {
                    return vm.currentSelection[index];
                } else {
                    makeNull = true;
                    return;
                }
            });

            vm.currentSelection = editSelections;
            updateModel();
        };

        vm.viewSettings = initializeViewSettings(vm.viewSettings, vm.currentTree, data[name]);

        updateModel();

        function initializeViewSettings(oldViewSettings, currentTree, key) {
            var newViewSettings = Object.assign({}, oldViewSettings);
            var _newViewSettings = newViewSettings,
                options = _newViewSettings.options,
                labels = _newViewSettings.labels;

            var newOptions = createStaticOptions(labels, options[0]);

            newViewSettings = Object.assign({}, newViewSettings, {
                options: newOptions
            });

            if (key && key.split) {
                (function () {
                    var oldOptions = [].concat(options);
                    var sections = key.split('~');
                    var fullPath = '';
                    var currentItems = [].concat(items);
                    var selections = sections.reduce(function (theseSections, section, index) {
                        if (index === 0) {
                            fullPath = section;
                        } else {
                            fullPath = fullPath + '~' + section;
                        }

                        var currentItem = currentItems.find(function (item) {
                            return item.key === fullPath;
                        });

                        currentItems = [].concat(currentItem.items);

                        return [].concat(theseSections, currentItem);
                    }, []);

                    vm.currentSelection = selections;

                    var editSelections = newViewSettings.options.map(function (option, index) {
                        var hasSelection = typeof vm.currentSelection[index] !== 'undefined';

                        if (hasSelection) {
                            return vm.currentSelection[index];
                        } else {
                            return {};
                        }
                    });

                    vm.currentSelection = editSelections;

                    vm.isValid = true;
                })();
            }

            return newViewSettings;

            function createStaticOptions(labels, defaultOptions) {
                return labels.map(function (label, index) {
                    if (index === 0) {
                        return defaultOptions;
                    }
                    return [];
                });
            }
        }

        function updateModel() {
            var oldViewSettings = Object.assign({}, vm.viewSettings);
            var options = oldViewSettings.options,
                labels = oldViewSettings.labels,
                isStatic = oldViewSettings.isStatic;

            var selections = [].concat(vm.currentSelection);
            var keepAdding = true;
            var newOptions = selections.reduce(function (currentOptions, selection, depth) {
                var editOptions = [].concat(currentOptions);

                keepAdding = selection;

                if (keepAdding) {
                    console.log(selection.items);
                    if (selection && selection.items && selection.items.length > 0) {
                        editOptions = currentOptions.slice(0, 1).concat(currentOptions.slice(1, depth + 1)).concat([selection.items]).concat(currentOptions.slice(depth + 2));
                    }
                } else {
                    if (depth < labels.length - 1) {
                        editOptions = currentOptions.slice(0, 1).concat(currentOptions.slice(1, depth + 1)).concat([[]]).concat(currentOptions.slice(depth + 2));
                    }
                }

                return editOptions;
            }, options);

            var newViewSettings = Object.assign({}, vm.viewSettings, {
                options: newOptions
            });

            vm.viewSettings = newViewSettings;
            iVXjsBus.emit('update-view', newViewSettings);
        }

        return _this;
    }

    return CascadingOptionsInputController;
}(_inputController.InputControllerHelper);

CascadingOptionsInputController.$inject = ['$scope', 'iVXjs', 'ivxjs.bus', 'ivxjs.actions'];

exports.default = (0, _createFactoryFunction2.default)(CascadingOptionsInputController);

},{"../utilities/create-factory-function.js":357,"../utilities/input-controller.js":359}],319:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
       value: true
});

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _videoEvents = require('../../constants/video.events.js');

var _videoEvents2 = _interopRequireDefault(_videoEvents);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var StandardControls = function StandardControls(iVXjsBus) {
       _classCallCheck(this, StandardControls);

       var self = this;
       var videoEventNames = new _videoEvents2.default();

       iVXjsBus.once(videoEventNames.DISPOSE, function disposeStandardControls() {
              self.controls.dispose(iVXjsBus);
       });
};

StandardControls.$inject = ['ivxjs.bus'];

exports.default = (0, _createFactoryFunction2.default)(StandardControls);

},{"../../constants/video.events.js":378,"../utilities/create-factory-function.js":357}],320:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _videoEvents = require('../../constants/video.events.js');

var _videoEvents2 = _interopRequireDefault(_videoEvents);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var HTML5VideoPlayerController = function HTML5VideoPlayerController($scope, iVXjsBus) {
    _classCallCheck(this, HTML5VideoPlayerController);

    var self = this;
    var videoEventNames = new _videoEvents2.default();

    iVXjsBus.once(videoEventNames.DISPOSE, function disposeHTML5Player() {
        self.player.dispose(iVXjsBus);
    });
};

HTML5VideoPlayerController.$inject = ['$scope', 'ivxjs.bus'];

exports.default = (0, _createFactoryFunction2.default)(HTML5VideoPlayerController);

},{"../../constants/video.events.js":378,"../utilities/create-factory-function.js":357}],321:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _videoEvents = require('../../constants/video.events.js');

var _videoEvents2 = _interopRequireDefault(_videoEvents);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var VimeoVideoPlayerController = function VimeoVideoPlayerController($scope, iVXjsBus) {
    _classCallCheck(this, VimeoVideoPlayerController);

    var self = this;
    var videoEventNames = new _videoEvents2.default();

    iVXjsBus.once(videoEventNames.DISPOSE, function disposeVimeoPlayer() {
        self.player.dispose(iVXjsBus);
    });
};

VimeoVideoPlayerController.$inject = ['$scope', 'ivxjs.bus'];

exports.default = (0, _createFactoryFunction2.default)(VimeoVideoPlayerController);

},{"../../constants/video.events.js":378,"../utilities/create-factory-function.js":357}],322:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _videoEvents = require('../../constants/video.events.js');

var _videoEvents2 = _interopRequireDefault(_videoEvents);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var YoutubeVideoPlayerController = function YoutubeVideoPlayerController($rootScope, $scope, $window, iVXjsBus, iVXjs) {
    _classCallCheck(this, YoutubeVideoPlayerController);

    var self = this;
    var videoEventNames = new _videoEvents2.default();

    iVXjsBus.once(videoEventNames.DISPOSE, function disposeYouTubePlayer() {
        self.player.dispose(iVXjsBus);
    });
};

YoutubeVideoPlayerController.$inject = ['$rootScope', '$scope', '$window', 'ivxjs.bus', 'iVXjs'];

exports.default = (0, _createFactoryFunction2.default)(YoutubeVideoPlayerController);

},{"../../constants/video.events.js":378,"../utilities/create-factory-function.js":357}],323:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _inputButtons = require('../controllers/input.buttons.js');

var _inputButtons2 = _interopRequireDefault(_inputButtons);

var _messagesError = require('../utilities/messages.error.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ButtonsInput = function () {
    function ButtonsInput($compile, $filter, iVXjs, iVXjsUIModule, pullInTemplate) {
        _classCallCheck(this, ButtonsInput);

        this.template = this.templateHTML;
        this.transclude = true;
        this.restrict = 'E';
        this.require = "^ivxjsFormInput";
        this.replace = true;
        this.scope = {
            inputData: '=inputData'
        };
        this.controller = _inputButtons2.default;
        this.controllerAs = 'vm';
        this.link = function ($scope, iElm, iAttrs, controller) {
            var input = $scope.inputData;
            var _input = input,
                id = _input.id,
                name = _input.name,
                labelHTML = _input.labelHTML,
                _input$label = _input.label,
                label = _input$label === undefined ? '' : _input$label,
                _input$errors = _input.errors,
                errors = _input$errors === undefined ? { required: 'Must click to continue.' } : _input$errors,
                _input$skipSettings = _input.skipSettings,
                skipSettings = _input$skipSettings === undefined ? { label: "Skip" } : _input$skipSettings,
                buttons = _input.buttons,
                _input$attributes = _input.attributes,
                attributes = _input$attributes === undefined ? {} : _input$attributes,
                _input$settings = _input.settings,
                settings = _input$settings === undefined ? {} : _input$settings;

            var inputButtonData = buttons.map(function (button, index) {
                button = pullInTemplate.convertLabel(button.value, button, $scope);

                var buttonString = angular.toJson(button);
                var _button = button,
                    label = _button.label,
                    labelHTML = _button.labelHTML,
                    value = _button.value,
                    _button$classes = _button.classes,
                    classes = _button$classes === undefined ? '' : _button$classes;


                label = labelHTML ? labelHTML : label;

                return {
                    label: label,
                    attrHTML: 'ng-click=\'vm.onClick($event, ' + buttonString + ')\'',
                    classes: classes

                };
            });

            input = pullInTemplate.convertLabel($filter('stringParsers')('startCase', id), input, $scope);

            if (!attributes.required) {
                var _label = skipSettings.label,
                    _labelHTML = skipSettings.labelHTML,
                    value = skipSettings.value,
                    _skipSettings$classes = skipSettings.classes,
                    classes = _skipSettings$classes === undefined ? '' : _skipSettings$classes;


                _label = _labelHTML ? _labelHTML : _label;

                inputButtonData.push({
                    label: _label,
                    classes: classes,
                    attrHTML: ''
                });
            };

            var dataUIObj = {
                buttons: inputButtonData,
                input: input,
                errors: new _messagesError.ErrorMessages(name, errors, attributes)
            };
            var thisButtonsInput = new iVXjsUIModule.buttons(inputButtonData, input);
            var inputContainer = iElm.find('div');

            controller.iVXjs = iVXjs;

            iElm.html(thisButtonsInput.html);
            $compile(iElm.contents())($scope);
        };
    }

    _createClass(ButtonsInput, [{
        key: 'templateHTML',
        get: function get() {
            return '<div></div>';
        }
    }]);

    return ButtonsInput;
}();

ButtonsInput.$inject = ['$compile', '$filter', 'iVXjs', 'ivxjs.modules.ui', 'pullInTemplate'];

exports.default = (0, _createFactoryFunction2.default)(ButtonsInput);

},{"../controllers/input.buttons.js":302,"../utilities/create-factory-function.js":357,"../utilities/messages.error.js":360}],324:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _inputCheckbox = require('../controllers/input.checkbox.js');

var _inputCheckbox2 = _interopRequireDefault(_inputCheckbox);

var _messagesError = require('../utilities/messages.error.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CheckboxInput = function () {
    function CheckboxInput($compile, $filter, iVXjsUIModule, pullInTemplate) {
        _classCallCheck(this, CheckboxInput);

        this.template = this.templateHTML;
        this.transclude = true;
        this.restrict = 'E';
        this.require = "^ivxjsFormInput";
        this.replace = true;
        this.scope = {
            inputData: '=inputData'
        };
        this.controller = _inputCheckbox2.default;
        this.controllerAs = 'vm';
        this.link = function ($scope, iElm, iAttrs, controller) {
            var input = $scope.inputData;
            var _input = input,
                id = _input.id,
                name = _input.name,
                _input$errors = _input.errors,
                errors = _input$errors === undefined ? {} : _input$errors,
                labelHTML = _input.labelHTML,
                label = _input.label,
                _input$attributes = _input.attributes,
                attributes = _input$attributes === undefined ? {} : _input$attributes,
                _input$settings = _input.settings,
                settings = _input$settings === undefined ? {} : _input$settings;

            var tagHTML = 'ng-blur="vm.onChange(inputValue)" ng-model="inputValue"';

            input.label = label ? label : $filter('stringParsers')('startCase', id);
            input = pullInTemplate.convertLabel($filter('stringParsers')('startCase', id), input, $scope);

            var checkboxUIObj = {
                input: input,
                tags: tagHTML,
                settings: settings,
                errors: new _messagesError.ErrorMessages(input, errors, attributes)
            };
            var checkBox = new iVXjsUIModule.checkbox(checkboxUIObj);

            iElm.html(checkBox.html);

            $compile(iElm.contents())($scope);
        };
    }

    _createClass(CheckboxInput, [{
        key: 'templateHTML',
        get: function get() {
            return '<div></div>';
        }
    }]);

    return CheckboxInput;
}();

CheckboxInput.$inject = ['$compile', '$filter', 'ivxjs.modules.ui', 'pullInTemplate'];

exports.default = (0, _createFactoryFunction2.default)(CheckboxInput);

},{"../controllers/input.checkbox.js":303,"../utilities/create-factory-function.js":357,"../utilities/messages.error.js":360}],325:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _inputDate = require('../controllers/input.date.js');

var _inputDate2 = _interopRequireDefault(_inputDate);

var _messagesError = require('../utilities/messages.error.js');

var _dateParser = require('../utilities/date-parser.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DateInput = function () {
    function DateInput($compile, $filter, iVXjs, iVXjsUIModule, pullInTemplate) {
        _classCallCheck(this, DateInput);

        this.template = this.templateHTML;
        this.transclude = true;
        this.restrict = 'E';
        this.require = "^ivxjsFormInput";
        this.replace = true;
        this.scope = {
            inputData: '=inputData'
        };
        this.controller = _inputDate2.default;
        this.controllerAs = 'vm';
        this.link = function ($scope, iElm, iAttrs, controller) {
            var input = $scope.inputData;
            var _input = input,
                id = _input.id,
                name = _input.name,
                _input$errors = _input.errors,
                errors = _input$errors === undefined ? {} : _input$errors,
                labelHTML = _input.labelHTML,
                label = _input.label,
                _input$attributes = _input.attributes,
                attributes = _input$attributes === undefined ? {} : _input$attributes,
                _input$settings = _input.settings,
                settings = _input$settings === undefined ? {} : _input$settings;


            if (attributes.min) {
                var dateMin = new _dateParser.DateParser(attributes.min).formatForDateInput();

                attributes.min = '' + dateMin;
            }

            if (attributes.max) {
                var dateMax = new _dateParser.DateParser(attributes.max).formatForDateInput();

                attributes.max = '' + dateMax;
            }

            input.label = label ? label : $filter('stringParsers')('startCase', id);

            var errorMessages = new _messagesError.ErrorMessages(input, errors, attributes);

            $scope.inputValue = iVXjs.experience.data[name] ? iVXjs.experience.data[name] : '';

            input = pullInTemplate.convertLabel($filter('stringParsers')('startCase', id), input, $scope);

            var tagHTML = 'ng-blur="vm.onChange(inputValue)" ng-model="inputValue"';
            var uiDateObj = {
                input: input,
                settings: settings,
                tags: tagHTML,
                errors: errorMessages
            };
            var date = new iVXjsUIModule.date(uiDateObj);

            iElm.html(date.html);
            $compile(iElm.contents())($scope);
        };
    }

    _createClass(DateInput, [{
        key: 'templateHTML',
        get: function get() {
            return '<div></div>';
        }
    }]);

    return DateInput;
}();

DateInput.$inject = ['$compile', '$filter', 'iVXjs', 'ivxjs.modules.ui', 'pullInTemplate'];

exports.default = (0, _createFactoryFunction2.default)(DateInput);

},{"../controllers/input.date.js":305,"../utilities/create-factory-function.js":357,"../utilities/date-parser.js":358,"../utilities/messages.error.js":360}],326:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _inputDateTimeLocal = require('../controllers/input.date-time-local.js');

var _inputDateTimeLocal2 = _interopRequireDefault(_inputDateTimeLocal);

var _messagesError = require('../utilities/messages.error.js');

var _dateParser = require('../utilities/date-parser.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DateTimeLocalInput = function () {
    function DateTimeLocalInput($compile, $filter, iVXjsUIModule, pullInTemplate) {
        _classCallCheck(this, DateTimeLocalInput);

        this.template = this.templateHTML;
        this.transclude = true;
        this.restrict = 'E';
        this.require = "^ivxjsFormInput";
        this.replace = true;
        this.scope = {
            inputData: '=inputData'
        };
        this.controller = _inputDateTimeLocal2.default;
        this.controllerAs = 'vm';
        this.link = function ($scope, iElm, iAttrs, controller) {
            var input = $scope.inputData;
            var _input = input,
                id = _input.id,
                name = _input.name,
                _input$errors = _input.errors,
                errors = _input$errors === undefined ? {} : _input$errors,
                labelHTML = _input.labelHTML,
                label = _input.label,
                _input$attributes = _input.attributes,
                attributes = _input$attributes === undefined ? {} : _input$attributes,
                _input$settings = _input.settings,
                settings = _input$settings === undefined ? {} : _input$settings;


            input.label = label ? label : $filter('stringParsers')('startCase', id);

            if (attributes.min) {
                var dateMin = new _dateParser.DateParser(attributes.min).formatForDateTimeLocalInput();
                attributes.min = '' + dateMin;
            }

            if (attributes.max) {
                var dateMax = new _dateParser.DateParser(attributes.max).formatForDateTimeLocalInput();
                attributes.max = '' + dateMax;
            }

            var errorMessages = new _messagesError.ErrorMessages(input, errors, attributes);
            var tagHTML = 'ng-blur="vm.onChange(inputValue)" ng-model="inputValue"';

            input = pullInTemplate.convertLabel($filter('stringParsers')('startCase', id), input, $scope);

            var uiDatetimeLocalObj = {
                input: input,
                settings: settings,
                tags: tagHTML,
                errors: errorMessages
            };

            var datetimeLocal = new iVXjsUIModule.datetimeLocal(uiDatetimeLocalObj);

            iElm.html(datetimeLocal.html);
            $compile(iElm.contents())($scope);
        };
    }

    _createClass(DateTimeLocalInput, [{
        key: 'templateHTML',
        get: function get() {
            return '<div></div>';
        }
    }]);

    return DateTimeLocalInput;
}();

DateTimeLocalInput.$inject = ['$compile', '$filter', 'ivxjs.modules.ui', 'pullInTemplate'];

exports.default = (0, _createFactoryFunction2.default)(DateTimeLocalInput);

},{"../controllers/input.date-time-local.js":304,"../utilities/create-factory-function.js":357,"../utilities/date-parser.js":358,"../utilities/messages.error.js":360}],327:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _inputEmail = require('../controllers/input.email.js');

var _inputEmail2 = _interopRequireDefault(_inputEmail);

var _messagesError = require('../utilities/messages.error.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var EmailInput = function () {
    function EmailInput($compile, $filter, iVXjsUIModule, pullInTemplate) {
        _classCallCheck(this, EmailInput);

        this.template = this.templateHTML;
        this.transclude = true;
        this.restrict = 'E';
        this.require = "^ivxjsFormInput";
        this.replace = true;
        this.scope = {
            inputData: '=inputData'
        };
        this.controller = _inputEmail2.default;
        this.controllerAs = 'vm';
        this.link = function ($scope, iElm, iAttrs, controller) {
            var input = $scope.inputData;
            var _input = input,
                id = _input.id,
                name = _input.name,
                _input$errors = _input.errors,
                errors = _input$errors === undefined ? {} : _input$errors,
                labelHTML = _input.labelHTML,
                label = _input.label,
                _input$attributes = _input.attributes,
                attributes = _input$attributes === undefined ? {} : _input$attributes,
                type = _input.type,
                _input$settings = _input.settings,
                settings = _input$settings === undefined ? {} : _input$settings;

            var errorMessages = new _messagesError.ErrorMessages(input, errors, attributes);
            var tagHTML = 'ng-blur="vm.onChange(inputValue)" ng-model="inputValue"';

            input.label = label ? label : $filter('stringParsers')('startCase', id);
            input = pullInTemplate.convertLabel($filter('stringParsers')('startCase', id), input, $scope);

            var uiEmailObj = {
                input: input,
                settings: settings,
                tags: tagHTML,
                errors: errorMessages
            };
            var email = new iVXjsUIModule.email(uiEmailObj);

            iElm.html(email.html);
            $compile(iElm.contents())($scope);
        };
    }

    _createClass(EmailInput, [{
        key: 'templateHTML',
        get: function get() {
            return '<div></div>';
        }
    }]);

    return EmailInput;
}();

EmailInput.$inject = ['$compile', '$filter', 'ivxjs.modules.ui', 'pullInTemplate'];

exports.default = (0, _createFactoryFunction2.default)(EmailInput);

},{"../controllers/input.email.js":306,"../utilities/create-factory-function.js":357,"../utilities/messages.error.js":360}],328:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _inputForm = require('../controllers/input.form.js');

var _inputForm2 = _interopRequireDefault(_inputForm);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FormInput = function () {
    function FormInput($compile, $filter, iVXjsUIModule, pullInTemplate) {
        _classCallCheck(this, FormInput);

        this.template = this.templateHTML;
        this.restrict = 'E';
        this.scope = {
            inputs: '=inputs',
            formId: '=formId',
            onSubmit: '=onSubmit',
            formSettings: '=formSettings'
        };
        this.controller = _inputForm2.default;
        this.controllerAs = 'vm';
        this.$compile = $compile;
        this.link = function ($scope, iElm, iAttrs, controller) {
            var shouldHideSubmit = function shouldHideSubmit(inputs, type, attributes) {
                var hideSubmitOnType = {
                    buttons: true
                };

                return hideSubmitOnType[type];
            };
            var hideSubmit = false;
            var inputs = $scope.inputs,
                _$scope$formSettings = $scope.formSettings,
                formSettings = _$scope$formSettings === undefined ? {} : _$scope$formSettings,
                formId = $scope.formId;

            var formInputs = inputs.map(function (input) {
                var type = input.type,
                    attributes = input.attributes,
                    _input$settings = input.settings,
                    settings = _input$settings === undefined ? {} : _input$settings,
                    id = input.id;

                var inputString = JSON.stringify(input);

                inputString = inputString.replace(/\'/g, '&#39;');
                hideSubmit = shouldHideSubmit(inputs, type, attributes);

                return {
                    html: '<ivxjs-' + type + '-input class="ivxjs-grid-1-1" id="' + id + '" input-data=\'' + inputString + '\'></ivxjs-' + type + '-input>\n',
                    settings: settings
                };
            });

            formSettings = pullInTemplate.convertLabel('', formSettings, $scope);
            formSettings.submit = pullInTemplate.convertLabel('Submit', formSettings.submit, $scope);
            formSettings.hideSubmit = hideSubmit;
            formSettings.id = formId;

            var additionalTagHTML = 'ng-submit="vm.onSubmit($event)"';
            var thisFormInputs = new iVXjsUIModule.form(formInputs, 'formInput', additionalTagHTML, formSettings);

            iElm.html(thisFormInputs.html);

            $compile(iElm.contents())($scope);
        };
    }

    _createClass(FormInput, [{
        key: 'templateHTML',
        get: function get() {
            return '';
        }
    }]);

    return FormInput;
}();

FormInput.$inject = ['$compile', '$filter', 'ivxjs.modules.ui', 'pullInTemplate'];

exports.default = (0, _createFactoryFunction2.default)(FormInput);

},{"../controllers/input.form.js":307,"../utilities/create-factory-function.js":357}],329:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _inputNumber = require('../controllers/input.number.js');

var _inputNumber2 = _interopRequireDefault(_inputNumber);

var _messagesError = require('../utilities/messages.error.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var NumberInput = function () {
    function NumberInput($compile, $filter, iVXjsUIModule, pullInTemplate) {
        _classCallCheck(this, NumberInput);

        this.template = this.templateHTML;
        this.transclude = true;
        this.restrict = 'E';
        this.require = "^ivxjsFormInput";
        this.replace = true;
        this.scope = {
            inputData: '=inputData'
        };
        this.controller = _inputNumber2.default;
        this.controllerAs = 'vm';
        this.link = function ($scope, iElm, iAttrs, controller) {
            var input = $scope.inputData;
            var _input = input,
                id = _input.id,
                name = _input.name,
                _input$errors = _input.errors,
                errors = _input$errors === undefined ? {} : _input$errors,
                labelHTML = _input.labelHTML,
                label = _input.label,
                _input$attributes = _input.attributes,
                attributes = _input$attributes === undefined ? {} : _input$attributes,
                type = _input.type,
                _input$settings = _input.settings,
                settings = _input$settings === undefined ? {} : _input$settings;

            var errorMessages = new _messagesError.ErrorMessages(input, errors, attributes);
            var tagHTML = 'ng-blur="vm.onChange(inputValue)" ng-model="inputValue"';

            input.label = label ? label : $filter('stringParsers')('startCase', id);
            input = pullInTemplate.convertLabel($filter('stringParsers')('startCase', id), input, $scope);

            var uiNumberObj = {
                input: input,
                settings: settings,
                tags: tagHTML,
                errors: errorMessages
            };
            var number = new iVXjsUIModule.number(uiNumberObj);

            iElm.html(number.html);
            $compile(iElm.contents())($scope);
        };
    }

    _createClass(NumberInput, [{
        key: 'templateHTML',
        get: function get() {
            return '<div></div>';
        }
    }]);

    return NumberInput;
}();

NumberInput.$inject = ['$compile', '$filter', 'ivxjs.modules.ui', 'pullInTemplate'];

exports.default = (0, _createFactoryFunction2.default)(NumberInput);

},{"../controllers/input.number.js":308,"../utilities/create-factory-function.js":357,"../utilities/messages.error.js":360}],330:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _inputOptions = require('../controllers/input.options.js');

var _inputOptions2 = _interopRequireDefault(_inputOptions);

var _messagesError = require('../utilities/messages.error.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var OptionsInput = function () {
    function OptionsInput($compile, $filter, iVXjsUIModule, iVXjsBus, pullInTemplate) {
        _classCallCheck(this, OptionsInput);

        this.template = this.templateHTML;
        this.transclude = true;
        this.restrict = 'E';
        this.require = "^ivxjsFormInput";
        this.scope = {
            inputData: '=inputData'
        };

        this.controller = _inputOptions2.default;
        this.controllerAs = 'vm';
        this.replace = true;
        this.link = function ($scope, iElm, iAttrs, controller) {
            var input = $scope.inputData;
            var _input = input,
                id = _input.id,
                _input$errors = _input.errors,
                errors = _input$errors === undefined ? {} : _input$errors,
                name = _input.name,
                labelHTML = _input.labelHTML,
                _input$attributes = _input.attributes,
                attributes = _input$attributes === undefined ? {} : _input$attributes,
                options = _input.options,
                defaultDisplay = _input.defaultDisplay,
                _input$settings = _input.settings,
                settings = _input$settings === undefined ? {} : _input$settings;
            var _settings$directives = settings.directives,
                directives = _settings$directives === undefined ? '' : _settings$directives;

            var errorMessages = new _messagesError.ErrorMessages(input, errors, attributes);
            var defaultOptionTag = '<option value="">Select an option...</option>';
            var tagHTML = directives + '\n                           ng-change=\'vm.onChange(vm.selected.value)\'\n                           ng-options="option.display for option in inputData.options track by option.value" \n                           ng-model=\'vm.selected\'';

            input.label = input.label ? input.label : $filter('stringParsers')('startCase', id);
            input = pullInTemplate.convertLabel($filter('stringParsers')('startCase', id), input, $scope);
            input.options = [];

            if (attributes.required || defaultDisplay) {
                defaultOptionTag = defaultDisplay ? '<option value="">' + defaultDisplay + '</option>' : defaultOptionTag;
            }

            var uiOptionsObj = {
                input: input,
                defaultDisplay: defaultDisplay,
                settings: settings,
                tags: tagHTML,
                errors: errorMessages

            };
            var optionsClass = new iVXjsUIModule.options(uiOptionsObj);

            iElm.html(optionsClass.html);
            $compile(iElm.contents())($scope);
        };
    }

    _createClass(OptionsInput, [{
        key: 'templateHTML',
        get: function get() {
            return '<div></div>';
        }
    }]);

    return OptionsInput;
}();

OptionsInput.$inject = ['$compile', '$filter', 'ivxjs.modules.ui', 'ivxjs.bus', 'pullInTemplate'];

exports.default = (0, _createFactoryFunction2.default)(OptionsInput);

},{"../controllers/input.options.js":309,"../utilities/create-factory-function.js":357,"../utilities/messages.error.js":360}],331:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _inputRadio = require('../controllers/input.radio.js');

var _inputRadio2 = _interopRequireDefault(_inputRadio);

var _messagesError = require('../utilities/messages.error.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RadioInput = function () {
    function RadioInput($compile, $filter, iVXjsUIModule, pullInTemplate) {
        _classCallCheck(this, RadioInput);

        this.template = this.templateHTML;
        this.transclude = true;
        this.restrict = 'E';
        this.require = "^ivxjsFormInput";
        this.replace = true;
        this.scope = {
            inputData: '=inputData'
        };
        this.controller = _inputRadio2.default;
        this.controllerAs = 'vm';
        this.link = function ($scope, iElm, iAttrs, controller) {
            var input = $scope.inputData;
            var _input = input,
                id = _input.id,
                _input$errors = _input.errors,
                errors = _input$errors === undefined ? {} : _input$errors,
                name = _input.name,
                labelHTML = _input.labelHTML,
                label = _input.label,
                _input$attributes = _input.attributes,
                attributes = _input$attributes === undefined ? {} : _input$attributes,
                _input$radioButtons = _input.radioButtons,
                radioButtons = _input$radioButtons === undefined ? [] : _input$radioButtons,
                _input$settings = _input.settings,
                settings = _input$settings === undefined ? {} : _input$settings;

            var radioErrorRequired = '';

            if (attributes.required) {
                radioErrorRequired = 'required="!radioSelected"';
            }

            input.label = label ? label : $filter('stringParsers')('startCase', id);
            input = pullInTemplate.convertLabel($filter('stringParsers')('startCase', id), input, $scope);

            var errorMessages = new _messagesError.ErrorMessages(name, errors, attributes);
            var inputRadioButtonData = radioButtons.map(function (radioButton, index) {
                radioButton = pullInTemplate.convertLabel('', radioButton, $scope);

                var _radioButton = radioButton,
                    label = _radioButton.label,
                    labelHTML = _radioButton.labelHTML,
                    value = _radioButton.value,
                    _radioButton$classes = _radioButton.classes,
                    classes = _radioButton$classes === undefined ? '' : _radioButton$classes;


                if (labelHTML) label = labelHTML;

                return {
                    label: label,
                    attrHTML: 'ng-change=\'vm.onChange(radioSelected)\' ng-model=\'radioSelected\' value=\'' + value + '\' ' + radioErrorRequired,
                    classes: classes

                };
            });

            var uiRadioObj = {
                input: input,
                radios: inputRadioButtonData,
                errors: errorMessages,
                settings: settings
            };
            var thisRadiosInput = new iVXjsUIModule.radio(uiRadioObj);

            iElm.html(thisRadiosInput.html);
            $compile(iElm.contents())($scope);
        };
    }

    _createClass(RadioInput, [{
        key: 'templateHTML',
        get: function get() {
            return '<div></div>';
        }
    }]);

    return RadioInput;
}();

RadioInput.$inject = ['$compile', '$filter', 'ivxjs.modules.ui', 'pullInTemplate'];

exports.default = (0, _createFactoryFunction2.default)(RadioInput);

},{"../controllers/input.radio.js":310,"../utilities/create-factory-function.js":357,"../utilities/messages.error.js":360}],332:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _inputText = require('../controllers/input.text.js');

var _inputText2 = _interopRequireDefault(_inputText);

var _messagesError = require('../utilities/messages.error.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TextInput = function () {
    function TextInput($compile, $filter, iVXjs, iVXjsUIModule, pullInTemplate) {
        _classCallCheck(this, TextInput);

        this.template = this.templateHTML;
        this.transclude = true;
        this.restrict = 'E';
        this.require = "^ivxjsFormInput";
        this.replace = true;
        this.scope = {
            inputData: '=inputData'
        };
        this.controller = _inputText2.default;
        this.controllerAs = 'vm';
        this.link = function ($scope, iElm, iAttrs, controller) {
            var input = $scope.inputData;
            var _input = input,
                id = _input.id,
                name = _input.name,
                _input$errors = _input.errors,
                errors = _input$errors === undefined ? {} : _input$errors,
                labelHTML = _input.labelHTML,
                _input$label = _input.label,
                label = _input$label === undefined ? $filter('stringParsers')('startCase', id) : _input$label,
                _input$attributes = _input.attributes,
                attributes = _input$attributes === undefined ? {} : _input$attributes,
                type = _input.type,
                _input$settings = _input.settings,
                settings = _input$settings === undefined ? {} : _input$settings;

            var errorMessages = new _messagesError.ErrorMessages(input, errors, attributes);
            var tagHTML = 'ng-blur="vm.onChange(inputValue)" ng-model="inputValue"';

            input.label = labelHTML ? labelHTML : label;
            input = pullInTemplate.convertLabel($filter('stringParsers')('startCase', id), input, $scope);

            var uiTextObj = {
                input: input,
                settings: settings,
                tags: tagHTML,
                errors: errorMessages
            };
            var text = new iVXjsUIModule.text(uiTextObj);

            iElm.html(text.html);

            $compile(iElm.contents())($scope);
        };
    }

    _createClass(TextInput, [{
        key: 'templateHTML',
        get: function get() {
            return '<div></div>';
        }
    }]);

    return TextInput;
}();

TextInput.$inject = ['$compile', '$filter', 'iVXjs', 'ivxjs.modules.ui', 'pullInTemplate'];

exports.default = (0, _createFactoryFunction2.default)(TextInput);

},{"../controllers/input.text.js":311,"../utilities/create-factory-function.js":357,"../utilities/messages.error.js":360}],333:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _inputTextarea = require('../controllers/input.textarea.js');

var _inputTextarea2 = _interopRequireDefault(_inputTextarea);

var _messagesError = require('../utilities/messages.error.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TextAreaInput = function () {
    function TextAreaInput($compile, $filter, iVXjsUIModule, pullInTemplate) {
        _classCallCheck(this, TextAreaInput);

        this.template = this.templateHTML;
        this.transclude = true;
        this.restrict = 'E';
        this.require = "^ivxjsFormInput";
        this.replace = true;
        this.scope = {
            inputData: '=inputData'
        };
        this.controller = _inputTextarea2.default;
        this.controllerAs = 'vm';
        this.link = function ($scope, iElm, iAttrs, controller) {
            var input = $scope.inputData;
            var _input = input,
                id = _input.id,
                name = _input.name,
                _input$errors = _input.errors,
                errors = _input$errors === undefined ? {} : _input$errors,
                labelHTML = _input.labelHTML,
                label = _input.label,
                _input$attributes = _input.attributes,
                attributes = _input$attributes === undefined ? {} : _input$attributes,
                type = _input.type,
                _input$settings = _input.settings,
                settings = _input$settings === undefined ? {} : _input$settings;

            var errorMessages = new _messagesError.ErrorMessages(input, errors, attributes);
            var tagHTML = 'ng-blur="vm.onChange(inputValue)" ng-model="inputValue"';

            input.label = label ? label : $filter('stringParsers')('startCase', id);
            input = pullInTemplate.convertLabel($filter('stringParsers')('startCase', id), input, $scope);

            var uiTextareaObj = {
                input: input,
                settings: settings,
                tags: tagHTML,
                errors: errorMessages
            };
            var textarea = new iVXjsUIModule.textarea(uiTextareaObj);

            iElm.html(textarea.html);
            $compile(iElm.contents())($scope);
        };
    }

    _createClass(TextAreaInput, [{
        key: 'templateHTML',
        get: function get() {
            return '<div></div>';
        }
    }]);

    return TextAreaInput;
}();

TextAreaInput.$inject = ['$compile', '$filter', 'ivxjs.modules.ui', 'pullInTemplate'];

exports.default = (0, _createFactoryFunction2.default)(TextAreaInput);

},{"../controllers/input.textarea.js":312,"../utilities/create-factory-function.js":357,"../utilities/messages.error.js":360}],334:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _inputUrl = require('../controllers/input.url.js');

var _inputUrl2 = _interopRequireDefault(_inputUrl);

var _messagesError = require('../utilities/messages.error.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var UrlInput = function () {
    function UrlInput($compile, $filter, iVXjsUIModule, pullInTemplate) {
        _classCallCheck(this, UrlInput);

        this.template = this.templateHTML;
        this.transclude = true;
        this.restrict = 'E';
        this.require = "^ivxjsFormInput";
        this.replace = true;
        this.scope = {
            inputData: '=inputData'
        };
        this.controller = _inputUrl2.default;
        this.controllerAs = 'vm';
        this.link = function ($scope, iElm, iAttrs, controller) {
            var input = $scope.inputData;
            var _input = input,
                id = _input.id,
                name = _input.name,
                _input$errors = _input.errors,
                errors = _input$errors === undefined ? {} : _input$errors,
                labelHTML = _input.labelHTML,
                label = _input.label,
                _input$attributes = _input.attributes,
                attributes = _input$attributes === undefined ? {} : _input$attributes,
                type = _input.type,
                _input$settings = _input.settings,
                settings = _input$settings === undefined ? {} : _input$settings;

            var errorMessages = new _messagesError.ErrorMessages(input, errors, attributes);
            var tagHTML = 'ng-blur="vm.onChange(inputValue)" ng-model="inputValue"';

            input.label = label ? label : $filter('stringParsers')('startCase', id);
            input = pullInTemplate.convertLabel($filter('stringParsers')('startCase', id), input, $scope);

            var uiUrlObj = {
                input: input,
                settings: settings,
                tags: tagHTML,
                errors: errorMessages
            };
            var url = new iVXjsUIModule.url(uiUrlObj);

            iElm.html(url.html);
            $compile(iElm.contents())($scope);
        };
    }

    _createClass(UrlInput, [{
        key: 'templateHTML',
        get: function get() {
            return '<div></div>';
        }
    }]);

    return UrlInput;
}();

UrlInput.$inject = ['$compile', '$filter', 'ivxjs.modules.ui', 'pullInTemplate'];

exports.default = (0, _createFactoryFunction2.default)(UrlInput);

},{"../controllers/input.url.js":313,"../utilities/create-factory-function.js":357,"../utilities/messages.error.js":360}],335:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _stateHtml = require('../controllers/state.html.js');

var _stateHtml2 = _interopRequireDefault(_stateHtml);

var _audioEvents = require('../../constants/audio.events.js');

var _audioEvents2 = _interopRequireDefault(_audioEvents);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var HtmlState = function () {
    function HtmlState($state, $http, $compile, $sce, $timeout, iVXjs, iVXjsActions, iVXjsAudio, iVXjsBus) {
        _classCallCheck(this, HtmlState);

        this.template = this.templateHTML;
        this.restrict = 'E';
        this.replace = true;
        this.scope = {};
        this.controller = _stateHtml2.default;
        this.controllerAs = 'vm';
        this.link = function ($scope, iElm, iAttrs, controller) {
            var _$state$current$data = $state.current.data,
                id = _$state$current$data.id,
                html = _$state$current$data.html,
                templateUrl = _$state$current$data.templateUrl,
                _$state$current$data$ = _$state$current$data.onCompile,
                onCompile = _$state$current$data$ === undefined ? [] : _$state$current$data$,
                audio = _$state$current$data.audio;

            var audioEventNames = new _audioEvents2.default();

            if (templateUrl) {
                var safeTemplateUrl = $sce.getTrustedResourceUrl(templateUrl);

                controller.safeTemplateUrl = safeTemplateUrl;

                iElm.html('<div class="html-state-container" ng-include="vm.safeTemplateUrl"></div>');
            } else {
                iElm.html(html);
            }

            $scope.experience = iVXjs.experience.data;

            $timeout(function () {
                var hasTransition = onCompile.find(function (event, index) {
                    return event.eventName === "animateElement" && event.args.element === ".html-state-container";
                });

                if (!hasTransition) {
                    onCompile.push({
                        eventName: "animateElement",
                        args: {
                            element: ".html-state-container",
                            animationClasses: "show"
                        }
                    });
                }

                iVXjsActions.resolveActions(onCompile, function () {
                    if (audio && audio.src) {
                        iVXjsBus.emit(audioEventNames.PLAY);
                    }
                });
            }, 1);
            $compile(iElm.contents())($scope);
        };
    }

    _createClass(HtmlState, [{
        key: 'templateHTML',
        get: function get() {
            return '<div class="html-state-container" id="{{vm.id}}"></div>';
        }
    }]);

    return HtmlState;
}();

HtmlState.$inject = ['$state', '$http', '$compile', '$sce', '$timeout', 'iVXjs', 'ivxjs.actions', 'ivxjs.modules.audio', 'ivxjs.bus'];

exports.default = (0, _createFactoryFunction2.default)(HtmlState);

},{"../../constants/audio.events.js":364,"../controllers/state.html.js":314,"../utilities/create-factory-function.js":357}],336:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _stateInput = require('../controllers/state.input.js');

var _stateInput2 = _interopRequireDefault(_stateInput);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var InputState = function () {
    function InputState($state, $compile, $sce, iVXjs, iVXjsActions, iVXjsUIModule, pullInTemplate) {
        _classCallCheck(this, InputState);

        this.template = this.templateHTML;
        this.replace = true;
        this.restrict = 'E';
        this.scope = {};
        this.controller = _stateInput2.default;
        this.controllerAs = 'vm';
        this.link = function ($scope, iElm, iAttrs, controller) {
            var data = $state.current.data;
            var _data = data,
                headerHTML = _data.headerHTML,
                _data$footerHTML = _data.footerHTML,
                footerHTML = _data$footerHTML === undefined ? '' : _data$footerHTML,
                _data$onInputReady = _data.onInputReady,
                onInputReady = _data$onInputReady === undefined ? [] : _data$onInputReady,
                _data$form = _data.form,
                formSettings = _data$form === undefined ? {} : _data$form,
                _data$header = _data.header,
                header = _data$header === undefined ? {} : _data$header,
                _data$footer = _data.footer,
                footer = _data$footer === undefined ? {} : _data$footer;

            var formSection = '<ivxjs-form-input inputs=\'vm.inputs\' form-id=\'vm.id\' on-submit=\'vm.onSubmit\' form-settings="vm.formSettings"></ivxjs-form-input>';

            data = pullInTemplate.convertHeaderFooter(header, footer, data, controller);

            var inputStateFramework = new iVXjsUIModule.states.input(formSection, data);

            $scope.experience = iVXjs.experience.data;
            controller.formSettings = formSettings;

            iElm.html(inputStateFramework.html);
            $compile(iElm.contents())($scope);
        };
    }

    _createClass(InputState, [{
        key: 'templateHTML',
        get: function get() {
            return '<div class="input-state-container"></div>';
        }
    }]);

    return InputState;
}();

InputState.$inject = ['$state', '$compile', '$sce', 'iVXjs', 'ivxjs.actions', 'ivxjs.modules.ui', 'pullInTemplate'];

exports.default = (0, _createFactoryFunction2.default)(InputState);

},{"../controllers/state.input.js":315,"../utilities/create-factory-function.js":357}],337:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _audioEvents = require('../../constants/audio.events.js');

var _audioEvents2 = _interopRequireDefault(_audioEvents);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var NavigationState = function () {
	function NavigationState($state, $rootScope, $compile, $timeout, iVXjs, iVXjsModules, iVXjsBus, iVXjsAudio, iVXjsActions, pullInTemplate) {
		_classCallCheck(this, NavigationState);

		this.template = this.templateHTML;
		this.restrict = 'E';
		this.replace = true;
		this.scope = {};
		this.controller = ['$scope', function ($scope) {}];
		this.controllerAs = 'vm';
		this.link = function ($scope, iElm, iAttrs, controller) {
			var data = $state.current.data;
			var _data = data,
			    _data$links = _data.links,
			    links = _data$links === undefined ? [] : _data$links,
			    _data$header = _data.header,
			    header = _data$header === undefined ? {} : _data$header,
			    _data$footer = _data.footer,
			    footer = _data$footer === undefined ? {} : _data$footer,
			    audio = _data.audio,
			    _data$onLinksReady = _data.onLinksReady,
			    onLinksReady = _data$onLinksReady === undefined ? [] : _data$onLinksReady;

			var linkSection = links.reduce(function (html, link, index) {
				var linkString = angular.toJson(link);
				return html + '\n                    <ivxjs-anchor anchor-info=\'' + linkString + '\'></ivxjs-anchor>';
			}, '');
			var audioEventNames = new _audioEvents2.default();

			data = pullInTemplate.convertHeaderFooter(header, footer, data, controller);

			var thisNavigationState = new iVXjsModules.states.navigation(data, linkSection);

			$scope.experience = iVXjs.experience.data;
			$timeout(function () {
				var transitionAnimation = onLinksReady.find(function (event, index) {
					return event.eventName === "animateElement" && event.args.element === ".navigation-state-container";
				});

				if (!transitionAnimation) {
					onLinksReady.push({
						eventName: "animateElement",
						args: {
							element: ".navigation-state-container",
							animationClasses: "show"
						}
					});
				}

				iVXjsActions.resolveActions(onLinksReady, function () {
					if (audio && audio.src) {
						iVXjsBus.emit(audioEventNames.PLAY);
					}
				});
			}, 1);

			iElm.html(thisNavigationState.html);
			$compile(iElm.contents())($scope);
		};
	}

	_createClass(NavigationState, [{
		key: 'templateHTML',
		get: function get() {
			return '<div class="navigation-state-container"></div>';
		}
	}]);

	return NavigationState;
}();

NavigationState.$inject = ['$state', '$rootScope', '$compile', '$timeout', 'iVXjs', 'ivxjs.modules.ui', 'ivxjs.bus', 'ivxjs.modules.audio', 'ivxjs.actions', 'pullInTemplate'];

exports.default = (0, _createFactoryFunction2.default)(NavigationState);

},{"../../constants/audio.events.js":364,"../utilities/create-factory-function.js":357}],338:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _stateVideo = require('../controllers/state.video.js');

var _stateVideo2 = _interopRequireDefault(_stateVideo);

var _videoEvents = require('../../constants/video.events.js');

var _videoEvents2 = _interopRequireDefault(_videoEvents);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var VideoState = function () {
    function VideoState($compile, $state, $sce, $timeout, iVXjs, iVXjsBus, iVXjsUIModule, createInlineVideo, pullInTemplate) {
        _classCallCheck(this, VideoState);

        this.template = this.templateHTML;
        this.restrict = 'E';
        this.replace = true;
        this.scope = {};
        this.controller = _stateVideo2.default;
        this.controllerAs = 'vm';
        this.link = function ($scope, iElm, iAttrs, controller) {
            var _angular$copy = angular.copy($state.current),
                data = _angular$copy.data;

            controller.stateData = data;

            var _data = data,
                id = _data.id,
                _data$playerType = _data.playerType,
                playerType = _data$playerType === undefined ? "html5" : _data$playerType,
                _data$playerSettings = _data.playerSettings,
                playerSettings = _data$playerSettings === undefined ? {} : _data$playerSettings,
                _data$cuePoints = _data.cuePoints,
                cuePoints = _data$cuePoints === undefined ? [] : _data$cuePoints,
                _data$personalization = _data.personalizations,
                personalizations = _data$personalization === undefined ? [] : _data$personalization,
                _data$header = _data.header,
                header = _data$header === undefined ? {} : _data$header,
                _data$footer = _data.footer,
                footer = _data$footer === undefined ? {} : _data$footer;
            var vimeoId = playerSettings.vimeoId,
                youtubeId = playerSettings.youtubeId,
                inlineSrc = playerSettings.inlineSrc,
                _playerSettings$iphon = playerSettings.iphoneInline,
                iphoneInline = _playerSettings$iphon === undefined ? false : _playerSettings$iphon;

            var controlsHTML = '';

            if (typeof playerSettings.controls === 'string') {
                controlsHTML = '<ivxjs-' + playerSettings.controls + '-video-controls></ivxjs-' + playerSettings.controls + '-video-controls>';
            }

            if (vimeoId) playerType = 'vimeo';
            if (youtubeId) playerType = 'youtube';
            if (createInlineVideo.isiOS() && iphoneInline && inlineSrc) {
                playerType = 'html5';
                playerSettings.src = inlineSrc;
                data.isIphone = true;
            }

            var personalizationsHTML = personalizations.reduce(function (personalizationHTML, thisPersonalization, index) {
                thisPersonalization = pullInTemplate.convertTemplateUrlToHtml(thisPersonalization, $scope);

                var _thisPersonalization = thisPersonalization,
                    _thisPersonalization$ = _thisPersonalization.defaultAnimationClass,
                    defaultAnimationClass = _thisPersonalization$ === undefined ? 'hide' : _thisPersonalization$,
                    html = _thisPersonalization.html,
                    id = _thisPersonalization.id;


                return personalizationHTML + ' <div id="' + id + '" class="' + defaultAnimationClass + '">' + html + '</div> ';
            }, "");

            var videoPlayerHTML = '\n               <ivxjs-' + playerType + '-video-player settings="vm.stateData.playerSettings" state-data="vm.stateData"></ivxjs-' + playerType + '-video-player>\n               ' + controlsHTML + '\n               ' + personalizationsHTML;

            data = pullInTemplate.convertHeaderFooter(header, footer, data, controller);

            var videoFramework = new iVXjsUIModule.states.video(videoPlayerHTML, data);

            $scope.experience = iVXjs.experience.data;

            iElm.html(videoFramework.html);
            $compile(iElm.contents())($scope);

            if (createInlineVideo.isMobile() || createInlineVideo.isiOS()) {
                (function () {
                    var videoEventNames = new _videoEvents2.default();
                    $timeout(function () {
                        iVXjsBus.emit(videoEventNames.CAN_PLAY);
                    }, 500);
                })();
            }
        };
    }

    _createClass(VideoState, [{
        key: 'templateHTML',
        get: function get() {
            return '<div class="video-state-container"></div>';
        }
    }]);

    return VideoState;
}();

VideoState.$inject = ['$compile', '$state', '$sce', '$timeout', 'iVXjs', 'ivxjs.bus', 'ivxjs.modules.ui', 'createInlineVideo', 'pullInTemplate'];

exports.default = (0, _createFactoryFunction2.default)(VideoState);

},{"../../constants/video.events.js":378,"../controllers/state.video.js":316,"../utilities/create-factory-function.js":357}],339:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// CONTROLLER
// import {[CTRLNAME]} from '[CTRLFILE]';


var AnimateElement = function AnimateElement(iVXjs) {
    _classCallCheck(this, AnimateElement);

    this.restrict = 'A';
    this.controller = ["iVXjs", function (iVXjs) {}];
    this.link = function ($scope, iElm, iAttrs, controller) {
        iElm[0].addEventListener('click', function (event) {
            event.preventDefault();
            var value = iAttrs.ivxAnimate;

            var keyValue = extractKeyValue(value);

            iVXjs.experience.animateElement(keyValue);
        }, false);

        function extractKeyValue(valueString) {
            var updatedValue = valueString.trim();
            var parts = updatedValue.split(',');

            parts = parts.map(function (part, index) {
                var newPart = part.trim();

                newPart = newPart.replace(/[{}\'\"]/g, "");

                return newPart;
            });

            var element = parts[0];
            var animationClasses = parts[1] === "true" || parts[1] === "false" ? parts[1] === "true" : parts[1];

            return { element: element, animationClasses: animationClasses };
        }
    };
};

AnimateElement.$inject = ['iVXjs'];

exports.default = (0, _createFactoryFunction2.default)(AnimateElement);

},{"../utilities/create-factory-function.js":357}],340:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// CONTROLLER
// import {[CTRLNAME]} from '[CTRLFILE]';


var GoToState = function GoToState(iVXjs, iVXjsBus) {
    _classCallCheck(this, GoToState);

    this.restrict = 'A';
    this.controller = ["iVXjs", function (iVXjs) {}];
    this.link = function ($scope, iElm, iAttrs, controller) {
        iElm[0].addEventListener('click', function (event) {
            event.preventDefault();

            var stateId = iAttrs.ivxGoToState;


            iVXjs.experience.goToState({ stateId: stateId }, iVXjsBus);
        }, false);
    };
};

GoToState.$inject = ['iVXjs', 'ivxjs.bus'];

exports.default = (0, _createFactoryFunction2.default)(GoToState);

},{"../utilities/create-factory-function.js":357}],341:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// CONTROLLER
// import {[CTRLNAME]} from '[CTRLFILE]';

var RaiseiVXjsEvent = function RaiseiVXjsEvent(iVXjs, iVXjsBus) {
    _classCallCheck(this, RaiseiVXjsEvent);

    this.restrict = 'A';
    this.controller = ["iVXjs", function (iVXjs) {}];
    this.link = function ($scope, iElm, iAttrs, controller) {
        iElm[0].addEventListener('click', function (event) {
            event.preventDefault();

            var eventName = iAttrs.ivxEvent;


            iVXjsBus.emit(eventName);
        }, false);
    };
};

RaiseiVXjsEvent.$inject = ['iVXjs', 'ivxjs.bus'];

exports.default = (0, _createFactoryFunction2.default)(RaiseiVXjsEvent);

},{"../utilities/create-factory-function.js":357}],342:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// CONTROLLER
// import {[CTRLNAME]} from '[CTRLFILE]';


var SetData = function SetData(iVXjs) {
    _classCallCheck(this, SetData);

    this.restrict = 'A';
    this.controller = ["iVXjs", function (iVXjs) {}];
    this.link = function ($scope, iElm, iAttrs, controller) {
        iElm[0].addEventListener('click', function (event) {
            event.preventDefault();
            var value = iAttrs.ivxSetData;

            var keyValue = extractKeyValue(value);

            iVXjs.experience.setData(keyValue);
        }, false);

        function extractKeyValue(valueString) {
            var updatedValue = valueString.trim();
            var parts = updatedValue.split(',');

            parts = parts.map(function (part, index) {
                var newPart = part.trim();

                newPart = newPart.replace(/[{}]/g, "");

                if (index === 0) {
                    newPart = newPart.replace(/[\'\"]/g, "");
                }

                return newPart;
            });

            var key = parts[0];
            var value = parts[1] === "true" || parts[1] === "false" ? parts[1] === "true" : parts[1];

            return { key: key, value: value };
        }
    };
};

SetData.$inject = ['iVXjs'];

exports.default = (0, _createFactoryFunction2.default)(SetData);

},{"../utilities/create-factory-function.js":357}],343:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.Anchor = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _uiAnchor = require('../controllers/ui.anchor.js');

var _uiAnchor2 = _interopRequireDefault(_uiAnchor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Anchor = exports.Anchor = function () {
	function Anchor($compile, iVXjs, iVXjsUIModule, pullInTemplate) {
		_classCallCheck(this, Anchor);

		this.template = this.templateHTML;
		this.restrict = 'E';
		this.scope = {
			anchorInfo: "=anchorInfo"
		};
		this.controller = _uiAnchor2.default;
		this.controllerAs = 'vm';
		this.replace = true;
		this.link = function ($scope, iElm, iAttrs, controller) {
			var anchorInfo = $scope.anchorInfo;
			var _anchorInfo = anchorInfo,
			    _anchorInfo$attribute = _anchorInfo.attributes,
			    attributes = _anchorInfo$attribute === undefined ? {} : _anchorInfo$attribute;


			attributes['ng-click'] = 'vm.onLinkClick($event)';
			anchorInfo.attributes = attributes;
			controller.anchorInfo = anchorInfo;

			anchorInfo = pullInTemplate.convertLabel(anchorInfo.href, anchorInfo, $scope);

			var thisAnchor = new iVXjsUIModule.anchor(anchorInfo);

			$scope.experience = iVXjs.experience.data;

			iElm.html(thisAnchor.html);
			$compile(iElm.contents())($scope);
		};
	}

	_createClass(Anchor, [{
		key: 'templateHTML',
		get: function get() {
			return "<div></div>";
		}
	}]);

	return Anchor;
}();

Anchor.$inject = ['$compile', 'iVXjs', 'ivxjs.modules.ui', 'pullInTemplate'];

exports.default = (0, _createFactoryFunction2.default)(Anchor);

},{"../controllers/ui.anchor.js":317,"../utilities/create-factory-function.js":357}],344:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CascadingOptions = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _uiCascadingOptions = require('../controllers/ui.cascading-options.js');

var _uiCascadingOptions2 = _interopRequireDefault(_uiCascadingOptions);

var _messagesError = require('../utilities/messages.error.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CascadingOptions = exports.CascadingOptions = function () {
    function CascadingOptions($compile, $timeout, iVXjs, iVXjsBus, iVXjsUIModule) {
        _classCallCheck(this, CascadingOptions);

        this.template = this.templateHTML;
        this.restrict = 'E';
        this.scope = {
            inputData: "=inputData"
        };
        this.controller = _uiCascadingOptions2.default;
        this.controllerAs = 'vm';
        this.replace = true;

        this.link = function ($scope, iElm, iAttrs, controller) {
            var input = $scope.inputData;

            var defaultOptionTag = 'Select an option...';
            var _input$errors = input.errors,
                errors = _input$errors === undefined ? {} : _input$errors,
                _input$attributes = input.attributes,
                attributes = _input$attributes === undefined ? {} : _input$attributes,
                _input$settings = input.settings,
                settings = _input$settings === undefined ? {} : _input$settings;
            var cascadeRequired = attributes.required;
            var _settings$input = settings.input,
                inputSettings = _settings$input === undefined ? {} : _settings$input;
            var _inputSettings$displa = inputSettings.displayMap,
                displayMap = _inputSettings$displa === undefined ? {} : _inputSettings$displa;

            var tries = 0;

            updateView(controller.viewSettings);

            iVXjsBus.on('update-view', updateTree);

            $scope.$on("$destroy", function () {
                iVXjsBus.removeListener('update-view', updateTree);
            });

            function updateTree(tree) {
                updateView(tree);
            }

            function updateView(tree) {

                if (!tree) {
                    return;
                }

                var options = tree.options,
                    labels = tree.labels,
                    isStatic = tree.isStatic;

                var html = '';

                var viewSettings = options.map(function (selectableOptions, depth, options) {
                    var label = labels[depth];
                    var defaultDisplay = displayMap[label] ? displayMap[label] : "Select an option....";
                    var thisInput = {
                        id: input.id + '-' + depth,
                        options: tree.options[depth],
                        width: input.width,
                        name: input.id + '-' + depth,
                        label: label
                    };
                    var validClass = selectableOptions.length >= 1 ? 'cascade-dropdown-valid' : 'cascade-dropdown-invalid';
                    var OptionErrorMessages = new _messagesError.ErrorMessages(thisInput, errors, attributes);
                    var tagHTML = '\n                           ng-change=\'vm.modelUpdate(vm.currentSelection[' + depth + '])\'\n                           ng-options="option.name for option in vm.viewSettings.options[' + depth + '] track by option.key" \n                           ng-model=\'vm.currentSelection[' + depth + ']\'';

                    var uiOptionsObj = {
                        input: thisInput,
                        defaultDisplay: defaultDisplay,
                        settings: {},
                        tags: tagHTML,
                        errors: OptionErrorMessages
                    };

                    var selectorHTML = new iVXjsUIModule.options(uiOptionsObj).html;
                    var _input$settings2 = input.settings,
                        settings = _input$settings2 === undefined ? {} : _input$settings2;
                    var _settings$input2 = settings.input,
                        inputSettings = _settings$input2 === undefined ? {} : _settings$input2;


                    return {
                        html: '<div class=\'' + validClass + ' ivxjs-grid-1-1\'>' + selectorHTML + '</div>',
                        settings: inputSettings,
                        inputName: input.id + '-' + depth
                    };
                });

                html = '' + iVXjsUIModule.style.addWidthClasses(viewSettings);
                iElm.html(html);
                $compile(iElm.contents())($scope);

                $timeout(function () {

                    if (iVXjsUIModule.initializeInput) {
                        iVXjsUIModule.initializeInput();
                    };

                    tries += 1;
                    var isValid = !cascadeRequired;

                    if (cascadeRequired) {

                        viewSettings.forEach(function (viewSetting, index) {
                            var inputName = viewSetting.inputName;

                            var thisSelection = [].concat(controller.currentSelection)[index];
                            var hasSelection = typeof thisSelection !== 'undefined';
                            var hasFormInput = $scope.$parent && $scope.$parent.formInput && $scope.$parent.formInput[inputName];

                            if (hasSelection && thisSelection.items && hasFormInput) {
                                $scope.$parent.formInput[inputName].$setValidity('required', hasSelection);
                            }
                        });
                    }
                }, 1);
            }
        };
    }

    _createClass(CascadingOptions, [{
        key: 'templateHTML',
        get: function get() {
            return "<div></div>";
        }
    }]);

    return CascadingOptions;
}();

CascadingOptions.$inject = ['$compile', '$timeout', 'iVXjs', 'ivxjs.bus', 'ivxjs.modules.ui'];

exports.default = (0, _createFactoryFunction2.default)(CascadingOptions);

},{"../controllers/ui.cascading-options.js":318,"../utilities/create-factory-function.js":357,"../utilities/messages.error.js":360}],345:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _videoControlsStandard = require('../controllers/video.controls.standard.js');

var _videoControlsStandard2 = _interopRequireDefault(_videoControlsStandard);

var _videoEvents = require('../../constants/video.events.js');

var _videoEvents2 = _interopRequireDefault(_videoEvents);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var videoEventNames = new _videoEvents2.default();

var StandardControls = function () {
    function StandardControls(iVXjsUI, iVXjsBus) {
        _classCallCheck(this, StandardControls);

        this.template = this.templateHTML;
        this.restrict = 'E';
        this.scope = {};
        this.controller = _videoControlsStandard2.default;
        this.controllerAs = 'vm';
        this.link = function ($scope, iElm, iAttrs, controller) {
            var standardControls = new iVXjsUI.videoControls(iElm.find('div'), iVXjsBus);

            controller.controls = standardControls;

            standardControls.addEventListeners(iVXjsBus);
        };
    }

    _createClass(StandardControls, [{
        key: 'templateHTML',
        get: function get() {
            return '<div class="video-control-container"></div>';
        }
    }]);

    return StandardControls;
}();

StandardControls.$inject = ['ivxjs.modules.ui', 'ivxjs.bus'];

exports.default = (0, _createFactoryFunction2.default)(StandardControls);

},{"../../constants/video.events.js":378,"../controllers/video.controls.standard.js":319,"../utilities/create-factory-function.js":357}],346:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _videoHtml = require('../controllers/video.html5.js');

var _videoHtml2 = _interopRequireDefault(_videoHtml);

var _videoEvents = require('../../constants/video.events.js');

var _videoEvents2 = _interopRequireDefault(_videoEvents);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var HTML5VideoPlayer = function () {
    function HTML5VideoPlayer($compile, $timeout, iVXjsVideoModule, iVXjsBus, iVXjsLog, createInlineVideo) {
        _classCallCheck(this, HTML5VideoPlayer);

        this.template = this.templateHTML;
        this.restrict = 'E';
        this.scope = {
            settings: "=settings",
            stateData: "=stateData"
        };
        this.controller = _videoHtml2.default;
        this.controllerAs = 'vm';
        this.link = function ($scope, iElm, iAttrs, controller) {
            var settings = $scope.settings,
                stateData = $scope.stateData;
            var _stateData = stateData,
                _stateData$playerSett = _stateData.playerSettings,
                playerSettings = _stateData$playerSett === undefined ? {} : _stateData$playerSett;
            var _playerSettings$iphon = playerSettings.iphoneInline,
                iphoneInline = _playerSettings$iphon === undefined ? false : _playerSettings$iphon;

            var videoEventNames = new _videoEvents2.default();

            stateData = {
                id: stateData.id,
                name: stateData.name,
                url: stateData.url,
                isiOS: createInlineVideo.isiOS()
            };

            var thisVideoPlayer = new iVXjsVideoModule.html5(iElm.find('div'), settings, stateData, iVXjsLog);

            thisVideoPlayer.addEventListeners(iVXjsBus);
            $timeout(function () {
                if (createInlineVideo.isiOS() && iphoneInline) {
                    createInlineVideo.makeInlineVideo(iElm.find('video')[0], iElm.find('div')[0], $scope);
                    createInlineVideo.emitCanPlay(iElm.find('video')[0]);
                }
            }, 1);

            controller.player = thisVideoPlayer;

            $compile(iElm.contents())($scope);
        };
    }

    _createClass(HTML5VideoPlayer, [{
        key: 'templateHTML',
        get: function get() {
            return '<div class="video-player-container"></div>';
        }
    }]);

    return HTML5VideoPlayer;
}();

HTML5VideoPlayer.$inject = ['$compile', '$timeout', 'ivxjs.modules.video', 'ivxjs.bus', 'ivxjs.log', 'createInlineVideo'];

exports.default = (0, _createFactoryFunction2.default)(HTML5VideoPlayer);

},{"../../constants/video.events.js":378,"../controllers/video.html5.js":320,"../utilities/create-factory-function.js":357}],347:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _videoVimeo = require('../controllers/video.vimeo.js');

var _videoVimeo2 = _interopRequireDefault(_videoVimeo);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var VimeoVideoPlayer = function () {
    function VimeoVideoPlayer($rootScope, $compile, $window, $timeout, iVXjsBus, iVXjsLog, iVXjsVideoModule, createInlineVideo) {
        _classCallCheck(this, VimeoVideoPlayer);

        this.template = this.templateHTML;
        this.restrict = 'E';
        this.replace = true;
        this.scope = {
            settings: "=settings",
            stateData: "=stateData"
        };
        this.controller = _videoVimeo2.default;
        this.controllerAs = 'vm';
        this.link = function ($scope, iElm, iAttrs, controller) {
            if (!iVXjsVideoModule.vimeo) return;

            var settings = $scope.settings,
                stateData = $scope.stateData;


            stateData = {
                id: stateData.id,
                url: stateData.url,
                name: stateData.name
            };
            settings.id = settings.vimeoId;

            var VimeoPlayer = new iVXjsVideoModule.vimeo(iElm.find('div'), settings, stateData, iVXjsLog);

            VimeoPlayer.addEventListeners(iVXjsBus);

            controller.player = VimeoPlayer;

            $compile(iElm.contents())($scope);
        };
    }

    _createClass(VimeoVideoPlayer, [{
        key: 'templateHTML',
        get: function get() {
            return '\n            <div class="vimeo-player-container">\n                <div></div>\n            </div>';
        }
    }]);

    return VimeoVideoPlayer;
}();

VimeoVideoPlayer.$inject = ['$rootScope', '$compile', '$window', '$timeout', 'ivxjs.bus', 'ivxjs.log', 'ivxjs.modules.video', 'createInlineVideo'];

exports.default = (0, _createFactoryFunction2.default)(VimeoVideoPlayer);

},{"../controllers/video.vimeo.js":321,"../utilities/create-factory-function.js":357}],348:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _videoYoutube = require('../controllers/video.youtube.js');

var _videoYoutube2 = _interopRequireDefault(_videoYoutube);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var YoutubeVideoPlayer = function () {
    function YoutubeVideoPlayer($rootScope, $compile, $window, iVXjsBus, iVXjsLog, iVXjsVideoModule) {
        _classCallCheck(this, YoutubeVideoPlayer);

        this.template = this.templateHTML;
        this.restrict = 'E';
        this.scope = {
            settings: "=settings",
            stateData: "=stateData"
        };
        this.controller = _videoYoutube2.default;
        this.controllerAs = 'vm';
        this.link = function ($scope, iElm, iAttrs, controller) {
            if (!iVXjsVideoModule.youtube) return;

            var settings = $scope.settings,
                stateData = $scope.stateData;


            settings.id = settings.youtubeId;
            stateData = {
                id: stateData.id,
                url: stateData.url,
                name: stateData.name
            };

            var YouTubePlayer = new iVXjsVideoModule.youtube(iElm.find('div'), settings, stateData, iVXjsLog);

            controller.player = YouTubePlayer;

            $compile(iElm.contents())($scope);

            if (typeof YT === 'undefined') {
                $window.onYouTubeIframeAPIReady = init;
            } else {
                YT.ready(init);
            }

            function init() {
                YouTubePlayer.createPlayer();
                YouTubePlayer.addEventListeners(iVXjsBus);
            }
        };
    }

    _createClass(YoutubeVideoPlayer, [{
        key: 'templateHTML',
        get: function get() {
            return '\n           <div class="youtube-player-container">\n               <div id="youtube-player"></div>\n           </div>';
        }
    }]);

    return YoutubeVideoPlayer;
}();

YoutubeVideoPlayer.$inject = ['$rootScope', '$compile', '$window', 'ivxjs.bus', 'ivxjs.log', 'ivxjs.modules.video'];

exports.default = (0, _createFactoryFunction2.default)(YoutubeVideoPlayer);

},{"../controllers/video.youtube.js":322,"../utilities/create-factory-function.js":357}],349:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var StringParsers = exports.StringParsers = function () {
    function StringParsers(id) {
        _classCallCheck(this, StringParsers);
    }

    _createClass(StringParsers, [{
        key: 'camelCase',
        value: function camelCase(id) {
            var inputParts = id.split('-');
            var self = this;
            var inputName = inputParts && inputParts.length > 0 ? inputParts.reduce(function (inputName, inputPart) {
                return '' + inputName + self.capitalize(inputPart);
            }) : '' + inputParts[0];

            return inputName;
        }
    }, {
        key: 'startCase',
        value: function startCase(id) {
            var inputParts = id.split('-');
            var self = this;
            var inputName = inputParts && inputParts.length > 0 ? inputParts.reduce(function (inputName, inputPart) {
                return '' + inputName + self.capitalize(inputPart) + ' ';
            }, '') : '' + inputParts[0];

            return inputName;
        }
    }, {
        key: 'capitalize',
        value: function capitalize(tempString) {
            return tempString[0].toUpperCase() + tempString.substring(1);
        }
    }]);

    return StringParsers;
}();

},{}],350:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var iVXjsSetup = function () {
    function iVXjsSetup() {
        _classCallCheck(this, iVXjsSetup);
    }

    _createClass(iVXjsSetup, [{
        key: '$get',
        value: function $get() {}
    }, {
        key: 'setDefaultUrl',
        value: function setDefaultUrl($urlRouterProvider, defaultState, iVXjs) {
            var defaultStateID = iVXjs.rules(defaultState);

            var _iVXjs$config$states$ = iVXjs.config.states.find(function (state) {
                return state.id === defaultStateID;
            }),
                url = _iVXjs$config$states$.url;

            $urlRouterProvider.otherwise(url);
        }
    }, {
        key: 'createStates',
        value: function createStates($stateProvider, states) {
            states.forEach(function (state, index) {
                var type = state.type,
                    id = state.id,
                    url = state.url,
                    _state$onEnter = state.onEnter,
                    onEnter = _state$onEnter === undefined ? [] : _state$onEnter,
                    _state$onExit = state.onExit,
                    onExit = _state$onExit === undefined ? [] : _state$onExit;


                $stateProvider.state(id, {
                    url: url,
                    data: state,
                    template: '<ivxjs-' + type + '-state></ivxjs-' + type + '-state>',
                    onEnter: ['$rootScope', 'ivxjs.actions', 'ivxjs.bus', function ($rootScope, iVXjsActions, iVXjsBus) {
                        iVXjsActions.resolveActions(onEnter, function () {});
                    }],
                    onExit: ['$rootScope', 'ivxjs.actions', 'ivxjs.bus', function ($rootScope, iVXjsActions, iVXjsBus) {
                        iVXjsBus.emit('iVX:video:dispose');
                        iVXjsActions.resolveActions(onExit, function () {});
                    }]
                });
            });
        }
    }]);

    return iVXjsSetup;
}();

iVXjsSetup.$inject = [];

exports.default = (0, _createFactoryFunction2.default)(iVXjsSetup);

},{"../utilities/create-factory-function.js":357}],351:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Actions = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeParsers = require('../../utilities/type-parsers.js');

var _processor = require('../../core/processor.js');

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var typeValidator = new _typeParsers.TypeValidator();

var Actions = exports.Actions = function (_ActionProcessor) {
    _inherits(Actions, _ActionProcessor);

    function Actions($rootScope, $state, $window, iVXjs, iVXjsBus) {
        _classCallCheck(this, Actions);

        var _this = _possibleConstructorReturn(this, (Actions.__proto__ || Object.getPrototypeOf(Actions)).call(this, iVXjs));

        _this.$rootScope = $rootScope;
        _this.$state = $state;
        _this.$window = $window;
        _this.iVXjsBus = iVXjsBus;
        _this.iVXjs = iVXjs;
        return _this;
    }

    _createClass(Actions, [{
        key: 'navigateToNextState',
        value: function navigateToNextState(nextArray) {
            if (typeValidator.isEmpty(nextArray)) return;

            this.$state.go(this.iVXjs.rules(nextArray));
        }
    }, {
        key: 'resolveThenNavigate',
        value: function resolveThenNavigate(actionArray, nextArray) {
            var self = this;

            if (typeValidator.isEmpty(actionArray)) {
                this.navigateToNextState(nextArray);
                return;
            }

            this.resolveActions(actionArray, function () {
                self.navigateToNextState(nextArray);
            });
        }
    }]);

    return Actions;
}(_processor.ActionProcessor);

Actions.$inject = ['$rootScope', '$state', '$window', 'iVXjs', 'ivxjs.bus'];

exports.default = (0, _createFactoryFunction2.default)(Actions);

},{"../../core/processor.js":382,"../../utilities/type-parsers.js":428,"../utilities/create-factory-function.js":357}],352:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BusService = exports.Bus = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeParsers = require('../../utilities/type-parsers.js');

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var typeValidator = new _typeParsers.TypeValidator();

var Bus = exports.Bus = function () {
    function Bus($rootScope, iVXjs) {
        _classCallCheck(this, Bus);

        this.$rootScope = $rootScope;
        this.iVXjs = iVXjs;
    }

    _createClass(Bus, [{
        key: 'eventNames',
        value: function eventNames() {
            return this.iVXjs.Bus;
        }
    }, {
        key: 'once',
        value: function once(eventName, callback) {
            var _this = this;

            var self = this;

            this.iVXjs.Bus.once(eventName, function (args) {
                callback.apply(_this, args);

                if (!self.$rootScope.$$phase) {
                    self.$rootScope.$apply();
                }
            });
        }
    }, {
        key: 'on',
        value: function on(eventName, callback) {
            var self = this;
            var _callback$name = callback.name,
                fnName = _callback$name === undefined ? Math.random().toString(36).substring(7) : _callback$name;

            var enhancedCallbackString = '\n            return function ' + fnName + '(args){\n               var customArgs = Array.prototype.slice.call(arguments);\n                callback.apply(this, customArgs);\n                \n                if(!$rootScope.$$phase){\n                    $rootScope.$apply();\n                }\n            }\n        ';
            var enhancedCallback = new Function('callback', '$rootScope', enhancedCallbackString)(callback, this.$rootScope);

            this.iVXjs.Bus.on(eventName, enhancedCallback);

            return enhancedCallback;
        }
    }, {
        key: 'emit',
        value: function emit(eventName) {
            for (var _len = arguments.length, rest = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                rest[_key - 1] = arguments[_key];
            }

            this.iVXjs.Bus.emit(eventName, rest);
        }
    }, {
        key: 'removeListener',
        value: function removeListener(eventName, callback) {
            this.iVXjs.Bus.removeListener(eventName, callback);
        }
    }]);

    return Bus;
}();

Bus.$inject = ['$rootScope', 'iVXjs'];

var BusService = (0, _createFactoryFunction2.default)(Bus);

exports.BusService = BusService;

},{"../../utilities/type-parsers.js":428,"../utilities/create-factory-function.js":357}],353:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.HttpInterceptors = undefined;

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _httpEvents = require('../../constants/http.events.js');

var _httpEvents2 = _interopRequireDefault(_httpEvents);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var httpEventNames = new _httpEvents2.default();

var HttpInterceptors = exports.HttpInterceptors = function HttpInterceptors($q, iVXjs, iVXjsLog) {
    _classCallCheck(this, HttpInterceptors);

    this.request = function (config) {
        iVXjsLog.log('Requested Template: ' + config.url);
        iVXjs.Bus.emit(httpEventNames.REQUEST_SUCCESS, config);
        return config;
    };
    this.requestError = function (rejection) {
        iVXjs.Bus.emit(httpEventNames.REQUEST_ERROR, rejection);
        iVXjsLog.error({ message: rejection.data }, "HTTP");

        return $q.reject(rejection);
    };
    this.response = function (response) {
        iVXjsLog.log('Loaded Template: ' + response.config.url);
        iVXjs.Bus.emit(httpEventNames.RESPONSE_SUCCESS, response);
        return response;
    };
    this.responseError = function (rejection) {
        iVXjsLog.error({ message: rejection.data, info: rejection }, "HTTP");
        iVXjs.Bus.emit(httpEventNames.RESPONSE_ERROR, rejection);

        return $q.reject(rejection);
    };
};

HttpInterceptors.$inject = ["$q", "iVXjs", "ivxjs.log"];

exports.default = (0, _createFactoryFunction2.default)(HttpInterceptors);

},{"../../constants/http.events.js":367,"../utilities/create-factory-function.js":357}],354:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

var _videoEvents = require('../../constants/video.events.js');

var _videoEvents2 = _interopRequireDefault(_videoEvents);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var videoEventNames = new _videoEvents2.default();

var CreateInlineVideo = function () {
	function CreateInlineVideo($window, $timeout, iVXjsBus) {
		_classCallCheck(this, CreateInlineVideo);

		this.$window = $window;
		this.$timeout = $timeout;
		this.iVXjsBus = iVXjsBus;
	}

	_createClass(CreateInlineVideo, [{
		key: 'emitCanPlay',
		value: function emitCanPlay(video) {
			var self = this;

			if (navigator.userAgent.match('CriOS')) {

				self.iVXjsBus.once(videoEventNames.PLAY, function () {

					self.iVXjsBus.emit(videoEventNames.READY_PLAYER, video);
				});
				self.iVXjsBus.emit(videoEventNames.CAN_PLAY, video);
				return;
			}

			this.$timeout(function () {
				if (video.readyState < 1) {
					self.emitCanPlay(video);
					return;
				}
				self.iVXjsBus.emit(videoEventNames.CAN_PLAY, video);
			}, 100);
		}
	}, {
		key: 'makeInlineVideo',
		value: function makeInlineVideo(video, container, $scope) {
			if (typeof makeVideoPlayableInline === 'undefined') return;

			var self = this;
			var play = false;

			video.setAttribute('webkit-playsinline', '');
			makeVideoPlayableInline(video);

			this.iVXjsBus.on(videoEventNames.ADD_PLAYING_CLASS, function () {
				container.className = video.className + ' is-playing';
				play = !play;
			});

			video.addEventListener('touchstart', function () {

				if (!play) {
					video.play();
					container.className = video.className + ' is-playing';
				} else {
					video.pause();
					$scope.isPlaying = false;
					container.className = video.className.replace('is-playing', '');
				}

				play = !play;
				$scope.$apply();
			});

			this.iVXjsBus.once(videoEventNames.DISPOSE, function () {
				video.pause();
			});
		}
	}, {
		key: 'isiOS',
		value: function isiOS() {
			var userAgent = navigator.userAgent || navigator.vendor || window.opera;
			return userAgent.match(/iPhone/i) || userAgent.match(/iPad/i);
		}
	}, {
		key: 'isMobile',
		value: function isMobile() {
			var check = false;
			(function (a) {
				if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) check = true;
			})(navigator.userAgent || navigator.vendor || window.opera);
			return check;
		}
	}]);

	return CreateInlineVideo;
}();

CreateInlineVideo.$inject = ['$window', '$timeout', 'ivxjs.bus'];

exports.default = (0, _createFactoryFunction2.default)(CreateInlineVideo);

},{"../../constants/video.events.js":378,"../utilities/create-factory-function.js":357}],355:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.PullInTemplate = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _createFactoryFunction = require('../utilities/create-factory-function.js');

var _createFactoryFunction2 = _interopRequireDefault(_createFactoryFunction);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PullInTemplate = exports.PullInTemplate = function () {
	function PullInTemplate($sce) {
		_classCallCheck(this, PullInTemplate);

		this.$sce = $sce;
	}

	_createClass(PullInTemplate, [{
		key: 'convertTemplateUrlToHtml',
		value: function convertTemplateUrlToHtml(data, $scope) {
			if (data.templateUrl) {
				var templateUrl = data.templateUrl;
				var safeTemplateUrl = this.$sce.getTrustedResourceUrl(templateUrl);
				var templateKey = 'template' + Math.random().toString(36).substring(7);

				$scope[templateKey] = safeTemplateUrl;
				data.html = '<div ng-include="' + templateKey + '"></div>';
			}

			return data;
		}
	}, {
		key: 'convertHeaderFooter',
		value: function convertHeaderFooter(header, footer, data, controller) {
			var headerTemplateUrl = header.templateUrl,
			    html = header.html;
			var footerTemplateUrl = footer.templateUrl;


			if (headerTemplateUrl) {
				var safeHeaderTemplateUrl = this.$sce.getTrustedResourceUrl(headerTemplateUrl);

				controller.safeHeaderTemplateUrl = safeHeaderTemplateUrl;
				header.html = '<div ng-include="vm.safeHeaderTemplateUrl"></div>';
				data.header = header;
			}

			if (footerTemplateUrl) {
				var safeFooterTemplateUrl = this.$sce.getTrustedResourceUrl(footerTemplateUrl);

				controller.safeFooterTemplateUrl = safeFooterTemplateUrl;
				footer.html = '<div ng-include="vm.safeFooterTemplateUrl"></div>';
				data.footer = footer;
			}

			if (!header.html) {
				header.html = '<h1>' + data.name + '</h1>';
				data.header = header;
			}

			return data;
		}
	}, {
		key: 'getTemplateKey',
		value: function getTemplateKey(labelTemplateUrl) {
			var newTemplateUrl = labelTemplateUrl.replace('/', '-').replace('.', '-').split('-');
			var newKey = newTemplateUrl.reduce(function (key, word, index) {
				if (index === 0) return word;

				var capitalizeWord = word[0].toUpperCase();
				capitalizeWord = capitalizeWord + word.substring(1);

				return '' + key + capitalizeWord;
			}, '');

			return '' + newKey;
		}
	}, {
		key: 'convertLabel',
		value: function convertLabel() {
			var defaultLabel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
			var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
			var $scope = arguments[2];
			var labelHTML = data.labelHTML,
			    _data$label = data.label,
			    label = _data$label === undefined ? defaultLabel : _data$label,
			    labelTemplateUrl = data.labelTemplateUrl,
			    id = data.id,
			    _data$classes = data.classes,
			    classes = _data$classes === undefined ? "" : _data$classes;


			if (labelTemplateUrl) {
				var safeLabelTemplateUrl = this.$sce.getTrustedResourceUrl(labelTemplateUrl);
				var templateKey = 'label' + Math.random().toString(36).substring(2, 7).toUpperCase();

				$scope[templateKey] = safeLabelTemplateUrl;
				data.labelHTML = '<div ng-include="' + templateKey + '"></div>';
			}

			return data;
		}
	}]);

	return PullInTemplate;
}();

PullInTemplate.$inject = ['$sce'];

exports.default = (0, _createFactoryFunction2.default)(PullInTemplate);

},{"../utilities/create-factory-function.js":357}],356:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeParsers = require('../../utilities/type-parsers.js');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var thisTypeValidator = new _typeParsers.TypeValidator();

var _class = function _class(selector, template, audioClass) {
    _classCallCheck(this, _class);

    var thisSelector = !thisTypeValidator.isEmpty(selector) ? selector : '#ivx';
    var element = document.querySelector(thisSelector);

    if (element) {
        element.setAttribute('ui-view', '');
        this.selector = element;
        return;
    }

    throw new Error('iVX.js requires an element to add to. Please add a selector to the init funtion or "<div id=\"ivx\"></div>" to your body');
};

exports.default = _class;

},{"../../utilities/type-parsers.js":428}],357:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = createFactoryFunction;
function createFactoryFunction(constructor) {
	var constructorFn = constructor;
	var args = constructorFn.$inject;
	var factoryFunction = function factoryFunction() {
		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return new (Function.prototype.bind.apply(constructorFn, [null].concat(args)))();
	};

	args.push(factoryFunction);

	return args;
}

},{}],358:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DateParser = exports.DateParser = function () {
    function DateParser(date) {
        _classCallCheck(this, DateParser);

        if (!(date instanceof Date)) {
            this.rawDate = new Date(date);
        } else {
            this.rawDate = date;
        }
    }

    _createClass(DateParser, [{
        key: "formatForDateTimeLocalInput",
        value: function formatForDateTimeLocalInput() {
            var date = this.formatForDateInput();
            var time = this.getTime();

            return date + "T" + time;
        }
    }, {
        key: "getTime",
        value: function getTime() {
            return this.getHours() + ":" + this.getMinutes() + ":" + this.getSeconds();
        }
    }, {
        key: "getHours",
        value: function getHours() {
            var rawHours = this.rawDate.getHours();

            return "" + (rawHours < 10 ? "0" + rawHours : rawHours);
        }
    }, {
        key: "getMinutes",
        value: function getMinutes() {
            var rawMinutes = this.rawDate.getMinutes();

            return "" + (rawMinutes < 10 ? "0" + rawMinutes : rawMinutes);
        }
    }, {
        key: "getSeconds",
        value: function getSeconds() {
            var rawSeconds = this.rawDate.getSeconds();

            return "" + (rawSeconds < 10 ? "0" + rawSeconds : rawSeconds);
        }
    }, {
        key: "formatForDateInput",
        value: function formatForDateInput() {
            var month = this.formatMonth();
            var year = this.rawDate.getFullYear();
            var day = this.formatDay();

            return year + "-" + month + "-" + day;
        }
    }, {
        key: "formatDay",
        value: function formatDay() {
            var dayNum = this.rawDate.getDate();

            return "" + (dayNum < 10 ? '0' + dayNum : dayNum);
        }
    }, {
        key: "formatMonth",
        value: function formatMonth() {
            var monthNum = this.rawDate.getMonth() + 1;

            return "" + (monthNum < 10 ? '0' + monthNum : monthNum);
        }
    }]);

    return DateParser;
}();

},{}],359:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InputControllerHelper = undefined;

var _typeParsers = require('../../utilities/type-parsers.js');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var myTypeValidator = new _typeParsers.TypeValidator();

var InputControllerHelper = exports.InputControllerHelper = function InputControllerHelper($scope, iVXjs, iVXjsActions) {
    _classCallCheck(this, InputControllerHelper);

    var input = $scope.inputData;

    var currentExperienceValue = iVXjs.experience.data[input.name];

    if (input.type === 'checkbox') {
        $scope.inputValue = currentExperienceValue;
    } else if (currentExperienceValue) {
        $scope.inputValue = currentExperienceValue;
    }

    $scope.$on('changed', function (input, value) {
        $scope.$apply();
    });

    this.onChange = function (value) {
        if (input.type === 'checkbox') {
            value = value ? 'true' : 'false';
        }

        if (!myTypeValidator.isEmpty(value) || value instanceof Date) {

            if (value === 'true' || value === 'false') {
                value = value === 'true';
            }

            var name = input.name,
                _input$onChange = input.onChange,
                onChange = _input$onChange === undefined ? [] : _input$onChange;


            onChange.unshift({
                eventName: 'setData',
                args: {
                    key: name,
                    value: value
                }
            });

            iVXjsActions.resolveActions(onChange, function () {});
        }
    };
};

},{"../../utilities/type-parsers.js":428}],360:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ErrorMessages = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeParsers = require('../../utilities/type-parsers.js');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var thisObjectParser = new _typeParsers.ObjectParsers();

var ErrorMessages = exports.ErrorMessages = function () {
    function ErrorMessages(input, errors) {
        var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        _classCallCheck(this, ErrorMessages);

        var inputName = input.name,
            inputType = input.type;

        this.inputName = inputName;
        this.inputType = inputType;
        this.errors = errors;
        this.attributes = attributes;
    }

    _createClass(ErrorMessages, [{
        key: 'tags',
        get: function get() {
            var attributes = this.attributes;

            var angularErrorMap = this.angularErrorMap;
            var nonAngular = this.nonAngular;
            var nonValidate = this.nonValidate;

            return thisObjectParser.reduce(attributes, function (tags, attributeValue, attributeKey) {
                if (nonValidate.indexOf(attributeKey) >= 0) return tags;
                var tag = nonAngular.indexOf(attributeKey) >= 0 ? attributeKey + '="' + attributeValue + '"' : 'ng-' + angularErrorMap[attributeKey] + ' = "' + attributeValue + '" ';
                return tags + ' ' + tag;
            }, '');
        }
    }, {
        key: 'messages',
        get: function get() {
            var inputName = this.inputName,
                inputType = this.inputType,
                errors = this.errors,
                attributes = this.attributes;

            var angularErrorMap = this.angularErrorMap;
            var defaultMessages = this.defaultErrorMessages;
            var errorMessages = Object.keys(attributes).map(function (attributeKey, index) {
                var message = errors && errors[attributeKey] ? errors[attributeKey] : defaultMessages[attributeKey];
                var attrHTML = 'ng-show="($parent.formInput[\'' + inputName + '\'].$dirty || $parent.formInput.$submitted) && $parent.formInput[\'' + inputName + '\'].$error.' + angularErrorMap[attributeKey] + '"';

                return {
                    message: message,
                    attrHTML: attrHTML
                };
            });

            if (inputType && inputType !== 'text' && inputType != "options") {
                errorMessages.push(this.inputTypeError);
            }

            return errorMessages;
        }
    }, {
        key: 'inputTypeError',
        get: function get() {
            var inputName = this.inputName,
                inputType = this.inputType,
                errors = this.errors;

            var errorMessage = errors[inputType];

            return {
                message: errorMessage ? errorMessage : "Invalid " + inputType,
                attrHTML: 'ng-show="($parent.formInput[\'' + inputName + '\'].$dirty || $parent.formInput.$submitted) && $parent.formInput[\'' + inputName + '\'].$error.' + inputType + '"'
            };
        }
    }, {
        key: 'nonAngular',
        get: function get() {
            return ['min', 'max', 'readonly', 'placeholder', 'step', 'readonly', 'style'];
        }
    }, {
        key: 'nonValidate',
        get: function get() {
            return ['step', 'placeholder', 'readonly'];
        }
    }, {
        key: 'angularErrorMap',
        get: function get() {
            return {
                minlength: 'minlength',
                min: "min",
                max: "max",
                required: 'required',
                maxlength: 'maxlength'
            };
        }
    }, {
        key: 'defaultErrorMessages',
        get: function get() {
            return {
                minlength: 'Too Short',
                min: "Too Low",
                max: "Too High",
                required: 'Required',
                maxlength: 'Too Long'
            };
        }
    }]);

    return ErrorMessages;
}();

},{"../../utilities/type-parsers.js":428}],361:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _class = function _class($state) {
    _classCallCheck(this, _class);

    var stateData = $state.current.data;
    this.stateData = stateData;
};

exports.default = _class;

},{}],362:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _angular = require("./angular.js");

var _angular2 = _interopRequireDefault(_angular);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _class = function (_AngularConstants) {
    _inherits(_class, _AngularConstants);

    function _class() {
        _classCallCheck(this, _class);

        var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));

        var eventNames = {
            TEMPLATE_NOT_FOUND: "template-not-found",
            BOOTSTRAPPED: "bootstrapped"
        };

        _this.addNames(eventNames);
        return _this;
    }

    _createClass(_class, [{
        key: "convention",
        value: function convention(eventName) {
            var DELIMETER = this.DELIMETER;


            return "" + _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "convention", this).call(this) + DELIMETER + eventName;
        }
    }]);

    return _class;
}(_angular2.default);

exports.default = _class;

},{"./angular.js":363}],363:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _index = require("./index.js");

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _class = function (_iVXjsConstants) {
    _inherits(_class, _iVXjsConstants);

    function _class() {
        _classCallCheck(this, _class);

        var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));

        _this.ANGULAR = "angular";
        return _this;
    }

    _createClass(_class, [{
        key: "convention",
        value: function convention() {
            var DELIMETER = this.DELIMETER,
                ANGULAR = this.ANGULAR;


            return "" + _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "convention", this).call(this) + DELIMETER + ANGULAR;
        }
    }]);

    return _class;
}(_index2.default);

exports.default = _class;

},{"./index.js":373}],364:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _audio = require("./audio.js");

var _audio2 = _interopRequireDefault(_audio);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _class = function (_AudioConstants) {
    _inherits(_class, _AudioConstants);

    function _class() {
        _classCallCheck(this, _class);

        var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));

        var eventNames = {
            ADD_PLAYING_CLASS: 'add-playing-class',
            BUFFERING: "buffering",
            CAN_PLAY: "can-play",
            DISPOSE: "dispose",
            ENDED: "ended",
            GET_DURATION: "get-duration",
            MUTE: "mute",
            PAUSE: "pause",
            PAUSED: "paused",
            PLAY: "play",
            PLAYING: "playing",
            SEEK: "seek",
            SET_UP: "set-up",
            SET_DURATION: "set-duration",
            SET_VOLUME: "set-volume",
            TIME_UPDATE: "time-update",
            UNMUTE: "unmute"
        };

        _this.addNames(eventNames);
        return _this;
    }

    _createClass(_class, [{
        key: "convention",
        value: function convention(eventName) {
            var DELIMETER = this.DELIMETER;


            return "" + _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "convention", this).call(this) + DELIMETER + eventName;
        }
    }]);

    return _class;
}(_audio2.default);

exports.default = _class;

},{"./audio.js":365}],365:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _index = require("./index.js");

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _class = function (_iVXjsConstants) {
    _inherits(_class, _iVXjsConstants);

    function _class() {
        _classCallCheck(this, _class);

        var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));

        _this.AUDIO = "audio";
        return _this;
    }

    _createClass(_class, [{
        key: "convention",
        value: function convention() {
            var DELIMETER = this.DELIMETER,
                AUDIO = this.AUDIO;


            return "" + _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "convention", this).call(this) + DELIMETER + AUDIO;
        }
    }]);

    return _class;
}(_index2.default);

exports.default = _class;

},{"./index.js":373}],366:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _index = require("./index.js");

var _index2 = _interopRequireDefault(_index);

var _video = require("./video.js");

var _video2 = _interopRequireDefault(_video);

var _http = require("./http.js");

var _http2 = _interopRequireDefault(_http);

var _iVXio = require("./iVXio.js");

var _iVXio2 = _interopRequireDefault(_iVXio);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _class = function (_iVXjsConstants) {
    _inherits(_class, _iVXjsConstants);

    function _class() {
        _classCallCheck(this, _class);

        var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));

        _this.ERROR = "error";

        var eventNames = {
            VIDEO: new _video2.default().VIDEO,
            HTTP: new _http2.default().HTTP,
            VALIDATION: "validation",
            SET_UP: "set-up",
            IVX_IO: new _iVXio2.default().IVX_IO,
            DEFAULT: "default",
            ASSERT: "assert",
            EXPERIENCE: "experience"
        };

        _this.addNames(eventNames);
        return _this;
    }

    _createClass(_class, [{
        key: "convention",
        value: function convention(eventName) {
            var ERROR = this.ERROR,
                DELIMETER = this.DELIMETER;

            return "" + _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "convention", this).call(this) + DELIMETER + ERROR + DELIMETER + eventName;
        }
    }]);

    return _class;
}(_index2.default);

exports.default = _class;

},{"./http.js":368,"./iVXio.js":370,"./index.js":373,"./video.js":379}],367:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _http = require("./http.js");

var _http2 = _interopRequireDefault(_http);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _class = function (_HTTPConstants) {
    _inherits(_class, _HTTPConstants);

    function _class() {
        _classCallCheck(this, _class);

        var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));

        var errorTypes = {
            REQUEST_ERROR: "request" + _this.DELIMETER + "error",
            REQUEST_SUCCESS: "request" + _this.DELIMETER + "success",
            RESPONSE_ERROR: "response" + _this.DELIMETER + "error",
            RESPONSE_SUCCESS: "response" + _this.DELIMETER + "success"
        };

        _this.addNames(errorTypes);
        return _this;
    }

    _createClass(_class, [{
        key: "convention",
        value: function convention(errorName) {
            var DELIMETER = this.DELIMETER;

            return "" + _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "convention", this).call(this) + DELIMETER + errorName;
        }
    }]);

    return _class;
}(_http2.default);

exports.default = _class;

},{"./http.js":368}],368:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _index = require("./index.js");

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _class = function (_iVXjsConstants) {
    _inherits(_class, _iVXjsConstants);

    function _class() {
        _classCallCheck(this, _class);

        var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));

        _this.HTTP = "http";
        return _this;
    }

    _createClass(_class, [{
        key: "convention",
        value: function convention() {
            var DELIMETER = this.DELIMETER,
                HTTP = this.HTTP;


            return "" + _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "convention", this).call(this) + DELIMETER + HTTP;
        }
    }]);

    return _class;
}(_index2.default);

exports.default = _class;

},{"./index.js":373}],369:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _iVXio = require("./iVXio.js");

var _iVXio2 = _interopRequireDefault(_iVXio);

var _errors = require("./errors.js");

var _errors2 = _interopRequireDefault(_errors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _class = function (_iVXioConstants) {
    _inherits(_class, _iVXioConstants);

    function _class() {
        _classCallCheck(this, _class);

        var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));

        _this.ERROR = new _errors2.default().ERROR;

        var errorTypes = {
            EXPERIENCE: "experience",
            PLATFORM_UNAVAILABLE: "platform-unavailable",
            EVENT_NOT_FIRED: "event-not-fired"
        };

        _this.addNames(errorTypes);
        return _this;
    }

    _createClass(_class, [{
        key: "convention",
        value: function convention(errorName) {
            var ERROR = this.ERROR,
                DELIMETER = this.DELIMETER;

            return "" + _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "convention", this).call(this) + DELIMETER + ERROR + DELIMETER + errorName;
        }
    }]);

    return _class;
}(_iVXio2.default);

exports.default = _class;

},{"./errors.js":366,"./iVXio.js":370}],370:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _index = require("./index.js");

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _class = function (_iVXjsConstants) {
    _inherits(_class, _iVXjsConstants);

    function _class() {
        _classCallCheck(this, _class);

        var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));

        _this.IVX_IO = "iVXio";
        return _this;
    }

    _createClass(_class, [{
        key: "convention",
        value: function convention() {
            var DELIMETER = this.DELIMETER,
                IVX_IO = this.IVX_IO;


            return "" + _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "convention", this).call(this) + DELIMETER + IVX_IO;
        }
    }]);

    return _class;
}(_index2.default);

exports.default = _class;

},{"./index.js":373}],371:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _iVXjsConfig = require("./iVXjs.config.js");

var _iVXjsConfig2 = _interopRequireDefault(_iVXjsConfig);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _class = function (_iVXjsConfigConstants) {
    _inherits(_class, _iVXjsConfigConstants);

    function _class() {
        _classCallCheck(this, _class);

        var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));

        var eventNames = {
            VALIDATED: "validated",
            NOT_VALID: "not-valid",
            ANALYTICS_SET: "analytics-set",
            ANALYTICS_FINISHED: "analytics-finished"
        };

        _this.addNames(eventNames);
        return _this;
    }

    _createClass(_class, [{
        key: "convention",
        value: function convention(eventName) {
            var DELIMETER = this.DELIMETER;


            return "" + _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "convention", this).call(this) + DELIMETER + eventName;
        }
    }]);

    return _class;
}(_iVXjsConfig2.default);

exports.default = _class;

},{"./iVXjs.config.js":372}],372:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _index = require("./index.js");

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _class = function (_iVXjsConstants) {
    _inherits(_class, _iVXjsConstants);

    function _class() {
        _classCallCheck(this, _class);

        var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));

        _this.CONFIG = "config";
        return _this;
    }

    _createClass(_class, [{
        key: "convention",
        value: function convention() {
            var DELIMETER = this.DELIMETER,
                CONFIG = this.CONFIG;


            return "" + _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "convention", this).call(this) + DELIMETER + CONFIG;
        }
    }]);

    return _class;
}(_index2.default);

exports.default = _class;

},{"./index.js":373}],373:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _class = function () {
    function _class() {
        _classCallCheck(this, _class);

        this.LIBRARY = "iVXjs";
        this.DELIMETER = ":";
    }

    _createClass(_class, [{
        key: "convention",
        value: function convention() {
            return this.LIBRARY;
        }
    }, {
        key: "addNames",
        value: function addNames(nameCollection) {
            var self = this;
            var names = Object.keys(nameCollection);

            names.forEach(function (name, index) {
                self[name] = self.convention(nameCollection[name]);
            });
        }
    }]);

    return _class;
}();

exports.default = _class;

},{}],374:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _index = require("./index.js");

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _class = function (_iVXjsConstants) {
    _inherits(_class, _iVXjsConstants);

    function _class() {
        _classCallCheck(this, _class);

        var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));

        _this.LOGGING = "log";

        var logTypes = {
            ERROR: "error",
            WARN: "warn",
            TRACE: "trace",
            LOG: "",
            DEBUG: "debug"
        };

        _this.addNames(logTypes);
        return _this;
    }

    _createClass(_class, [{
        key: "convention",
        value: function convention(level) {
            var DELIMETER = this.DELIMETER,
                LOGGING = this.LOGGING;

            if (level.length <= 0) {
                return "" + _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "convention", this).call(this) + DELIMETER + LOGGING;
            }

            return "" + _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "convention", this).call(this) + DELIMETER + LOGGING + DELIMETER + level;
        }
    }]);

    return _class;
}(_index2.default);

exports.default = _class;

},{"./index.js":373}],375:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _angularEvents = require('./angular.events.js');

var _angularEvents2 = _interopRequireDefault(_angularEvents);

var _audioEvents = require('./audio.events.js');

var _audioEvents2 = _interopRequireDefault(_audioEvents);

var _errors = require('./errors.js');

var _errors2 = _interopRequireDefault(_errors);

var _httpEvents = require('./http.events.js');

var _httpEvents2 = _interopRequireDefault(_httpEvents);

var _iVXioErrors = require('./iVXio.errors.js');

var _iVXioErrors2 = _interopRequireDefault(_iVXioErrors);

var _iVXjsConfigEvents = require('./iVXjs.config.events.js');

var _iVXjsConfigEvents2 = _interopRequireDefault(_iVXjsConfigEvents);

var _logging = require('./logging.js');

var _logging2 = _interopRequireDefault(_logging);

var _stateEvents = require('./state.events.js');

var _stateEvents2 = _interopRequireDefault(_stateEvents);

var _videoEvents = require('./video.events.js');

var _videoEvents2 = _interopRequireDefault(_videoEvents);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _class = function _class() {
    _classCallCheck(this, _class);

    // Angular
    this.ANGULAR = {
        EVENTS: new _angularEvents2.default()
    };

    // Audio
    this.AUDIO = {
        EVENTS: new _audioEvents2.default()
    };

    // Errors 
    this.ERRORS = {
        EVENTS: new _errors2.default()
    };

    // Http
    this.HTTP = {
        EVENTS: new _httpEvents2.default()
    };

    // iVXjs
    this.CONFIG = {
        EVENTS: new _iVXjsConfigEvents2.default()
    };

    // iVXio
    this.iVXio = {
        ERRORS: new _iVXioErrors2.default()
    };

    // Logging
    this.LOGGING = {
        EVENTS: new _logging2.default()
    };

    // State
    this.STATE = {
        EVENTS: new _stateEvents2.default()
    };

    // Video 
    this.VIDEO = {
        EVENTS: new _videoEvents2.default()
    };
};

exports.default = _class;

},{"./angular.events.js":362,"./audio.events.js":364,"./errors.js":366,"./http.events.js":367,"./iVXio.errors.js":369,"./iVXjs.config.events.js":371,"./logging.js":374,"./state.events.js":376,"./video.events.js":378}],376:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _state = require("./state.js");

var _state2 = _interopRequireDefault(_state);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _class = function (_iVXjsStateConstants) {
    _inherits(_class, _iVXjsStateConstants);

    function _class() {
        _classCallCheck(this, _class);

        var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));

        var eventNames = {
            CHANGE: "change",
            SUCCESS: "success",
            ERROR: "error",
            GO: "go",
            NOT_FOUND: "not-found",
            GET_STATE: "get-state",
            REQUEST_STATE: "request-state"
        };

        _this.addNames(eventNames);
        return _this;
    }

    _createClass(_class, [{
        key: "convention",
        value: function convention(eventName) {
            var DELIMETER = this.DELIMETER;


            return "" + _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "convention", this).call(this) + DELIMETER + eventName;
        }
    }]);

    return _class;
}(_state2.default);

exports.default = _class;

},{"./state.js":377}],377:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _index = require("./index.js");

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _class = function (_iVXjsConstants) {
    _inherits(_class, _iVXjsConstants);

    function _class() {
        _classCallCheck(this, _class);

        var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));

        _this.STATE = "state";
        return _this;
    }

    _createClass(_class, [{
        key: "convention",
        value: function convention() {
            var DELIMETER = this.DELIMETER,
                STATE = this.STATE;


            return "" + _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "convention", this).call(this) + DELIMETER + STATE;
        }
    }]);

    return _class;
}(_index2.default);

exports.default = _class;

},{"./index.js":373}],378:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _video = require("./video.js");

var _video2 = _interopRequireDefault(_video);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _class = function (_VideoConstants) {
    _inherits(_class, _VideoConstants);

    function _class() {
        _classCallCheck(this, _class);

        var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));

        var eventNames = {
            ADD_PLAYING_CLASS: 'add-playing-class',
            BUFFERING: "buffering",
            CAN_PLAY: "can-play",
            DISPOSE: "dispose",
            ENDED: "ended",
            GET_DURATION: "get-duration",
            MUTE: "mute",
            PAUSE: "pause",
            PAUSED: "paused",
            PLAY: "play",
            PLAYING: "playing",
            READY_PLAYER: "ready-player",
            SEEK: "seek",
            SET_DURATION: "set-duration",
            SET_VOLUME: "set-volume",
            TIME_UPDATE: "time-update",
            UNMUTE: "unmute"
        };

        _this.addNames(eventNames);
        return _this;
    }

    _createClass(_class, [{
        key: "convention",
        value: function convention(eventName) {
            var DELIMETER = this.DELIMETER;


            return "" + _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "convention", this).call(this) + DELIMETER + eventName;
        }
    }]);

    return _class;
}(_video2.default);

exports.default = _class;

},{"./video.js":379}],379:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _index = require("./index.js");

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _class = function (_iVXjsConstants) {
    _inherits(_class, _iVXjsConstants);

    function _class() {
        _classCallCheck(this, _class);

        var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));

        _this.VIDEO = "video";
        return _this;
    }

    _createClass(_class, [{
        key: "convention",
        value: function convention() {
            var DELIMETER = this.DELIMETER,
                VIDEO = this.VIDEO;


            return "" + _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "convention", this).call(this) + DELIMETER + VIDEO;
        }
    }]);

    return _class;
}(_index2.default);

exports.default = _class;

},{"./index.js":373}],380:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.iVXjs = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _setup = require('../modules/setup.js');

var _logging = require('../utilities/logging.js');

var _logging2 = _interopRequireDefault(_logging);

var _iVXjsConfigEvents = require('../constants/iVXjs.config.events.js');

var _iVXjsConfigEvents2 = _interopRequireDefault(_iVXjsConfigEvents);

var _processor = require('./processor.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

require("babel-polyfill");
var EventEmitter = require('events');

var iVXjsConfigEvents = new _iVXjsConfigEvents2.default();

/**
 * Allows various data and functions for libraries to create
 * and build stateful interactive experiences.
 */

var iVXjs = exports.iVXjs = function () {

  /**
   * Sets Up iVXjs and adds a Bus since it will be used
   * for setting up this class asyncronously
   */
  function iVXjs() {
    _classCallCheck(this, iVXjs);

    /**
     * An instance of nodejs's EventEmitter class that 
     * allows iVXjs to emit and listen to various events.
     * @type {EventEmitter}
     */
    this.Bus = new EventEmitter();
  }

  /**
   * Sets up and attaches components to this iVXjs object after the 
   * set up is ran and all module dependencies have been loaded. This
   * needs to run with a validated experience and after all dependencies
   * are loaded, otherwise it will break an experience.
   * 
   * @param {object} processedData - a data object with references
   * to modules and functions 
   * @emits {validated} emits a verified instance of iVXjs for other components
   * to use.
   */


  _createClass(iVXjs, [{
    key: 'setUpiVXjs',
    value: function setUpiVXjs(processedData) {

      /*
       * Depending on the iVXjs experience, some native functions
       * may need to be updated to work with the Action/Bus system.
       */
      if (processedData.actions) {

        /**
         * An object of functions that are modified to work with the
         * iVXjs Action system.
         * @type {object}
         */
        this.actions = processedData.actions;
      }

      /** 
       * Holds all state configurations to set up this 
       * iVXjs experience
       * @type {object} 
       */
      this.config = processedData.config;

      if (this.selector) {
        this.config.selector = this.selector;
      }

      /**
       * Contains all data and functions for an experience to run
       * @type {object} 
       */

      this.experience = processedData.experience;
      this.experience.rules = processedData.rules;
      this.experience.Bus = this.Bus;
      this.experience.processor = new _processor.ActionProcessor(this);
      this.experience.config = this.config;

      /**
       * Evaluates an array of expressions to allow stat navigation branching
       * 
       * @type {function}
       * @param {array} navArray - an array of expressions and stateIds that navigate
       * the states
       */
      this.rules = processedData.rules;

      /**
       * Holds instances of classes for modules that will be used by renderers
       * to make various data objects.
       * 
       * @type {object}
       */
      this.ui = processedData.ui;
      this.video = processedData.video;
      this.audio = processedData.audio;

      /** 
       * Once all various components are added, emits on the
       * bus that it is validated and sends an instance of this class
       * to set up.
       */
      this.Bus.emit(iVXjsConfigEvents.VALIDATED, this);
    }

    /**
     * Initializes iVXjs by taking in an object of settings so
     * it can run the various enhancement, validation and module
     * loading.
     * 
     * @param {object} settings - all user settings that will create
     * this iVXjs experience.
     * @return {Promise} - Promise that will resovle when set up succeeds/fails
     */

  }, {
    key: 'init',
    value: function init(settings) {
      var self = this;
      var _settings$debug = settings.debug,
          debug = _settings$debug === undefined ? true : _settings$debug;


      if (settings.selector) {
        this.selector = settings.selector;
      }

      if (settings.routeFunction) {
        this.routeFunction = settings.routeFunction;
      }

      this.log = new _logging2.default(debug, this.Bus);

      var thisSetup = new _setup.Setup(settings, this.Bus, this.log);
      var initPromise = new Promise(function (resolve, reject) {
        thisSetup.runSetup().then(function (experience) {
          self.setUpiVXjs(experience);
          resolve(self);
        });
      });

      return initPromise;
    }
  }]);

  return iVXjs;
}();

;

},{"../constants/iVXjs.config.events.js":371,"../modules/setup.js":391,"../utilities/logging.js":427,"./processor.js":382,"babel-polyfill":1,"events":297}],381:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _class = function () {
    function _class() {
        _classCallCheck(this, _class);

        this.animations = [];
        this.timeData = {};
    }

    _createClass(_class, [{
        key: "register",
        value: function register(animationFn) {
            var timeData = this.timeData;

            var registered = timeData.timestamp;

            this.animations.push({
                animationFn: animationFn,
                registered: registered
            });
        }
    }, {
        key: "update",
        value: function update(timeObjs) {
            var isRegistered = false;
            var startRegistered = void 0;
            var self = this;

            this.animations.forEach(function (animation) {
                var animationFn = animation.animationFn,
                    registered = animation.registered;

                var currentTimedata = Object.assign(self.timeData, {
                    registered: registered,
                    registeredTimelapse: self.timeData.timestamp - registered
                });

                animationFn(currentTimedata);
            });
        }
    }, {
        key: "run",
        value: function run() {
            var self = this;
            var startTime = 0;
            var getStartTime = true;

            requestAnimationFrame(runWrapper);

            function runWrapper(timestamp) {
                if (getStartTime) {
                    startTime = timestamp;
                    getStartTime = false;
                }

                self.timeData = {
                    startTime: startTime,
                    timestamp: timestamp,
                    progress: timestamp - startTime
                };

                self.update();
                requestAnimationFrame(runWrapper);
            }
        }
    }, {
        key: "remove",
        value: function remove(animationFn) {
            this.animations = this.animations.filter(function (animation) {
                return animation.animationFn !== animationFn;
            });
        }
    }]);

    return _class;
}();

exports.default = _class;

},{}],382:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ActionProcessor = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeParsers = require('../utilities/type-parsers.js');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var typeValidator = new _typeParsers.TypeValidator();

var ActionProcessor = exports.ActionProcessor = function () {
    function ActionProcessor(iVXjs) {
        _classCallCheck(this, ActionProcessor);

        this.iVXjs = iVXjs;
    }

    _createClass(ActionProcessor, [{
        key: 'resolveActions',
        value: function resolveActions(actionArray, callback) {
            var self = this;
            var log = this.iVXjs.log;


            if (typeValidator.isEmpty(actionArray)) {

                callback();
                return;
            }

            var promises = actionArray.map(function (actionObj) {
                self.iVXjs.Bus.emit(actionObj.eventName, actionObj.args);

                if (!typeValidator.isEmpty(actionObj.args)) {
                    log.debug('Event ' + actionObj.eventName + ' was fired.', {
                        group: true,
                        messages: Object.keys(actionObj.args).map(function (key, index) {
                            return {
                                message: key + ':' + actionObj.args[key],
                                data: actionObj.args[key]
                            };
                        })
                    });
                } else {
                    log.debug('Event ' + actionObj.eventName);
                }

                if (self.iVXjs.actions && self.iVXjs.actions[actionObj.eventName]) {

                    return self.iVXjs.actions[actionObj.eventName](actionObj.args);
                }

                if (self.iVXjs.experience[actionObj.eventName]) {

                    return self.iVXjs.experience[actionObj.eventName](actionObj.args);
                }
            });

            Promise.all(promises).then(function (experience) {
                callback();
            }).catch(function (err) {
                console.error('iVXjs: NOT ALL ACTIONS RESOLVED');
                console.dir(err);
                self.iVXjs.Bus.emit('iVXjs:iVXio:error:event-not-fired', err);
            });
        }
    }]);

    return ActionProcessor;
}();

},{"../utilities/type-parsers.js":428}],383:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _class = function () {
    function _class() {
        _classCallCheck(this, _class);

        this.canAnimate = anime ? true : false;
    }

    _createClass(_class, [{
        key: 'runTweens',
        value: function runTweens() {
            var tweens = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
            var Actions = arguments[1];
            var EasingFunctions = this.EasingFunctions;

            var self = this;

            anime({
                targets: document.querySelectorAll('#celeste-colour-story > div > div > div.animate-1'),
                translateX: {
                    value: 250,
                    duration: 800
                },
                rotate: {
                    value: 360,
                    duration: 1800,
                    easing: 'easeInOutSine'
                },
                scale: {
                    value: 2,
                    duration: 1600,
                    delay: 800,
                    easing: 'easeInOutQuart'
                },
                delay: 250 // All properties except 'scale' inherit 250ms delay
            });
        }
    }]);

    return _class;
}();

exports.default = _class;

},{}],384:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RegisteredAudioModules = undefined;

var _html = require('./types/html5.js');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Types


var RegisteredAudioModules = exports.RegisteredAudioModules = function RegisteredAudioModules() {
    _classCallCheck(this, RegisteredAudioModules);

    this.html5 = _html.Html5;
};

;

},{"./types/html5.js":385}],385:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Html5 = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeParsers = require("../../../utilities/type-parsers.js");

var _audioEvents = require("../../../constants/audio.events.js");

var _audioEvents2 = _interopRequireDefault(_audioEvents);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Html5 = exports.Html5 = function () {
    function Html5(selector) {
        var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'voiceover';

        _classCallCheck(this, Html5);

        var audioElement = document.createElement('AUDIO');

        this.currentVolume = 0.5;
        this.id = id;
        this.audioElement = audioElement;
        this.audioElement.setAttribute('id', id);

        document.querySelector(selector).appendChild(audioElement);
    }

    _createClass(Html5, [{
        key: "play",
        value: function play() {
            var _this = this;

            var self = this;
            var audioEventNames = new _audioEvents2.default();

            this.audioElement.addEventListener('canplaythrough', function () {
                self.iVXjsBus.emit(audioEventNames.CAN_PLAY);
                _this.audioElement.play();
            });
        }
    }, {
        key: "pause",
        value: function pause() {
            this.audioElement.pause();
        }
    }, {
        key: "mute",
        value: function mute() {
            this.audioElement.volume = 0;
        }
    }, {
        key: "unmute",
        value: function unmute() {
            this.audioElement.volume = this.currentVolume;
        }
    }, {
        key: "setVolume",
        value: function setVolume(volume) {
            if (!volume) return;
            this.audioElement.volume = volume;
            this.currentVolume = volume;
        }
    }, {
        key: "seek",
        value: function seek(time) {
            this.audioElement.currentTime = time;
        }
    }, {
        key: "getDuration",
        value: function getDuration() {
            return this.audioElement.currentTime;
        }
    }, {
        key: "setSrc",
        value: function setSrc(src) {
            this.audioElement.setAttribute('src', src);
        }
    }, {
        key: "setTimeUpdate",
        value: function setTimeUpdate() {
            var self = this;
            var audioEventNames = new _audioEvents2.default();

            this.audioElement.addEventListener('timeupdate', function () {
                self.iVXjsBus.emit(audioEventNames.TIME_UPDATE, self);
            });
        }
    }, {
        key: "setOnEnd",
        value: function setOnEnd() {
            var self = this;
            var audioEventNames = new _audioEvents2.default();

            this.audioElement.addEventListener("ended", function () {
                self.iVXjsBus.emit(audioEventNames.ENDED, self);
            }, false);
        }
    }, {
        key: "runCuePoints",
        value: function runCuePoints(processor) {
            var _audioElement = this.audioElement,
                audioElement = _audioElement === undefined ? {} : _audioElement,
                _cuePoints = this.cuePoints,
                cuePoints = _cuePoints === undefined ? [] : _cuePoints;
            var currentTime = audioElement.currentTime;


            if (cuePoints.length <= 0) return;

            cuePoints.forEach(function (cuePoint, index) {
                var timeAt = cuePoint.timeAt,
                    _cuePoint$fired = cuePoint.fired,
                    fired = _cuePoint$fired === undefined ? false : _cuePoint$fired,
                    _cuePoint$once = cuePoint.once,
                    once = _cuePoint$once === undefined ? false : _cuePoint$once;

                var timeUntil = Math.abs(cuePoint.timeAt - currentTime);

                if (timeAt <= currentTime && !fired) {
                    processor.resolveActions([cuePoint], function () {
                        if (once) {
                            cuePoint.fired = true;
                        }
                    });
                }
            });
        }
    }, {
        key: "addEventListeners",
        value: function addEventListeners(iVXjsBus) {
            var audioEventNames = new _audioEvents2.default();
            var self = this;

            this.iVXjsBus = iVXjsBus;

            // Looks for a custom iVXjsBus Function for specific implementations of the iVXjsBus
            this.playOnEvent = iVXjsBus.on(audioEventNames.PLAY, playOnEvent);
            this.pauseOnEvent = iVXjsBus.on(audioEventNames.PAUSE, pauseOnEvent);
            this.muteOnEvent = iVXjsBus.on(audioEventNames.MUTE, muteOnEvent);
            this.unmuteOnEvent = iVXjsBus.on(audioEventNames.UNMUTE, unmuteOnEvent);
            this.volumeOnEvent = iVXjsBus.on(audioEventNames.VOLUME, volumeOnEvent);
            this.durationOnEvent = iVXjsBus.on(audioEventNames.GET_DURATION, durationOnEvent);
            this.seekOnEvent = iVXjsBus.on(audioEventNames.SEEK, seekOnEvent);
            this.setUp = iVXjsBus.on(audioEventNames.SET_UP, setUp);

            // Sets it to the custom iVXjsBus Function (if it has one) or just sets the default one
            this.playOnEvent = this.playOnEvent ? this.playOnEvent : playOnEvent;
            this.pauseOnEvent = this.pauseOnEvent ? this.pauseOnEvent : pauseOnEvent;
            this.seekOnEvent = this.seekOnEvent ? this.seekOnEvent : seekOnEvent;
            this.durationOnEvent = this.durationOnEvent ? this.durationOnEvent : durationOnEvent;
            this.volumeOnEvent = this.volumeOnEvent ? this.volumeOnEvent : volumeOnEvent;
            this.setUp = this.setUp ? this.setUp : setUp;

            // Sets up custom functions on the audio object
            this.setTimeUpdate();
            this.setOnEnd();

            function setUp(audioInfo) {
                var _audioInfo$cuePoints = audioInfo.cuePoints,
                    cuePoints = _audioInfo$cuePoints === undefined ? [] : _audioInfo$cuePoints,
                    _audioInfo$onEnd = audioInfo.onEnd,
                    onEnd = _audioInfo$onEnd === undefined ? [] : _audioInfo$onEnd;


                if (audioInfo.id === self.id) {
                    self.audioElement.setAttribute('src', audioInfo.src);
                    self.cuePoints = cuePoints;
                    self.onEnd = onEnd;

                    if (audioInfo.loop) {
                        self.audioElement.setAttribute('loop', '');
                    } else {
                        self.audioElement.removeAttribute('loop');
                    }
                }
            }

            function playOnEvent() {
                self.play();
            }

            function pauseOnEvent() {
                self.pause();
            }

            function muteOnEvent() {
                self.mute();
            }

            function unmuteOnEvent() {
                self.unmute();
            }

            function seekOnEvent(currentTime) {
                self.seek(currentTime);
            }

            function durationOnEvent() {
                self.getDuration();
            }

            function volumeOnEvent(volume) {
                self.setVolume(volume);
            }
        }
    }]);

    return Html5;
}();

},{"../../../constants/audio.events.js":364,"../../../utilities/type-parsers.js":428}],386:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Actions = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _audioEvents = require("../../../constants/audio.events.js");

var _audioEvents2 = _interopRequireDefault(_audioEvents);

var _stateEvents = require("../../../constants/state.events.js");

var _stateEvents2 = _interopRequireDefault(_stateEvents);

var _index = require("../../animation/vanilla/index.js");

var _index2 = _interopRequireDefault(_index);

var _eventStore = require("../../../core/event-store.js");

var _eventStore2 = _interopRequireDefault(_eventStore);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Creates and runs all actions for this experience. An action
 * is any process that needs to return a promise indicating that 
 * it finished.
 */
var Actions = exports.Actions = function () {

    /**
     * Creates a default data object to be used by various
     * 
     */
    function Actions() {
        _classCallCheck(this, Actions);

        /**
         * An empty data object that will be used to set and 
         * record data using this setData function.
         * @type {Object}
         */
        this.data = {};
        this.audioEventNames = new _audioEvents2.default();
        this.stateEventNames = new _stateEvents2.default();
        this.animation = new _index2.default();
        this.EventStore = new _eventStore2.default();
    }

    /**
     * Sets classes on an element that will cause the element to animate.
     * @param {HTMLNode} element - element for the class to be set
     * @param {Object} eventObj - animation event data.
     * @return {HTMLNode} the element with the classes replaced.  
     */


    _createClass(Actions, [{
        key: "setElementClasses",
        value: function setElementClasses(element, eventObj) {
            var _eventObj$animationCl = eventObj.animationClasses,
                animationClasses = _eventObj$animationCl === undefined ? "" : _eventObj$animationCl;
            var oldAnimationClass = element.animationClass;


            if (element.className.indexOf(animationClasses) >= 0) {
                return;
            }

            if (element.className.indexOf('hide') >= 0) {
                element.className = element.className.replace('hide', animationClasses);
                return;
            }

            if (oldAnimationClass) {
                element.className = element.className.replace(oldAnimationClass, '');
            }

            element.animationClass = animationClasses;
            element.className = element.className + " " + animationClasses;

            return element;
        }
    }, {
        key: "goToNextState",
        value: function goToNextState(eventObj) {
            var _this = this;

            var navArray = eventObj.next;

            var self = this;
            var nextState = this.rules(navArray);
            var deferred = new Promise(function (resolve, reject) {
                if (nextState) {
                    _this.Bus.emit(self.stateEventNames.GO, { stateId: nextState });
                    resolve();
                }
            });

            return deferred;
        }

        /**
         * 
         */

    }, {
        key: "animateElement",
        value: function animateElement(eventObj) {
            var _this2 = this;

            var element = eventObj.element,
                type = eventObj.type;

            var animationElements = document.querySelectorAll(element);

            if (type === 'tween') {
                var tweens = eventObj.tweens;


                this.animation.runTweens(tweens, this);

                return;
            }

            if (!animationElements || animationElements.length <= 0) return;

            animationElements = Array.from(animationElements);

            animationElements.forEach(function (animationElement, index) {
                animationElement = _this2.setElementClasses(animationElement, eventObj);
            });

            var animateElementPromise = new Promise(function (resolve, reject) {
                var animationEnds = ['webkitAnimationEnd', 'mozAnimationEnd', 'MSAnimationEnd', 'osanimationend', 'animationend'];

                animationEnds.forEach(function (animationEndName) {
                    animationElements.forEach(function (animationElement, index) {
                        animationElement.addEventListener(animationEndName, endAnimation);
                    });
                });

                function endAnimation(event) {
                    animationElements.forEach(function (animationElement, index) {
                        animationEnds.forEach(function (animationEndName) {
                            animationElement.animationClass = eventObj.animationClasses;
                            animationElement.removeEventListener(animationEndName, endAnimation);
                        });
                    });

                    resolve();
                }
            });

            return animateElementPromise;
        }
    }, {
        key: "goToState",
        value: function goToState(eventObj, iVXjsBus) {
            var state = eventObj.state;


            if (iVXjsBus) {
                iVXjsBus.emit(this.stateEventNames.GO, eventObj);
            }
        }
    }, {
        key: "playAudioClip",
        value: function playAudioClip(eventObj) {
            var audioEventNames = this.audioEventNames;

            var self = this;

            if (eventObj) {
                this.Bus.emit(audioEventNames.SET_UP, eventObj);
                this.Bus.emit(audioEventNames.PLAY);
            }

            this.Bus.on(audioEventNames.TIME_UPDATE, function (currentAudio) {
                if (currentAudio.id === eventObj.id) {
                    currentAudio.runCuePoints(self.processor);
                }
            });

            var audioClipPromise = new Promise(function (resolve, reject) {
                self.Bus.once(audioEventNames.ENDED, function (currentAudio) {
                    if (currentAudio.id === eventObj.id) {
                        self.processor.resolveActions(eventObj.onEnd, function () {
                            resolve();
                        });
                    }
                });
            });

            return audioClipPromise;
        }
    }, {
        key: "clearData",
        value: function clearData(eventObj) {
            var keys = eventObj.keys;

            var self = this;
            keys.forEach(function (key) {
                self.data[key] = undefined;
            });
        }
    }, {
        key: "setData",
        value: function setData(eventObj) {
            var key = eventObj.key,
                value = eventObj.value;

            var self = this;
            var setDataPromise = new Promise(function (resolve, reject) {
                self.data[key] = value;
                resolve(self);
            });

            return setDataPromise;
        }
    }]);

    return Actions;
}();

;

},{"../../../constants/audio.events.js":364,"../../../constants/state.events.js":376,"../../../core/event-store.js":381,"../../animation/vanilla/index.js":383}],387:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeParsers = require("../../../utilities/type-parsers.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var typeValidator = new _typeParsers.TypeValidator();

var _class = function () {
    function _class(experience, customEvaluator) {
        _classCallCheck(this, _class);

        this.experience = experience;
        this.customEvaluator = customEvaluator;
    }

    _createClass(_class, [{
        key: "evaluate",
        value: function evaluate(rule) {
            var self = this;
            var _rule$conditionOperat = rule.conditionOperator,
                conditionOperator = _rule$conditionOperat === undefined ? "and" : _rule$conditionOperat,
                conditions = rule.conditions;

            var evaluateConditions = conditions.map(function (condition, index) {
                var lhs = condition.key,
                    is = condition.is,
                    rhs = condition.value,
                    _condition$type = condition.type,
                    type = _condition$type === undefined ? "input" : _condition$type;


                if (self.customEvaluator && typeValidator.isFunction(self.customEvaluator) && self.customEvaluator(condition)) {
                    return self.customEvaluator(condition);
                }

                // Since older versions of the iVXjs JSON used 
                // the key for "keyword" this will make it backwards
                // compatable
                if (self[lhs]) {
                    return self[lhs](lhs, is, rhs);
                }

                return self[type](lhs, is, rhs);
            });

            return this[conditionOperator](evaluateConditions);
        }
    }, {
        key: "input",
        value: function input(lhs, is, rhs) {
            var experience = this.experience;

            var lhsValue = experience.data[lhs];

            return this[is](lhsValue, rhs);
        }
    }, {
        key: "and",
        value: function and() {
            var predicates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

            return predicates.reduce(function (evaluate, predicate, index) {
                return evaluate && predicate;
            }, true);
        }
    }, {
        key: "or",
        value: function or() {
            var predicates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

            return predicates.reduce(function (evaluate, predicate, index) {
                return evaluate || predicate;
            }, false);
        }
    }, {
        key: "not",
        value: function not() {
            var predicates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

            return predicates.reduce(function (evaluate, predicate, index) {
                return evaluate && !predicate;
            }, true);
        }
    }, {
        key: "lte",
        value: function lte(lhs, rhs) {
            if (isNaN(lhs) || isNaN(rhs)) return false;
            return new Number(lhs) <= new Number(rhs);
        }
    }, {
        key: "lt",
        value: function lt(lhs, rhs) {
            if (isNaN(lhs) || isNaN(rhs)) return false;
            return new Number(lhs) < new Number(rhs);
        }
    }, {
        key: "gte",
        value: function gte(lhs, rhs) {
            if (isNaN(lhs) || isNaN(rhs)) return false;
            return new Number(lhs) >= new Number(rhs);
        }
    }, {
        key: "gt",
        value: function gt(lhs, rhs) {
            if (isNaN(lhs) || isNaN(rhs)) return false;
            return new Number(lhs) > new Number(rhs);
        }
    }, {
        key: "equals",
        value: function equals(lhs, rhs) {
            return lhs === rhs;
        }
    }, {
        key: "notEquals",
        value: function notEquals(lhs, rhs) {
            return lhs !== rhs;
        }
    }, {
        key: "in",
        value: function _in(lhs, rhs) {
            return rhs.indexOf(lhs) >= 0;
        }
    }]);

    return _class;
}();

exports.default = _class;

},{"../../../utilities/type-parsers.js":428}],388:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.iVXjsData = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeParsers = require('../../../utilities/type-parsers.js');

var _actions = require('./actions.js');

var _rules = require('./rules.js');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var defaultActions = new _actions.Actions();
var myObjectParser = new _typeParsers.ObjectParsers();

var iVXjsData = exports.iVXjsData = function () {
    function iVXjsData() {
        var moduleSettings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var iVXjsSettings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var Bus = arguments[2];
        var iVXjsLog = arguments[3];

        _classCallCheck(this, iVXjsData);

        this.moduleSettings = moduleSettings;
        this.iVXjsSettings = iVXjsSettings;
        this.Bus = Bus;
        this.iVXjsLog = iVXjsLog;
    }

    _createClass(iVXjsData, [{
        key: 'setUpExperience',
        value: function setUpExperience(configData, enhanceResolve) {
            var _iVXjsSettings = this.iVXjsSettings,
                config = _iVXjsSettings.config,
                _iVXjsSettings$data = _iVXjsSettings.data,
                data = _iVXjsSettings$data === undefined ? {} : _iVXjsSettings$data,
                modifiedExperience = _iVXjsSettings.experience,
                customRules = _iVXjsSettings.rules,
                _iVXjsSettings$ui = _iVXjsSettings.ui,
                ui = _iVXjsSettings$ui === undefined ? 'default' : _iVXjsSettings$ui,
                _iVXjsSettings$valida = _iVXjsSettings.validation,
                validation = _iVXjsSettings$valida === undefined ? 'iVXjsValidation' : _iVXjsSettings$valida;

            var experience = defaultActions;
            var _configData$modules = configData.modules,
                configModules = _configData$modules === undefined ? {} : _configData$modules;
            var _configModules$ui = configModules.ui,
                configUI = _configModules$ui === undefined ? ui : _configModules$ui,
                _configModules$valida = configModules.validation,
                configValidation = _configModules$valida === undefined ? validation : _configModules$valida;


            if (modifiedExperience) {
                experience = myObjectParser.merge(experience, modifiedExperience);
            }

            var enhanced = {
                experience: experience,
                rules: new _rules.Rules(experience, customRules).rules,
                config: configData
            };

            enhanceResolve(enhanced);
        }
    }, {
        key: 'enhance',
        value: function enhance() {
            var _this = this;

            var self = this;
            var config = this.iVXjsSettings.config;

            var enhancePromise = new Promise(function (resolve, reject) {
                if (typeof config === 'string') {
                    _this.getConfigJSON(config).then(function (configData) {
                        self.setUpExperience(configData, resolve);
                    }, function (error) {
                        reject(error);
                    });
                } else {
                    self.setUpExperience(config, resolve);
                }
            });

            return enhancePromise;
        }
    }, {
        key: 'getConfigJSON',
        value: function getConfigJSON(url) {
            var xhr = new XMLHttpRequest();
            var self = this;
            var deferred = new Promise(function (resolve, reject) {
                xhr.onreadystatechange = function () {
                    self.isValidJSONRequest(resolve, reject, xhr);
                };
                xhr.open('GET', url);
                xhr.send();
            });

            return deferred;
        }
    }, {
        key: 'isValidJSONRequest',
        value: function isValidJSONRequest(resolve, reject, xhr) {
            if (xhr.readyState === 4) {
                if (xhr.status === 200) {
                    try {
                        var responseJSON = JSON.parse(xhr.responseText);
                        resolve(responseJSON);
                    } catch (e) {
                        this.Bus.emit('iVX:error:json', e);
                        console.error(e);
                    }
                } else {
                    reject({ error: 'Config JSON Not Obtained' });
                }
            }
        }
    }]);

    return iVXjsData;
}();

},{"../../../utilities/type-parsers.js":428,"./actions.js":386,"./rules.js":389}],389:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Rules = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _evaluator = require('./evaluator.js');

var _evaluator2 = _interopRequireDefault(_evaluator);

var _typeParsers = require('../../../utilities/type-parsers.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var typeValidator = new _typeParsers.TypeValidator();

/**
 * A default rule system in which iVXjs chooses which state 
 * to go to based of the current iVXjs Experience data.
 */

var Rules = exports.Rules = function () {

    /**
     * Adds the experience in which this data 
     * will be evaluated to.
     * 
     * @param {object} experience - iVXjsExperience 
     * object in which data will be used to evaluate various rules.
     */
    function Rules() {
        var experience = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { data: {} };
        var customEvaluator = arguments[1];

        _classCallCheck(this, Rules);

        /**
         * Current iVXjs Expereince 
         * 
         * @type {object}
         */
        this.experience = experience;
        this.evaluator = new _evaluator2.default(experience, customEvaluator);
    }

    /**
     * The default rules function that will process an 
     * array of navigation objects and evaluate them using 
     * the processRules function.
     * 
     * @type {Function}
     */


    _createClass(Rules, [{
        key: 'processRules',


        /**
         * Processes through and returns the first nav object whose 
         * rule is evaluated to true or rules are empty.
         * 
         * @param {array} navArray - An array of navigation objects 
         * with rules and states to be evaluated.
         * @return {string} - the stateId of the rule that was evaluated 
         * true first. If no state is return, returns an empty string.
         */
        value: function processRules() {
            var navArray = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];


            if (!Array.isArray(navArray)) {
                navArray = [];
            }

            var self = this;
            var stateSelect = navArray.find(function (navObj) {
                var rule = navObj.rule;


                if (typeValidator.isEmpty(rule)) return true;

                var conditions = rule.conditions,
                    _rule$conditionOperat = rule.conditionOperator,
                    conditionOperator = _rule$conditionOperat === undefined ? "and" : _rule$conditionOperat;


                if (!conditions) {
                    rule.conditionOperator = conditionOperator;
                    rule.conditions = [rule];
                }

                return self.evaluator.evaluate(rule);
            });

            return stateSelect ? stateSelect.stateId : '';
        }
    }, {
        key: 'rules',
        get: function get() {
            var self = this;

            return function () {
                var navArray = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

                return self.processRules(navArray);
            };
        }
    }]);

    return Rules;
}();

},{"../../../utilities/type-parsers.js":428,"./evaluator.js":387}],390:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Enhances the data to run an experience as defined in the data module's 
 * settings.
 */
var DataProcessor = exports.DataProcessor = function () {

  /**
   * Registers all the data that will be used to enhance the
   * data.
   * 
   * @param {object} dataModuleObj - user defined settings for this data module
   * @param {object} settings - all user settings that will be enhanced.
   */
  function DataProcessor(dataModule, settings, Bus, iVXjsLog) {
    _classCallCheck(this, DataProcessor);

    /**
     * User defined data module data that will be used to
     * process and enhance the experience data.
     * 
     * @type {object}
     */
    this.dataModule = dataModule;

    /**
     * All user settings including default data that will 
     * be added to this data module. 
     * 
     * @type {object}
     */
    this.settings = settings;

    /**
     * All available data modules that can be set for this
     * experience.
     * 
     * @type {object}
     */
    this.Bus = Bus;
    this.iVXjsLog = iVXjsLog;
  }

  /**
   * Loads dependencies needed to run the enhancements on the data 
   * and resolves by sending out all enhanced data.
   * 
   * @return {Promise} - indicates that the data is enhanced.
   */


  _createClass(DataProcessor, [{
    key: "getData",
    value: function getData() {
      var self = this;
      var dataModule = this.dataModule,
          settings = this.settings;
      var dataSettings = settings.data;

      var dataPromise = new Promise(function (resolve, reject) {
        self.runEnhancements(resolve, reject, dataModule, dataSettings, self.settings);
      });

      return dataPromise;
    }

    /**
     * Utilizing the appropriate module defined in the data module settings
     * this will enhance the current data and actions defined in that 
     * class's enhance method.
     */

  }, {
    key: "runEnhancements",
    value: function runEnhancements(resolve, reject, DataModuleClass, dataModuleSettings, iVXjsSettings) {
      var dataModule = new DataModuleClass(dataModuleSettings, iVXjsSettings, this.Bus, this.iVXjsLog);

      dataModule.enhance().then(function (data) {
        resolve(data);
      }, function (error) {
        reject(error);
      });
    }
  }]);

  return DataProcessor;
}();

;

},{}],391:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Setup = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _processor = require("./data/processor.js");

var _registeredModules = require("./video/registered-modules.js");

var _registeredModules2 = require("./audio/registered-modules.js");

var _asserts = require("../utilities/asserts.js");

var _errors = require("../constants/errors.js");

var _errors2 = _interopRequireDefault(_errors);

var _iVXjsConfigEvents = require("../constants/iVXjs.config.events.js");

var _iVXjsConfigEvents2 = _interopRequireDefault(_iVXjsConfigEvents);

var _index = require("./data/ivx-js/index.js");

var _index2 = require("./ui/default/index.js");

var _index3 = require("./validation/ivx-js-validation/index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var errorEvents = new _errors2.default();
var configEventNames = new _iVXjsConfigEvents2.default();

/**
 * Runs all proceedures to set up a valid iVXjs experience. 
 */

var Setup = exports.Setup = function () {

    /**
     * Adds all information to settings for the modules and 
     * adds the various processors that will create valid 
     * components for a valid iVXjs experience.
     * 
     * @param {object} settings - this experience's settings.
     */
    function Setup() {
        var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var Bus = arguments[1];
        var iVXjsLog = arguments[2];

        _classCallCheck(this, Setup);

        /**
         * User defined settings for this experience.
         * 
         * @type {object}
         */
        this.settings = settings;

        /**
         * Enhances existing data for setup.
         * 
         * @type {DataProcessor}
         */
        this.DataProcessor = _processor.DataProcessor;
        this.Bus = Bus;
        this.iVXjsLog = iVXjsLog;
    }

    /**
     * Runs a quick set up that will produce an iVXjs experience. 
     * It performs all set up tasks available in this order:
     * 1. Get data from a data processor.
     * 2. Validate the data.
     * 3. Add any other plugins for this experience.
     * 
     * @return {Promise} - resolves when the set up is done.
     */


    _createClass(Setup, [{
        key: "runSetup",
        value: function runSetup() {
            var self = this;
            var setUpPromise = new Promise(function (resolve, reject) {
                self.resolveSetupProcesses(resolve, reject);
            });

            return setUpPromise;
        }
    }, {
        key: "resolveSetupProcesses",
        value: function resolveSetupProcesses(resolve, reject) {
            var self = this;
            var iVXjsLog = this.iVXjsLog,
                settings = this.settings;
            var _settings$data = settings.data,
                data = _settings$data === undefined ? {} : _settings$data,
                analytics = settings.analytics;
            var _data$module = data.module,
                dataModule = _data$module === undefined ? _index.iVXjsData : _data$module;


            this.setupData(dataModule).then(function validateExperience(experienceData) {
                var validation = self.runValidation(experienceData);

                if (!validation.valid) {
                    var error = validation.error;


                    self.Bus.emit(configEventNames.NOT_VALID, validation);
                    iVXjsLog.error(error, "VALIDATION");
                } else {
                    var updatedExperienceData = self.setupModules(experienceData);
                    iVXjsLog.log("MODULE SUCCESS");

                    if (analytics) {

                        self.Bus.once(configEventNames.ANALYTICS_FINISHED, function (analyticExperience) {
                            resolve(analyticExperience);
                        });
                        self.Bus.emit(configEventNames.ANALYTICS_SET, experienceData);
                    } else {
                        resolve(updatedExperienceData);
                    }
                }
            });
        }

        /**
         * Makes sure the data provided is valid to create an iVXjs Experience
         * 
         * @param {object} experienceData - data to run an experience
         * @return {Promise} - resolves once all validation of this data is finished.
         */

    }, {
        key: "runValidation",
        value: function runValidation(experienceData) {
            var _experienceData$valid = experienceData.validation,
                ValidationModule = _experienceData$valid === undefined ? _index3.iVXjsValidation : _experienceData$valid;


            return new ValidationModule(experienceData);
        }

        /**
         * Enhances user configurations and provide data.
         * 
         * @return {Promise} - indicates data enhancement finishes and was successful
         */

    }, {
        key: "setupData",
        value: function setupData(dataModule) {

            var settings = this.settings;

            return new this.DataProcessor(dataModule, settings, this.Bus, this.iVXjsLog).getData();
        }

        /**
         * Runs all processes that require validated data if using
         * the runSetup function.
         * 
         * @param {object} experienceData - enhanced and validated data.
         * @param {Promise} - indicates all plugins/optional modules have loaded
         * their dependencies correctly.
         */

    }, {
        key: "setupModules",
        value: function setupModules(experienceData) {
            var settings = this.settings;
            var _settings$ui = settings.ui,
                UI = _settings$ui === undefined ? _index2.DefaultUI : _settings$ui;


            experienceData.video = new _registeredModules.RegisteredVideoModules();
            experienceData.ui = new UI();
            experienceData.audio = new _registeredModules2.RegisteredAudioModules().html5;

            return experienceData;
        }
    }]);

    return Setup;
}();

;

},{"../constants/errors.js":366,"../constants/iVXjs.config.events.js":371,"../utilities/asserts.js":426,"./audio/registered-modules.js":384,"./data/ivx-js/index.js":388,"./data/processor.js":390,"./ui/default/index.js":399,"./validation/ivx-js-validation/index.js":416,"./video/registered-modules.js":421}],392:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Anchor = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _attributes = require('../utilities/attributes.js');

var _typeParsers = require('../../../utilities/type-parsers.js');

var _asserts = require('../../../utilities/asserts.js');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var typeCheck = new _typeParsers.TypeValidator();

var Anchor = exports.Anchor = function () {
    function Anchor(anchorInfo) {
        _classCallCheck(this, Anchor);

        this.anchorInfo = anchorInfo;
    }

    _createClass(Anchor, [{
        key: 'anchorClasses',
        get: function get() {
            return '';
        }
    }, {
        key: 'html',
        get: function get() {
            var anchorClasses = this.anchorClasses;
            var _anchorInfo = this.anchorInfo,
                _anchorInfo$href = _anchorInfo.href,
                href = _anchorInfo$href === undefined ? '' : _anchorInfo$href,
                _anchorInfo$classes = _anchorInfo.classes,
                classes = _anchorInfo$classes === undefined ? '' : _anchorInfo$classes,
                _anchorInfo$attribute = _anchorInfo.attributes,
                attributes = _anchorInfo$attribute === undefined ? {} : _anchorInfo$attribute,
                _anchorInfo$label = _anchorInfo.label,
                label = _anchorInfo$label === undefined ? labelHTML : _anchorInfo$label,
                labelHTML = _anchorInfo.labelHTML,
                _anchorInfo$id = _anchorInfo.id,
                id = _anchorInfo$id === undefined ? '' : _anchorInfo$id;

            var attributeHTML = new _attributes.AttributeTags(attributes, Object.keys(attributes)).html;

            if (!labelHTML && !label) {
                label = href;
            }

            return '\n             <a id=\'' + id + '\' class="' + classes + ' ' + anchorClasses + '"  href="' + href + '" ' + attributeHTML + ' >' + (labelHTML ? labelHTML : label) + '</a>           \n        ';
        }
    }]);

    return Anchor;
}();

},{"../../../utilities/asserts.js":426,"../../../utilities/type-parsers.js":428,"../utilities/attributes.js":412}],393:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Buttons = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _style = require("./style");

var _messages = require("./messages.js");

var _attributes = require("../utilities/attributes.js");

var _typeParsers = require("../../../utilities/type-parsers.js");

var _asserts = require("../../../utilities/asserts.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var style = new _style.Style();
var typeCheck = new _typeParsers.TypeValidator();

/**
 * Renders a collection of buttons for one click recording of 
 * an input that has multiple options for data recording.
 */

var Buttons = exports.Buttons = function () {

    /**
     * Takes the settings for the buttons, a class that renders the 
     * error messages and a class that renders attributes. 
     * 
     * @param {Object} buttonsInfo - Information to create this button input 
     * @param {Array} buttonsInfo.buttons - each individual button data and settings.
     * @param {Object} buttonsInfo.settings - settings for all buttons 
     * @param {Class} buttonsInfo.errors - an error class that was created by the 
     * rendering library so the errors open and display alongside the library. 
     */
    function Buttons() {
        var buttons = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var input = arguments[1];
        var errorMessages = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _messages.ErrorMessages;

        _classCallCheck(this, Buttons);

        /**
         * Buttons to be rendered
         * @type {Array}
         */
        this.buttons = buttons;

        /**
         * Settings for all buttons in this group 
         * @type {Object}
         */
        this.input = input;

        /**
         * Error message class that will take the errors from 
         * the rendering library and adds them to this input 
         * @type {Class}
         */
        this.errorMessages = errorMessages;

        /**
         * Creates attribute tags html to be added to this button 
         * inputs.
         * @type {Class}
         */
        this.attributeTags = _attributes.AttributeTags;
    }

    /**
     * Lets users add the same classes to all buttons just in 
     * case buttons share a specific class.
     * 
     * @type {String}
     */


    _createClass(Buttons, [{
        key: "buttonClasses",
        get: function get() {
            return '';
        }

        /**
         * Creates the HTML for every buttons defined in the buttons array and 
         * attaches the error messages attached to this input. 
         * 
         * @example
         * buttonClasses = 'button-class';
         * buttons = [{
         *    label : "Button 1",
         *    attrHTML : "disabled",
         *    classes : "class-1"
         * },{
         *    label : "<h1>Button 2</h1>",
         *    classes " class-2"
         * }];
         * 
         * // Will render:
         * 
         * <button class="button-class class-1" disabled>Button 1</button>
         * <button class="button class class-2"><h1>Button 2</h1></button>
         * 
         * @type {String}
         */

    }, {
        key: "html",
        get: function get() {
            var _errors = this.errors,
                errorClass = _errors === undefined ? {} : _errors,
                _buttons = this.buttons,
                buttons = _buttons === undefined ? [] : _buttons,
                _input = this.input,
                input = _input === undefined ? {} : _input,
                buttonClasses = this.buttonClasses;
            var _errorClass$attribute = errorClass.attributes,
                attributes = _errorClass$attribute === undefined ? {} : _errorClass$attribute,
                _errorClass$errors = errorClass.errors,
                errors = _errorClass$errors === undefined ? {} : _errorClass$errors,
                _errorClass$messages = errorClass.messages,
                messages = _errorClass$messages === undefined ? {} : _errorClass$messages;

            var buttonErrorMessages = Object.keys(attributes).map(function (key, index) {
                return {
                    message: "" + errors[key],
                    attrHTML: ''
                };
            });
            var errorMessages = new this.errorMessages(buttonErrorMessages).html;
            var _input$label = input.label,
                label = _input$label === undefined ? '' : _input$label,
                _input$labelHTML = input.labelHTML,
                labelHTML = _input$labelHTML === undefined ? '' : _input$labelHTML,
                _input$showLabel = input.showLabel,
                showLabel = _input$showLabel === undefined ? false : _input$showLabel,
                id = input.id;

            var buttonsHTML = buttons.reduce(function (html, button, index) {
                var label = button.label,
                    _button$attrHTML = button.attrHTML,
                    attrHTML = _button$attrHTML === undefined ? '' : _button$attrHTML,
                    _button$classes = button.classes,
                    classes = _button$classes === undefined ? "" : _button$classes;


                return html + " \n                   <button " + attrHTML + " class=\"" + classes + " " + buttonClasses + "\">\n                       " + label + "\n                   </button>";
            }, '');

            if ((labelHTML.length > 0 || label.length > 0) && showLabel) {
                labelHTML = labelHTML ? labelHTML : label;
                labelHTML = "<label for=\"" + id + "\">" + labelHTML + "</label>";
            }

            return "\n             " + labelHTML + "\n             " + buttonsHTML + "\n             " + errorMessages + "             \n        ";
        }
    }]);

    return Buttons;
}();

},{"../../../utilities/asserts.js":426,"../../../utilities/type-parsers.js":428,"../utilities/attributes.js":412,"./messages.js":400,"./style":407}],394:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Checkbox = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _style = require("./style");

var _messages = require("./messages.js");

var _attributes = require("../utilities/attributes.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var style = new _style.Style();

/**
 * Produces html to build a checkbox input for the  
 * various rendering libraries. 
 */

var Checkbox = exports.Checkbox = function () {

    /**
     * Sets up the checkbox's settings from a standard input data 
     * object and sets the type of error messages this class 
     * will render if the checkbox isn't valid.
     * 
     * @param {Object} inputObj - contains all the configurations 
     * to render this input.
     * @param {class} errorMessages - a class that will render the 
     * specific type of error messages based on this UI's settings.
     */
    function Checkbox() {
        var inputObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var errorMessages = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _messages.ErrorMessages;

        _classCallCheck(this, Checkbox);

        var input = inputObj.input,
            _inputObj$tags = inputObj.tags,
            tags = _inputObj$tags === undefined ? '' : _inputObj$tags,
            _inputObj$settings = inputObj.settings,
            settings = _inputObj$settings === undefined ? {} : _inputObj$settings,
            _inputObj$errors = inputObj.errors,
            errors = _inputObj$errors === undefined ? {} : _inputObj$errors;

        /**
         * This checkbox's input configuration 
         * @type {Object}
         */

        this.input = input;

        /**
         * Any custom tags passed down from the rendering library. 
         * @type {String}
         */
        this.tags = tags;

        /**
         * Settings for this whole input including the container
         * @type {Object}
         */
        this.settings = settings;

        /**
         * A class of errors created by the rendering library to 
         * hide and show various errors.
         * @type {class}
         */
        this.errors = errors;

        /**
         * This UI's rendering of this error messages.
         * @type {class}
         */
        this.errorMessages = errorMessages;
    }

    /**
     * Adds a default class to this checkbox input 
     * @type {String}
     */


    _createClass(Checkbox, [{
        key: "renderCheckboxContainer",


        /**
         * Renders the HTML for this checkbox from the given attributes 
         * and classes.
         * @example
         * uiClasses = "class-1";
         * input.classes = "class-2";
         * requiredAttributes = "id='id-1' name='checkbox-name' type='checkbox'"
         * // Renders To:
         * <label class="class-1 class-2">
         *     <input id='id-1' name='checkbox-name' type='checkbox'>
         * </label>
         * @return {String} - html of the fully created checkbox
         */
        value: function renderCheckboxContainer(classes, attributes) {
            var input = this.input,
                settings = this.settings;
            var _input$label = input.label,
                label = _input$label === undefined ? '' : _input$label,
                labelHTML = input.labelHTML,
                _input$name = input.name,
                name = _input$name === undefined ? '' : _input$name,
                _input$id = input.id,
                id = _input$id === undefined ? '' : _input$id;
            var _settings$showLabel = settings.showLabel,
                showLabel = _settings$showLabel === undefined ? true : _settings$showLabel;


            if (labelHTML) label = labelHTML;

            return "\n            <label for=\"" + id + "\" class=\"" + classes + "\">\n               <input " + attributes + ">\n               " + label + "\n            </label>\n        ";
        }

        /**
         * Sets up and renders all the HTML for this checkbox based on the settings.
         * 
         * @type {String}
         */

    }, {
        key: "uiClasses",
        get: function get() {
            return '';
        }

        /**
         * Any UI specific attributes
         * @type {String}
         */

    }, {
        key: "uiAttributes",
        get: function get() {
            return '';
        }

        /**
         * Attributes that required for this checkbox input 
         * to be used and rendered properly.
         * @return {String} - A string of all attributes to load 
         * this input including its id, name and type.
         */

    }, {
        key: "requiredAttributes",
        get: function get() {
            var input = this.input;
            var id = input.id,
                name = input.name;


            return "id=\"" + id + "\" name=\"" + name + "\" type=\"checkbox\"";
        }
    }, {
        key: "html",
        get: function get() {
            var tags = this.tags,
                _settings = this.settings,
                settings = _settings === undefined ? {} : _settings,
                errors = this.errors,
                input = this.input,
                uiClasses = this.uiClasses,
                uiAttributes = this.uiAttributes,
                requiredAttributes = this.requiredAttributes;
            var _settings$input = settings.input,
                inputSettings = _settings$input === undefined ? {} : _settings$input;
            var _inputSettings$classe = inputSettings.classes,
                classes = _inputSettings$classe === undefined ? '' : _inputSettings$classe;
            var id = input.id,
                name = input.name,
                _input$label2 = input.label,
                label = _input$label2 === undefined ? '' : _input$label2;
            var _errors = this.errors,
                _errors$messages = _errors.messages,
                messages = _errors$messages === undefined ? [] : _errors$messages,
                _errors$attributes = _errors.attributes,
                attributes = _errors$attributes === undefined ? {} : _errors$attributes,
                _errors$tags = _errors.tags,
                errorTags = _errors$tags === undefined ? '' : _errors$tags;

            var errorAttributes = attributes;
            var errorHTML = new this.errorMessages(messages).html;
            var allClasses = classes + " " + uiClasses;
            var allAttributes = requiredAttributes + " " + uiAttributes + " " + tags + " " + errorTags;
            var checkboxHTML = this.renderCheckboxContainer(allClasses, allAttributes);
            var inputHTML = " \n            " + checkboxHTML + "\n            " + errorHTML + "\n       ";

            return "" + inputHTML;
        }
    }]);

    return Checkbox;
}();

},{"../utilities/attributes.js":412,"./messages.js":400,"./style":407}],395:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Date = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _style = require("./style");

var _messages = require("./messages.js");

var _attributes = require("../utilities/attributes.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var style = new _style.Style();

/**
 * Creates a date input that will record date specific data 
 * for iVXjs.
 */

var Date = exports.Date = function () {

  /**
   * Accepts an input object with various input settings and UI specific error 
   * messages
   * @param {object} inputObj - various input settings to render this date input box
   * @param {object} inputObj.input - input specific settings for this date input 
   * @param {object} inputObj.settings - global settings for this date input 
   * @param {string} inputObj.tags - input specific attribute tags 
   * @param {class} inputObj.errors - errors from a rendering for validation and 
   * error messaging appearance.
   * @param {object} errorMessages - UI specific Error messages 
   */
  function Date() {
    var inputObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var errorMessages = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _messages.ErrorMessages;

    _classCallCheck(this, Date);

    var _inputObj$input = inputObj.input,
        input = _inputObj$input === undefined ? {} : _inputObj$input,
        _inputObj$settings = inputObj.settings,
        settings = _inputObj$settings === undefined ? {} : _inputObj$settings,
        _inputObj$tags = inputObj.tags,
        tags = _inputObj$tags === undefined ? {} : _inputObj$tags,
        _inputObj$errors = inputObj.errors,
        errors = _inputObj$errors === undefined ? {} : _inputObj$errors;

    /**
     * Input specific settings for this date input
     * @type {object}  
     */

    this.input = input;

    /**
     * Global input settings for this date input 
     * @type {object}
     */
    this.settings = settings;

    /**
     * Tags to be added to this date input
     * @type {String}
     */
    this.tags = tags;

    /**
     * Holds all validation error correcting.
     * @type {Class}
     */
    this.errors = errors;

    /**
     * Renders UI specific error messages by utilizing the 
     * error class passed down to keep it consistent with the 
     * current UI framework.
     * @type {Class}
     */
    this.errorMessages = errorMessages;

    /**
     * Converts attribute data into attribute HTML for 
     * attributes not covered by the errors class.
     * @type {Class}
     */
    this.attributeTags = _attributes.AttributeTags;
  }

  /**
   * Default ui classes to add to all date inputs 
   * @type {String}
   */


  _createClass(Date, [{
    key: "uiClasses",
    get: function get() {
      return '';
    }

    /**
     * Default ui attributes to add to this date input 
     * that aren't covered by the tags or errors above.
     * @type {String}
     */

  }, {
    key: "uiAttributes",
    get: function get() {
      return '';
    }

    /**
     * The HTML to render a date input based on the settings from the 
     * constructor. 
     * 
     * @example 
     * //Data 
     * input.label = "<h1>Label</h1>";
     * settings.classes = "class-1";
     * errors.tags = "required='true'";
     * Date.uiClasses = 'ui-classes-1';
     * // Renders 
     * <label>
     *      <h1>Label</h1>
     * </label>
     * <input class="class-1 ui-classes-1" type="date" required="true">
     * @type {String}
     */

  }, {
    key: "html",
    get: function get() {
      var input = this.input,
          settings = this.settings,
          tags = this.tags,
          errors = this.errors,
          uiClasses = this.uiClasses,
          uiAttributes = this.uiAttributes;
      var label = input.label,
          labelHTML = input.labelHTML,
          _input$name = input.name,
          name = _input$name === undefined ? '' : _input$name,
          _input$id = input.id,
          id = _input$id === undefined ? '' : _input$id;
      var _settings$input = settings.input,
          inputSettings = _settings$input === undefined ? {} : _settings$input,
          _settings$showLabel = settings.showLabel,
          showLabel = _settings$showLabel === undefined ? true : _settings$showLabel;
      var _inputSettings$classe = inputSettings.classes,
          classes = _inputSettings$classe === undefined ? '' : _inputSettings$classe;


      classes = classes + " " + uiClasses;

      var _errors$messages = errors.messages,
          errorMessages = _errors$messages === undefined ? [] : _errors$messages,
          _errors$attributes = errors.attributes,
          errorAttributes = _errors$attributes === undefined ? '' : _errors$attributes,
          _errors$nonValidate = errors.nonValidate,
          nonValidate = _errors$nonValidate === undefined ? [] : _errors$nonValidate,
          _errors$tags = errors.tags,
          errorTags = _errors$tags === undefined ? '' : _errors$tags;

      var errorHTML = new this.errorMessages(errorMessages).html;
      var nonValidateAttributesHTML = new _attributes.AttributeTags(errorAttributes, nonValidate).html;

      nonValidateAttributesHTML = nonValidateAttributesHTML + " " + uiAttributes;

      var inputHTML = " \n            <label for=\"" + id + "\"> " + label + " </label>\n            <input class=\"" + classes + "\"  id=\"" + id + "\" name=\"" + name + "\"  type=\"date\" " + nonValidateAttributesHTML + "   " + errorTags + " " + tags + ">\n            " + errorHTML + "\n       ";

      if (labelHTML) label = labelHTML;

      return "" + inputHTML;
    }
  }]);

  return Date;
}();

},{"../utilities/attributes.js":412,"./messages.js":400,"./style":407}],396:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
        value: true
});
exports.DatetimeLocal = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _style = require("./style");

var _messages = require("./messages.js");

var _attributes = require("../utilities/attributes.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var style = new _style.Style();

/**
 * Creates a datetime local input that will record date with timestamp specific data 
 * for iVXjs.
 */

var DatetimeLocal = exports.DatetimeLocal = function () {

        /**
        * Accepts an input object with various input settings and UI specific error 
        * messages
        * @param {object} inputObj - various input settings to render a datetime-local input box
        * @param {object} inputObj.input - input specific settings for this datetime-local input 
        * @param {object} inputObj.settings - global settings for this datetime-local input 
        * @param {string} inputObj.tags - input specific attribute tags 
        * @param {class} inputObj.errors - errors from a rendering for validation and 
        * error messaging appearance.
        * @param {object} errorMessages - UI specific Error messages
        */
        function DatetimeLocal() {
                var inputObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                var errorMessages = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _messages.ErrorMessages;

                _classCallCheck(this, DatetimeLocal);

                var _inputObj$input = inputObj.input,
                    input = _inputObj$input === undefined ? {} : _inputObj$input,
                    _inputObj$settings = inputObj.settings,
                    settings = _inputObj$settings === undefined ? {} : _inputObj$settings,
                    _inputObj$tags = inputObj.tags,
                    tags = _inputObj$tags === undefined ? {} : _inputObj$tags,
                    _inputObj$errors = inputObj.errors,
                    errors = _inputObj$errors === undefined ? {} : _inputObj$errors;

                /**
                 * Input specific settings for this datetime-local input
                 * @type {object}  
                 */

                this.input = input;

                /**
                 * Global input settings for this datetime-local input 
                 * @type {object}
                 */
                this.settings = settings;

                /**
                 * Tags to be added to this datetime-local input
                 * @type {String}
                 */
                this.tags = tags;

                /**
                * Holds all validation error correcting.
                * @type {Class}
                */
                this.errors = errors;

                /**
                 * Renders UI specific error messages by utilizing the 
                 * error class passed down to keep it consistent with the 
                 * current UI framework.
                 * @type {Class}
                 */
                this.errorMessages = errorMessages;

                /**
                 * Converts attribute data into attribute HTML for 
                 * attributes not covered by the errors class.
                 * @type {Class}
                 */
                this.attributeTags = _attributes.AttributeTags;
        }

        /**
        * Default ui classes to add to all datetime-local inputs 
        * @type {String}
        */


        _createClass(DatetimeLocal, [{
                key: "uiClasses",
                get: function get() {
                        return "";
                }

                /**
                 * Default ui attributes to add to this datetime-local input 
                 * that aren't covered by the tags or errors above.
                 * @type {String}
                 */

        }, {
                key: "uiAttributes",
                get: function get() {
                        return "";
                }

                /**
                * The HTML to render a datetime-local input based on the settings from the 
                * constructor. 
                * 
                * @example 
                * //Data 
                * input.label = "<h1>Label</h1>";
                * settings.classes = "class-1";
                * errors.tags = "required='true'";
                * DatetimeLocal.uiClasses = 'ui-classes-1';
                * // Renders 
                * <label>
                *      <h1>Label</h1>
                * </label>
                * <input class="class-1 ui-classes-1" type="datetime-local" required="true">
                * @type {String}
                */

        }, {
                key: "html",
                get: function get() {
                        var input = this.input,
                            settings = this.settings,
                            tags = this.tags,
                            errors = this.errors,
                            uiClasses = this.uiClasses,
                            uiAttributes = this.uiAttributes;
                        var label = input.label,
                            labelHTML = input.labelHTML,
                            _input$name = input.name,
                            name = _input$name === undefined ? '' : _input$name,
                            _input$id = input.id,
                            id = _input$id === undefined ? '' : _input$id;
                        var _settings$input = settings.input,
                            inputSettings = _settings$input === undefined ? {} : _settings$input,
                            _settings$showLabel = settings.showLabel,
                            showLabel = _settings$showLabel === undefined ? true : _settings$showLabel;
                        var _inputSettings$classe = inputSettings.classes,
                            classes = _inputSettings$classe === undefined ? '' : _inputSettings$classe;


                        classes = classes + " " + uiClasses;

                        var _errors$messages = errors.messages,
                            errorMessages = _errors$messages === undefined ? [] : _errors$messages,
                            _errors$attributes = errors.attributes,
                            errorAttributes = _errors$attributes === undefined ? '' : _errors$attributes,
                            _errors$nonValidate = errors.nonValidate,
                            nonValidate = _errors$nonValidate === undefined ? [] : _errors$nonValidate,
                            _errors$tags = errors.tags,
                            errorTags = _errors$tags === undefined ? '' : _errors$tags;

                        var errorHTML = new this.errorMessages(errorMessages).html;
                        var nonValidateAttributesHTML = new this.attributeTags(errorAttributes, nonValidate).html;

                        nonValidateAttributesHTML = nonValidateAttributesHTML + " " + uiAttributes;

                        if (labelHTML) label = labelHTML;

                        var inputHTML = " \n            <label for=\"" + id + "\"> " + label + " </label>\n            <input class=\"" + classes + "\"  id=\"" + id + "\" name=\"" + name + "\"  type=\"datetime-local\" " + nonValidateAttributesHTML + "   " + errorTags + " " + tags + ">\n            " + errorHTML + "\n       ";

                        return "" + inputHTML;
                }
        }]);

        return DatetimeLocal;
}();

},{"../utilities/attributes.js":412,"./messages.js":400,"./style":407}],397:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
        value: true
});
exports.Email = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _style = require("./style");

var _messages = require("./messages.js");

var _attributes = require("../utilities/attributes.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var style = new _style.Style();

/**
 * Creates an email input that will record emails  
 * for iVXjs.
 */

var Email = exports.Email = function () {

        /**
         * Accepts an input object with various input settings and UI specific error 
         * messages
         * @param {object} inputObj - various input settings to render this email input box
         * @param {object} inputObj.input - input specific settings for this email input 
         * @param {object} inputObj.settings - global settings for this email input 
         * @param {string} inputObj.tags - input specific attribute tags 
         * @param {class} inputObj.errors - errors from a rendering for validation and 
         * error messaging appearance.
         * @param {object} errorMessages - UI specific Error messages 
         */
        function Email() {
                var inputObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                var errorMessages = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _messages.ErrorMessages;

                _classCallCheck(this, Email);

                var _inputObj$input = inputObj.input,
                    input = _inputObj$input === undefined ? {} : _inputObj$input,
                    _inputObj$settings = inputObj.settings,
                    settings = _inputObj$settings === undefined ? {} : _inputObj$settings,
                    _inputObj$tags = inputObj.tags,
                    tags = _inputObj$tags === undefined ? {} : _inputObj$tags,
                    _inputObj$errors = inputObj.errors,
                    errors = _inputObj$errors === undefined ? {} : _inputObj$errors;

                /**
                 * Input specific settings for this email input
                 * @type {object}  
                 */

                this.input = input;

                /**
                * Input specific settings for this email input
                * @type {object}  
                */
                this.settings = settings;

                /**
                 * Tags to be added to this email input
                 * @type {String}
                 */
                this.tags = tags;

                /**
                 * Holds all validation error correcting.
                 * @type {Class}
                 */
                this.errors = errors;

                /**
                 * Renders UI specific error messages by utilizing the 
                 * error class passed down to keep it consistent with the 
                 * current UI framework.
                 * @type {Class}
                 */
                this.errorMessages = errorMessages;

                /**
                 * Converts attribute data into attribute HTML for 
                 * attributes not covered by the errors class.
                 * @type {Class}
                 */
                this.attributeTags = _attributes.AttributeTags;
        }

        /**
        * Default ui classes to add to all email inputs 
        * @type {String}
        */


        _createClass(Email, [{
                key: "uiClasses",
                get: function get() {
                        return '';
                }

                /**
                * Default ui attributes to add to this email input 
                * that aren't covered by the tags or errors above.
                * @type {String}
                */

        }, {
                key: "uiAttributes",
                get: function get() {
                        return '';
                }

                /**
                 * The HTML to render an email input based on the settings from the 
                 * constructor. 
                 * 
                 * @example 
                 * //Data 
                 * input.label = "<h1>Label</h1>";
                 * settings.classes = "class-1";
                 * errors.tags = "required='true'";
                 * Email.uiClasses = 'ui-classes-1';
                 * // Renders 
                 * <label>
                 *      <h1>Label</h1>
                 * </label>
                 * <input class="class-1 ui-classes-1" type="email" required="true">
                 * @type {String}
                 */

        }, {
                key: "html",
                get: function get() {
                        var input = this.input,
                            settings = this.settings,
                            tags = this.tags,
                            errors = this.errors,
                            uiClasses = this.uiClasses,
                            uiAttributes = this.uiAttributes;
                        var _input$label = input.label,
                            label = _input$label === undefined ? '' : _input$label,
                            labelHTML = input.labelHTML,
                            _input$name = input.name,
                            name = _input$name === undefined ? '' : _input$name,
                            _input$id = input.id,
                            id = _input$id === undefined ? '' : _input$id;
                        var _settings$input = settings.input,
                            inputSettings = _settings$input === undefined ? {} : _settings$input,
                            _settings$showLabel = settings.showLabel,
                            showLabel = _settings$showLabel === undefined ? true : _settings$showLabel;
                        var _inputSettings$classe = inputSettings.classes,
                            classes = _inputSettings$classe === undefined ? '' : _inputSettings$classe;


                        classes = classes + " " + uiClasses;

                        var _errors$messages = errors.messages,
                            errorMessages = _errors$messages === undefined ? [] : _errors$messages,
                            _errors$attributes = errors.attributes,
                            errorAttributes = _errors$attributes === undefined ? '' : _errors$attributes,
                            _errors$nonValidate = errors.nonValidate,
                            nonValidate = _errors$nonValidate === undefined ? [] : _errors$nonValidate,
                            _errors$tags = errors.tags,
                            errorTags = _errors$tags === undefined ? '' : _errors$tags;

                        var errorHTML = new this.errorMessages(errorMessages).html;
                        var nonValidateAttributesHTML = new this.attributeTags(errorAttributes, nonValidate).html;

                        nonValidateAttributesHTML = nonValidateAttributesHTML + " " + uiAttributes;

                        if (labelHTML) label = labelHTML;

                        var inputHTML = " \n            <label for=\"" + id + "\"> " + label + " </label>\n            <input class=\"" + classes + "\"  id=\"" + id + "\" name=\"" + name + "\"  type=\"email\" " + nonValidateAttributesHTML + "   " + errorTags + " " + tags + ">\n            " + errorHTML + "\n       ";

                        return "" + inputHTML;
                }
        }]);

        return Email;
}();

},{"../utilities/attributes.js":412,"./messages.js":400,"./style":407}],398:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Form = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _style = require('./style');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Creates a form wrapper around these inputs and a 
 * submit button to submit the form.
 */
var Form = exports.Form = function () {

    /**
     * Sets up the various data to render this form.
     * @param {array} inputHTML - All input data to be added to this form 
     * @param {string} name - name of this form 
     * @param {string} additionalAttrHTML - Attributes that need to be 
     * added to the form primarily used for validation and submit functions.
     * @param {object} settings - Global settings for this form.
     */
    function Form(inputHTML, name, additionalAttrHTML, settings) {
        var style = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : _style.Style;

        _classCallCheck(this, Form);

        /**
         * All input html information for this 
         * form
         * @type {String}
         */
        this.inputHTML = inputHTML;

        /**
         * Name for this form 
         * @type {String}
         */
        this.name = name;

        /**
         * Additional tags to add to this form 
         * @type {String}
         */
        this.additionalAttrHTML = additionalAttrHTML;

        /**
         * Settings for this entire form 
         * @type {Object}
         */
        this.settings = settings;

        /**
         * Settings for this submit button 
         * @type {Object}
         */
        this.submit = settings.submit;
        this.style = new style();
    }

    /**
     * Any default UI classes to add to this form 
     * @type {String}
     */


    _createClass(Form, [{
        key: 'formClasses',
        get: function get() {
            return 'row';
        }

        /**
         * Renders the HTML to render the 
         * @example
         * Form.settings = {
         *     submit : {
         *         label : "My new submit label",
         *         input : {
         *            classes : "my-submit-input"
         *         },
         *         container : {
         *             classes : "my-submit-container"
         *         }
         *     }
         * };
         * 
         * //Will Render 
         * 
         * <div class="ivxjs-grid-1-1 my-submit-container">
         *     <button class="my-submit-input" type="submit">
         *          My new submit label 
         *     </button>
         * </div>
         * 
         * @type {string}
         */

    }, {
        key: 'submitButtonHTML',
        get: function get() {
            var _submit = this.submit,
                submit = _submit === undefined ? {} : _submit;
            var _submit$label = submit.label,
                submitLabel = _submit$label === undefined ? "Submit" : _submit$label,
                submitLabelHTML = submit.labelHTML,
                _submit$input = submit.input,
                submitInput = _submit$input === undefined ? {} : _submit$input,
                _submit$container = submit.container,
                submitContainer = _submit$container === undefined ? {} : _submit$container,
                _submit$attributes = submit.attributes,
                attributes = _submit$attributes === undefined ? '' : _submit$attributes;
            var _submitInput$classes = submitInput.classes,
                submitInputClasses = _submitInput$classes === undefined ? "" : _submitInput$classes;
            var _submitContainer$clas = submitContainer.classes,
                submitContainerClasses = _submitContainer$clas === undefined ? "" : _submitContainer$clas;


            submitLabel = submitLabelHTML ? submitLabelHTML : submitLabel;

            var submitHTML = submitLabel.length >= 0 ? '\n            <div class="ivxjs-grid-1-1 ' + submitContainerClasses + '">\n            <button class="' + submitInputClasses + '" type=\'submit\' ' + attributes + '>\n                    ' + submitLabel + '\n                </button>\n                </div>\n                ' : '';

            return submitHTML;
        }

        /**
         * Wraps each input's html into a container so they can be formatted correctly
         * utilizing the ivxjs.css's grid system.
         * @type{String} 
         */

    }, {
        key: 'html',
        get: function get() {
            var inputHTML = this.inputHTML,
                name = this.name,
                additionalAttrHTML = this.additionalAttrHTML,
                settings = this.settings,
                formClasses = this.formClasses;
            var _settings$submit = settings.submit,
                submit = _settings$submit === undefined ? {} : _settings$submit,
                _settings$classes = settings.classes,
                configFormClasses = _settings$classes === undefined ? '' : _settings$classes,
                formId = settings.id,
                _settings$label = settings.label,
                label = _settings$label === undefined ? '' : _settings$label,
                labelHTML = settings.labelHTML;


            if (labelHTML) label = labelHTML;

            if (!settings.hideSubmit) {
                inputHTML.push({
                    settings: submit,
                    html: this.submitButtonHTML
                });
            }

            var contents = this.style.addWidthClasses(inputHTML);

            return '\n            ' + label + '\n            <form id="' + formId + '-form" class="' + formClasses + ' ' + configFormClasses + '" novalidate name="' + name + '" ' + additionalAttrHTML + '>                \n                ' + contents + '\n            </form>\n        ';
        }
    }]);

    return Form;
}();

},{"./style":407}],399:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DefaultUI = undefined;

var _form = require('./form.js');

var _anchor = require('./anchor.js');

var _buttons = require('./buttons.js');

var _checkbox = require('./checkbox.js');

var _date = require('./date.js');

var _datetimeLocal = require('./datetime-local.js');

var _email = require('./email.js');

var _number = require('./number.js');

var _options = require('./options.js');

var _radio = require('./radio.js');

var _style = require('./style.js');

var _text = require('./text.js');

var _textarea = require('./textarea.js');

var _url = require('./url.js');

var _stateInput = require('./state.input.js');

var _stateVideo = require('./state.video.js');

var _stateNavigation = require('./state.navigation.js');

var _videoControls = require('./video.controls.js');

var _videoControls2 = _interopRequireDefault(_videoControls);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Form/Input HTML


//States


//Controls 


/**
 * Registers all the various default UI classes to 
 * this class to be used by various renders.
 */
var DefaultUI =

/**
 * By default, this UI framework should support the following inputs:
 * 
 * * form
 * * button 
 * * checkbox
 * * date
 * * datetime-local 
 * * email 
 * * number 
 * * select/options 
 * * radio buttons 
 * * text 
 * * textarea 
 * * url 
 * * video.controls
 * 
 * Provide the html for the following state types:
 * 
 * * input 
 * * video
 * 
 * 
 */
exports.DefaultUI = function DefaultUI() {
    _classCallCheck(this, DefaultUI);

    this.form = _form.Form;
    this.anchor = _anchor.Anchor;
    this.buttons = _buttons.Buttons;
    this.checkbox = _checkbox.Checkbox;
    this.date = _date.Date;
    this.datetimeLocal = _datetimeLocal.DatetimeLocal;
    this.email = _email.Email;
    this.number = _number.Number;
    this.options = _options.Options;
    this.radio = _radio.Radio;
    this.style = new _style.Style();
    this.text = _text.Text;
    this.textarea = _textarea.Textarea;
    this.url = _url.Url;
    this.videoControls = _videoControls2.default;
    this.states = {
        input: _stateInput.InputState,
        video: _stateVideo.VideoState,
        navigation: _stateNavigation.NavigationState
    };
};

},{"./anchor.js":392,"./buttons.js":393,"./checkbox.js":394,"./date.js":395,"./datetime-local.js":396,"./email.js":397,"./form.js":398,"./number.js":401,"./options.js":402,"./radio.js":403,"./state.input.js":404,"./state.navigation.js":405,"./state.video.js":406,"./style.js":407,"./text.js":408,"./textarea.js":409,"./url.js":410,"./video.controls.js":411}],400:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Indicates errors for each input based on the 
 * attributes created from the various rendering libraries
 * iVXjs uses. 
 */
var ErrorMessages = exports.ErrorMessages = function () {

    /**
     * Brings in all the possible error messages 
     * this input can produce.
     * 
     * @param {Array} errorMessages - list of all possible 
     * error messages with attributes indicating the message 
     * and the conditions in which to show them.
     */
    function ErrorMessages() {
        var errorMessages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

        _classCallCheck(this, ErrorMessages);

        /**
         * List of all possible error messages.
         * @type {Array}
         */
        this.errorMessages = errorMessages;
    }

    /**
     * Sets the classes for the error message div.
     * @type {String} 
     */


    _createClass(ErrorMessages, [{
        key: 'messageClasses',
        get: function get() {
            return 'error-message';
        }

        /**
         * Set the classes for the container of all error messages.
         * @type {String}
         */

    }, {
        key: 'containerClasses',
        get: function get() {
            return 'error-messages';
        }

        /**
         * Renders the HTML for all error messages and the container with 
         * them. Results:
         * @example
         * <div class="error-messages">
         *    <span class="error-message">MESSAGE</span>
         * </div>
         * @type {String}
         */

    }, {
        key: 'html',
        get: function get() {
            var errorMessages = this.errorMessages,
                messageClasses = this.messageClasses,
                containerClasses = this.containerClasses;

            var errorMessageHTML = errorMessages.reduce(function (errorMessageHTML, errorMessage, index) {
                return errorMessageHTML + '<span class="' + messageClasses + '" ' + errorMessage.attrHTML + '>\n                    ' + errorMessage.message + '\n                </span>';
            }, '');

            if (errorMessageHTML.length > 0) {
                return '<div class=\'' + containerClasses + '\'>\n                ' + errorMessageHTML + '\n            </div>';
            }

            return '';
        }
    }]);

    return ErrorMessages;
}();

},{}],401:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
        value: true
});
exports.Number = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _messages = require("./messages.js");

var _attributes = require("../utilities/attributes.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Creates a number input that will record numbers  
 * for iVXjs.
 */
var Number = exports.Number = function () {

        /**
         * Accepts an input object with various input settings and UI specific error 
         * messages
         * @param {object} inputObj - various input settings to render this number input box
         * @param {object} inputObj.input - input specific settings for this number input 
         * @param {object} inputObj.settings - global settings for this number input 
         * @param {string} inputObj.tags - input specific attribute tags 
         * @param {class} inputObj.errors - errors from a rendering for validation and 
         * error messaging appearance.
         * @param {object} errorMessages - UI specific Error messages 
         */
        function Number() {
                var inputObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                var errorMessages = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _messages.ErrorMessages;

                _classCallCheck(this, Number);

                var _inputObj$input = inputObj.input,
                    input = _inputObj$input === undefined ? {} : _inputObj$input,
                    _inputObj$settings = inputObj.settings,
                    settings = _inputObj$settings === undefined ? {} : _inputObj$settings,
                    _inputObj$tags = inputObj.tags,
                    tags = _inputObj$tags === undefined ? {} : _inputObj$tags,
                    _inputObj$errors = inputObj.errors,
                    errors = _inputObj$errors === undefined ? {} : _inputObj$errors;

                /**
                 * Input specific settings for this number input
                 * @type {object}  
                 */

                this.input = input;

                /**
                * Input specific settings for this number input
                * @type {object}  
                */
                this.settings = settings;

                /**
                * Tags to be added to this number input
                * @type {String}
                */
                this.tags = tags;

                /**
                * Holds all validation error correcting.
                * @type {Class}
                */
                this.errors = errors;

                /**
                * Renders UI specific error messages by utilizing the 
                * error class passed down to keep it consistent with the 
                * current UI framework.
                * @type {Class}
                */
                this.errorMessages = errorMessages;

                /**
                * Converts attribute data into attribute HTML for 
                * attributes not covered by the errors class.
                * @type {Class}
                */
                this.attributeTags = _attributes.AttributeTags;
        }

        /**
         * Default ui classes to add to all number inputs 
         * @type {String}
         */


        _createClass(Number, [{
                key: "uiClasses",
                get: function get() {
                        return '';
                }

                /**
                * Default ui attributes to add to this email input 
                * that aren't covered by the tags or errors above.
                * @type {String}
                */

        }, {
                key: "uiAttributes",
                get: function get() {
                        return '';
                }

                /**
                 * The HTML to render a number input based on the settings from the 
                 * constructor. 
                 * 
                 * @example 
                 * //Data 
                 * input.label = "<h1>Label</h1>";
                 * settings.classes = "class-1";
                 * errors.tags = "required='true'";
                 * Number.uiClasses = 'ui-classes-1';
                 * input.attributes = {
                 *     "step" : "0.1"
                 * }
                 * // Renders 
                 * <label>
                 *      <h1>Label</h1>
                 * </label>
                 * <input step="0.1" class="class-1 ui-classes-1" type="number" required="true">
                 * @type {String}
                 */

        }, {
                key: "html",
                get: function get() {
                        var input = this.input,
                            settings = this.settings,
                            tags = this.tags,
                            errors = this.errors,
                            uiClasses = this.uiClasses,
                            uiAttributes = this.uiAttributes;
                        var _input$label = input.label,
                            label = _input$label === undefined ? '' : _input$label,
                            _input$name = input.name,
                            name = _input$name === undefined ? '' : _input$name,
                            _input$id = input.id,
                            id = _input$id === undefined ? '' : _input$id,
                            labelHTML = input.labelHTML;
                        var _settings$input = settings.input,
                            inputSettings = _settings$input === undefined ? {} : _settings$input,
                            _settings$showLabel = settings.showLabel,
                            showLabel = _settings$showLabel === undefined ? true : _settings$showLabel;
                        var _inputSettings$classe = inputSettings.classes,
                            classes = _inputSettings$classe === undefined ? '' : _inputSettings$classe;


                        classes = classes + " " + uiClasses;

                        var _errors$messages = errors.messages,
                            errorMessages = _errors$messages === undefined ? [] : _errors$messages,
                            _errors$attributes = errors.attributes,
                            errorAttributes = _errors$attributes === undefined ? '' : _errors$attributes,
                            _errors$nonValidate = errors.nonValidate,
                            nonValidate = _errors$nonValidate === undefined ? [] : _errors$nonValidate,
                            _errors$tags = errors.tags,
                            errorTags = _errors$tags === undefined ? '' : _errors$tags;

                        var errorHTML = new this.errorMessages(errorMessages).html;
                        var nonValidateAttributesHTML = new this.attributeTags(errorAttributes, nonValidate).html;

                        nonValidateAttributesHTML = nonValidateAttributesHTML + " " + uiAttributes;

                        if (labelHTML) label = labelHTML;

                        var inputHTML = " \n            <label for=\"" + id + "\"> " + label + " </label>\n            <input class=\"" + classes + "\"  name=\"" + name + "\"  type=\"number\" " + nonValidateAttributesHTML + "   " + errorTags + " " + tags + ">\n            " + errorHTML + "\n       ";

                        return "" + inputHTML;
                }
        }]);

        return Number;
}();

},{"../utilities/attributes.js":412,"./messages.js":400}],402:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Options = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _style = require("./style");

var _messages = require("./messages.js");

var _attributes = require("../utilities/attributes.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var style = new _style.Style();

var Options = exports.Options = function () {
    function Options(inputObj) {
        var errorMessages = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _messages.ErrorMessages;

        _classCallCheck(this, Options);

        var input = inputObj.input,
            _inputObj$defaultDisp = inputObj.defaultDisplay,
            defaultDisplay = _inputObj$defaultDisp === undefined ? '' : _inputObj$defaultDisp,
            _inputObj$settings = inputObj.settings,
            settings = _inputObj$settings === undefined ? {} : _inputObj$settings,
            _inputObj$tags = inputObj.tags,
            tags = _inputObj$tags === undefined ? '' : _inputObj$tags,
            _inputObj$errors = inputObj.errors,
            errors = _inputObj$errors === undefined ? {} : _inputObj$errors;


        this.tags = tags;
        this.input = input;
        this.defaultDisplay = defaultDisplay;
        this.errors = errors;
        this.settings = settings;
        this.errorMessages = errorMessages;
        this.attributeTags = _attributes.AttributeTags;
    }

    _createClass(Options, [{
        key: "uiClasses",
        get: function get() {
            return '';
        }
    }, {
        key: "uiAttributes",
        get: function get() {
            return '';
        }
    }, {
        key: "html",
        get: function get() {
            var tags = this.tags,
                input = this.input,
                defaultDisplay = this.defaultDisplay,
                errors = this.errors,
                settings = this.settings,
                uiClasses = this.uiClasses,
                uiAttributes = this.uiAttributes;
            var id = input.id,
                name = input.name,
                options = input.options,
                _input$label = input.label,
                label = _input$label === undefined ? '' : _input$label,
                labelHTML = input.labelHTML;
            var _settings$input = settings.input,
                inputSettings = _settings$input === undefined ? {} : _settings$input,
                _settings$showLabel = settings.showLabel,
                showLabel = _settings$showLabel === undefined ? true : _settings$showLabel;
            var _inputSettings$classe = inputSettings.classes,
                classes = _inputSettings$classe === undefined ? '' : _inputSettings$classe;


            classes = classes + " " + uiClasses;

            var _errors$messages = errors.messages,
                errorMessages = _errors$messages === undefined ? [] : _errors$messages,
                _errors$attributes = errors.attributes,
                errorAttributes = _errors$attributes === undefined ? '' : _errors$attributes,
                _errors$nonValidate = errors.nonValidate,
                nonValidate = _errors$nonValidate === undefined ? [] : _errors$nonValidate,
                _errors$tags = errors.tags,
                errorTags = _errors$tags === undefined ? '' : _errors$tags;

            var defaultOptionTag = "<option value=\"\">Select an option...</option>";
            var errorHTML = new this.errorMessages(errorMessages).html;
            var nonValidateAttributesHTML = new this.attributeTags(errorAttributes, nonValidate).html;

            nonValidateAttributesHTML = nonValidateAttributesHTML + " " + uiAttributes;

            if (errorAttributes.required || defaultDisplay && defaultDisplay.length >= 0) {
                defaultOptionTag = defaultDisplay ? "<option value=\"\">" + defaultDisplay + "</option>" : defaultOptionTag;
            }

            if (labelHTML) label = labelHTML;

            var optionsHTML = options.reduce(function (optionHTML, option) {
                return optionHTML + "\n            <option value=\"" + option.value + "\">" + option.display + "</option>";
            }, '');

            var inputHTML = " \n             <label for=\"" + id + "\">" + label + "</label>             \n               <select class=\"" + classes + "\"  id=\"" + id + "\" name=\"" + name + "\"" + nonValidateAttributesHTML + " " + errorTags + " " + tags + ">\n                  " + defaultOptionTag + "\n                  " + optionsHTML + "\n               </select>\n               " + errorHTML;

            return "" + inputHTML;
        }
    }]);

    return Options;
}();

},{"../utilities/attributes.js":412,"./messages.js":400,"./style":407}],403:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Radio = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _messages = require("./messages.js");

var _attributes = require("../utilities/attributes.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Radio = exports.Radio = function () {
    function Radio(radioInputObj) {
        var errorMessages = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _messages.ErrorMessages;

        _classCallCheck(this, Radio);

        var _radioInputObj$input = radioInputObj.input,
            input = _radioInputObj$input === undefined ? {} : _radioInputObj$input,
            _radioInputObj$radios = radioInputObj.radios,
            radios = _radioInputObj$radios === undefined ? [] : _radioInputObj$radios,
            _radioInputObj$errors = radioInputObj.errors,
            errors = _radioInputObj$errors === undefined ? {} : _radioInputObj$errors,
            _radioInputObj$settin = radioInputObj.settings,
            settings = _radioInputObj$settin === undefined ? {} : _radioInputObj$settin;


        this.radios = radios;
        this.errors = errors;
        this.settings = settings;
        this.input = input;
        this.errorMessages = errorMessages;
        this.attributeTags = _attributes.AttributeTags;
    }

    _createClass(Radio, [{
        key: "uiRadioGroup",
        value: function uiRadioGroup(radiosHTML) {
            return radiosHTML;
        }
    }, {
        key: "uiRadioButtonContainer",
        value: function uiRadioButtonContainer(radioHTML, uiClasses) {
            var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
            var id = this.input.id;


            return " \n        <label for=\"" + id + (value.length > 0 ? '-' + value : '') + "\" class=\"" + uiClasses + "\">\n        " + radioHTML + "\n        </label>";
        }
    }, {
        key: "renderRadioHTML",
        value: function renderRadioHTML(attrHTML, label) {
            return " \n            <input type=\"radio\" " + attrHTML + ">\n            " + label;
        }
    }, {
        key: "uiClasses",
        get: function get() {
            return '';
        }
    }, {
        key: "uiAttributes",
        get: function get() {
            return '';
        }
    }, {
        key: "html",
        get: function get() {
            var errors = this.errors,
                radios = this.radios,
                settings = this.settings,
                input = this.input,
                uiClasses = this.uiClasses;
            var errorMessages = errors.messages,
                _errors$tags = errors.tags,
                errorTags = _errors$tags === undefined ? "" : _errors$tags;

            var self = this;
            var inputLabel = input.label,
                inputLableHTML = input.labelHTML;
            var _settings$showLabel = settings.showLabel,
                showLabel = _settings$showLabel === undefined ? true : _settings$showLabel;


            if (inputLableHTML) inputLabel = inputLableHTML;

            var radiosHTML = radios.reduce(function (html, radio, index) {
                var label = radio.label,
                    _radio$attrHTML = radio.attrHTML,
                    attrHTML = _radio$attrHTML === undefined ? '' : _radio$attrHTML,
                    _radio$classes = radio.classes,
                    classes = _radio$classes === undefined ? '' : _radio$classes,
                    value = radio.value;


                attrHTML = attrHTML + " " + errorTags;

                var radioHTML = self.renderRadioHTML(attrHTML, label, input.radioButtons[index].value);

                return html + "\n            " + self.uiRadioButtonContainer(radioHTML, uiClasses + " " + classes, input.radioButtons[index].value);
            }, inputLabel);
            var errorHTML = new this.errorMessages(errorMessages).html;
            var allRadioButtonsHTML = "\n             " + radiosHTML + "\n             " + errorHTML;

            return this.uiRadioGroup(allRadioButtonsHTML);
        }
    }]);

    return Radio;
}();

},{"../utilities/attributes.js":412,"./messages.js":400}],404:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var InputState = exports.InputState = function () {
    function InputState(formSection, data) {
        _classCallCheck(this, InputState);

        this.formSection = formSection;
        this.data = data;
    }

    _createClass(InputState, [{
        key: 'defaultHeaderClasses',
        get: function get() {
            return '';
        }
    }, {
        key: 'defaultFooterClasses',
        get: function get() {
            return '';
        }
    }, {
        key: 'defaultSectionClasses',
        get: function get() {
            return '';
        }
    }, {
        key: 'html',
        get: function get() {
            var formSection = this.formSection,
                data = this.data,
                defaultFooterClasses = this.defaultFooterClasses,
                defaultHeaderClasses = this.defaultHeaderClasses,
                defaultSectionClasses = this.defaultSectionClasses;
            var _data$header = data.header,
                header = _data$header === undefined ? {} : _data$header,
                _data$footer = data.footer,
                footer = _data$footer === undefined ? {} : _data$footer,
                _data$section = data.section,
                section = _data$section === undefined ? {} : _data$section;
            var _header$classes = header.classes,
                headerClasses = _header$classes === undefined ? '' : _header$classes,
                _header$html = header.html,
                headerHTML = _header$html === undefined ? '<h1>' + data.name + '</h1>' : _header$html;
            var _section$classes = section.classes,
                sectionClasses = _section$classes === undefined ? '' : _section$classes;
            var _footer$classes = footer.classes,
                footerClasses = _footer$classes === undefined ? '' : _footer$classes,
                _footer$html = footer.html,
                footerHTML = _footer$html === undefined ? '' : _footer$html;


            return '\n            <section class="' + sectionClasses + ' ' + defaultSectionClasses + '" id="' + data.id + '">\n                 <header class="' + headerClasses + ' ' + defaultHeaderClasses + '">' + headerHTML + '</header>\n                ' + formSection + '\n                <footer class="' + footerClasses + ' ' + defaultFooterClasses + '">' + footerHTML + '</footer>\n            </section>';
        }
    }]);

    return InputState;
}();

},{}],405:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.NavigationState = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _attributes = require('../utilities/attributes.js');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var NavigationState = exports.NavigationState = function () {
    function NavigationState(data, linkSection) {
        _classCallCheck(this, NavigationState);

        this.data = data;
        this.linkSection = linkSection;
    }

    _createClass(NavigationState, [{
        key: 'defaultHeaderClasses',
        get: function get() {
            return '';
        }
    }, {
        key: 'defaultFooterClasses',
        get: function get() {
            return '';
        }
    }, {
        key: 'defaultSectionClasses',
        get: function get() {
            return '';
        }
    }, {
        key: 'defaultLinkContainerClasses',
        get: function get() {
            return '';
        }
    }, {
        key: 'html',
        get: function get() {
            var data = this.data,
                linkSection = this.linkSection,
                defaultFooterClasses = this.defaultFooterClasses,
                defaultHeaderClasses = this.defaultHeaderClasses,
                defaultSectionClasses = this.defaultSectionClasses,
                defaultLinkContainerClasses = this.defaultLinkContainerClasses;
            var _data$header = data.header,
                header = _data$header === undefined ? {} : _data$header,
                _data$footer = data.footer,
                footer = _data$footer === undefined ? {} : _data$footer,
                _data$section = data.section,
                section = _data$section === undefined ? {} : _data$section,
                _data$linkContainer = data.linkContainer,
                linkContainer = _data$linkContainer === undefined ? {} : _data$linkContainer;
            var _header$classes = header.classes,
                headerClasses = _header$classes === undefined ? '' : _header$classes,
                _header$html = header.html,
                headerHTML = _header$html === undefined ? '' : _header$html;
            var _section$classes = section.classes,
                sectionClasses = _section$classes === undefined ? '' : _section$classes;
            var _footer$classes = footer.classes,
                footerClasses = _footer$classes === undefined ? '' : _footer$classes,
                _footer$html = footer.html,
                footerHTML = _footer$html === undefined ? '' : _footer$html;
            var _linkContainer$classe = linkContainer.classes,
                linkContainerClasses = _linkContainer$classe === undefined ? '' : _linkContainer$classe,
                _linkContainer$attrib = linkContainer.attributes,
                linkContainerAttributes = _linkContainer$attrib === undefined ? {} : _linkContainer$attrib;

            var linkContainerAttributeHTML = new _attributes.AttributeTags(linkContainerAttributes, Object.keys(linkContainerAttributes)).html;

            return '\n            <section class="' + sectionClasses + ' ' + defaultSectionClasses + '" id="' + data.id + '">\n                 <header class="' + headerClasses + ' ' + defaultHeaderClasses + '">' + headerHTML + '</header>\n                 <div class=\'' + defaultLinkContainerClasses + ' ' + linkContainerClasses + '\' ' + linkContainerAttributeHTML + '>\n                    ' + linkSection + '\n                </div>\n                <footer class="' + footerClasses + ' ' + defaultFooterClasses + '">' + footerHTML + '</footer>\n            </section>';
        }
    }]);

    return NavigationState;
}();

},{"../utilities/attributes.js":412}],406:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var VideoState = exports.VideoState = function () {
    function VideoState(playerSection, data) {
        _classCallCheck(this, VideoState);

        this.playerSection = playerSection;
        this.data = data;
    }

    _createClass(VideoState, [{
        key: 'iPhoneInlineClasses',
        get: function get() {
            var _data$isIphone = this.data.isIphone,
                isIphone = _data$isIphone === undefined ? false : _data$isIphone;


            return isIphone ? 'iphone-inline' : '';
        }
    }, {
        key: 'html',
        get: function get() {
            var _playerSection = this.playerSection,
                playerSection = _playerSection === undefined ? '' : _playerSection,
                _data = this.data,
                data = _data === undefined ? { name: '' } : _data;
            var _data$header = data.header,
                headerSettings = _data$header === undefined ? {} : _data$header,
                _data$footer = data.footer,
                footerSettings = _data$footer === undefined ? {} : _data$footer,
                _data$section = data.section,
                sectionSettings = _data$section === undefined ? {} : _data$section;
            var _headerSettings$class = headerSettings.classes,
                headerClasses = _headerSettings$class === undefined ? '' : _headerSettings$class,
                _headerSettings$html = headerSettings.html,
                headerHTML = _headerSettings$html === undefined ? '<h1>' + data.name + '</h1>' : _headerSettings$html;
            var _sectionSettings$clas = sectionSettings.classes,
                sectionClasses = _sectionSettings$clas === undefined ? '' : _sectionSettings$clas;
            var _footerSettings$class = footerSettings.classes,
                footerClasses = _footerSettings$class === undefined ? '' : _footerSettings$class,
                _footerSettings$html = footerSettings.html,
                footerHTML = _footerSettings$html === undefined ? '' : _footerSettings$html;


            return '\n            <section class="' + sectionClasses + '" id="' + data.id + '">\n                <header class="' + headerClasses + '">' + headerHTML + '</header>\n                ' + playerSection + '\n                <footer class="' + footerClasses + '">' + footerHTML + '</footer>\n            </section>';
        }
    }]);

    return VideoState;
}();

},{}],407:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Style = exports.Style = function () {
    function Style() {
        _classCallCheck(this, Style);
    }

    _createClass(Style, [{
        key: 'getWidth',
        value: function getWidth(width) {
            if (width === '1') return 'ivxjs-grid-1-1';

            var gridString = width.replace('/', '-');

            return 'ivxjs-grid-' + gridString;
        }
    }, {
        key: 'addWidthClasses',
        value: function addWidthClasses(inputsHTML) {
            var self = this;
            var _containerClasses = this.containerClasses,
                containerClasses = _containerClasses === undefined ? '' : _containerClasses;

            var contents = inputsHTML.reduce(function (currentHTML, inputHTML) {
                var html = inputHTML.html,
                    _inputHTML$settings = inputHTML.settings,
                    settings = _inputHTML$settings === undefined ? {} : _inputHTML$settings;
                var _settings$width = settings.width,
                    width = _settings$width === undefined ? '1' : _settings$width,
                    _settings$container = settings.container,
                    container = _settings$container === undefined ? {} : _settings$container;
                var _container$classes = container.classes,
                    classes = _container$classes === undefined ? '' : _container$classes;


                classes = classes + ' ' + containerClasses;

                var thisWidth = self.getWidth(width);

                html = html.replace("ivxjs-grid-1-1", thisWidth + ' ' + classes);

                return currentHTML + ' ' + html;
            }, '');

            return contents;
        }
    }, {
        key: 'containerClasses',
        get: function get() {
            return 'input-container';
        }
    }]);

    return Style;
}();

},{}],408:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Text = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _style = require("./style");

var _messages = require("./messages.js");

var _attributes = require("../utilities/attributes.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var style = new _style.Style();

var Text = exports.Text = function () {
    function Text() {
        var inputObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var errorMessages = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _messages.ErrorMessages;

        _classCallCheck(this, Text);

        var _inputObj$input = inputObj.input,
            input = _inputObj$input === undefined ? {} : _inputObj$input,
            _inputObj$settings = inputObj.settings,
            settings = _inputObj$settings === undefined ? {} : _inputObj$settings,
            _inputObj$tags = inputObj.tags,
            tags = _inputObj$tags === undefined ? {} : _inputObj$tags,
            _inputObj$errors = inputObj.errors,
            errors = _inputObj$errors === undefined ? {} : _inputObj$errors;


        this.input = input;
        this.settings = settings;
        this.tags = tags;
        this.errors = errors;
        this.errorMessages = errorMessages;
        this.attributeTags = _attributes.AttributeTags;
    }

    _createClass(Text, [{
        key: "uiClasses",
        get: function get() {
            return '';
        }
    }, {
        key: "uiAttributes",
        get: function get() {
            return '';
        }
    }, {
        key: "html",
        get: function get() {
            var input = this.input,
                settings = this.settings,
                tags = this.tags,
                errors = this.errors,
                uiClasses = this.uiClasses,
                uiAttributes = this.uiAttributes;
            var _input$label = input.label,
                label = _input$label === undefined ? '' : _input$label,
                labelHTML = input.labelHTML,
                _input$name = input.name,
                name = _input$name === undefined ? '' : _input$name,
                _input$id = input.id,
                id = _input$id === undefined ? '' : _input$id;
            var _settings$input = settings.input,
                inputSettings = _settings$input === undefined ? {} : _settings$input,
                _settings$showLabel = settings.showLabel,
                showLabel = _settings$showLabel === undefined ? true : _settings$showLabel;
            var _inputSettings$classe = inputSettings.classes,
                classes = _inputSettings$classe === undefined ? '' : _inputSettings$classe;


            classes = classes + " " + uiClasses;

            var _errors$messages = errors.messages,
                errorMessages = _errors$messages === undefined ? [] : _errors$messages,
                _errors$attributes = errors.attributes,
                errorAttributes = _errors$attributes === undefined ? '' : _errors$attributes,
                _errors$nonValidate = errors.nonValidate,
                nonValidate = _errors$nonValidate === undefined ? [] : _errors$nonValidate,
                _errors$tags = errors.tags,
                errorTags = _errors$tags === undefined ? '' : _errors$tags;

            var errorHTML = new this.errorMessages(errorMessages).html;
            var nonValidateAttributesHTML = new this.attributeTags(errorAttributes, nonValidate).html;

            nonValidateAttributesHTML = nonValidateAttributesHTML + " " + uiAttributes;

            if (labelHTML) label = labelHTML;

            var inputHTML = " \n            <label for=\"" + id + "\"> " + label + " </label>\n            <input class=\"" + classes + "\"  id=\"" + id + "\" name=\"" + name + "\"  type=\"text\" " + nonValidateAttributesHTML + "   " + errorTags + " " + tags + ">\n            " + errorHTML + "\n       ";

            return "" + inputHTML;
        }
    }]);

    return Text;
}();

},{"../utilities/attributes.js":412,"./messages.js":400,"./style":407}],409:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Textarea = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _style = require("./style");

var _messages = require("./messages.js");

var _attributes = require("../utilities/attributes.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var style = new _style.Style();

var Textarea = exports.Textarea = function () {
    function Textarea() {
        var inputObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var errorMessages = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _messages.ErrorMessages;

        _classCallCheck(this, Textarea);

        var _inputObj$input = inputObj.input,
            input = _inputObj$input === undefined ? {} : _inputObj$input,
            _inputObj$settings = inputObj.settings,
            settings = _inputObj$settings === undefined ? {} : _inputObj$settings,
            _inputObj$tags = inputObj.tags,
            tags = _inputObj$tags === undefined ? {} : _inputObj$tags,
            _inputObj$errors = inputObj.errors,
            errors = _inputObj$errors === undefined ? {} : _inputObj$errors;


        this.input = input;
        this.settings = settings;
        this.tags = tags;
        this.errors = errors;
        this.errorMessages = errorMessages;
        this.attributeTags = _attributes.AttributeTags;
    }

    _createClass(Textarea, [{
        key: "uiClasses",
        get: function get() {
            return '';
        }
    }, {
        key: "uiAttributes",
        get: function get() {
            return '';
        }
    }, {
        key: "html",
        get: function get() {
            var input = this.input,
                settings = this.settings,
                tags = this.tags,
                errors = this.errors,
                uiClasses = this.uiClasses,
                uiAttributes = this.uiAttributes;
            var _input$label = input.label,
                label = _input$label === undefined ? '' : _input$label,
                labelHTML = input.labelHTML,
                _input$name = input.name,
                name = _input$name === undefined ? '' : _input$name,
                _input$id = input.id,
                id = _input$id === undefined ? '' : _input$id;
            var _settings$input = settings.input,
                inputSettings = _settings$input === undefined ? {} : _settings$input,
                _settings$showLabel = settings.showLabel,
                showLabel = _settings$showLabel === undefined ? true : _settings$showLabel;
            var _inputSettings$classe = inputSettings.classes,
                classes = _inputSettings$classe === undefined ? '' : _inputSettings$classe;
            var _errors$messages = errors.messages,
                errorMessages = _errors$messages === undefined ? [] : _errors$messages,
                _errors$attributes = errors.attributes,
                errorAttributes = _errors$attributes === undefined ? '' : _errors$attributes,
                _errors$nonValidate = errors.nonValidate,
                nonValidate = _errors$nonValidate === undefined ? [] : _errors$nonValidate,
                _errors$tags = errors.tags,
                errorTags = _errors$tags === undefined ? '' : _errors$tags;

            var errorHTML = new this.errorMessages(errorMessages).html;
            var nonValidateAttributesHTML = new this.attributeTags(errorAttributes, nonValidate).html;

            if (labelHTML) label = labelHTML;

            label = showLabel ? label : '';

            var inputHTML = " \n            <label for=\"" + id + "\"> " + label + " </label>\n            <textarea class=\"" + classes + " " + uiClasses + "\"  id=\"" + id + "\" name=\"" + name + "\" " + uiAttributes + "   " + nonValidateAttributesHTML + "   " + errorTags + " " + tags + ">\n            </textarea>\n            " + errorHTML + "\n       ";

            return "" + inputHTML;
        }
    }]);

    return Textarea;
}();

},{"../utilities/attributes.js":412,"./messages.js":400,"./style":407}],410:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Url = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _style = require("./style");

var _messages = require("./messages.js");

var _attributes = require("../utilities/attributes.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var style = new _style.Style();

var Url = exports.Url = function () {
    function Url() {
        var inputObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var errorMessages = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _messages.ErrorMessages;

        _classCallCheck(this, Url);

        var _inputObj$input = inputObj.input,
            input = _inputObj$input === undefined ? {} : _inputObj$input,
            _inputObj$settings = inputObj.settings,
            settings = _inputObj$settings === undefined ? {} : _inputObj$settings,
            _inputObj$tags = inputObj.tags,
            tags = _inputObj$tags === undefined ? {} : _inputObj$tags,
            _inputObj$errors = inputObj.errors,
            errors = _inputObj$errors === undefined ? {} : _inputObj$errors;


        this.input = input;
        this.settings = settings;
        this.tags = tags;
        this.errors = errors;
        this.errorMessages = errorMessages;
        this.attributeTags = _attributes.AttributeTags;
    }

    _createClass(Url, [{
        key: "uiClasses",
        get: function get() {
            return '';
        }
    }, {
        key: "uiAttributes",
        get: function get() {
            return '';
        }
    }, {
        key: "html",
        get: function get() {
            var input = this.input,
                settings = this.settings,
                tags = this.tags,
                errors = this.errors,
                uiClasses = this.uiClasses,
                uiAttributes = this.uiAttributes;
            var _input$label = input.label,
                label = _input$label === undefined ? '' : _input$label,
                labelHTML = input.labelHTML,
                _input$name = input.name,
                name = _input$name === undefined ? '' : _input$name,
                _input$id = input.id,
                id = _input$id === undefined ? '' : _input$id;
            var _settings$input = settings.input,
                inputSettings = _settings$input === undefined ? {} : _settings$input,
                _settings$showLabel = settings.showLabel,
                showLabel = _settings$showLabel === undefined ? true : _settings$showLabel;
            var _inputSettings$classe = inputSettings.classes,
                classes = _inputSettings$classe === undefined ? '' : _inputSettings$classe;
            var _errors$messages = errors.messages,
                errorMessages = _errors$messages === undefined ? [] : _errors$messages,
                _errors$attributes = errors.attributes,
                errorAttributes = _errors$attributes === undefined ? '' : _errors$attributes,
                _errors$nonValidate = errors.nonValidate,
                nonValidate = _errors$nonValidate === undefined ? [] : _errors$nonValidate,
                _errors$tags = errors.tags,
                errorTags = _errors$tags === undefined ? '' : _errors$tags;

            var errorHTML = new this.errorMessages(errorMessages).html;
            var nonValidateAttributesHTML = new this.attributeTags(errorAttributes, nonValidate).html;

            if (labelHTML) label = labelHTML;

            var inputHTML = " \n            <label for=\"" + id + "\"> " + label + " </label>\n            <input class=\"" + classes + " " + uiClasses + "\" " + uiAttributes + "  id=\"" + id + "\" name=\"" + name + "\"  type=\"url\" " + nonValidateAttributesHTML + "   " + errorTags + " " + tags + ">\n            " + errorHTML + "\n       ";

            return "" + inputHTML;
        }
    }]);

    return Url;
}();

},{"../utilities/attributes.js":412,"./messages.js":400,"./style":407}],411:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _index = require('../../video/controls/index.js');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _class = function (_Controls) {
    _inherits(_class, _Controls);

    function _class(container) {
        _classCallCheck(this, _class);

        var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));

        if (container.html instanceof Function) {
            container.html(_this.html);
        } else {
            var div = document.createElement('div');
            div.innerHTML = _this.html;

            container.appendChild(div);
        }

        var playPauseControlsClasses = _this.playPauseControlsClasses,
            totalTimeInfoClasses = _this.totalTimeInfoClasses,
            currentTimeInfoClasses = _this.currentTimeInfoClasses,
            scrubBarClasses = _this.scrubBarClasses,
            muteControlsClasses = _this.muteControlsClasses,
            volumeBarClasses = _this.volumeBarClasses;


        _this.container = container;
        _this.playPauseControls = document.getElementById("video-controls-play-pause");
        _this.totalTimeInfo = document.getElementById("video-controls-total-time");
        _this.currentTimeInfo = document.getElementById("video-controls-current-time");
        _this.scrubBar = document.getElementById("video-controls-scrub-bar");
        _this.muteControls = document.getElementById("video-controls-mute-controls");
        _this.volumeBar = document.getElementById("video-controls-volume-bar");

        return _this;
    }

    _createClass(_class, [{
        key: 'playPauseControlsClasses',
        get: function get() {
            return 'play-pause';
        }
    }, {
        key: 'totalTimeInfoClasses',
        get: function get() {
            return 'duration';
        }
    }, {
        key: 'currentTimeInfoClasses',
        get: function get() {
            return 'current-time';
        }
    }, {
        key: 'scrubBarClasses',
        get: function get() {
            return 'scrub-bar';
        }
    }, {
        key: 'muteControlsClasses',
        get: function get() {
            return 'mute';
        }
    }, {
        key: 'volumeBarClasses',
        get: function get() {
            return 'volume-bar';
        }
    }, {
        key: 'playClasses',
        get: function get() {
            return 'fa fa-play';
        }
    }, {
        key: 'pauseClasses',
        get: function get() {
            return 'fa fa-pause';
        }
    }, {
        key: 'unmuteClasses',
        get: function get() {
            return 'fa fa-volume-up';
        }
    }, {
        key: 'muteClasses',
        get: function get() {
            return 'fa fa-volume-off';
        }
    }, {
        key: 'scrubBarTimeLapseClasses',
        get: function get() {
            return 'time-lapsed';
        }
    }, {
        key: 'volumeBarCurrentVolumeClasses',
        get: function get() {
            return 'current-volume';
        }
    }, {
        key: 'playPauseButtonHTML',
        get: function get() {
            var play = this.playClasses;
            var playPauseControls = this.playPauseControlsClasses;

            return '\n        <button id="video-controls-play-pause" class="' + playPauseControls + '">\n            <i class=\'' + play + '\'></i>\n        </button>';
        }
    }, {
        key: 'scrubBarHTML',
        get: function get() {
            return '\n             <div id="video-controls-scrub-bar" class="' + this.scrubBarClasses + '">\n                <div class="' + this.scrubBarTimeLapseClasses + '"></div>\n            </div>\n        ';
        }
    }, {
        key: 'timestampHTML',
        get: function get() {
            return '\n        <span id="video-controls-current-time" class="' + this.currentTimeInfoClasses + '"></span>\n        <span id="video-controls-total-time" class="' + this.totalTimeInfoClasses + '"></span>\n        ';
        }
    }, {
        key: 'muteButtonHTML',
        get: function get() {
            var unmute = this.unmuteClasses,
                muteControlsClasses = this.muteControlsClasses;

            return '\n            <button id="video-controls-mute-controls" class="' + muteControlsClasses + '">\n                <i class="' + unmute + '"></i>\n            </button>\n        ';
        }
    }, {
        key: 'volumeBarHTML',
        get: function get() {
            return '\n            <div  id="video-controls-volume-bar" class="' + this.volumeBarClasses + '">\n                <div class="' + this.volumeBarCurrentVolumeClasses + '"></div>\n            </div> \n        ';
        }
    }, {
        key: 'html',
        get: function get() {
            var playPauseButtonHTML = this.playPauseButtonHTML,
                scrubBarHTML = this.scrubBarHTML,
                timestampHTML = this.timestampHTML,
                muteButtonHTML = this.muteButtonHTML,
                volumeBarHTML = this.volumeBarHTML;

            return '\n           ' + playPauseButtonHTML + '\n           ' + scrubBarHTML + '\n           ' + timestampHTML + '\n           ' + muteButtonHTML + '\n           ' + volumeBarHTML + '                        \n        ';
        }
    }]);

    return _class;
}(_index.Controls);

exports.default = _class;

},{"../../video/controls/index.js":420}],412:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Converts an object with attributes and keys into HTML
 * that inputs can be used.
 */
var AttributeTags = exports.AttributeTags = function () {

  /**
   * Pulls all the attribute settings and the attributes 
   * to be rendered.
   * @param {Object} attributeData - settings for all the attributes.
   * @param {Array} attributeKeys - attribute names to be set.
   */
  function AttributeTags() {
    var attributeData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var attributeKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

    _classCallCheck(this, AttributeTags);

    /**
     * All attributes to be made.
     * @type {Object}
     */
    this.attributeData = attributeData;

    /**
     * Attribute names to be set.
     * @type {Array}
     */
    this.attributeKeys = attributeKeys;
  }

  /**
   * Renders attributes based on the keys and attribute data.
   * @example
   * attributeData = { required = "true"};
   * attributeKeys = ["required"];
   * 
   * // Becomes: 
   * html = 'required = "true"'
   * 
   * @type {String}
   */


  _createClass(AttributeTags, [{
    key: 'html',
    get: function get() {
      var attributeKeys = this.attributeKeys,
          attributeData = this.attributeData;

      var attributeHTML = attributeKeys.reduce(function (currentAttributeHTML, currentKey) {

        if (attributeData[currentKey]) {
          var attributeTagHTML = attributeData[currentKey] === 'tag-only' ? currentKey : currentKey + '="' + attributeData[currentKey] + '"';

          return currentAttributeHTML + ' ' + attributeTagHTML + ' ';
        }
        return currentAttributeHTML;
      }, '');
      return attributeHTML;
    }
  }]);

  return AttributeTags;
}();

;

},{}],413:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ConfigValidation = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _validation = require('./validation.js');

var _configStates = require('./config.states.js');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ConfigValidation = exports.ConfigValidation = function (_Validation) {
    _inherits(ConfigValidation, _Validation);

    function ConfigValidation() {
        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _classCallCheck(this, ConfigValidation);

        var _this = _possibleConstructorReturn(this, (ConfigValidation.__proto__ || Object.getPrototypeOf(ConfigValidation)).call(this));

        _this.config = config;
        return _this;
    }

    _createClass(ConfigValidation, [{
        key: 'validationArray',
        get: function get() {
            return [this.hasStatesObj, this.hasDefaultStateObj, this.validDefaultStateObj, this.validStateConfig];
        }
    }, {
        key: 'validStateConfig',
        get: function get() {
            var _ref = new _configStates.ConfigStatesValidation(this.config.states),
                valid = _ref.valid,
                errors = _ref.errors;

            if (!valid) {
                this.addErrors(errors);
            }

            return {
                valid: valid,
                error: {
                    type: 'invalid',
                    path: 'config.states',
                    message: "Experience requires that all states are valid"
                }
            };
        }
    }, {
        key: 'validDefaultStateObj',
        get: function get() {
            var valid = this.hasDefaultStateObj.valid;


            if (!valid) return;

            var defaultState = this.config.defaultState;

            var finalIndex = defaultState.length - 1;
            var lastState = defaultState[finalIndex];

            return {
                valid: lastState.stateId && lastState.stateId.length >= 0,
                error: {
                    "type": "missing",
                    "path": 'config.defaultState[' + finalIndex + '].stateId'
                }
            };
        }
    }, {
        key: 'hasDefaultStateObj',
        get: function get() {
            var _config$defaultState = this.config.defaultState,
                defaultState = _config$defaultState === undefined ? [] : _config$defaultState;

            var defaultStateExists = typeof defaultState !== 'undefined' && defaultState.length >= 1;

            return {
                valid: defaultStateExists,
                error: {
                    "type": "missing",
                    "path": "config.defaultState"
                },
                data: defaultState
            };
        }
    }, {
        key: 'hasStatesObj',
        get: function get() {
            var states = this.config.states;


            return {
                valid: typeof states !== 'undefined' && states.length >= 1,
                error: {
                    "type": "missing",
                    "path": "config.states"
                },
                data: states
            };
        }
    }]);

    return ConfigValidation;
}(_validation.Validation);

;

},{"./config.states.js":414,"./validation.js":418}],414:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ConfigStatesValidation = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeParsers = require('../../../utilities/type-parsers.js');

var _validation = require('./validation.js');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var objectParsers = new _typeParsers.ObjectParsers();
var typeValidator = new _typeParsers.TypeValidator();

var ConfigStatesValidation = exports.ConfigStatesValidation = function (_Validation) {
    _inherits(ConfigStatesValidation, _Validation);

    function ConfigStatesValidation() {
        var states = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

        _classCallCheck(this, ConfigStatesValidation);

        var _this = _possibleConstructorReturn(this, (ConfigStatesValidation.__proto__ || Object.getPrototypeOf(ConfigStatesValidation)).call(this));

        _this.states = states;
        return _this;
    }

    _createClass(ConfigStatesValidation, [{
        key: 'convertToConfigErrorObjs',
        value: function convertToConfigErrorObjs(errors, errorType) {
            return errors.map(function (error) {
                var key = error.key,
                    value = error.value,
                    index = error.index;

                var errorObject = {
                    type: errorType,
                    path: 'config.states[' + index + '].' + key
                };

                if (errorType === 'duplicate') errorObject.message = 'Duplicate value: ' + value;

                return {
                    valid: false,
                    error: errorObject
                };
            });
        }
    }, {
        key: 'validationArray',
        get: function get() {
            return [this.uniqueValidStateData, this.filledValidStateData];
        }
    }, {
        key: 'filledValidStateData',
        get: function get() {
            var _objectParsers$anyEmp = objectParsers.anyEmpty(this.states, ['id', 'url', 'type']),
                _objectParsers$anyEmp2 = _objectParsers$anyEmp.errors,
                errors = _objectParsers$anyEmp2 === undefined ? [] : _objectParsers$anyEmp2,
                isEmpty = _objectParsers$anyEmp.isEmpty;

            if (isEmpty) {

                this.addErrors(this.convertToConfigErrorObjs(errors, 'missing'));
            }

            return {
                valid: !isEmpty,
                error: {
                    path: 'config.states',
                    message: 'Not all state\'s have an id, url, and/or type',
                    type: 'invalid'

                },
                data: this.states

            };
        }
    }, {
        key: 'uniqueValidStateData',
        get: function get() {
            var _objectParsers$isUniq = objectParsers.isUnique(this.states, ['id', 'url']),
                _objectParsers$isUniq2 = _objectParsers$isUniq.errors,
                errors = _objectParsers$isUniq2 === undefined ? [] : _objectParsers$isUniq2,
                valid = _objectParsers$isUniq.isUnique;

            if (!valid) {

                this.addErrors(this.convertToConfigErrorObjs(errors, 'duplicate'));
            }

            return {
                valid: valid,
                error: {
                    path: 'config.states',
                    message: 'Not all state\'s ids and urls are unique',
                    type: 'invalid'

                },
                data: this.states

            };
        }
    }]);

    return ConfigStatesValidation;
}(_validation.Validation);

;

},{"../../../utilities/type-parsers.js":428,"./validation.js":418}],415:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ExperienceValidation = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _validation = require('./validation.js');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ExperienceValidation = exports.ExperienceValidation = function (_Validation) {
    _inherits(ExperienceValidation, _Validation);

    function ExperienceValidation() {
        var experience = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _classCallCheck(this, ExperienceValidation);

        var _this = _possibleConstructorReturn(this, (ExperienceValidation.__proto__ || Object.getPrototypeOf(ExperienceValidation)).call(this));

        _this.experience = experience;
        return _this;
    }

    _createClass(ExperienceValidation, [{
        key: 'validationArray',
        get: function get() {
            return [this.validAnimateElementObj, this.validSetDataObj];
        }
    }, {
        key: 'validAnimateElementObj',
        get: function get() {
            var animateElement = this.experience.animateElement;

            return {
                valid: typeof animateElement !== 'undefined',
                error: {
                    path: 'experience.animateElement',
                    type: "missing"
                },
                data: animateElement
            };
        }
    }, {
        key: 'validSetDataObj',
        get: function get() {
            var setData = this.experience.setData;

            return {
                valid: typeof setData !== 'undefined',
                error: {
                    path: 'experience.setData',
                    type: "missing"
                },
                data: setData
            };
        }
    }]);

    return ExperienceValidation;
}(_validation.Validation);

;

},{"./validation.js":418}],416:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.iVXjsValidation = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeParsers = require('../../../utilities/type-parsers.js');

var _validation = require('./validation.js');

var _experience = require('./experience.js');

var _modules = require('./modules.js');

var _config = require('./config.js');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var objectParsers = new _typeParsers.ObjectParsers();
var typeValidator = new _typeParsers.TypeValidator();

var iVXjsValidation = exports.iVXjsValidation = function (_Validation) {
  _inherits(iVXjsValidation, _Validation);

  function iVXjsValidation(data) {
    _classCallCheck(this, iVXjsValidation);

    var _this = _possibleConstructorReturn(this, (iVXjsValidation.__proto__ || Object.getPrototypeOf(iVXjsValidation)).call(this));

    _this.data = data;

    if (!_this.valid) {
      _this.error = {
        message: _this.collectErrorMessages(),
        data: _this.data,
        errors: _this.errors
      };
    }
    return _this;
  }

  _createClass(iVXjsValidation, [{
    key: 'collectErrorMessages',
    value: function collectErrorMessages() {
      return this.errors.reverse().reduce(function (errorMessages, errorObj) {
        var error = errorObj.error;

        return errorMessages + '\nTYPE: ' + (error.type ? error.type : 'ERROR') + '  PATH: ' + error.path + ' ' + (error.message && error.message.length > 0 ? 'MESSAGE: ' + error.message + '' : '');
      }, '');
    }
  }, {
    key: 'validationArray',
    get: function get() {
      var currentValidationArray = [this.ruleValidationObj, this.experienceValidationObj, this.configValidationObj];
      return currentValidationArray;
    }
  }, {
    key: 'configValidationObj',
    get: function get() {
      var config = this.data.config;

      var _ref = new _config.ConfigValidation(config),
          valid = _ref.valid,
          errors = _ref.errors;

      if (!valid) {
        this.addErrors(errors);
      }

      return {
        valid: valid,
        error: {
          "path": "config",
          "message": "An experience must have a valid config",
          "type": "invalid"
        }
      };
    }
  }, {
    key: 'experienceValidationObj',
    get: function get() {
      var experience = this.data.experience;

      var _ref2 = new _experience.ExperienceValidation(experience),
          valid = _ref2.valid,
          errors = _ref2.errors;

      var self = this;

      if (!valid) {
        this.addErrors(errors);
      }

      return {
        valid: valid,
        error: {
          path: 'experience',
          message: 'An experience must not have any errors',
          type: 'invalid'

        },
        data: experience

      };
    }
  }, {
    key: 'ruleValidationObj',
    get: function get() {
      var rules = this.data.rules;


      return {
        valid: typeof rules !== 'undefined',
        error: {
          name: 'Missing Rules:',
          message: 'The function rules needs to be defined in the experience.'
        },
        data: rules
      };
    }
  }]);

  return iVXjsValidation;
}(_validation.Validation);

;

},{"../../../utilities/type-parsers.js":428,"./config.js":413,"./experience.js":415,"./modules.js":417,"./validation.js":418}],417:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ModuleValidation = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _validation = require('./validation.js');

var _typeParsers = require('../../../utilities/type-parsers.js');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var debug = true;

var ModuleValidation = exports.ModuleValidation = function (_Validation) {
    _inherits(ModuleValidation, _Validation);

    function ModuleValidation(experience) {
        _classCallCheck(this, ModuleValidation);

        var _this = _possibleConstructorReturn(this, (ModuleValidation.__proto__ || Object.getPrototypeOf(ModuleValidation)).call(this));

        _this.experience = experience;
        _this.typeValidator = new _typeParsers.TypeValidator();

        return _this;
    }

    _createClass(ModuleValidation, [{
        key: 'validationArray',
        get: function get() {
            var moduleValidationArray = [this.validUIModuleObj];

            return moduleValidationArray;
        }
    }, {
        key: 'validUIModuleObj',
        get: function get() {
            var ui = this.experience.ui;


            return {
                valid: typeof ui !== 'undefined' && this.typeValidator.isString(ui) && ui.length > 0,
                error: {
                    "path": "ui",
                    "type": "missing"
                },
                data: ui
            };
        }
    }]);

    return ModuleValidation;
}(_validation.Validation);

;

},{"../../../utilities/type-parsers.js":428,"./validation.js":418}],418:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Validation = exports.Validation = function () {
    function Validation() {
        _classCallCheck(this, Validation);

        this.errors = [];
    }

    _createClass(Validation, [{
        key: 'addErrors',
        value: function addErrors(newErrors) {
            var self = this;
            newErrors.forEach(function (errorObj) {
                self.errors.push(errorObj);
            });
        }
    }, {
        key: 'validationArray',
        get: function get() {
            return [];
        }
    }, {
        key: 'valid',
        get: function get() {
            var self = this;
            return this.validationArray.reduce(function (isValid, isPartValid) {
                if (!isPartValid) return isValid;
                if (typeof isPartValid.valid === 'boolean' && !isPartValid.valid) {
                    self.errors.push(isPartValid);
                }
                return isValid && isPartValid.valid;
            }, true);
        }
    }]);

    return Validation;
}();

;

},{}],419:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _settings = require('../settings.js');

var _settings2 = _interopRequireDefault(_settings);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _class = function () {
    function _class() {
        _classCallCheck(this, _class);
    }

    _createClass(_class, [{
        key: 'contructor',
        value: function contructor() {
            this.volume = 0;
            this.currenttime = 0;
        }
    }, {
        key: 'play',
        value: function play() {
            this.iVXjsBus.emit(this.controlEventNames.PLAY);
        }
    }, {
        key: 'pause',
        value: function pause() {
            this.iVXjsBus.emit(this.controlEventNames.PAUSE);
        }
    }, {
        key: 'getDuration',
        value: function getDuration(cb) {
            this.iVXjsBus.once(this.controlEventNames.SET_DURATION, function (duration) {
                cb(duration);
            });
            this.iVXjsBus.emit(this.controlEventNames.GET_DURATION);
        }
    }, {
        key: 'setVolume',
        value: function setVolume(volume) {
            this.iVXjsBus.emit(this.controlEventNames.SET_VOLUME, volume);
        }
    }, {
        key: 'seek',
        value: function seek(seconds) {
            this.iVXjsBus.emit(this.controlEventNames.SEEK, { seconds: seconds });
        }
    }]);

    return _class;
}();

exports.default = _class;

},{"../settings.js":422}],420:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Controls = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _events = require('./events.js');

var _events2 = _interopRequireDefault(_events);

var _videoEvents = require('../../../constants/video.events.js');

var _videoEvents2 = _interopRequireDefault(_videoEvents);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Controls = exports.Controls = function (_ControlEvents) {
    _inherits(Controls, _ControlEvents);

    function Controls() {
        _classCallCheck(this, Controls);

        var _this = _possibleConstructorReturn(this, (Controls.__proto__ || Object.getPrototypeOf(Controls)).call(this));

        _this.currentVolume = 0.5;
        _this.controlEventNames = new _videoEvents2.default();
        return _this;
    }

    _createClass(Controls, [{
        key: 'dispose',
        value: function dispose(iVXjsBus) {
            iVXjsBus.removeListener(this.controlEventNames.TIME_UPDATE, this.updateTime);
            iVXjsBus.removeListener(this.controlEventNames.PLAYING, this.whilePlaying);
            iVXjsBus.removeListener(this.controlEventNames.CAN_PLAY, this.canPlayCallback);
        }
    }, {
        key: 'getAbsolutePosition',
        value: function getAbsolutePosition(element) {
            var relativePosition = { x: element.offsetLeft, y: element.offsetTop };

            if (element.offsetParent) {
                var tempPosition = this.getAbsolutePosition(element.offsetParent);

                relativePosition.x += tempPosition.x;
                relativePosition.y += tempPosition.y;
            }

            return relativePosition;
        }
    }, {
        key: 'adjustVolume',
        value: function adjustVolume(event) {
            var volumeBar = this.volumeBar,
                muteControls = this.muteControls,
                currentVolume = this.currentVolume,
                volumeBarCurrentVolumeClasses = this.volumeBarCurrentVolumeClasses,
                unmuteClasses = this.unmuteClasses,
                muteClasses = this.muteClasses;
            var width = volumeBar.offsetWidth;

            var currentVolumeSpan = this.getElementByClasses(volumeBar.children, [volumeBarCurrentVolumeClasses]);
            var absolutePosition = this.getAbsolutePosition(volumeBar);
            var absoluteX = absolutePosition.x;
            var x = event.pageX;

            var trueX = x - absoluteX;
            var volumeLevel = trueX / width;
            var muteControlsClasses = [muteClasses, unmuteClasses];
            var muteIcon = this.getElementByClasses(muteControls.children, muteControlsClasses);

            muteIcon.className = unmuteClasses;
            currentVolumeSpan.style.width = volumeLevel * 100 + '%';

            this.currentVolume = volumeLevel;
            this.setVolume(volumeLevel);
        }
    }, {
        key: 'scrub',
        value: function scrub(event) {
            var currentTimeInfo = this.currentTimeInfo,
                scrubBar = this.scrubBar,
                scrubBarTimeLapseClasses = this.scrubBarTimeLapseClasses;
            var width = scrubBar.offsetWidth;

            var absolutePosition = this.getAbsolutePosition(scrubBar);
            var absoluteX = absolutePosition.x;
            var x = event.pageX;

            var trueX = x - absoluteX;
            var scrubToTime = this.duration * (trueX / width);
            var currentTimeObject = this.convertSecondsToParts(scrubToTime);
            var currentTimeStamp = this.createTimeStamp(currentTimeObject);
            var searchClasses = [scrubBarTimeLapseClasses];
            var timelapsed = this.getElementByClasses(scrubBar.children, searchClasses);

            currentTimeInfo.innerHTML = '' + currentTimeStamp;
            timelapsed.style.width = trueX / width * 100 + '%';

            this.seek(scrubToTime);
        }
    }, {
        key: 'setPlayPause',
        value: function setPlayPause(event) {
            var playPauseControls = this.playPauseControls,
                playClasses = this.playClasses,
                pauseClasses = this.pauseClasses;

            var searchClasses = [playClasses, pauseClasses];
            var playPauseIcon = this.getElementByClasses(playPauseControls.children, searchClasses);

            switch (playPauseIcon.className) {
                case playClasses:
                    playPauseIcon.className = pauseClasses;

                    this.play();
                    break;
                case pauseClasses:
                    playPauseIcon.className = playClasses;

                    this.pause();
                    break;
                default:
                    break;
            }
        }
    }, {
        key: 'setMute',
        value: function setMute(event) {
            var muteControls = this.muteControls,
                muteClasses = this.muteClasses,
                unmuteClasses = this.unmuteClasses,
                volumeBar = this.volumeBar,
                volumeBarCurrentVolumeClasses = this.volumeBarCurrentVolumeClasses;

            var muteControlsClasses = [muteClasses, unmuteClasses];
            var muteIcon = this.getElementByClasses(muteControls.children, muteControlsClasses);
            var currentVolumeSpan = this.getElementByClasses(volumeBar.children, [volumeBarCurrentVolumeClasses]);

            switch (muteIcon.className) {
                case unmuteClasses:
                    muteIcon.className = muteClasses;
                    currentVolumeSpan.style.width = '0%';

                    this.setVolume(0);
                    break;
                case muteClasses:
                    muteIcon.className = unmuteClasses;
                    currentVolumeSpan.style.width = this.currentVolume * 100 + '%';

                    this.setVolume(this.currentVolume);
                    break;
                default:
                    break;
            }
        }
    }, {
        key: 'onReadyToPlay',
        value: function onReadyToPlay(player, stateData) {
            var volumeBar = this.volumeBar,
                volumeBarCurrentVolumeClasses = this.volumeBarCurrentVolumeClasses;

            var self = this;
            var currentVolumeSpan = this.getElementByClasses(volumeBar.children, [volumeBarCurrentVolumeClasses]);

            currentVolumeSpan.style.width = self.currentVolume * 100 + '%';

            this.setVolume(self.currentVolume);
            this.getDuration(function (duration) {
                var totalTimeInfo = self.totalTimeInfo,
                    currentTimeInfo = self.currentTimeInfo,
                    scrubBar = self.scrubBar;

                var durationTimeObject = self.convertSecondsToParts(duration);
                var durationTimeStamp = self.createTimeStamp(durationTimeObject);

                self.duration = duration;

                if (totalTimeInfo) totalTimeInfo.innerHTML = '/' + durationTimeStamp;
                if (currentTimeInfo) currentTimeInfo.innerHTML = '00:00';
                if (scrubBar) scrubBar.children[0].style.width = '0%';
            });
        }
    }, {
        key: 'onTimeUpdate',
        value: function onTimeUpdate(player) {
            var currentTimeInfo = this.currentTimeInfo,
                scrubBar = this.scrubBar,
                scrubBarTimeLapseClasses = this.scrubBarTimeLapseClasses;
            var seconds = player[0].currentTime;


            seconds = seconds > this.duration ? 0 : seconds;

            var currentTimeObject = this.convertSecondsToParts(seconds);
            var currentTimeStamp = this.createTimeStamp(currentTimeObject);
            var timeLapsed = seconds / this.duration;

            if (currentTimeInfo) currentTimeInfo.innerHTML = '' + currentTimeStamp;

            var searchClasses = [scrubBarTimeLapseClasses];

            if (scrubBar) {
                var timelapsedElement = this.getElementByClasses(scrubBar.children, searchClasses);

                timelapsedElement.style.width = timeLapsed * 100 + '%';
            }
        }
    }, {
        key: 'onPlaying',
        value: function onPlaying() {
            var playPauseControls = this.playPauseControls,
                playClasses = this.playClasses,
                pauseClasses = this.pauseClasses;

            var searchClasses = [playClasses, pauseClasses];
            var playPauseIcon = this.getElementByClasses(playPauseControls.children, searchClasses);

            playPauseIcon.className = pauseClasses;

            this.play();
        }
    }, {
        key: 'onPaused',
        value: function onPaused() {
            var playPauseControls = this.playPauseControls,
                playClasses = this.playClasses,
                pauseClasses = this.pauseClasses;

            var searchClasses = [playClasses, pauseClasses];
            var playPauseIcon = this.getElementByClasses(playPauseControls.children, searchClasses);

            playPauseIcon.className = playClasses;

            this.pause();
        }
    }, {
        key: 'addEventListeners',
        value: function addEventListeners(iVXjsBus) {
            var self = this;
            var scrubBar = this.scrubBar,
                volumeBar = this.volumeBar,
                playPauseControls = this.playPauseControls,
                muteControls = this.muteControls;


            this.iVXjsBus = iVXjsBus;
            this.updateTime = iVXjsBus.on(this.controlEventNames.TIME_UPDATE, updateTime);
            this.whilePaused = iVXjsBus.on(this.controlEventNames.PAUSED, whilePaused);
            this.whilePlaying = iVXjsBus.on(this.controlEventNames.PLAYING, whilePlaying);
            this.canPlayCallback = iVXjsBus.on(this.controlEventNames.CAN_PLAY, canPlayCallBack);
            this.updateTime = this.updateTime ? this.updateTime : updateTime;

            volumeBar.addEventListener('mousedown', function (event) {
                self.adjustVolume(event);
            });
            scrubBar.addEventListener('click', function (event) {
                self.scrub(event);
            });
            playPauseControls.addEventListener('mouseup', function (event) {
                self.setPlayPause(event);
            });
            muteControls.addEventListener('click', function (event) {
                self.setMute(event);
            });

            function canPlayCallBack(player, _stateData) {
                self.onReadyToPlay(player, _stateData);
            }

            function updateTime(player) {
                self.onTimeUpdate(player);
            }

            function whilePaused(player) {
                self.onPaused(player);
            }

            function whilePlaying() {
                self.onPlaying();
            }
        }
    }, {
        key: 'getElementByClasses',
        value: function getElementByClasses(elements, classes) {
            var elementArray = elements instanceof Array ? elements : Array.from(elements);
            var thisElement = void 0;

            classes.forEach(function (className, index) {
                if (!className) return;
                if (thisElement) return;

                thisElement = elementArray.find(function (element, index) {
                    return element.className.indexOf(className) >= 0;
                });
            });

            return thisElement;
        }
    }, {
        key: 'createTimeStamp',
        value: function createTimeStamp(timeObject) {
            var hours = timeObject.hours,
                minutes = timeObject.remainingMinutes,
                seconds = timeObject.remainingSeconds;

            var hourString = '';
            var minuteString = minutes < 10 ? '0' + minutes + ':' : minutes + ':';
            var secondString = seconds < 10 ? '0' + seconds : '' + seconds;

            if (hours > 0) {
                hourString = hours < 10 ? '0' + hours + ':' : hours + ':';
            };

            return '' + hourString + minuteString + secondString;
        }
    }, {
        key: 'convertSecondsToParts',
        value: function convertSecondsToParts(seconds) {
            var minutes = Math.floor(seconds / 60);
            var timeInformation = {
                minutes: minutes,
                hours: Math.floor(minutes / 60),
                remainingSeconds: Math.floor(seconds % 60),
                remainingMinutes: Math.floor(minutes % 60),
                seconds: seconds
            };

            return timeInformation;
        }
    }]);

    return Controls;
}(_events2.default);

;

},{"../../../constants/video.events.js":378,"./events.js":419}],421:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RegisteredVideoModules = undefined;

var _html = require('./types/html5.js');

var _youTube = require('./types/youTube.js');

var _vimeo = require('./types/vimeo.js');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Types


var RegisteredVideoModules = exports.RegisteredVideoModules = function RegisteredVideoModules() {
    _classCallCheck(this, RegisteredVideoModules);

    this.youtube = _youTube.YouTube;
    this.html5 = _html.Html5;
    this.vimeo = _vimeo.Vimeo;
};

;

},{"./types/html5.js":423,"./types/vimeo.js":424,"./types/youTube.js":425}],422:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _class = function () {
    function _class() {
        _classCallCheck(this, _class);
    }

    _createClass(_class, [{
        key: "PlayerControlEvents",
        get: function get() {
            return {
                "play": 'iVX:video:play',
                "pause": 'iVX:video:pause',
                "seek": 'iVX:video:seeked',
                "playing": "iVX:video:playing",
                "ended": "iVX:video:ended",
                "paused": "iVX:video:paused",
                "setVolume": 'iVX:video:setVolume',
                "duration": "iVX:video:requestDuration",
                "getDuration": "iVX:video:getDuration",
                "canPlay": "iVX:video:canplay",
                "timeUpdate": "iVX:video:timeupdate",
                "dispose": "iVX:video:dispose",
                "volume": 'iVX:video:setVolume'
            };
        }
    }]);

    return _class;
}();

exports.default = _class;
;

},{}],423:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Html5 = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeParsers = require("../../../utilities/type-parsers.js");

var _settings2 = require("../settings.js");

var _settings3 = _interopRequireDefault(_settings2);

var _videoEvents = require("../../../constants/video.events.js");

var _videoEvents2 = _interopRequireDefault(_videoEvents);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var thisObjectParsers = new _typeParsers.ObjectParsers();
var playerSettings = new _settings3.default();

var Html5 = exports.Html5 = function () {
    function Html5(container, settings) {
        var stateData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var iVXjsLog = arguments[3];

        _classCallCheck(this, Html5);

        this.settings = settings;
        this.stateData = stateData;
        this.videoEventNames = new _videoEvents2.default();

        container.html(this.html);

        this.player = container[0].getElementsByTagName("VIDEO")[0];
        this.iVXjsLog = iVXjsLog;
    }

    _createClass(Html5, [{
        key: "play",
        value: function play() {
            this.player.play();
        }
    }, {
        key: "pause",
        value: function pause() {
            this.player.pause();
        }
    }, {
        key: "seek",
        value: function seek(newTime) {

            this.player.currentTime = newTime;
        }
    }, {
        key: "getDuration",
        value: function getDuration() {
            this.iVXjsBus.emit(this.videoEventNames.SET_DURATION, this.player.duration);
        }
    }, {
        key: "setVolume",
        value: function setVolume(volume) {
            this.player.volume = volume;
        }
    }, {
        key: "seek",
        value: function seek(currentTime) {
            this.player.currentTime = currentTime;
        }
    }, {
        key: "playing",
        value: function playing() {}
    }, {
        key: "setOnReady",
        value: function setOnReady() {
            var self = this;

            this.player.addEventListener('pause', function () {
                self.iVXjsBus.emit(self.videoEventNames.PAUSED, self.player);
            });
            this.player.addEventListener('canplay', function () {
                self.iVXjsBus.emit(self.videoEventNames.CAN_PLAY, self.player, self.stateData);
            });
            this.player.addEventListener('playing', function () {
                self.iVXjsBus.emit(self.videoEventNames.PLAYING, self.player, self.stateData);
            });
        }
    }, {
        key: "setTimeUpdate",
        value: function setTimeUpdate() {
            var self = this;

            this.player.addEventListener('timeupdate', function () {
                self.iVXjsBus.emit(self.videoEventNames.TIME_UPDATE, self.player, self.stateData);
            });
        }
    }, {
        key: "setOnEnd",
        value: function setOnEnd() {
            var self = this;

            this.player.addEventListener('ended', function () {
                self.iVXjsBus.emit(self.videoEventNames.ENDED, self.player, self.stateData);
            });
        }
    }, {
        key: "addEventListeners",
        value: function addEventListeners(iVXjsBus) {
            var videoEventNames = this.videoEventNames,
                iVXjsLog = this.iVXjsLog;
            ;
            var self = this;

            this.iVXjsBus = iVXjsBus;

            // Get custom iVXjsBus Function
            this.playOnEvent = iVXjsBus.on(videoEventNames.PLAY, playOnEvent);
            this.pauseOnEvent = iVXjsBus.on(videoEventNames.PAUSE, pauseOnEvent);
            this.volumeOnEvent = iVXjsBus.on(videoEventNames.SET_VOLUME, volumeOnEvent);
            this.durationOnEvent = iVXjsBus.on(videoEventNames.GET_DURATION, durationOnEvent);
            this.seekOnEvent = iVXjsBus.on(videoEventNames.SEEK, seekOnEvent);
            this.playingOnEvent = iVXjsBus.on(videoEventNames.PLAYING, playingOnEvent);

            // If it doesn't have a custom function, add the default one so the Bus can dispose of it.
            this.playOnEvent = this.playOnEvent ? this.playOnEvent : playOnEvent;
            this.pauseOnEvent = this.pauseOnEvent ? this.pauseOnEvent : pauseOnEvent;
            this.seekOnEvent = this.seekOnEvent ? this.seekOnEvent : seekOnEvent;
            this.durationOnEvent = this.durationOnEvent ? this.durationOnEvent : durationOnEvent;
            this.volumeOnEvent = this.volumeOnEvent ? this.volumeOnEvent : volumeOnEvent;
            this.playingOnEvent = this.playingOnEvent ? this.playingOnEvent : playingOnEvent;

            this.setOnReady();
            this.setTimeUpdate();
            this.setOnEnd();

            this.player.addEventListener('error', function (event) {
                var settings = self.settings;
                var src = settings.src,
                    _settings$sources = settings.sources,
                    sources = _settings$sources === undefined ? [] : _settings$sources;

                var sourceString = "";

                if (src) {
                    sourceString = "Failed to load video with filepath: " + src;
                }

                if (sources) {
                    sourceString = sources.reduce(function (sourceList, sourcePath, index) {
                        if (index === 0) {
                            return "" + sourceList + sourcePath.src;
                        }

                        return sourceList + "," + sourcePath.src;
                    }, "Failed to load one of the videos with filepaths: ");
                }

                var errorObj = {
                    message: "" + sourceString
                };

                iVXjsLog.error(errorObj, "VIDEO");
            }, true);

            function playOnEvent() {
                self.play();
            }

            function pauseOnEvent() {
                self.pause();
            }

            function playingOnEvent() {
                self.playing();
            }

            function seekOnEvent(currentTime) {
                var seconds = currentTime.seconds;


                if (seconds) {
                    self.seek(seconds);
                } else {
                    self.seek(currentTime[0].seconds);
                }
            }

            function durationOnEvent() {
                self.getDuration();
            }

            function volumeOnEvent(volume) {
                self.setVolume(volume);
            }
        }
    }, {
        key: "dispose",
        value: function dispose(iVXjsBus) {
            var videoEventNames = this.videoEventNames;

            var self = this;
            var eventNameMap = {
                play: videoEventNames.PLAY,
                pause: videoEventNames.PAUSE,
                seek: videoEventNames.SEEK,
                duration: videoEventNames.GET_DURATION,
                volume: videoEventNames.SET_VOLUME,
                playing: videoEventNames.PLAYING
            };
            var eventsToDispose = Object.keys(eventNameMap);

            eventsToDispose.forEach(function (eventNameToDispose, index) {
                if (!self[eventNameToDispose + "OnEvent"]) return;

                iVXjsBus.removeListener(eventNameMap[eventNameToDispose], self[eventNameToDispose + "OnEvent"]);
            });
        }
    }, {
        key: "html",
        get: function get() {
            var _stateData$isiOS = this.stateData.isiOS,
                isiOS = _stateData$isiOS === undefined ? false : _stateData$isiOS;
            var _settings = this.settings,
                _settings$tracks = _settings.tracks,
                tracks = _settings$tracks === undefined ? [] : _settings$tracks,
                _settings$sources2 = _settings.sources,
                sources = _settings$sources2 === undefined ? [] : _settings$sources2,
                _settings$controls = _settings.controls,
                controls = _settings$controls === undefined ? true : _settings$controls;

            var tags = ['tracks', 'sources', 'autoplay'];
            var justAttrs = ['controls'];

            if (typeof this.settings.controls === 'string' || !controls) {
                delete this.settings.controls;
            } else {
                this.settings.controls = true;
            }

            var attrHTML = thisObjectParsers.reduce(this.settings, function (thisAttrHTML, value, key) {
                if (tags.indexOf(key) >= 0) return thisAttrHTML;
                if (justAttrs.indexOf(key) >= 0) return thisAttrHTML + " " + key;

                return thisAttrHTML + " " + key + "=\"" + value + "\"";
            }, "");
            var trackTags = tracks.reduce(function (trackHTML, trackSettings, index) {
                var trackAttrHTML = thisObjectParsers.reduce(trackSettings, function (attrHTML, value, key) {
                    return attrHTML + " " + key + "=\"" + value + "\"";
                }, "");

                return trackHTML + " \n            <track " + trackAttrHTML + ">";
            }, "");
            var sourceTags = sources.reduce(function (sourceHTML, sourceSettings, index) {
                var sourceAttrHTML = thisObjectParsers.reduce(sourceSettings, function (attrHTML, value, key) {
                    return attrHTML + " " + key + "=\"" + value + "\"";
                }, "");

                return sourceHTML + " \n            <source " + sourceAttrHTML + ">";
            }, "");

            return "\n            <video  width=\"100%\" " + attrHTML + " onclick=\"this.paused ? this.play() : this.pause();\">\n                " + sourceTags + "\n                " + trackTags + "\n            </video>";
        }
    }]);

    return Html5;
}();

;

},{"../../../constants/video.events.js":378,"../../../utilities/type-parsers.js":428,"../settings.js":422}],424:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Vimeo = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _settings2 = require("../settings.js");

var _settings3 = _interopRequireDefault(_settings2);

var _videoEvents = require("../../../constants/video.events.js");

var _videoEvents2 = _interopRequireDefault(_videoEvents);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var playerSettings = new _settings3.default();

var Vimeo = exports.Vimeo = function () {
    function Vimeo(container, settings, stateData, iVXjsLog) {
        _classCallCheck(this, Vimeo);

        this._settings = settings;
        this._stateData = stateData;

        var id = settings.id,
            width = settings.width,
            loop = settings.loop;

        var options = { id: id, width: width, loop: loop };

        container.html(this.html);

        this.player = new window.Vimeo.Player('player1', options);
        this.videoEventNames = new _videoEvents2.default();
        this.iVXjsLog = iVXjsLog;
    }

    _createClass(Vimeo, [{
        key: "createPlayer",
        value: function createPlayer() {
            var hasControls = 1;

            if (typeof controls === 'string') {
                hasControls = 0;
            }
        }
    }, {
        key: "dispose",
        value: function dispose(iVXjsBus) {
            var videoEventNames = this.videoEventNames;

            var self = this;
            var eventNameMap = {
                play: videoEventNames.PLAY,
                pause: videoEventNames.PAUSE,
                seek: videoEventNames.SEEK,
                duration: videoEventNames.GET_DURATION,
                volume: videoEventNames.SET_VOLUME,
                playing: videoEventNames.PLAYING,
                ended: videoEventNames.ENDED
            };
            var eventsToDispose = Object.keys(eventNameMap);

            eventsToDispose.forEach(function (eventNameToDispose, index) {
                if (!self[eventNameToDispose + "OnEvent"]) return;

                iVXjsBus.removeListener(eventNameMap[eventNameToDispose], self[eventNameToDispose + "OnEvent"]);
            });
        }
    }, {
        key: "addEventListeners",
        value: function addEventListeners(iVXjsBus) {
            var stateData = this._stateData,
                videoEventNames = this.videoEventNames,
                _settings = this._settings;
            var id = _settings.id;

            var self = this;
            var timeUpdateId = void 0;
            var url = "https://player.vimeo.com/video/" + _settings.id;
            var oEmbedUrl = "https://vimeo.com/api/oembed.json?url=" + url;
            var canGetVideo = function canGetVideo(xhr) {
                if (xhr.readyState === 4) {
                    if (xhr.status === 200) {} else {
                        var errorObj = {
                            message: "Vimeo failed to load with id: " + id + "."
                        };
                        self.iVXjsLog.error(errorObj, "VIDEO");
                    }
                }
            };
            var xhr = new XMLHttpRequest();
            var deferred = new Promise(function (resolve, reject) {
                xhr.onreadystatechange = function () {
                    canGetVideo(xhr);
                };
                xhr.open('GET', oEmbedUrl);
                xhr.send();
            });

            self.durationOnEvent = iVXjsBus.on(videoEventNames.GET_DURATION, durationOnEvent);
            self.pauseOnEvent = iVXjsBus.on(videoEventNames.PAUSE, pauseOnEvent);
            self.playOnEvent = iVXjsBus.on(videoEventNames.PLAY, playOnEvent);
            self.seekOnEvent = iVXjsBus.on(videoEventNames.SEEK, seekOnEvent);
            self.volumeOnEvent = iVXjsBus.on(videoEventNames.SET_VOLUME, volumeOnEvent);

            self.durationOnEvent = typeof self.durationOnEvent === 'function' ? self.durationOnEvent : durationOnEvent;
            self.pauseOnEvent = typeof self.pauseOnEvent === 'function' ? self.pauseOnEvent : pauseOnEvent;
            self.playOnEvent = typeof self.playOnEvent === 'function' ? self.playOnEvent : playOnEvent;
            self.seekOnEvent = typeof self.seekOnEvent === 'function' ? self.seekOnEvent : seekOnEvent;
            self.volumeOnEvent = typeof self.volumeOnEvent === 'function' ? self.volumeOnEvent : volumeOnEvent;

            deferred.then(function () {
                self.player.ready().then(function () {
                    iVXjsBus.emit(videoEventNames.CAN_PLAY, self.player);
                });
            });

            self.player.on('timeupdate', function (vimeoPlayInfo) {
                vimeoPlayInfo.currentTime = vimeoPlayInfo.seconds;

                iVXjsBus.emit(videoEventNames.TIME_UPDATE, vimeoPlayInfo);
            });

            self.player.on('ended', function () {
                console.log("GOT HERE?");
                iVXjsBus.emit(videoEventNames.ENDED, self);
            });

            self.player.on('loaded', function () {
                iVXjsBus.emit(videoEventNames.CAN_PLAY, self);
            });

            function playOnEvent() {
                self.player.play();
            }

            function pauseOnEvent() {
                self.player.pause();
            }

            function volumeOnEvent(volume) {
                self.player.setVolume(volume);
            }

            function seekOnEvent(currentTime) {
                self.player.setCurrentTime(currentTime);
            }

            function durationOnEvent() {
                self.player.getDuration().then(function (duration) {
                    iVXjsBus.emit(videoEventNames.SET_DURATION, duration);
                });
            }
        }
    }, {
        key: "html",
        get: function get() {
            return "<div id=\"player1\" data-vimeo-autoplay=\"false\" data-vimeo-loop=\"false\"></div>";
        }
    }]);

    return Vimeo;
}();

},{"../../../constants/video.events.js":378,"../settings.js":422}],425:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.YouTube = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _videoEvents = require('../../../constants/video.events.js');

var _videoEvents2 = _interopRequireDefault(_videoEvents);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var YouTube = exports.YouTube = function () {
    function YouTube(container, settings, stateData, iVXjsLog) {
        _classCallCheck(this, YouTube);

        this._settings = settings;
        this._stateData = stateData;
        this.intervals = [];
        this.videoEventNames = new _videoEvents2.default();
        this.iVXjsLog = iVXjsLog;

        container.html(this.html);
    }

    _createClass(YouTube, [{
        key: 'createPlayer',
        value: function createPlayer() {
            var _settings = this._settings,
                _settings$height = _settings.height,
                height = _settings$height === undefined ? 'inherit' : _settings$height,
                _settings$width = _settings.width,
                width = _settings$width === undefined ? 'inherit' : _settings$width,
                id = _settings.id,
                controls = _settings.controls;

            var hasControls = 1;

            if (typeof controls === 'string') {
                hasControls = 0;
            }

            this.player = new YT.Player('youtube-player', {
                height: height,
                width: width,
                videoId: id,
                playerVars: {
                    controls: hasControls,
                    showinfo: 0,
                    autohide: 1
                }
            });
        }
    }, {
        key: 'dispose',
        value: function dispose(iVXjsBus) {
            var videoEventNames = this.videoEventNames;

            var self = this;
            var eventNameMap = {
                play: videoEventNames.PLAY,
                pause: videoEventNames.PAUSE,
                seek: videoEventNames.SEEK,
                duration: videoEventNames.GET_DURATION,
                volume: videoEventNames.SET_VOLUME,
                playing: videoEventNames.PLAYING,
                ended: videoEventNames.ENDED
            };
            var eventsToDispose = Object.keys(eventNameMap);

            clearInterval(this.timeUpdateId);

            eventsToDispose.forEach(function (eventNameToDispose, index) {
                if (!self[eventNameToDispose + 'OnEvent']) return;

                iVXjsBus.removeListener(eventNameMap[eventNameToDispose], self[eventNameToDispose + 'OnEvent']);
            });
        }
    }, {
        key: 'addEventListeners',
        value: function addEventListeners(iVXjsBus) {
            var stateData = this._stateData,
                player = this.player,
                videoEventNames = this.videoEventNames;

            var self = this;
            var timeUpdateId = void 0;
            var numberofTimeupdates = 0;

            player.addEventListener('onError', function (event) {
                var messages = {
                    2: 'The request contains an invalid parameter value. For example, this error occurs if you specify a video ID that does not have 11 characters, or if the video ID contains invalid characters, such as exclamation points or asterisks.',
                    5: 'The requested content cannot be played in an HTML5 player or another error related to the HTML5 player has occurred.',
                    100: 'The video requested was not found. This error occurs when a video has been removed (for any reason) or has been marked as private.',
                    101: 'The owner of the requested video does not allow it to be played in embedded players.',
                    150: 'The video requested was not found. This error occurs when a video has been removed (for any reason) or has been marked as private.'
                };
                var errorObj = {
                    message: messages[event.data]
                };

                self.iVXjsLog.error(errorObj, "VIDEO");
            });

            player.addEventListener('onStateChange', function onStateChange() {
                switch (player.getPlayerState()) {
                    case 0:
                        iVXjsBus.emit(videoEventNames.ENDED, player, stateData);
                        break;
                    case 1:
                        iVXjsBus.emit(videoEventNames.PLAYING, player, stateData);
                        break;
                    case 2:
                        iVXjsBus.emit(videoEventNames.PAUSED, player, stateData);
                        break;
                    case 3:
                        iVXjsBus.emit(videoEventNames.BUFFERING, player, stateData);
                        break;
                }
            });

            player.addEventListener('onReady', function onYouTubeOnReady() {
                self.playOnEvent = iVXjsBus.on(videoEventNames.PLAY, playOnEvent);
                self.pauseOnEvent = iVXjsBus.on(videoEventNames.PAUSE, pauseOnEvent);
                self.volumeOnEvent = iVXjsBus.on(videoEventNames.SET_VOLUME, volumeOnEvent);
                self.durationOnEvent = iVXjsBus.on(videoEventNames.GET_DURATION, durationOnEvent);
                self.seekOnEvent = iVXjsBus.on(videoEventNames.SEEK, seekOnEvent);
                self.pausedOnEvent = iVXjsBus.on(videoEventNames.PAUSED, pausedOnEvent);
                self.endedOnEvent = iVXjsBus.on(videoEventNames.ENDED, endedOnEvent);
                self.playingOnEvent = iVXjsBus.on(videoEventNames.PLAYING, playingOnEvent);
                self.playOnEvent = typeof self.playOnEvent === 'function' ? self.playOnEvent : playOnEvent;
                self.pauseOnEvent = typeof self.pauseOnEvent === 'function' ? self.pauseOnEvent : pauseOnEvent;
                self.seekOnEvent = typeof self.seekOnEvent === 'function' ? self.seekOnEvent : seekOnEvent;
                self.durationOnEvent = typeof self.durationOnEvent === 'function' ? self.durationOnEvent : durationOnEvent;
                self.volumeOnEvent = typeof self.volumeOnEvent === 'function' ? self.volumeOnEvent : volumeOnEvent;
                self.pausedOnEvent = typeof self.pausedOnEvent === 'function' ? self.pausedOnEvent : pausedOnEvent;
                self.endedOnEvent = typeof self.endedOnEvent === 'function' ? self.endedOnEvent : endedOnEvent;
                self.playingOnEvent = typeof self.playingOnEvent === 'function' ? self.playingOnEvent : playingOnEvent;
                iVXjsBus.emit(videoEventNames.CAN_PLAY, player);
            });

            function playOnEvent() {
                player.playVideo();
                clearInterval(self.timeUpdateId);
            }

            function pauseOnEvent() {
                player.pauseVideo();
                clearInterval(self.timeUpdateId);
            }

            function durationOnEvent() {
                iVXjsBus.emit(videoEventNames.SET_DURATION, player.getDuration());
            }

            function volumeOnEvent(volume) {
                player.setVolume(volume * 100);
            }

            function playingOnEvent() {
                player.currentTime = player.getCurrentTime();

                iVXjsBus.emit(videoEventNames.TIME_UPDATE, player);

                var currentNumber = numberofTimeupdates;

                self.timeUpdateId = setInterval(function () {
                    player.currentTime = player.getCurrentTime();

                    iVXjsBus.emit(videoEventNames.TIME_UPDATE, player);
                }, 50);
            }

            function seekOnEvent(currentTime) {
                clearInterval(self.timeUpdateId);
                player.seekTo(currentTime);
            }

            function pausedOnEvent() {
                clearInterval(self.timeUpdateId);
            }

            function endedOnEvent() {
                clearInterval(self.timeUpdateId);
            }
        }
    }, {
        key: 'html',
        get: function get() {
            return '<div id="youtube-player"></div>';
        }
    }]);

    return YouTube;
}();

},{"../../../constants/video.events.js":378}],426:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _class = function () {
	function _class(log) {
		_classCallCheck(this, _class);

		this.log = log;
	}

	_createClass(_class, [{
		key: "assert",
		value: function assert(test, name, message) {
			var log = this.log;
			var debug = log.show;


			if (!test) {
				var errorObj = {
					message: name + " is invalid: " + message + "."
				};

				if (debug) {
					this.log.error(errorObj, "ASSERT");
					throw new Error(errorObj.message);
				}
			}

			return test;
		}
	}]);

	return _class;
}();

exports.default = _class;

},{}],427:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _logging = require('../constants/logging.js');

var _logging2 = _interopRequireDefault(_logging);

var _errors = require('../constants/errors.js');

var _errors2 = _interopRequireDefault(_errors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _class = function () {
    function _class(show, Bus) {
        _classCallCheck(this, _class);

        this.show = show;
        this.LoggingMessages = new _logging2.default();
        this.ErrorMessages = new _errors2.default();
        this.Bus = Bus;
    }

    _createClass(_class, [{
        key: 'warn',
        value: function warn(message) {
            var show = this.show,
                LoggingMessages = this.LoggingMessages,
                Bus = this.Bus;

            var warnMessage = LoggingMessages.WARN;
            var warnPayload = {
                message: message,
                timestamp: new Date()
            };

            if (show) {
                console.warn(warnMessage + ': ' + message);
            }

            Bus.emit(warnMessage, warnPayload);
        }
    }, {
        key: 'error',
        value: function error(_error) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "DEFAULT";
            var show = this.show,
                ErrorMessages = this.ErrorMessages,
                Bus = this.Bus;

            var errorTypeMessage = ErrorMessages[type];
            var message = _error.message;

            var errorPayload = {
                message: message,
                type: errorTypeMessage,
                error: _error,
                timestamp: new Date()
            };

            console.error(errorTypeMessage + ': ' + message);
            Bus.emit(errorTypeMessage, _error);
            Bus.emit(_logging2.default.ERROR, errorPayload);
        }
    }, {
        key: 'debug',
        value: function debug(message) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var show = this.show,
                LoggingMessages = this.LoggingMessages,
                Bus = this.Bus;

            var logMessage = LoggingMessages.DEBUG;
            var self = this;
            var _options$group = options.group,
                group = _options$group === undefined ? false : _options$group;


            if (group && show) {
                var messages = options.messages;


                console.groupCollapsed(logMessage + ': ' + message);

                messages.forEach(function (message) {
                    var title = message.title,
                        logMesage = message.message;


                    if (title) {
                        console.log(title);
                        self.createMessage(logMesage);
                    } else {
                        self.createMessage(logMesage);
                    }
                });
                console.groupEnd();

                Bus.emit(logMessage, message, options);

                return;
            }

            if (show) {
                console.log(logMessage + ':' + message);
                Bus.emit(logMessage, message);
            }
        }
    }, {
        key: 'createMessage',
        value: function createMessage(message) {
            if (message !== null && (typeof message === 'undefined' ? 'undefined' : _typeof(message)) === 'object' || Array.isArray(message)) {
                console.dir(message);
            } else {
                console.log(message);
            }
        }
    }, {
        key: 'log',
        value: function log(message) {
            var show = this.show,
                LoggingMessages = this.LoggingMessages,
                Bus = this.Bus;

            var logMessage = LoggingMessages.LOG;
            var logPayload = {
                message: message,
                timestamp: new Date()
            };

            console.log(logMessage + ': ' + message);
            Bus.emit(logMessage, logPayload);
        }
    }, {
        key: 'trace',
        value: function trace(stack) {
            var show = this.show,
                LoggingMessages = this.LoggingMessages,
                Bus = this.Bus;

            var stackPayLoad = {
                stack: stack,
                timestamp: new Date()
            };

            if (show) {
                console.trace(stack);
            }

            Bus.emit(LoggingMessages.TRACE, stackPayLoad);
        }
    }]);

    return _class;
}();

exports.default = _class;

},{"../constants/errors.js":366,"../constants/logging.js":374}],428:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TypeValidator = exports.TypeValidator = function () {
    function TypeValidator() {
        _classCallCheck(this, TypeValidator);
    }

    _createClass(TypeValidator, [{
        key: 'isUndefined',
        value: function isUndefined(obj) {
            return obj === undefined || obj === null;
        }
    }, {
        key: 'isString',
        value: function isString(obj) {
            return this.toString.call(obj) === '[object String]';
        }
    }, {
        key: 'isFunction',
        value: function isFunction(obj) {
            return obj && this.toString.call(obj) === '[object Function]';
        }
    }, {
        key: 'isNumber',
        value: function isNumber(obj) {
            return !isNaN(obj);
        }
    }, {
        key: 'isBoolean',
        value: function isBoolean(obj) {
            return typeof obj === 'boolean' || (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && typeof obj.valueOf() === 'boolean';
        }
    }, {
        key: 'isEmpty',
        value: function isEmpty(obj) {
            var hasOwnProperty = Object.prototype.hasOwnProperty;
            var isArray = Array.isArray(obj);
            var isString = typeof obj === 'string';
            var checkLength = isArray || isString;

            if (checkLength && obj.length === 0) return true;
            if (checkLength && obj.length > 0) return false;
            if (!isNaN(obj)) return false;
            if (obj === undefined) return true;
            if (obj === null) return true;

            for (var key in obj) {
                if (hasOwnProperty.call(obj, key)) return false;
            }

            return true;
        }
    }, {
        key: 'toString',
        get: function get() {
            return Object.prototype.toString;
        }
    }]);

    return TypeValidator;
}();

var typeValidator = new TypeValidator();

var ObjectParsers = exports.ObjectParsers = function () {
    function ObjectParsers() {
        _classCallCheck(this, ObjectParsers);
    }

    /**
     * Allows you to map an object by the keys of a given object 
     * @param {object} object - object to map;
     * @param {function} callback - function to run by each value and key  
     */


    _createClass(ObjectParsers, [{
        key: 'mapKeys',
        value: function mapKeys(object, callback) {
            if (!object || object === {}) return [];

            var keys = Object.keys(object);
            var entries = keys.reduce(function (currentArray, key) {
                var entry = [key, object[key]];

                currentArray.push(entry);

                return currentArray;
            }, []);
            var reduceMap = new Map(entries);
            var mappedArray = [];

            if (!reduceMap) return [];

            reduceMap.forEach(function (val, key) {
                mappedArray.push(callback(val, key));
            });

            return mappedArray;
        }
    }, {
        key: 'merge',
        value: function merge(base, merged, ignore) {
            var mergedKeys = Object.keys(merged);
            var unionedObject = new Object(base);

            mergedKeys.forEach(function (mergedKey, index) {
                if (ignore && ignore.indexOf(mergedKey) >= 0) return;
                unionedObject[mergedKey] = merged[mergedKey];
            });

            return unionedObject;
        }
    }, {
        key: 'reduce',
        value: function reduce(object, callback, defaultValue) {
            if (!object || object === {}) return;

            var keys = Object.keys(object);
            var entries = keys.reduce(function (currentArray, key) {
                var entry = [key, object[key]];
                currentArray.push(entry);
                return currentArray;
            }, []);
            var reduceMap = new Map(entries);

            reduceMap.forEach(function (val, key) {
                defaultValue = callback(defaultValue, val, key);
            });

            return defaultValue;
        }

        /**
         * Iterates through a collection to find if any of the values 
         * with the keys is empty.
         */

    }, {
        key: 'anyEmpty',
        value: function anyEmpty(collection, keys) {
            var hasElements = {
                isEmpty: false,
                errors: []
            };

            collection.forEach(function (element, index) {
                keys.forEach(function (key) {
                    if (typeValidator.isEmpty(element[key])) {
                        hasElements.isEmpty = true;
                        hasElements.errors.push({
                            key: key,
                            index: index,
                            value: element[key]
                        });
                    }
                });
            });

            return hasElements;
        }
    }, {
        key: 'has',
        value: function has(collection, element) {

            if (Array.isArray(element)) {
                return this.hasSameArray(collection, element);
            }

            if ((typeof element === 'undefined' ? 'undefined' : _typeof(element)) === 'object') {
                return this.hasSameObject(collection, element);
            }

            return collection.indexOf(element) >= 0;
        }
    }, {
        key: 'hasSameObject',
        value: function hasSameObject(collection, element) {
            var itHas = false;

            collection.forEach(function (checkElement, index) {
                if ((typeof checkElement === 'undefined' ? 'undefined' : _typeof(checkElement)) === 'object') {
                    var checkElementKeys = Object.keys(checkElement);
                    checkElementKeys.forEach(function (key, index) {
                        itHas = checkElement[key] === element[key];
                    });
                }
            });

            return itHas;
        }
    }, {
        key: 'hasSameArray',
        value: function hasSameArray(collection, arrayElement) {
            var itHas = false;

            collection.forEach(function (checkElement, index) {

                if (Array.isArray(checkElement)) {

                    checkElement.forEach(function (testElement, index) {

                        itHas = testElement === arrayElement[index];
                    });
                }
            });

            return itHas;
        }
    }, {
        key: 'setValue',
        value: function setValue(object, path, value) {
            var a = path.split('.');
            var o = object;
            for (var i = 0; i < a.length - 1; i++) {
                var n = a[i];
                if (n in o) {
                    o = o[n];
                } else {
                    o[n] = {};
                    o = o[n];
                }
            }
            o[a[a.length - 1]] = value;
        }
    }, {
        key: 'getValueFromPath',
        value: function getValueFromPath(path, object) {
            var pathParts = path.split(".");
            var oldData = object;
            var currentData = {};
            var returnValue = void 0;

            pathParts.forEach(function (pathPart, index) {
                if (typeValidator.isEmpty(pathPart)) return;
                currentData = oldData[pathPart];

                if (typeValidator.isEmpty(currentData)) {
                    returnValue = currentData;
                    return;
                }

                returnValue = currentData;
                oldData = currentData;
            });

            return returnValue;
        }

        /**
         * Checks in an array of objects to see if the values 
         * at the keys is unique and returns an object indicating 
         * if they are unique and any errors that don't match for 
         * correction.
         */

    }, {
        key: 'isUnique',
        value: function isUnique() {
            var collection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
            var keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

            var hasUnique = {
                isUnique: true,
                errors: []
            };
            var allUniqueValues = {};
            var self = this;

            keys.forEach(function (key) {
                allUniqueValues[key] = [];
                collection.forEach(function (element, index) {
                    var notUnique = self.has(allUniqueValues[key], element[key]);

                    if (notUnique) {
                        hasUnique.errors.push({
                            key: key,
                            index: index,
                            value: element[key]
                        });
                        hasUnique.isUnique = false;
                    } else {
                        allUniqueValues[key].push(element[key]);
                    }
                });
            });

            return hasUnique;
        }
    }]);

    return ObjectParsers;
}();

;

},{}]},{},[300])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbGliL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL3JlZ2V4cC9lc2NhcGUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLW51bWJlci12YWx1ZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4taW5zdGFuY2UuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWNvcHktd2l0aGluLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWZpbGwuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktZnJvbS1pdGVyYWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1tZXRob2RzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXJlZHVjZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2JpbmQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY2xhc3NvZi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2YuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi1zdHJvbmcuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi10by1qc29uLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24td2Vhay5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvcmUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3JlYXRlLXByb3BlcnR5LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2N0eC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kYXRlLXRvLXByaW1pdGl2ZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZWZpbmVkLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1idWcta2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWtleXMuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZXhwb3J0LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZhaWxzLWlzLXJlZ2V4cC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19maXgtcmUtd2tzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZsYWdzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Zvci1vZi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19nbG9iYWwuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faGFzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hpZGUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faHRtbC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ludm9rZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pb2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LWl0ZXIuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtaW50ZWdlci5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1vYmplY3QuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtcmVnZXhwLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItY2FsbC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRlZmluZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRldGVjdC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLXN0ZXAuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlcmF0b3JzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2tleW9mLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2xpYnJhcnkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1leHBtMS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWxvZzFwLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtc2lnbi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tZXRhLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21ldGFkYXRhLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21pY3JvdGFzay5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtYXNzaWduLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1jcmVhdGUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcHMuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWZvcmNlZC1wYW0uanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4tZXh0LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1ncG8uanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXBpZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qtc2FwLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC10by1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vd24ta2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1mbG9hdC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1pbnQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFydGlhbC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXRoLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUtYWxsLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlcGxhY2VyLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NhbWUtdmFsdWUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXByb3RvLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1zcGVjaWVzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC1rZXkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NwZWNpZXMtY29uc3RydWN0b3IuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaWN0LW1ldGhvZC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctYXQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWNvbnRleHQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWh0bWwuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXBhZC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctcmVwZWF0LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy10cmltLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy13cy5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190YXNrLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWluZGV4LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWludGVnZXIuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW9iamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1sZW5ndGguanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1idWZmZXIuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdWlkLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLWV4dC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLnJlZ2V4cC5lc2NhcGUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4uanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZXZlcnkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsbC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXIuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZyb20uanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuam9pbi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5sYXN0LWluZGV4LW9mLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm1hcC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5vZi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNsaWNlLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNvbWUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29ydC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zcGVjaWVzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUubm93LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8taXNvLXN0cmluZy5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24uanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1wcmltaXRpdmUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5oYXMtaW5zdGFuY2UuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXAuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hY29zaC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmFzaW5oLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYXRhbmguanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jYnJ0LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2x6MzIuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jb3NoLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguZXhwbTEuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5mcm91bmQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5oeXBvdC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmltdWwuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxMC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzFwLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpZ24uanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5zaW5oLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgudGFuaC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRydW5jLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5jb25zdHJ1Y3Rvci5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuZXBzaWxvbi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtZmluaXRlLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1pbnRlZ2VyLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1uYW4uanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLXNhZmUtaW50ZWdlci5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWF4LXNhZmUtaW50ZWdlci5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWluLXNhZmUtaW50ZWdlci5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtZmxvYXQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWludC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIudG8tZml4ZWQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1mcm96ZW4uanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLXNlYWxlZC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmtleXMuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnBhcnNlLWZsb2F0LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnBhcnNlLWludC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wcm9taXNlLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuYXBwbHkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuaGFzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuaXMtZXh0ZW5zaWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QucHJldmVudC1leHRlbnNpb25zLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3IuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5tYXRjaC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5zcGxpdC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnNldC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYW5jaG9yLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5iaWcuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5ib2xkLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGguanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZpeGVkLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3IuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mcm9tLWNvZGUtcG9pbnQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcubGluay5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcucmF3LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5yZXBlYXQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3RyaWtlLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdWIuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1cC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcudHJpbS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zeW1ib2wuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmRhdGEtdmlldy5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDMyLWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MTYtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50MTYtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWNsYW1wZWQtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1tYXAuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1zZXQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXNhcC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5lcnJvci5pcy1lcnJvci5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXAudG8tanNvbi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmlhZGRoLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguaW11bGguanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5pc3ViaC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnVtdWxoLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtZ2V0dGVyLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtc2V0dGVyLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5lbnRyaWVzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtZ2V0dGVyLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtc2V0dGVyLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JzZXJ2YWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlZmluZS1tZXRhZGF0YS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlbGV0ZS1tZXRhZGF0YS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS1rZXlzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS1rZXlzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1tZXRhZGF0YS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1vd24tbWV0YWRhdGEuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5tZXRhZGF0YS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zZXQudG8tanNvbi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcuYXQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLm1hdGNoLWFsbC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLWVuZC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy50cmltLWxlZnQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tcmlnaHQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN5c3RlbS5nbG9iYWwuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmltbWVkaWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi50aW1lcnMuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvc2hpbS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJub2RlX21vZHVsZXMvZXZlbnRzL2V2ZW50cy5qcyIsIm5vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJzcmMvYW5ndWxhci9hcHAuY29uZmlnLmpzIiwic3JjL2FuZ3VsYXIvYXBwLmpzIiwic3JjL2FuZ3VsYXIvYXBwLnJ1bi5qcyIsInNyYy9hbmd1bGFyL2NvbnRyb2xsZXJzL2lucHV0LmJ1dHRvbnMuanMiLCJzcmMvYW5ndWxhci9jb250cm9sbGVycy9pbnB1dC5jaGVja2JveC5qcyIsInNyYy9hbmd1bGFyL2NvbnRyb2xsZXJzL2lucHV0LmRhdGUtdGltZS1sb2NhbC5qcyIsInNyYy9hbmd1bGFyL2NvbnRyb2xsZXJzL2lucHV0LmRhdGUuanMiLCJzcmMvYW5ndWxhci9jb250cm9sbGVycy9pbnB1dC5lbWFpbC5qcyIsInNyYy9hbmd1bGFyL2NvbnRyb2xsZXJzL2lucHV0LmZvcm0uanMiLCJzcmMvYW5ndWxhci9jb250cm9sbGVycy9pbnB1dC5udW1iZXIuanMiLCJzcmMvYW5ndWxhci9jb250cm9sbGVycy9pbnB1dC5vcHRpb25zLmpzIiwic3JjL2FuZ3VsYXIvY29udHJvbGxlcnMvaW5wdXQucmFkaW8uanMiLCJzcmMvYW5ndWxhci9jb250cm9sbGVycy9pbnB1dC50ZXh0LmpzIiwic3JjL2FuZ3VsYXIvY29udHJvbGxlcnMvaW5wdXQudGV4dGFyZWEuanMiLCJzcmMvYW5ndWxhci9jb250cm9sbGVycy9pbnB1dC51cmwuanMiLCJzcmMvYW5ndWxhci9jb250cm9sbGVycy9zdGF0ZS5odG1sLmpzIiwic3JjL2FuZ3VsYXIvY29udHJvbGxlcnMvc3RhdGUuaW5wdXQuanMiLCJzcmMvYW5ndWxhci9jb250cm9sbGVycy9zdGF0ZS52aWRlby5qcyIsInNyYy9hbmd1bGFyL2NvbnRyb2xsZXJzL3VpLmFuY2hvci5qcyIsInNyYy9hbmd1bGFyL2NvbnRyb2xsZXJzL3VpLmNhc2NhZGluZy1vcHRpb25zLmpzIiwic3JjL2FuZ3VsYXIvY29udHJvbGxlcnMvdmlkZW8uY29udHJvbHMuc3RhbmRhcmQuanMiLCJzcmMvYW5ndWxhci9jb250cm9sbGVycy92aWRlby5odG1sNS5qcyIsInNyYy9hbmd1bGFyL2NvbnRyb2xsZXJzL3ZpZGVvLnZpbWVvLmpzIiwic3JjL2FuZ3VsYXIvY29udHJvbGxlcnMvdmlkZW8ueW91dHViZS5qcyIsInNyYy9hbmd1bGFyL2RpcmVjdGl2ZXMvaW5wdXQuYnV0dG9ucy5qcyIsInNyYy9hbmd1bGFyL2RpcmVjdGl2ZXMvaW5wdXQuY2hlY2tib3guanMiLCJzcmMvYW5ndWxhci9kaXJlY3RpdmVzL2lucHV0LmRhdGUuanMiLCJzcmMvYW5ndWxhci9kaXJlY3RpdmVzL2lucHV0LmRhdGV0aW1lLWxvY2FsLmpzIiwic3JjL2FuZ3VsYXIvZGlyZWN0aXZlcy9pbnB1dC5lbWFpbC5qcyIsInNyYy9hbmd1bGFyL2RpcmVjdGl2ZXMvaW5wdXQuZm9ybS5qcyIsInNyYy9hbmd1bGFyL2RpcmVjdGl2ZXMvaW5wdXQubnVtYmVyLmpzIiwic3JjL2FuZ3VsYXIvZGlyZWN0aXZlcy9pbnB1dC5vcHRpb25zLmpzIiwic3JjL2FuZ3VsYXIvZGlyZWN0aXZlcy9pbnB1dC5yYWRpby5qcyIsInNyYy9hbmd1bGFyL2RpcmVjdGl2ZXMvaW5wdXQudGV4dC5qcyIsInNyYy9hbmd1bGFyL2RpcmVjdGl2ZXMvaW5wdXQudGV4dGFyZWEuanMiLCJzcmMvYW5ndWxhci9kaXJlY3RpdmVzL2lucHV0LnVybC5qcyIsInNyYy9hbmd1bGFyL2RpcmVjdGl2ZXMvc3RhdGUuaHRtbC5qcyIsInNyYy9hbmd1bGFyL2RpcmVjdGl2ZXMvc3RhdGUuaW5wdXQuanMiLCJzcmMvYW5ndWxhci9kaXJlY3RpdmVzL3N0YXRlLm5hdmlnYXRpb24uanMiLCJzcmMvYW5ndWxhci9kaXJlY3RpdmVzL3N0YXRlLnZpZGVvLmpzIiwic3JjL2FuZ3VsYXIvZGlyZWN0aXZlcy90ZW1wbGF0ZS5hbmltYXRlLWVsZW1lbnQuanMiLCJzcmMvYW5ndWxhci9kaXJlY3RpdmVzL3RlbXBsYXRlLmdvLXRvLXN0YXRlLmpzIiwic3JjL2FuZ3VsYXIvZGlyZWN0aXZlcy90ZW1wbGF0ZS5yYWlzZS1pdnhqcy1ldmVudC5qcyIsInNyYy9hbmd1bGFyL2RpcmVjdGl2ZXMvdGVtcGxhdGUuc2V0LWRhdGEuanMiLCJzcmMvYW5ndWxhci9kaXJlY3RpdmVzL3VpLmFuY2hvci5qcyIsInNyYy9hbmd1bGFyL2RpcmVjdGl2ZXMvdWkuY2FzY2FkaW5nLW9wdGlvbnMuanMiLCJzcmMvYW5ndWxhci9kaXJlY3RpdmVzL3ZpZGVvLmNvbnRyb2xzLnN0YW5kYXJkLmpzIiwic3JjL2FuZ3VsYXIvZGlyZWN0aXZlcy92aWRlby5odG1sNS5qcyIsInNyYy9hbmd1bGFyL2RpcmVjdGl2ZXMvdmlkZW8udmltZW8uanMiLCJzcmMvYW5ndWxhci9kaXJlY3RpdmVzL3ZpZGVvLnlvdXR1YmUuanMiLCJzcmMvYW5ndWxhci9maWx0ZXJzL3N0cmluZy1wYXJzZXJzLmpzIiwic3JjL2FuZ3VsYXIvcHJvdmlkZXJzL2l2eGpzLnNldHVwLmpzIiwic3JjL2FuZ3VsYXIvc2VydmljZXMvYWN0aW9ucy5qcyIsInNyYy9hbmd1bGFyL3NlcnZpY2VzL2J1cy5qcyIsInNyYy9hbmd1bGFyL3NlcnZpY2VzL2h0dHAtaW50ZXJjZXB0b3JzLmpzIiwic3JjL2FuZ3VsYXIvc2VydmljZXMvaW9zLWlubGluZS12aWRlby5qcyIsInNyYy9hbmd1bGFyL3NlcnZpY2VzL3RlbXBsYXRlLXJlbmRlcmVyLmpzIiwic3JjL2FuZ3VsYXIvdXRpbGl0aWVzL2NvbnRhaW5lci1zZXR1cC5qcyIsInNyYy9hbmd1bGFyL3V0aWxpdGllcy9jcmVhdGUtZmFjdG9yeS1mdW5jdGlvbi5qcyIsInNyYy9hbmd1bGFyL3V0aWxpdGllcy9kYXRlLXBhcnNlci5qcyIsInNyYy9hbmd1bGFyL3V0aWxpdGllcy9pbnB1dC1jb250cm9sbGVyLmpzIiwic3JjL2FuZ3VsYXIvdXRpbGl0aWVzL21lc3NhZ2VzLmVycm9yLmpzIiwic3JjL2FuZ3VsYXIvdXRpbGl0aWVzL3N0YXRlLWRhdGEuanMiLCJzcmMvY29uc3RhbnRzL2FuZ3VsYXIuZXZlbnRzLmpzIiwic3JjL2NvbnN0YW50cy9hbmd1bGFyLmpzIiwic3JjL2NvbnN0YW50cy9hdWRpby5ldmVudHMuanMiLCJzcmMvY29uc3RhbnRzL2F1ZGlvLmpzIiwic3JjL2NvbnN0YW50cy9lcnJvcnMuanMiLCJzcmMvY29uc3RhbnRzL2h0dHAuZXZlbnRzLmpzIiwic3JjL2NvbnN0YW50cy9odHRwLmpzIiwic3JjL2NvbnN0YW50cy9pVlhpby5lcnJvcnMuanMiLCJzcmMvY29uc3RhbnRzL2lWWGlvLmpzIiwic3JjL2NvbnN0YW50cy9pVlhqcy5jb25maWcuZXZlbnRzLmpzIiwic3JjL2NvbnN0YW50cy9pVlhqcy5jb25maWcuanMiLCJzcmMvY29uc3RhbnRzL2luZGV4LmpzIiwic3JjL2NvbnN0YW50cy9sb2dnaW5nLmpzIiwic3JjL2NvbnN0YW50cy9yZWdpc3RlcmVkLWNvbnN0YW50cy5qcyIsInNyYy9jb25zdGFudHMvc3RhdGUuZXZlbnRzLmpzIiwic3JjL2NvbnN0YW50cy9zdGF0ZS5qcyIsInNyYy9jb25zdGFudHMvdmlkZW8uZXZlbnRzLmpzIiwic3JjL2NvbnN0YW50cy92aWRlby5qcyIsInNyYy9jb3JlL2FwcC5qcyIsInNyYy9jb3JlL2V2ZW50LXN0b3JlLmpzIiwic3JjL2NvcmUvcHJvY2Vzc29yLmpzIiwic3JjL21vZHVsZXMvYW5pbWF0aW9uL3ZhbmlsbGEvaW5kZXguanMiLCJzcmMvbW9kdWxlcy9hdWRpby9yZWdpc3RlcmVkLW1vZHVsZXMuanMiLCJzcmMvbW9kdWxlcy9hdWRpby90eXBlcy9odG1sNS5qcyIsInNyYy9tb2R1bGVzL2RhdGEvaXZ4LWpzL2FjdGlvbnMuanMiLCJzcmMvbW9kdWxlcy9kYXRhL2l2eC1qcy9ldmFsdWF0b3IuanMiLCJzcmMvbW9kdWxlcy9kYXRhL2l2eC1qcy9pbmRleC5qcyIsInNyYy9tb2R1bGVzL2RhdGEvaXZ4LWpzL3J1bGVzLmpzIiwic3JjL21vZHVsZXMvZGF0YS9wcm9jZXNzb3IuanMiLCJzcmMvbW9kdWxlcy9zZXR1cC5qcyIsInNyYy9tb2R1bGVzL3VpL2RlZmF1bHQvYW5jaG9yLmpzIiwic3JjL21vZHVsZXMvdWkvZGVmYXVsdC9idXR0b25zLmpzIiwic3JjL21vZHVsZXMvdWkvZGVmYXVsdC9jaGVja2JveC5qcyIsInNyYy9tb2R1bGVzL3VpL2RlZmF1bHQvZGF0ZS5qcyIsInNyYy9tb2R1bGVzL3VpL2RlZmF1bHQvZGF0ZXRpbWUtbG9jYWwuanMiLCJzcmMvbW9kdWxlcy91aS9kZWZhdWx0L2VtYWlsLmpzIiwic3JjL21vZHVsZXMvdWkvZGVmYXVsdC9mb3JtLmpzIiwic3JjL21vZHVsZXMvdWkvZGVmYXVsdC9pbmRleC5qcyIsInNyYy9tb2R1bGVzL3VpL2RlZmF1bHQvbWVzc2FnZXMuanMiLCJzcmMvbW9kdWxlcy91aS9kZWZhdWx0L251bWJlci5qcyIsInNyYy9tb2R1bGVzL3VpL2RlZmF1bHQvb3B0aW9ucy5qcyIsInNyYy9tb2R1bGVzL3VpL2RlZmF1bHQvcmFkaW8uanMiLCJzcmMvbW9kdWxlcy91aS9kZWZhdWx0L3N0YXRlLmlucHV0LmpzIiwic3JjL21vZHVsZXMvdWkvZGVmYXVsdC9zdGF0ZS5uYXZpZ2F0aW9uLmpzIiwic3JjL21vZHVsZXMvdWkvZGVmYXVsdC9zdGF0ZS52aWRlby5qcyIsInNyYy9tb2R1bGVzL3VpL2RlZmF1bHQvc3R5bGUuanMiLCJzcmMvbW9kdWxlcy91aS9kZWZhdWx0L3RleHQuanMiLCJzcmMvbW9kdWxlcy91aS9kZWZhdWx0L3RleHRhcmVhLmpzIiwic3JjL21vZHVsZXMvdWkvZGVmYXVsdC91cmwuanMiLCJzcmMvbW9kdWxlcy91aS9kZWZhdWx0L3ZpZGVvLmNvbnRyb2xzLmpzIiwic3JjL21vZHVsZXMvdWkvdXRpbGl0aWVzL2F0dHJpYnV0ZXMuanMiLCJzcmMvbW9kdWxlcy92YWxpZGF0aW9uL2l2eC1qcy12YWxpZGF0aW9uL2NvbmZpZy5qcyIsInNyYy9tb2R1bGVzL3ZhbGlkYXRpb24vaXZ4LWpzLXZhbGlkYXRpb24vY29uZmlnLnN0YXRlcy5qcyIsInNyYy9tb2R1bGVzL3ZhbGlkYXRpb24vaXZ4LWpzLXZhbGlkYXRpb24vZXhwZXJpZW5jZS5qcyIsInNyYy9tb2R1bGVzL3ZhbGlkYXRpb24vaXZ4LWpzLXZhbGlkYXRpb24vaW5kZXguanMiLCJzcmMvbW9kdWxlcy92YWxpZGF0aW9uL2l2eC1qcy12YWxpZGF0aW9uL21vZHVsZXMuanMiLCJzcmMvbW9kdWxlcy92YWxpZGF0aW9uL2l2eC1qcy12YWxpZGF0aW9uL3ZhbGlkYXRpb24uanMiLCJzcmMvbW9kdWxlcy92aWRlby9jb250cm9scy9ldmVudHMuanMiLCJzcmMvbW9kdWxlcy92aWRlby9jb250cm9scy9pbmRleC5qcyIsInNyYy9tb2R1bGVzL3ZpZGVvL3JlZ2lzdGVyZWQtbW9kdWxlcy5qcyIsInNyYy9tb2R1bGVzL3ZpZGVvL3NldHRpbmdzLmpzIiwic3JjL21vZHVsZXMvdmlkZW8vdHlwZXMvaHRtbDUuanMiLCJzcmMvbW9kdWxlcy92aWRlby90eXBlcy92aW1lby5qcyIsInNyYy9tb2R1bGVzL3ZpZGVvL3R5cGVzL3lvdVR1YmUuanMiLCJzcmMvdXRpbGl0aWVzL2Fzc2VydHMuanMiLCJzcmMvdXRpbGl0aWVzL2xvZ2dpbmcuanMiLCJzcmMvdXRpbGl0aWVzL3R5cGUtcGFyc2Vycy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDL0JBO0FBQ0E7O0FDREE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3SUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BGQTtBQUNBOztBQ0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBOztBQ0FBO0FBQ0E7QUFDQTs7QUNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7O0FDRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQkE7QUFDQTtBQUNBOztBQ0ZBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEJBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0JBO0FBQ0E7O0FDREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaFJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RCQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwRUE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pCQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7O0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7QUNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7O0FDRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0NBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdE1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7O0FDQUE7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUMvS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNqcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5U0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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QVEsR0FBUixDQUExQjtBQUNIO0FBQ0osaUJBYkQ7QUFjSCxhQWhCRDs7QUFrQkEsbUJBQU8sU0FBUDtBQUNIOzs7Ozs7QUFDSiIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIvKmlzdGFuYnVsIGlnbm9yZSBuZXh0Ki9cInVzZSBzdHJpY3RcIjtcblxuLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovcmVxdWlyZShcImNvcmUtanMvc2hpbVwiKTtcblxuLyppc3RhbmJ1bCBpZ25vcmUgbmV4dCovcmVxdWlyZShcImJhYmVsLXJlZ2VuZXJhdG9yLXJ1bnRpbWVcIik7XG5cbi8qaXN0YW5idWwgaWdub3JlIG5leHQqL3JlcXVpcmUoXCJjb3JlLWpzL2ZuL3JlZ2V4cC9lc2NhcGVcIik7XG5cbi8qIGVzbGludCBtYXgtbGVuOiAwICovXG5cbmlmIChnbG9iYWwuX2JhYmVsUG9seWZpbGwpIHtcbiAgdGhyb3cgbmV3IEVycm9yKFwib25seSBvbmUgaW5zdGFuY2Ugb2YgYmFiZWwtcG9seWZpbGwgaXMgYWxsb3dlZFwiKTtcbn1cbmdsb2JhbC5fYmFiZWxQb2x5ZmlsbCA9IHRydWU7XG5cbi8vIFNob3VsZCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2U6XG5cbnZhciBERUZJTkVfUFJPUEVSVFkgPSBcImRlZmluZVByb3BlcnR5XCI7XG5mdW5jdGlvbiBkZWZpbmUoTywga2V5LCB2YWx1ZSkge1xuICBPW2tleV0gfHwgT2JqZWN0W0RFRklORV9QUk9QRVJUWV0oTywga2V5LCB7XG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9KTtcbn1cblxuZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIFwicGFkTGVmdFwiLCBcIlwiLnBhZFN0YXJ0KTtcbmRlZmluZShTdHJpbmcucHJvdG90eXBlLCBcInBhZFJpZ2h0XCIsIFwiXCIucGFkRW5kKTtcblxuXCJwb3AscmV2ZXJzZSxzaGlmdCxrZXlzLHZhbHVlcyxlbnRyaWVzLGluZGV4T2YsZXZlcnksc29tZSxmb3JFYWNoLG1hcCxmaWx0ZXIsZmluZCxmaW5kSW5kZXgsaW5jbHVkZXMsam9pbixzbGljZSxjb25jYXQscHVzaCxzcGxpY2UsdW5zaGlmdCxzb3J0LGxhc3RJbmRleE9mLHJlZHVjZSxyZWR1Y2VSaWdodCxjb3B5V2l0aGluLGZpbGxcIi5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIFtdW2tleV0gJiYgZGVmaW5lKEFycmF5LCBrZXksIEZ1bmN0aW9uLmNhbGwuYmluZChbXVtrZXldKSk7XG59KTsiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2NvcmUucmVnZXhwLmVzY2FwZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuUmVnRXhwLmVzY2FwZTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgaWYodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTsiLCJ2YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCBtc2cpe1xuICBpZih0eXBlb2YgaXQgIT0gJ251bWJlcicgJiYgY29mKGl0KSAhPSAnTnVtYmVyJyl0aHJvdyBUeXBlRXJyb3IobXNnKTtcbiAgcmV0dXJuICtpdDtcbn07IiwiLy8gMjIuMS4zLjMxIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxudmFyIFVOU0NPUEFCTEVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3Vuc2NvcGFibGVzJylcbiAgLCBBcnJheVByb3RvICA9IEFycmF5LnByb3RvdHlwZTtcbmlmKEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdID09IHVuZGVmaW5lZClyZXF1aXJlKCcuL19oaWRlJykoQXJyYXlQcm90bywgVU5TQ09QQUJMRVMsIHt9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXtcbiAgQXJyYXlQcm90b1tVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59OyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIENvbnN0cnVjdG9yLCBuYW1lLCBmb3JiaWRkZW5GaWVsZCl7XG4gIGlmKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikgfHwgKGZvcmJpZGRlbkZpZWxkICE9PSB1bmRlZmluZWQgJiYgZm9yYmlkZGVuRmllbGQgaW4gaXQpKXtcbiAgICB0aHJvdyBUeXBlRXJyb3IobmFtZSArICc6IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICB9IHJldHVybiBpdDtcbn07IiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgaWYoIWlzT2JqZWN0KGl0KSl0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07IiwiLy8gMjIuMS4zLjMgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCwgZW5kID0gdGhpcy5sZW5ndGgpXG4ndXNlIHN0cmljdCc7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsIHRvSW5kZXggID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKVxuICAsIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gW10uY29weVdpdGhpbiB8fCBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldC8qPSAwKi8sIHN0YXJ0Lyo9IDAsIGVuZCA9IEBsZW5ndGgqLyl7XG4gIHZhciBPICAgICA9IHRvT2JqZWN0KHRoaXMpXG4gICAgLCBsZW4gICA9IHRvTGVuZ3RoKE8ubGVuZ3RoKVxuICAgICwgdG8gICAgPSB0b0luZGV4KHRhcmdldCwgbGVuKVxuICAgICwgZnJvbSAgPSB0b0luZGV4KHN0YXJ0LCBsZW4pXG4gICAgLCBlbmQgICA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkXG4gICAgLCBjb3VudCA9IE1hdGgubWluKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IHRvSW5kZXgoZW5kLCBsZW4pKSAtIGZyb20sIGxlbiAtIHRvKVxuICAgICwgaW5jICAgPSAxO1xuICBpZihmcm9tIDwgdG8gJiYgdG8gPCBmcm9tICsgY291bnQpe1xuICAgIGluYyAgPSAtMTtcbiAgICBmcm9tICs9IGNvdW50IC0gMTtcbiAgICB0byAgICs9IGNvdW50IC0gMTtcbiAgfVxuICB3aGlsZShjb3VudC0tID4gMCl7XG4gICAgaWYoZnJvbSBpbiBPKU9bdG9dID0gT1tmcm9tXTtcbiAgICBlbHNlIGRlbGV0ZSBPW3RvXTtcbiAgICB0byAgICs9IGluYztcbiAgICBmcm9tICs9IGluYztcbiAgfSByZXR1cm4gTztcbn07IiwiLy8gMjIuMS4zLjYgQXJyYXkucHJvdG90eXBlLmZpbGwodmFsdWUsIHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpXG4ndXNlIHN0cmljdCc7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsIHRvSW5kZXggID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKVxuICAsIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyosIHN0YXJ0ID0gMCwgZW5kID0gQGxlbmd0aCAqLyl7XG4gIHZhciBPICAgICAgPSB0b09iamVjdCh0aGlzKVxuICAgICwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpXG4gICAgLCBhTGVuICAgPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgLCBpbmRleCAgPSB0b0luZGV4KGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBsZW5ndGgpXG4gICAgLCBlbmQgICAgPSBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZFxuICAgICwgZW5kUG9zID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0luZGV4KGVuZCwgbGVuZ3RoKTtcbiAgd2hpbGUoZW5kUG9zID4gaW5kZXgpT1tpbmRleCsrXSA9IHZhbHVlO1xuICByZXR1cm4gTztcbn07IiwidmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXRlciwgSVRFUkFUT1Ipe1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvck9mKGl0ZXIsIGZhbHNlLCByZXN1bHQucHVzaCwgcmVzdWx0LCBJVEVSQVRPUik7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JylcbiAgLCB0b0xlbmd0aCAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKVxuICAsIHRvSW5kZXggICA9IHJlcXVpcmUoJy4vX3RvLWluZGV4Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKElTX0lOQ0xVREVTKXtcbiAgcmV0dXJuIGZ1bmN0aW9uKCR0aGlzLCBlbCwgZnJvbUluZGV4KXtcbiAgICB2YXIgTyAgICAgID0gdG9JT2JqZWN0KCR0aGlzKVxuICAgICAgLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aClcbiAgICAgICwgaW5kZXggID0gdG9JbmRleChmcm9tSW5kZXgsIGxlbmd0aClcbiAgICAgICwgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIGlmKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKXdoaWxlKGxlbmd0aCA+IGluZGV4KXtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIGlmKHZhbHVlICE9IHZhbHVlKXJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I3RvSW5kZXggaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKylpZihJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKXtcbiAgICAgIGlmKE9baW5kZXhdID09PSBlbClyZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59OyIsIi8vIDAgLT4gQXJyYXkjZm9yRWFjaFxuLy8gMSAtPiBBcnJheSNtYXBcbi8vIDIgLT4gQXJyYXkjZmlsdGVyXG4vLyAzIC0+IEFycmF5I3NvbWVcbi8vIDQgLT4gQXJyYXkjZXZlcnlcbi8vIDUgLT4gQXJyYXkjZmluZFxuLy8gNiAtPiBBcnJheSNmaW5kSW5kZXhcbnZhciBjdHggICAgICA9IHJlcXVpcmUoJy4vX2N0eCcpXG4gICwgSU9iamVjdCAgPSByZXF1aXJlKCcuL19pb2JqZWN0JylcbiAgLCB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKVxuICAsIGFzYyAgICAgID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oVFlQRSwgJGNyZWF0ZSl7XG4gIHZhciBJU19NQVAgICAgICAgID0gVFlQRSA9PSAxXG4gICAgLCBJU19GSUxURVIgICAgID0gVFlQRSA9PSAyXG4gICAgLCBJU19TT01FICAgICAgID0gVFlQRSA9PSAzXG4gICAgLCBJU19FVkVSWSAgICAgID0gVFlQRSA9PSA0XG4gICAgLCBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2XG4gICAgLCBOT19IT0xFUyAgICAgID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVhcbiAgICAsIGNyZWF0ZSAgICAgICAgPSAkY3JlYXRlIHx8IGFzYztcbiAgcmV0dXJuIGZ1bmN0aW9uKCR0aGlzLCBjYWxsYmFja2ZuLCB0aGF0KXtcbiAgICB2YXIgTyAgICAgID0gdG9PYmplY3QoJHRoaXMpXG4gICAgICAsIHNlbGYgICA9IElPYmplY3QoTylcbiAgICAgICwgZiAgICAgID0gY3R4KGNhbGxiYWNrZm4sIHRoYXQsIDMpXG4gICAgICAsIGxlbmd0aCA9IHRvTGVuZ3RoKHNlbGYubGVuZ3RoKVxuICAgICAgLCBpbmRleCAgPSAwXG4gICAgICAsIHJlc3VsdCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWRcbiAgICAgICwgdmFsLCByZXM7XG4gICAgZm9yKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKylpZihOT19IT0xFUyB8fCBpbmRleCBpbiBzZWxmKXtcbiAgICAgIHZhbCA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzID0gZih2YWwsIGluZGV4LCBPKTtcbiAgICAgIGlmKFRZUEUpe1xuICAgICAgICBpZihJU19NQVApcmVzdWx0W2luZGV4XSA9IHJlczsgICAgICAgICAgICAvLyBtYXBcbiAgICAgICAgZWxzZSBpZihyZXMpc3dpdGNoKFRZUEUpe1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIHRydWU7ICAgICAgICAgICAgICAgICAgICAvLyBzb21lXG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsOyAgICAgICAgICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAgICAgICAgLy8gZmluZEluZGV4XG4gICAgICAgICAgY2FzZSAyOiByZXN1bHQucHVzaCh2YWwpOyAgICAgICAgICAgICAgIC8vIGZpbHRlclxuICAgICAgICB9IGVsc2UgaWYoSVNfRVZFUlkpcmV0dXJuIGZhbHNlOyAgICAgICAgICAvLyBldmVyeVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogcmVzdWx0O1xuICB9O1xufTsiLCJ2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpXG4gICwgdG9PYmplY3QgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCBJT2JqZWN0ICAgPSByZXF1aXJlKCcuL19pb2JqZWN0JylcbiAgLCB0b0xlbmd0aCAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih0aGF0LCBjYWxsYmFja2ZuLCBhTGVuLCBtZW1vLCBpc1JpZ2h0KXtcbiAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pO1xuICB2YXIgTyAgICAgID0gdG9PYmplY3QodGhhdClcbiAgICAsIHNlbGYgICA9IElPYmplY3QoTylcbiAgICAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKVxuICAgICwgaW5kZXggID0gaXNSaWdodCA/IGxlbmd0aCAtIDEgOiAwXG4gICAgLCBpICAgICAgPSBpc1JpZ2h0ID8gLTEgOiAxO1xuICBpZihhTGVuIDwgMilmb3IoOzspe1xuICAgIGlmKGluZGV4IGluIHNlbGYpe1xuICAgICAgbWVtbyA9IHNlbGZbaW5kZXhdO1xuICAgICAgaW5kZXggKz0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpbmRleCArPSBpO1xuICAgIGlmKGlzUmlnaHQgPyBpbmRleCA8IDAgOiBsZW5ndGggPD0gaW5kZXgpe1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdSZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlJyk7XG4gICAgfVxuICB9XG4gIGZvcig7aXNSaWdodCA/IGluZGV4ID49IDAgOiBsZW5ndGggPiBpbmRleDsgaW5kZXggKz0gaSlpZihpbmRleCBpbiBzZWxmKXtcbiAgICBtZW1vID0gY2FsbGJhY2tmbihtZW1vLCBzZWxmW2luZGV4XSwgaW5kZXgsIE8pO1xuICB9XG4gIHJldHVybiBtZW1vO1xufTsiLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGlzQXJyYXkgID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKVxuICAsIFNQRUNJRVMgID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbCl7XG4gIHZhciBDO1xuICBpZihpc0FycmF5KG9yaWdpbmFsKSl7XG4gICAgQyA9IG9yaWdpbmFsLmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKUMgPSB1bmRlZmluZWQ7XG4gICAgaWYoaXNPYmplY3QoQykpe1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZihDID09PSBudWxsKUMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IHJldHVybiBDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEM7XG59OyIsIi8vIDkuNC4yLjMgQXJyYXlTcGVjaWVzQ3JlYXRlKG9yaWdpbmFsQXJyYXksIGxlbmd0aClcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3JpZ2luYWwsIGxlbmd0aCl7XG4gIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihvcmlnaW5hbCkpKGxlbmd0aCk7XG59OyIsIid1c2Ugc3RyaWN0JztcbnZhciBhRnVuY3Rpb24gID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpXG4gICwgaXNPYmplY3QgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgaW52b2tlICAgICA9IHJlcXVpcmUoJy4vX2ludm9rZScpXG4gICwgYXJyYXlTbGljZSA9IFtdLnNsaWNlXG4gICwgZmFjdG9yaWVzICA9IHt9O1xuXG52YXIgY29uc3RydWN0ID0gZnVuY3Rpb24oRiwgbGVuLCBhcmdzKXtcbiAgaWYoIShsZW4gaW4gZmFjdG9yaWVzKSl7XG4gICAgZm9yKHZhciBuID0gW10sIGkgPSAwOyBpIDwgbGVuOyBpKyspbltpXSA9ICdhWycgKyBpICsgJ10nO1xuICAgIGZhY3Rvcmllc1tsZW5dID0gRnVuY3Rpb24oJ0YsYScsICdyZXR1cm4gbmV3IEYoJyArIG4uam9pbignLCcpICsgJyknKTtcbiAgfSByZXR1cm4gZmFjdG9yaWVzW2xlbl0oRiwgYXJncyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLmJpbmQgfHwgZnVuY3Rpb24gYmluZCh0aGF0IC8qLCBhcmdzLi4uICovKXtcbiAgdmFyIGZuICAgICAgID0gYUZ1bmN0aW9uKHRoaXMpXG4gICAgLCBwYXJ0QXJncyA9IGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICB2YXIgYm91bmQgPSBmdW5jdGlvbigvKiBhcmdzLi4uICovKXtcbiAgICB2YXIgYXJncyA9IHBhcnRBcmdzLmNvbmNhdChhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBib3VuZCA/IGNvbnN0cnVjdChmbiwgYXJncy5sZW5ndGgsIGFyZ3MpIDogaW52b2tlKGZuLCBhcmdzLCB0aGF0KTtcbiAgfTtcbiAgaWYoaXNPYmplY3QoZm4ucHJvdG90eXBlKSlib3VuZC5wcm90b3R5cGUgPSBmbi5wcm90b3R5cGU7XG4gIHJldHVybiBib3VuZDtcbn07IiwiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKVxuICAsIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpXG4gIC8vIEVTMyB3cm9uZyBoZXJlXG4gICwgQVJHID0gY29mKGZ1bmN0aW9uKCl7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24oaXQsIGtleSl7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICB2YXIgTywgVCwgQjtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKFQgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRBRykpID09ICdzdHJpbmcnID8gVFxuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICAgIDogQVJHID8gY29mKE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKEIgPSBjb2YoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiBCO1xufTsiLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59OyIsIid1c2Ugc3RyaWN0JztcbnZhciBkUCAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmZcbiAgLCBjcmVhdGUgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKVxuICAsIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJylcbiAgLCBjdHggICAgICAgICA9IHJlcXVpcmUoJy4vX2N0eCcpXG4gICwgYW5JbnN0YW5jZSAgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpXG4gICwgZGVmaW5lZCAgICAgPSByZXF1aXJlKCcuL19kZWZpbmVkJylcbiAgLCBmb3JPZiAgICAgICA9IHJlcXVpcmUoJy4vX2Zvci1vZicpXG4gICwgJGl0ZXJEZWZpbmUgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpXG4gICwgc3RlcCAgICAgICAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKVxuICAsIHNldFNwZWNpZXMgID0gcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKVxuICAsIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKVxuICAsIGZhc3RLZXkgICAgID0gcmVxdWlyZSgnLi9fbWV0YScpLmZhc3RLZXlcbiAgLCBTSVpFICAgICAgICA9IERFU0NSSVBUT1JTID8gJ19zJyA6ICdzaXplJztcblxudmFyIGdldEVudHJ5ID0gZnVuY3Rpb24odGhhdCwga2V5KXtcbiAgLy8gZmFzdCBjYXNlXG4gIHZhciBpbmRleCA9IGZhc3RLZXkoa2V5KSwgZW50cnk7XG4gIGlmKGluZGV4ICE9PSAnRicpcmV0dXJuIHRoYXQuX2lbaW5kZXhdO1xuICAvLyBmcm96ZW4gb2JqZWN0IGNhc2VcbiAgZm9yKGVudHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubil7XG4gICAgaWYoZW50cnkuayA9PSBrZXkpcmV0dXJuIGVudHJ5O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpe1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbih0aGF0LCBpdGVyYWJsZSl7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIE5BTUUsICdfaScpO1xuICAgICAgdGhhdC5faSA9IGNyZWF0ZShudWxsKTsgLy8gaW5kZXhcbiAgICAgIHRoYXQuX2YgPSB1bmRlZmluZWQ7ICAgIC8vIGZpcnN0IGVudHJ5XG4gICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAgICAvLyBsYXN0IGVudHJ5XG4gICAgICB0aGF0W1NJWkVdID0gMDsgICAgICAgICAvLyBzaXplXG4gICAgICBpZihpdGVyYWJsZSAhPSB1bmRlZmluZWQpZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4xLjMuMSBNYXAucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIC8vIDIzLjIuMy4yIFNldC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCl7XG4gICAgICAgIGZvcih2YXIgdGhhdCA9IHRoaXMsIGRhdGEgPSB0aGF0Ll9pLCBlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pe1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmKGVudHJ5LnApZW50cnkucCA9IGVudHJ5LnAubiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBkZWxldGUgZGF0YVtlbnRyeS5pXTtcbiAgICAgICAgfVxuICAgICAgICB0aGF0Ll9mID0gdGhhdC5fbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhhdFtTSVpFXSA9IDA7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjMgTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuMi4zLjQgU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24oa2V5KXtcbiAgICAgICAgdmFyIHRoYXQgID0gdGhpc1xuICAgICAgICAgICwgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgICBpZihlbnRyeSl7XG4gICAgICAgICAgdmFyIG5leHQgPSBlbnRyeS5uXG4gICAgICAgICAgICAsIHByZXYgPSBlbnRyeS5wO1xuICAgICAgICAgIGRlbGV0ZSB0aGF0Ll9pW2VudHJ5LmldO1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmKHByZXYpcHJldi5uID0gbmV4dDtcbiAgICAgICAgICBpZihuZXh0KW5leHQucCA9IHByZXY7XG4gICAgICAgICAgaWYodGhhdC5fZiA9PSBlbnRyeSl0aGF0Ll9mID0gbmV4dDtcbiAgICAgICAgICBpZih0aGF0Ll9sID09IGVudHJ5KXRoYXQuX2wgPSBwcmV2O1xuICAgICAgICAgIHRoYXRbU0laRV0tLTtcbiAgICAgICAgfSByZXR1cm4gISFlbnRyeTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4yLjMuNiBTZXQucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIC8vIDIzLjEuMy41IE1hcC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qLCB0aGF0ID0gdW5kZWZpbmVkICovKXtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGlzLCBDLCAnZm9yRWFjaCcpO1xuICAgICAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgMylcbiAgICAgICAgICAsIGVudHJ5O1xuICAgICAgICB3aGlsZShlbnRyeSA9IGVudHJ5ID8gZW50cnkubiA6IHRoaXMuX2Ype1xuICAgICAgICAgIGYoZW50cnkudiwgZW50cnkuaywgdGhpcyk7XG4gICAgICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICAgICAgd2hpbGUoZW50cnkgJiYgZW50cnkucillbnRyeSA9IGVudHJ5LnA7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuNyBNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy4yLjMuNyBTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSlcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSl7XG4gICAgICAgIHJldHVybiAhIWdldEVudHJ5KHRoaXMsIGtleSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYoREVTQ1JJUFRPUlMpZFAoQy5wcm90b3R5cGUsICdzaXplJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpe1xuICAgICAgICByZXR1cm4gZGVmaW5lZCh0aGlzW1NJWkVdKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbih0aGF0LCBrZXksIHZhbHVlKXtcbiAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpXG4gICAgICAsIHByZXYsIGluZGV4O1xuICAgIC8vIGNoYW5nZSBleGlzdGluZyBlbnRyeVxuICAgIGlmKGVudHJ5KXtcbiAgICAgIGVudHJ5LnYgPSB2YWx1ZTtcbiAgICAvLyBjcmVhdGUgbmV3IGVudHJ5XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoYXQuX2wgPSBlbnRyeSA9IHtcbiAgICAgICAgaTogaW5kZXggPSBmYXN0S2V5KGtleSwgdHJ1ZSksIC8vIDwtIGluZGV4XG4gICAgICAgIGs6IGtleSwgICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSBrZXlcbiAgICAgICAgdjogdmFsdWUsICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHZhbHVlXG4gICAgICAgIHA6IHByZXYgPSB0aGF0Ll9sLCAgICAgICAgICAgICAvLyA8LSBwcmV2aW91cyBlbnRyeVxuICAgICAgICBuOiB1bmRlZmluZWQsICAgICAgICAgICAgICAgICAgLy8gPC0gbmV4dCBlbnRyeVxuICAgICAgICByOiBmYWxzZSAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gcmVtb3ZlZFxuICAgICAgfTtcbiAgICAgIGlmKCF0aGF0Ll9mKXRoYXQuX2YgPSBlbnRyeTtcbiAgICAgIGlmKHByZXYpcHJldi5uID0gZW50cnk7XG4gICAgICB0aGF0W1NJWkVdKys7XG4gICAgICAvLyBhZGQgdG8gaW5kZXhcbiAgICAgIGlmKGluZGV4ICE9PSAnRicpdGhhdC5faVtpbmRleF0gPSBlbnRyeTtcbiAgICB9IHJldHVybiB0aGF0O1xuICB9LFxuICBnZXRFbnRyeTogZ2V0RW50cnksXG4gIHNldFN0cm9uZzogZnVuY3Rpb24oQywgTkFNRSwgSVNfTUFQKXtcbiAgICAvLyBhZGQgLmtleXMsIC52YWx1ZXMsIC5lbnRyaWVzLCBbQEBpdGVyYXRvcl1cbiAgICAvLyAyMy4xLjMuNCwgMjMuMS4zLjgsIDIzLjEuMy4xMSwgMjMuMS4zLjEyLCAyMy4yLjMuNSwgMjMuMi4zLjgsIDIzLjIuMy4xMCwgMjMuMi4zLjExXG4gICAgJGl0ZXJEZWZpbmUoQywgTkFNRSwgZnVuY3Rpb24oaXRlcmF0ZWQsIGtpbmQpe1xuICAgICAgdGhpcy5fdCA9IGl0ZXJhdGVkOyAgLy8gdGFyZ2V0XG4gICAgICB0aGlzLl9rID0ga2luZDsgICAgICAvLyBraW5kXG4gICAgICB0aGlzLl9sID0gdW5kZWZpbmVkOyAvLyBwcmV2aW91c1xuICAgIH0sIGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgdGhhdCAgPSB0aGlzXG4gICAgICAgICwga2luZCAgPSB0aGF0Ll9rXG4gICAgICAgICwgZW50cnkgPSB0aGF0Ll9sO1xuICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICB3aGlsZShlbnRyeSAmJiBlbnRyeS5yKWVudHJ5ID0gZW50cnkucDtcbiAgICAgIC8vIGdldCBuZXh0IGVudHJ5XG4gICAgICBpZighdGhhdC5fdCB8fCAhKHRoYXQuX2wgPSBlbnRyeSA9IGVudHJ5ID8gZW50cnkubiA6IHRoYXQuX3QuX2YpKXtcbiAgICAgICAgLy8gb3IgZmluaXNoIHRoZSBpdGVyYXRpb25cbiAgICAgICAgdGhhdC5fdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHN0ZXAoMSk7XG4gICAgICB9XG4gICAgICAvLyByZXR1cm4gc3RlcCBieSBraW5kXG4gICAgICBpZihraW5kID09ICdrZXlzJyAgKXJldHVybiBzdGVwKDAsIGVudHJ5LmspO1xuICAgICAgaWYoa2luZCA9PSAndmFsdWVzJylyZXR1cm4gc3RlcCgwLCBlbnRyeS52KTtcbiAgICAgIHJldHVybiBzdGVwKDAsIFtlbnRyeS5rLCBlbnRyeS52XSk7XG4gICAgfSwgSVNfTUFQID8gJ2VudHJpZXMnIDogJ3ZhbHVlcycgLCAhSVNfTUFQLCB0cnVlKTtcblxuICAgIC8vIGFkZCBbQEBzcGVjaWVzXSwgMjMuMS4yLjIsIDIzLjIuMi4yXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcbiAgfVxufTsiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKVxuICAsIGZyb20gICAgPSByZXF1aXJlKCcuL19hcnJheS1mcm9tLWl0ZXJhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKE5BTUUpe1xuICByZXR1cm4gZnVuY3Rpb24gdG9KU09OKCl7XG4gICAgaWYoY2xhc3NvZih0aGlzKSAhPSBOQU1FKXRocm93IFR5cGVFcnJvcihOQU1FICsgXCIjdG9KU09OIGlzbid0IGdlbmVyaWNcIik7XG4gICAgcmV0dXJuIGZyb20odGhpcyk7XG4gIH07XG59OyIsIid1c2Ugc3RyaWN0JztcbnZhciByZWRlZmluZUFsbCAgICAgICA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpXG4gICwgZ2V0V2VhayAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhJykuZ2V0V2Vha1xuICAsIGFuT2JqZWN0ICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBpc09iamVjdCAgICAgICAgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgYW5JbnN0YW5jZSAgICAgICAgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpXG4gICwgZm9yT2YgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19mb3Itb2YnKVxuICAsIGNyZWF0ZUFycmF5TWV0aG9kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpXG4gICwgJGhhcyAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIGFycmF5RmluZCAgICAgICAgID0gY3JlYXRlQXJyYXlNZXRob2QoNSlcbiAgLCBhcnJheUZpbmRJbmRleCAgICA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpXG4gICwgaWQgICAgICAgICAgICAgICAgPSAwO1xuXG4vLyBmYWxsYmFjayBmb3IgdW5jYXVnaHQgZnJvemVuIGtleXNcbnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24odGhhdCl7XG4gIHJldHVybiB0aGF0Ll9sIHx8ICh0aGF0Ll9sID0gbmV3IFVuY2F1Z2h0RnJvemVuU3RvcmUpO1xufTtcbnZhciBVbmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24oKXtcbiAgdGhpcy5hID0gW107XG59O1xudmFyIGZpbmRVbmNhdWdodEZyb3plbiA9IGZ1bmN0aW9uKHN0b3JlLCBrZXkpe1xuICByZXR1cm4gYXJyYXlGaW5kKHN0b3JlLmEsIGZ1bmN0aW9uKGl0KXtcbiAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcbiAgfSk7XG59O1xuVW5jYXVnaHRGcm96ZW5TdG9yZS5wcm90b3R5cGUgPSB7XG4gIGdldDogZnVuY3Rpb24oa2V5KXtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZihlbnRyeSlyZXR1cm4gZW50cnlbMV07XG4gIH0sXG4gIGhhczogZnVuY3Rpb24oa2V5KXtcbiAgICByZXR1cm4gISFmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihrZXksIHZhbHVlKXtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZihlbnRyeSllbnRyeVsxXSA9IHZhbHVlO1xuICAgIGVsc2UgdGhpcy5hLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSxcbiAgJ2RlbGV0ZSc6IGZ1bmN0aW9uKGtleSl7XG4gICAgdmFyIGluZGV4ID0gYXJyYXlGaW5kSW5kZXgodGhpcy5hLCBmdW5jdGlvbihpdCl7XG4gICAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcbiAgICB9KTtcbiAgICBpZih+aW5kZXgpdGhpcy5hLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuICEhfmluZGV4O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpe1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbih0aGF0LCBpdGVyYWJsZSl7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIE5BTUUsICdfaScpO1xuICAgICAgdGhhdC5faSA9IGlkKys7ICAgICAgLy8gY29sbGVjdGlvbiBpZFxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgLy8gbGVhayBzdG9yZSBmb3IgdW5jYXVnaHQgZnJvemVuIG9iamVjdHNcbiAgICAgIGlmKGl0ZXJhYmxlICE9IHVuZGVmaW5lZClmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgfSk7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIHtcbiAgICAgIC8vIDIzLjMuMy4yIFdlYWtNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpXG4gICAgICAvLyAyMy40LjMuMyBXZWFrU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24oa2V5KXtcbiAgICAgICAgaWYoIWlzT2JqZWN0KGtleSkpcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYoZGF0YSA9PT0gdHJ1ZSlyZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh0aGlzKVsnZGVsZXRlJ10oa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKSAmJiBkZWxldGUgZGF0YVt0aGlzLl9pXTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4zLjMuNCBXZWFrTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuNC4zLjQgV2Vha1NldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KXtcbiAgICAgICAgaWYoIWlzT2JqZWN0KGtleSkpcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYoZGF0YSA9PT0gdHJ1ZSlyZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh0aGlzKS5oYXMoa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbih0aGF0LCBrZXksIHZhbHVlKXtcbiAgICB2YXIgZGF0YSA9IGdldFdlYWsoYW5PYmplY3Qoa2V5KSwgdHJ1ZSk7XG4gICAgaWYoZGF0YSA9PT0gdHJ1ZSl1bmNhdWdodEZyb3plblN0b3JlKHRoYXQpLnNldChrZXksIHZhbHVlKTtcbiAgICBlbHNlIGRhdGFbdGhhdC5faV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhhdDtcbiAgfSxcbiAgdWZzdG9yZTogdW5jYXVnaHRGcm96ZW5TdG9yZVxufTsiLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsICAgICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsICRleHBvcnQgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCByZWRlZmluZSAgICAgICAgICA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJylcbiAgLCByZWRlZmluZUFsbCAgICAgICA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpXG4gICwgbWV0YSAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhJylcbiAgLCBmb3JPZiAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2Zvci1vZicpXG4gICwgYW5JbnN0YW5jZSAgICAgICAgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpXG4gICwgaXNPYmplY3QgICAgICAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGZhaWxzICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKVxuICAsICRpdGVyRGV0ZWN0ICAgICAgID0gcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKVxuICAsIHNldFRvU3RyaW5nVGFnICAgID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKVxuICAsIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKE5BTUUsIHdyYXBwZXIsIG1ldGhvZHMsIGNvbW1vbiwgSVNfTUFQLCBJU19XRUFLKXtcbiAgdmFyIEJhc2UgID0gZ2xvYmFsW05BTUVdXG4gICAgLCBDICAgICA9IEJhc2VcbiAgICAsIEFEREVSID0gSVNfTUFQID8gJ3NldCcgOiAnYWRkJ1xuICAgICwgcHJvdG8gPSBDICYmIEMucHJvdG90eXBlXG4gICAgLCBPICAgICA9IHt9O1xuICB2YXIgZml4TWV0aG9kID0gZnVuY3Rpb24oS0VZKXtcbiAgICB2YXIgZm4gPSBwcm90b1tLRVldO1xuICAgIHJlZGVmaW5lKHByb3RvLCBLRVksXG4gICAgICBLRVkgPT0gJ2RlbGV0ZScgPyBmdW5jdGlvbihhKXtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdoYXMnID8gZnVuY3Rpb24gaGFzKGEpe1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2dldCcgPyBmdW5jdGlvbiBnZXQoYSl7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IHVuZGVmaW5lZCA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2FkZCcgPyBmdW5jdGlvbiBhZGQoYSl7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTsgcmV0dXJuIHRoaXM7IH1cbiAgICAgICAgOiBmdW5jdGlvbiBzZXQoYSwgYil7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhLCBiKTsgcmV0dXJuIHRoaXM7IH1cbiAgICApO1xuICB9O1xuICBpZih0eXBlb2YgQyAhPSAnZnVuY3Rpb24nIHx8ICEoSVNfV0VBSyB8fCBwcm90by5mb3JFYWNoICYmICFmYWlscyhmdW5jdGlvbigpe1xuICAgIG5ldyBDKCkuZW50cmllcygpLm5leHQoKTtcbiAgfSkpKXtcbiAgICAvLyBjcmVhdGUgY29sbGVjdGlvbiBjb25zdHJ1Y3RvclxuICAgIEMgPSBjb21tb24uZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUik7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICAgIG1ldGEuTkVFRCA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGluc3RhbmNlICAgICAgICAgICAgID0gbmV3IENcbiAgICAgIC8vIGVhcmx5IGltcGxlbWVudGF0aW9ucyBub3Qgc3VwcG9ydHMgY2hhaW5pbmdcbiAgICAgICwgSEFTTlRfQ0hBSU5JTkcgICAgICAgPSBpbnN0YW5jZVtBRERFUl0oSVNfV0VBSyA/IHt9IDogLTAsIDEpICE9IGluc3RhbmNlXG4gICAgICAvLyBWOCB+ICBDaHJvbWl1bSA0MC0gd2Vhay1jb2xsZWN0aW9ucyB0aHJvd3Mgb24gcHJpbWl0aXZlcywgYnV0IHNob3VsZCByZXR1cm4gZmFsc2VcbiAgICAgICwgVEhST1dTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbigpeyBpbnN0YW5jZS5oYXMoMSk7IH0pXG4gICAgICAvLyBtb3N0IGVhcmx5IGltcGxlbWVudGF0aW9ucyBkb2Vzbid0IHN1cHBvcnRzIGl0ZXJhYmxlcywgbW9zdCBtb2Rlcm4gLSBub3QgY2xvc2UgaXQgY29ycmVjdGx5XG4gICAgICAsIEFDQ0VQVF9JVEVSQUJMRVMgICAgID0gJGl0ZXJEZXRlY3QoZnVuY3Rpb24oaXRlcil7IG5ldyBDKGl0ZXIpOyB9KSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgLy8gZm9yIGVhcmx5IGltcGxlbWVudGF0aW9ucyAtMCBhbmQgKzAgbm90IHRoZSBzYW1lXG4gICAgICAsIEJVR0dZX1pFUk8gPSAhSVNfV0VBSyAmJiBmYWlscyhmdW5jdGlvbigpe1xuICAgICAgICAvLyBWOCB+IENocm9taXVtIDQyLSBmYWlscyBvbmx5IHdpdGggNSsgZWxlbWVudHNcbiAgICAgICAgdmFyICRpbnN0YW5jZSA9IG5ldyBDKClcbiAgICAgICAgICAsIGluZGV4ICAgICA9IDU7XG4gICAgICAgIHdoaWxlKGluZGV4LS0pJGluc3RhbmNlW0FEREVSXShpbmRleCwgaW5kZXgpO1xuICAgICAgICByZXR1cm4gISRpbnN0YW5jZS5oYXMoLTApO1xuICAgICAgfSk7XG4gICAgaWYoIUFDQ0VQVF9JVEVSQUJMRVMpeyBcbiAgICAgIEMgPSB3cmFwcGVyKGZ1bmN0aW9uKHRhcmdldCwgaXRlcmFibGUpe1xuICAgICAgICBhbkluc3RhbmNlKHRhcmdldCwgQywgTkFNRSk7XG4gICAgICAgIHZhciB0aGF0ID0gaW5oZXJpdElmUmVxdWlyZWQobmV3IEJhc2UsIHRhcmdldCwgQyk7XG4gICAgICAgIGlmKGl0ZXJhYmxlICE9IHVuZGVmaW5lZClmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgICAgIHJldHVybiB0aGF0O1xuICAgICAgfSk7XG4gICAgICBDLnByb3RvdHlwZSA9IHByb3RvO1xuICAgICAgcHJvdG8uY29uc3RydWN0b3IgPSBDO1xuICAgIH1cbiAgICBpZihUSFJPV1NfT05fUFJJTUlUSVZFUyB8fCBCVUdHWV9aRVJPKXtcbiAgICAgIGZpeE1ldGhvZCgnZGVsZXRlJyk7XG4gICAgICBmaXhNZXRob2QoJ2hhcycpO1xuICAgICAgSVNfTUFQICYmIGZpeE1ldGhvZCgnZ2V0Jyk7XG4gICAgfVxuICAgIGlmKEJVR0dZX1pFUk8gfHwgSEFTTlRfQ0hBSU5JTkcpZml4TWV0aG9kKEFEREVSKTtcbiAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIHNob3VsZCBub3QgY29udGFpbnMgLmNsZWFyIG1ldGhvZFxuICAgIGlmKElTX1dFQUsgJiYgcHJvdG8uY2xlYXIpZGVsZXRlIHByb3RvLmNsZWFyO1xuICB9XG5cbiAgc2V0VG9TdHJpbmdUYWcoQywgTkFNRSk7XG5cbiAgT1tOQU1FXSA9IEM7XG4gICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKEMgIT0gQmFzZSksIE8pO1xuXG4gIGlmKCFJU19XRUFLKWNvbW1vbi5zZXRTdHJvbmcoQywgTkFNRSwgSVNfTUFQKTtcblxuICByZXR1cm4gQztcbn07IiwidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHt2ZXJzaW9uOiAnMi40LjAnfTtcbmlmKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKVxuICAsIGNyZWF0ZURlc2MgICAgICA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvYmplY3QsIGluZGV4LCB2YWx1ZSl7XG4gIGlmKGluZGV4IGluIG9iamVjdCkkZGVmaW5lUHJvcGVydHkuZihvYmplY3QsIGluZGV4LCBjcmVhdGVEZXNjKDAsIHZhbHVlKSk7XG4gIGVsc2Ugb2JqZWN0W2luZGV4XSA9IHZhbHVlO1xufTsiLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGZuLCB0aGF0LCBsZW5ndGgpe1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZih0aGF0ID09PSB1bmRlZmluZWQpcmV0dXJuIGZuO1xuICBzd2l0Y2gobGVuZ3RoKXtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbihhKXtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24oYSwgYil7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uKGEsIGIsIGMpe1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24oLyogLi4uYXJncyAqLyl7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59OyIsIid1c2Ugc3RyaWN0JztcbnZhciBhbk9iamVjdCAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKVxuICAsIE5VTUJFUiAgICAgID0gJ251bWJlcic7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaGludCl7XG4gIGlmKGhpbnQgIT09ICdzdHJpbmcnICYmIGhpbnQgIT09IE5VTUJFUiAmJiBoaW50ICE9PSAnZGVmYXVsdCcpdGhyb3cgVHlwZUVycm9yKCdJbmNvcnJlY3QgaGludCcpO1xuICByZXR1cm4gdG9QcmltaXRpdmUoYW5PYmplY3QodGhpcyksIGhpbnQgIT0gTlVNQkVSKTtcbn07IiwiLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICBpZihpdCA9PSB1bmRlZmluZWQpdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59OyIsIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7Z2V0OiBmdW5jdGlvbigpeyByZXR1cm4gNzsgfX0pLmEgIT0gNztcbn0pOyIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudFxuICAvLyBpbiBvbGQgSUUgdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCdcbiAgLCBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTsiLCIvLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgJ2NvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZidcbikuc3BsaXQoJywnKTsiLCIvLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9sc1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpXG4gICwgZ09QUyAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJylcbiAgLCBwSUUgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHZhciByZXN1bHQgICAgID0gZ2V0S2V5cyhpdClcbiAgICAsIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIGlmKGdldFN5bWJvbHMpe1xuICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdClcbiAgICAgICwgaXNFbnVtICA9IHBJRS5mXG4gICAgICAsIGkgICAgICAgPSAwXG4gICAgICAsIGtleTtcbiAgICB3aGlsZShzeW1ib2xzLmxlbmd0aCA+IGkpaWYoaXNFbnVtLmNhbGwoaXQsIGtleSA9IHN5bWJvbHNbaSsrXSkpcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTsiLCJ2YXIgZ2xvYmFsICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBjb3JlICAgICAgPSByZXF1aXJlKCcuL19jb3JlJylcbiAgLCBoaWRlICAgICAgPSByZXF1aXJlKCcuL19oaWRlJylcbiAgLCByZWRlZmluZSAgPSByZXF1aXJlKCcuL19yZWRlZmluZScpXG4gICwgY3R4ICAgICAgID0gcmVxdWlyZSgnLi9fY3R4JylcbiAgLCBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbih0eXBlLCBuYW1lLCBzb3VyY2Upe1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRlxuICAgICwgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuR1xuICAgICwgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuU1xuICAgICwgSVNfUFJPVE8gID0gdHlwZSAmICRleHBvcnQuUFxuICAgICwgSVNfQklORCAgID0gdHlwZSAmICRleHBvcnQuQlxuICAgICwgdGFyZ2V0ICAgID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIHx8IChnbG9iYWxbbmFtZV0gPSB7fSkgOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdXG4gICAgLCBleHBvcnRzICAgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KVxuICAgICwgZXhwUHJvdG8gID0gZXhwb3J0c1tQUk9UT1RZUEVdIHx8IChleHBvcnRzW1BST1RPVFlQRV0gPSB7fSlcbiAgICAsIGtleSwgb3duLCBvdXQsIGV4cDtcbiAgaWYoSVNfR0xPQkFMKXNvdXJjZSA9IG5hbWU7XG4gIGZvcihrZXkgaW4gc291cmNlKXtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gKG93biA/IHRhcmdldCA6IHNvdXJjZSlba2V5XTtcbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIGV4cCA9IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICBpZih0YXJnZXQpcmVkZWZpbmUodGFyZ2V0LCBrZXksIG91dCwgdHlwZSAmICRleHBvcnQuVSk7XG4gICAgLy8gZXhwb3J0XG4gICAgaWYoZXhwb3J0c1trZXldICE9IG91dCloaWRlKGV4cG9ydHMsIGtleSwgZXhwKTtcbiAgICBpZihJU19QUk9UTyAmJiBleHBQcm90b1trZXldICE9IG91dClleHBQcm90b1trZXldID0gb3V0O1xuICB9XG59O1xuZ2xvYmFsLmNvcmUgPSBjb3JlO1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YCBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDsiLCJ2YXIgTUFUQ0ggPSByZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oS0VZKXtcbiAgdmFyIHJlID0gLy4vO1xuICB0cnkge1xuICAgICcvLi8nW0tFWV0ocmUpO1xuICB9IGNhdGNoKGUpe1xuICAgIHRyeSB7XG4gICAgICByZVtNQVRDSF0gPSBmYWxzZTtcbiAgICAgIHJldHVybiAhJy8uLydbS0VZXShyZSk7XG4gICAgfSBjYXRjaChmKXsgLyogZW1wdHkgKi8gfVxuICB9IHJldHVybiB0cnVlO1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGV4ZWMpe1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaChlKXtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTsiLCIndXNlIHN0cmljdCc7XG52YXIgaGlkZSAgICAgPSByZXF1aXJlKCcuL19oaWRlJylcbiAgLCByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJylcbiAgLCBmYWlscyAgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJylcbiAgLCBkZWZpbmVkICA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKVxuICAsIHdrcyAgICAgID0gcmVxdWlyZSgnLi9fd2tzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oS0VZLCBsZW5ndGgsIGV4ZWMpe1xuICB2YXIgU1lNQk9MICAgPSB3a3MoS0VZKVxuICAgICwgZm5zICAgICAgPSBleGVjKGRlZmluZWQsIFNZTUJPTCwgJydbS0VZXSlcbiAgICAsIHN0cmZuICAgID0gZm5zWzBdXG4gICAgLCByeGZuICAgICA9IGZuc1sxXTtcbiAgaWYoZmFpbHMoZnVuY3Rpb24oKXtcbiAgICB2YXIgTyA9IHt9O1xuICAgIE9bU1lNQk9MXSA9IGZ1bmN0aW9uKCl7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pKXtcbiAgICByZWRlZmluZShTdHJpbmcucHJvdG90eXBlLCBLRVksIHN0cmZuKTtcbiAgICBoaWRlKFJlZ0V4cC5wcm90b3R5cGUsIFNZTUJPTCwgbGVuZ3RoID09IDJcbiAgICAgIC8vIDIxLjIuNS44IFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXShzdHJpbmcsIHJlcGxhY2VWYWx1ZSlcbiAgICAgIC8vIDIxLjIuNS4xMSBSZWdFeHAucHJvdG90eXBlW0BAc3BsaXRdKHN0cmluZywgbGltaXQpXG4gICAgICA/IGZ1bmN0aW9uKHN0cmluZywgYXJnKXsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMsIGFyZyk7IH1cbiAgICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKVxuICAgICAgLy8gMjEuMi41LjkgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF0oc3RyaW5nKVxuICAgICAgOiBmdW5jdGlvbihzdHJpbmcpeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcyk7IH1cbiAgICApO1xuICB9XG59OyIsIid1c2Ugc3RyaWN0Jztcbi8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKXtcbiAgdmFyIHRoYXQgICA9IGFuT2JqZWN0KHRoaXMpXG4gICAgLCByZXN1bHQgPSAnJztcbiAgaWYodGhhdC5nbG9iYWwpICAgICByZXN1bHQgKz0gJ2cnO1xuICBpZih0aGF0Lmlnbm9yZUNhc2UpIHJlc3VsdCArPSAnaSc7XG4gIGlmKHRoYXQubXVsdGlsaW5lKSAgcmVzdWx0ICs9ICdtJztcbiAgaWYodGhhdC51bmljb2RlKSAgICByZXN1bHQgKz0gJ3UnO1xuICBpZih0aGF0LnN0aWNreSkgICAgIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59OyIsInZhciBjdHggICAgICAgICA9IHJlcXVpcmUoJy4vX2N0eCcpXG4gICwgY2FsbCAgICAgICAgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKVxuICAsIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpXG4gICwgYW5PYmplY3QgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIHRvTGVuZ3RoICAgID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgLCBnZXRJdGVyRm4gICA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJylcbiAgLCBCUkVBSyAgICAgICA9IHt9XG4gICwgUkVUVVJOICAgICAgPSB7fTtcbnZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdGVyYWJsZSwgZW50cmllcywgZm4sIHRoYXQsIElURVJBVE9SKXtcbiAgdmFyIGl0ZXJGbiA9IElURVJBVE9SID8gZnVuY3Rpb24oKXsgcmV0dXJuIGl0ZXJhYmxlOyB9IDogZ2V0SXRlckZuKGl0ZXJhYmxlKVxuICAgICwgZiAgICAgID0gY3R4KGZuLCB0aGF0LCBlbnRyaWVzID8gMiA6IDEpXG4gICAgLCBpbmRleCAgPSAwXG4gICAgLCBsZW5ndGgsIHN0ZXAsIGl0ZXJhdG9yLCByZXN1bHQ7XG4gIGlmKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJyl0aHJvdyBUeXBlRXJyb3IoaXRlcmFibGUgKyAnIGlzIG5vdCBpdGVyYWJsZSEnKTtcbiAgLy8gZmFzdCBjYXNlIGZvciBhcnJheXMgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yXG4gIGlmKGlzQXJyYXlJdGVyKGl0ZXJGbikpZm9yKGxlbmd0aCA9IHRvTGVuZ3RoKGl0ZXJhYmxlLmxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKXtcbiAgICByZXN1bHQgPSBlbnRyaWVzID8gZihhbk9iamVjdChzdGVwID0gaXRlcmFibGVbaW5kZXhdKVswXSwgc3RlcFsxXSkgOiBmKGl0ZXJhYmxlW2luZGV4XSk7XG4gICAgaWYocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTilyZXR1cm4gcmVzdWx0O1xuICB9IGVsc2UgZm9yKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoaXRlcmFibGUpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7ICl7XG4gICAgcmVzdWx0ID0gY2FsbChpdGVyYXRvciwgZiwgc3RlcC52YWx1ZSwgZW50cmllcyk7XG4gICAgaWYocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTilyZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuZXhwb3J0cy5CUkVBSyAgPSBCUkVBSztcbmV4cG9ydHMuUkVUVVJOID0gUkVUVVJOOyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGYgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYodHlwZW9mIF9fZyA9PSAnbnVtYmVyJylfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWYiLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIGtleSl7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTsiLCJ2YXIgZFAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpXG4gICwgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGZ1bmN0aW9uKG9iamVjdCwga2V5LCB2YWx1ZSl7XG4gIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24ob2JqZWN0LCBrZXksIHZhbHVlKXtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7IiwibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywge2dldDogZnVuY3Rpb24oKXsgcmV0dXJuIDc7IH19KS5hICE9IDc7XG59KTsiLCJ2YXIgaXNPYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih0aGF0LCB0YXJnZXQsIEMpe1xuICB2YXIgUCwgUyA9IHRhcmdldC5jb25zdHJ1Y3RvcjtcbiAgaWYoUyAhPT0gQyAmJiB0eXBlb2YgUyA9PSAnZnVuY3Rpb24nICYmIChQID0gUy5wcm90b3R5cGUpICE9PSBDLnByb3RvdHlwZSAmJiBpc09iamVjdChQKSAmJiBzZXRQcm90b3R5cGVPZil7XG4gICAgc2V0UHJvdG90eXBlT2YodGhhdCwgUCk7XG4gIH0gcmV0dXJuIHRoYXQ7XG59OyIsIi8vIGZhc3QgYXBwbHksIGh0dHA6Ly9qc3BlcmYubG5raXQuY29tL2Zhc3QtYXBwbHkvNVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihmbiwgYXJncywgdGhhdCl7XG4gIHZhciB1biA9IHRoYXQgPT09IHVuZGVmaW5lZDtcbiAgc3dpdGNoKGFyZ3MubGVuZ3RoKXtcbiAgICBjYXNlIDA6IHJldHVybiB1biA/IGZuKClcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCk7XG4gICAgY2FzZSAxOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgIGNhc2UgMzogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgY2FzZSA0OiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgfSByZXR1cm4gICAgICAgICAgICAgIGZuLmFwcGx5KHRoYXQsIGFyZ3MpO1xufTsiLCIvLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xufTsiLCIvLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG52YXIgSXRlcmF0b3JzICA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpXG4gICwgSVRFUkFUT1IgICA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpXG4gICwgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG9bSVRFUkFUT1JdID09PSBpdCk7XG59OyIsIi8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpe1xuICByZXR1cm4gY29mKGFyZykgPT0gJ0FycmF5Jztcbn07IiwiLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGZsb29yICAgID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNJbnRlZ2VyKGl0KXtcbiAgcmV0dXJuICFpc09iamVjdChpdCkgJiYgaXNGaW5pdGUoaXQpICYmIGZsb29yKGl0KSA9PT0gaXQ7XG59OyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTsiLCIvLyA3LjIuOCBJc1JlZ0V4cChhcmd1bWVudClcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgY29mICAgICAgPSByZXF1aXJlKCcuL19jb2YnKVxuICAsIE1BVENIICAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgdmFyIGlzUmVnRXhwO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmICgoaXNSZWdFeHAgPSBpdFtNQVRDSF0pICE9PSB1bmRlZmluZWQgPyAhIWlzUmVnRXhwIDogY29mKGl0KSA9PSAnUmVnRXhwJyk7XG59OyIsIi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3JcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdGVyYXRvciwgZm4sIHZhbHVlLCBlbnRyaWVzKXtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZW50cmllcyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICB9IGNhdGNoKGUpe1xuICAgIHZhciByZXQgPSBpdGVyYXRvclsncmV0dXJuJ107XG4gICAgaWYocmV0ICE9PSB1bmRlZmluZWQpYW5PYmplY3QocmV0LmNhbGwoaXRlcmF0b3IpKTtcbiAgICB0aHJvdyBlO1xuICB9XG59OyIsIid1c2Ugc3RyaWN0JztcbnZhciBjcmVhdGUgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKVxuICAsIGRlc2NyaXB0b3IgICAgID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpXG4gICwgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpXG4gICwgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2hpZGUnKShJdGVyYXRvclByb3RvdHlwZSwgcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzOyB9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCl7XG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwge25leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCl9KTtcbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7XG59OyIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZICAgICAgICA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKVxuICAsICRleHBvcnQgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCByZWRlZmluZSAgICAgICA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJylcbiAgLCBoaWRlICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKVxuICAsIGhhcyAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCBJdGVyYXRvcnMgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpXG4gICwgJGl0ZXJDcmVhdGUgICAgPSByZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpXG4gICwgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpXG4gICwgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJylcbiAgLCBJVEVSQVRPUiAgICAgICA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpXG4gICwgQlVHR1kgICAgICAgICAgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSkgLy8gU2FmYXJpIGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxuICAsIEZGX0lURVJBVE9SICAgID0gJ0BAaXRlcmF0b3InXG4gICwgS0VZUyAgICAgICAgICAgPSAna2V5cydcbiAgLCBWQUxVRVMgICAgICAgICA9ICd2YWx1ZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCl7XG4gICRpdGVyQ3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcbiAgdmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uKGtpbmQpe1xuICAgIGlmKCFCVUdHWSAmJiBraW5kIGluIHByb3RvKXJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2goa2luZCl7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCl7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKXsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgfTtcbiAgdmFyIFRBRyAgICAgICAgPSBOQU1FICsgJyBJdGVyYXRvcidcbiAgICAsIERFRl9WQUxVRVMgPSBERUZBVUxUID09IFZBTFVFU1xuICAgICwgVkFMVUVTX0JVRyA9IGZhbHNlXG4gICAgLCBwcm90byAgICAgID0gQmFzZS5wcm90b3R5cGVcbiAgICAsICRuYXRpdmUgICAgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF1cbiAgICAsICRkZWZhdWx0ICAgPSAkbmF0aXZlIHx8IGdldE1ldGhvZChERUZBVUxUKVxuICAgICwgJGVudHJpZXMgICA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWRcbiAgICAsICRhbnlOYXRpdmUgPSBOQU1FID09ICdBcnJheScgPyBwcm90by5lbnRyaWVzIHx8ICRuYXRpdmUgOiAkbmF0aXZlXG4gICAgLCBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xuICAvLyBGaXggbmF0aXZlXG4gIGlmKCRhbnlOYXRpdmUpe1xuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoJGFueU5hdGl2ZS5jYWxsKG5ldyBCYXNlKSk7XG4gICAgaWYoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUpe1xuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JQcm90b3R5cGUsIFRBRywgdHJ1ZSk7XG4gICAgICAvLyBmaXggZm9yIHNvbWUgb2xkIGVuZ2luZXNcbiAgICAgIGlmKCFMSUJSQVJZICYmICFoYXMoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SKSloaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgfVxuICB9XG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYoREVGX1ZBTFVFUyAmJiAkbmF0aXZlICYmICRuYXRpdmUubmFtZSAhPT0gVkFMVUVTKXtcbiAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcbiAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZigoIUxJQlJBUlkgfHwgRk9SQ0VEKSAmJiAoQlVHR1kgfHwgVkFMVUVTX0JVRyB8fCAhcHJvdG9bSVRFUkFUT1JdKSl7XG4gICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTtcbiAgfVxuICAvLyBQbHVnIGZvciBsaWJyYXJ5XG4gIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xuICBJdGVyYXRvcnNbVEFHXSAgPSByZXR1cm5UaGlzO1xuICBpZihERUZBVUxUKXtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiAgREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiAgICBJU19TRVQgICAgID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiAkZW50cmllc1xuICAgIH07XG4gICAgaWYoRk9SQ0VEKWZvcihrZXkgaW4gbWV0aG9kcyl7XG4gICAgICBpZighKGtleSBpbiBwcm90bykpcmVkZWZpbmUocHJvdG8sIGtleSwgbWV0aG9kc1trZXldKTtcbiAgICB9IGVsc2UgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoQlVHR1kgfHwgVkFMVUVTX0JVRyksIE5BTUUsIG1ldGhvZHMpO1xuICB9XG4gIHJldHVybiBtZXRob2RzO1xufTsiLCJ2YXIgSVRFUkFUT1IgICAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJylcbiAgLCBTQUZFX0NMT1NJTkcgPSBmYWxzZTtcblxudHJ5IHtcbiAgdmFyIHJpdGVyID0gWzddW0lURVJBVE9SXSgpO1xuICByaXRlclsncmV0dXJuJ10gPSBmdW5jdGlvbigpeyBTQUZFX0NMT1NJTkcgPSB0cnVlOyB9O1xuICBBcnJheS5mcm9tKHJpdGVyLCBmdW5jdGlvbigpeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihleGVjLCBza2lwQ2xvc2luZyl7XG4gIGlmKCFza2lwQ2xvc2luZyAmJiAhU0FGRV9DTE9TSU5HKXJldHVybiBmYWxzZTtcbiAgdmFyIHNhZmUgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyICA9IFs3XVxuICAgICAgLCBpdGVyID0gYXJyW0lURVJBVE9SXSgpO1xuICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uKCl7IHJldHVybiB7ZG9uZTogc2FmZSA9IHRydWV9OyB9O1xuICAgIGFycltJVEVSQVRPUl0gPSBmdW5jdGlvbigpeyByZXR1cm4gaXRlcjsgfTtcbiAgICBleGVjKGFycik7XG4gIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIHNhZmU7XG59OyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZG9uZSwgdmFsdWUpe1xuICByZXR1cm4ge3ZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lfTtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSB7fTsiLCJ2YXIgZ2V0S2V5cyAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKVxuICAsIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqZWN0LCBlbCl7XG4gIHZhciBPICAgICAgPSB0b0lPYmplY3Qob2JqZWN0KVxuICAgICwga2V5cyAgID0gZ2V0S2V5cyhPKVxuICAgICwgbGVuZ3RoID0ga2V5cy5sZW5ndGhcbiAgICAsIGluZGV4ICA9IDBcbiAgICAsIGtleTtcbiAgd2hpbGUobGVuZ3RoID4gaW5kZXgpaWYoT1trZXkgPSBrZXlzW2luZGV4KytdXSA9PT0gZWwpcmV0dXJuIGtleTtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTsiLCIvLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KVxudmFyICRleHBtMSA9IE1hdGguZXhwbTE7XG5tb2R1bGUuZXhwb3J0cyA9ICghJGV4cG0xXG4gIC8vIE9sZCBGRiBidWdcbiAgfHwgJGV4cG0xKDEwKSA+IDIyMDI1LjQ2NTc5NDgwNjcxOSB8fCAkZXhwbTEoMTApIDwgMjIwMjUuNDY1Nzk0ODA2NzE2NTE2OFxuICAvLyBUb3IgQnJvd3NlciBidWdcbiAgfHwgJGV4cG0xKC0yZS0xNykgIT0gLTJlLTE3XG4pID8gZnVuY3Rpb24gZXhwbTEoeCl7XG4gIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IHggPiAtMWUtNiAmJiB4IDwgMWUtNiA/IHggKyB4ICogeCAvIDIgOiBNYXRoLmV4cCh4KSAtIDE7XG59IDogJGV4cG0xOyIsIi8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGgubG9nMXAgfHwgZnVuY3Rpb24gbG9nMXAoeCl7XG4gIHJldHVybiAoeCA9ICt4KSA+IC0xZS04ICYmIHggPCAxZS04ID8geCAtIHggKiB4IC8gMiA6IE1hdGgubG9nKDEgKyB4KTtcbn07IiwiLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLnNpZ24gfHwgZnVuY3Rpb24gc2lnbih4KXtcbiAgcmV0dXJuICh4ID0gK3gpID09IDAgfHwgeCAhPSB4ID8geCA6IHggPCAwID8gLTEgOiAxO1xufTsiLCJ2YXIgTUVUQSAgICAgPSByZXF1aXJlKCcuL191aWQnKSgnbWV0YScpXG4gICwgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGhhcyAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCBzZXREZXNjICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmZcbiAgLCBpZCAgICAgICA9IDA7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZSB8fCBmdW5jdGlvbigpe1xuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgRlJFRVpFID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgcmV0dXJuIGlzRXh0ZW5zaWJsZShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKTtcbn0pO1xudmFyIHNldE1ldGEgPSBmdW5jdGlvbihpdCl7XG4gIHNldERlc2MoaXQsIE1FVEEsIHt2YWx1ZToge1xuICAgIGk6ICdPJyArICsraWQsIC8vIG9iamVjdCBJRFxuICAgIHc6IHt9ICAgICAgICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH19KTtcbn07XG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uKGl0LCBjcmVhdGUpe1xuICAvLyByZXR1cm4gcHJpbWl0aXZlIHdpdGggcHJlZml4XG4gIGlmKCFpc09iamVjdChpdCkpcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYoIWhhcyhpdCwgTUVUQSkpe1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYoIWlzRXh0ZW5zaWJsZShpdCkpcmV0dXJuICdGJztcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmKCFjcmVhdGUpcmV0dXJuICdFJztcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gb2JqZWN0IElEXG4gIH0gcmV0dXJuIGl0W01FVEFdLmk7XG59O1xudmFyIGdldFdlYWsgPSBmdW5jdGlvbihpdCwgY3JlYXRlKXtcbiAgaWYoIWhhcyhpdCwgTUVUQSkpe1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYoIWlzRXh0ZW5zaWJsZShpdCkpcmV0dXJuIHRydWU7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZighY3JlYXRlKXJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gaGFzaCB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBXS53O1xufTtcbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24oaXQpe1xuICBpZihGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpc2V0TWV0YShpdCk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBLRVk6ICAgICAgTUVUQSxcbiAgTkVFRDogICAgIGZhbHNlLFxuICBmYXN0S2V5OiAgZmFzdEtleSxcbiAgZ2V0V2VhazogIGdldFdlYWssXG4gIG9uRnJlZXplOiBvbkZyZWV6ZVxufTsiLCJ2YXIgTWFwICAgICA9IHJlcXVpcmUoJy4vZXM2Lm1hcCcpXG4gICwgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgc2hhcmVkICA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdtZXRhZGF0YScpXG4gICwgc3RvcmUgICA9IHNoYXJlZC5zdG9yZSB8fCAoc2hhcmVkLnN0b3JlID0gbmV3IChyZXF1aXJlKCcuL2VzNi53ZWFrLW1hcCcpKSk7XG5cbnZhciBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwID0gZnVuY3Rpb24odGFyZ2V0LCB0YXJnZXRLZXksIGNyZWF0ZSl7XG4gIHZhciB0YXJnZXRNZXRhZGF0YSA9IHN0b3JlLmdldCh0YXJnZXQpO1xuICBpZighdGFyZ2V0TWV0YWRhdGEpe1xuICAgIGlmKCFjcmVhdGUpcmV0dXJuIHVuZGVmaW5lZDtcbiAgICBzdG9yZS5zZXQodGFyZ2V0LCB0YXJnZXRNZXRhZGF0YSA9IG5ldyBNYXApO1xuICB9XG4gIHZhciBrZXlNZXRhZGF0YSA9IHRhcmdldE1ldGFkYXRhLmdldCh0YXJnZXRLZXkpO1xuICBpZigha2V5TWV0YWRhdGEpe1xuICAgIGlmKCFjcmVhdGUpcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB0YXJnZXRNZXRhZGF0YS5zZXQodGFyZ2V0S2V5LCBrZXlNZXRhZGF0YSA9IG5ldyBNYXApO1xuICB9IHJldHVybiBrZXlNZXRhZGF0YTtcbn07XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IGZ1bmN0aW9uKE1ldGFkYXRhS2V5LCBPLCBQKXtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCBmYWxzZSk7XG4gIHJldHVybiBtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBtZXRhZGF0YU1hcC5oYXMoTWV0YWRhdGFLZXkpO1xufTtcbnZhciBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gZnVuY3Rpb24oTWV0YWRhdGFLZXksIE8sIFApe1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIGZhbHNlKTtcbiAgcmV0dXJuIG1ldGFkYXRhTWFwID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBtZXRhZGF0YU1hcC5nZXQoTWV0YWRhdGFLZXkpO1xufTtcbnZhciBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhID0gZnVuY3Rpb24oTWV0YWRhdGFLZXksIE1ldGFkYXRhVmFsdWUsIE8sIFApe1xuICBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIHRydWUpLnNldChNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSk7XG59O1xudmFyIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gZnVuY3Rpb24odGFyZ2V0LCB0YXJnZXRLZXkpe1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKHRhcmdldCwgdGFyZ2V0S2V5LCBmYWxzZSlcbiAgICAsIGtleXMgICAgICAgID0gW107XG4gIGlmKG1ldGFkYXRhTWFwKW1ldGFkYXRhTWFwLmZvckVhY2goZnVuY3Rpb24oXywga2V5KXsga2V5cy5wdXNoKGtleSk7IH0pO1xuICByZXR1cm4ga2V5cztcbn07XG52YXIgdG9NZXRhS2V5ID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xudmFyIGV4cCA9IGZ1bmN0aW9uKE8pe1xuICAkZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCBPKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzdG9yZTogc3RvcmUsXG4gIG1hcDogZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCxcbiAgaGFzOiBvcmRpbmFyeUhhc093bk1ldGFkYXRhLFxuICBnZXQ6IG9yZGluYXJ5R2V0T3duTWV0YWRhdGEsXG4gIHNldDogb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSxcbiAga2V5czogb3JkaW5hcnlPd25NZXRhZGF0YUtleXMsXG4gIGtleTogdG9NZXRhS2V5LFxuICBleHA6IGV4cFxufTsiLCJ2YXIgZ2xvYmFsICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBtYWNyb3Rhc2sgPSByZXF1aXJlKCcuL190YXNrJykuc2V0XG4gICwgT2JzZXJ2ZXIgID0gZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXJcbiAgLCBwcm9jZXNzICAgPSBnbG9iYWwucHJvY2Vzc1xuICAsIFByb21pc2UgICA9IGdsb2JhbC5Qcm9taXNlXG4gICwgaXNOb2RlICAgID0gcmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCl7XG4gIHZhciBoZWFkLCBsYXN0LCBub3RpZnk7XG5cbiAgdmFyIGZsdXNoID0gZnVuY3Rpb24oKXtcbiAgICB2YXIgcGFyZW50LCBmbjtcbiAgICBpZihpc05vZGUgJiYgKHBhcmVudCA9IHByb2Nlc3MuZG9tYWluKSlwYXJlbnQuZXhpdCgpO1xuICAgIHdoaWxlKGhlYWQpe1xuICAgICAgZm4gICA9IGhlYWQuZm47XG4gICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIGlmKGhlYWQpbm90aWZ5KCk7XG4gICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgaWYocGFyZW50KXBhcmVudC5lbnRlcigpO1xuICB9O1xuXG4gIC8vIE5vZGUuanNcbiAgaWYoaXNOb2RlKXtcbiAgICBub3RpZnkgPSBmdW5jdGlvbigpe1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gICAgfTtcbiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyXG4gIH0gZWxzZSBpZihPYnNlcnZlcil7XG4gICAgdmFyIHRvZ2dsZSA9IHRydWVcbiAgICAgICwgbm9kZSAgID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgIG5ldyBPYnNlcnZlcihmbHVzaCkub2JzZXJ2ZShub2RlLCB7Y2hhcmFjdGVyRGF0YTogdHJ1ZX0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uKCl7XG4gICAgICBub2RlLmRhdGEgPSB0b2dnbGUgPSAhdG9nZ2xlO1xuICAgIH07XG4gIC8vIGVudmlyb25tZW50cyB3aXRoIG1heWJlIG5vbi1jb21wbGV0ZWx5IGNvcnJlY3QsIGJ1dCBleGlzdGVudCBQcm9taXNlXG4gIH0gZWxzZSBpZihQcm9taXNlICYmIFByb21pc2UucmVzb2x2ZSl7XG4gICAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICBub3RpZnkgPSBmdW5jdGlvbigpe1xuICAgICAgcHJvbWlzZS50aGVuKGZsdXNoKTtcbiAgICB9O1xuICAvLyBmb3Igb3RoZXIgZW52aXJvbm1lbnRzIC0gbWFjcm90YXNrIGJhc2VkIG9uOlxuICAvLyAtIHNldEltbWVkaWF0ZVxuICAvLyAtIE1lc3NhZ2VDaGFubmVsXG4gIC8vIC0gd2luZG93LnBvc3RNZXNzYWdcbiAgLy8gLSBvbnJlYWR5c3RhdGVjaGFuZ2VcbiAgLy8gLSBzZXRUaW1lb3V0XG4gIH0gZWxzZSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24oKXtcbiAgICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbClcbiAgICAgIG1hY3JvdGFzay5jYWxsKGdsb2JhbCwgZmx1c2gpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oZm4pe1xuICAgIHZhciB0YXNrID0ge2ZuOiBmbiwgbmV4dDogdW5kZWZpbmVkfTtcbiAgICBpZihsYXN0KWxhc3QubmV4dCA9IHRhc2s7XG4gICAgaWYoIWhlYWQpe1xuICAgICAgaGVhZCA9IHRhc2s7XG4gICAgICBub3RpZnkoKTtcbiAgICB9IGxhc3QgPSB0YXNrO1xuICB9O1xufTsiLCIndXNlIHN0cmljdCc7XG4vLyAxOS4xLjIuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlLCAuLi4pXG52YXIgZ2V0S2V5cyAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpXG4gICwgZ09QUyAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpXG4gICwgcElFICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJylcbiAgLCB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgSU9iamVjdCAgPSByZXF1aXJlKCcuL19pb2JqZWN0JylcbiAgLCAkYXNzaWduICA9IE9iamVjdC5hc3NpZ247XG5cbi8vIHNob3VsZCB3b3JrIHdpdGggc3ltYm9scyBhbmQgc2hvdWxkIGhhdmUgZGV0ZXJtaW5pc3RpYyBwcm9wZXJ0eSBvcmRlciAoVjggYnVnKVxubW9kdWxlLmV4cG9ydHMgPSAhJGFzc2lnbiB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIHZhciBBID0ge31cbiAgICAsIEIgPSB7fVxuICAgICwgUyA9IFN5bWJvbCgpXG4gICAgLCBLID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JztcbiAgQVtTXSA9IDc7XG4gIEsuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24oayl7IEJba10gPSBrOyB9KTtcbiAgcmV0dXJuICRhc3NpZ24oe30sIEEpW1NdICE9IDcgfHwgT2JqZWN0LmtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IEs7XG59KSA/IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSl7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdmFyIFQgICAgID0gdG9PYmplY3QodGFyZ2V0KVxuICAgICwgYUxlbiAgPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgLCBpbmRleCA9IDFcbiAgICAsIGdldFN5bWJvbHMgPSBnT1BTLmZcbiAgICAsIGlzRW51bSAgICAgPSBwSUUuZjtcbiAgd2hpbGUoYUxlbiA+IGluZGV4KXtcbiAgICB2YXIgUyAgICAgID0gSU9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pXG4gICAgICAsIGtleXMgICA9IGdldFN5bWJvbHMgPyBnZXRLZXlzKFMpLmNvbmNhdChnZXRTeW1ib2xzKFMpKSA6IGdldEtleXMoUylcbiAgICAgICwgbGVuZ3RoID0ga2V5cy5sZW5ndGhcbiAgICAgICwgaiAgICAgID0gMFxuICAgICAgLCBrZXk7XG4gICAgd2hpbGUobGVuZ3RoID4gailpZihpc0VudW0uY2FsbChTLCBrZXkgPSBrZXlzW2orK10pKVRba2V5XSA9IFNba2V5XTtcbiAgfSByZXR1cm4gVDtcbn0gOiAkYXNzaWduOyIsIi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxudmFyIGFuT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBkUHMgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKVxuICAsIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpXG4gICwgSUVfUFJPVE8gICAgPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJylcbiAgLCBFbXB0eSAgICAgICA9IGZ1bmN0aW9uKCl7IC8qIGVtcHR5ICovIH1cbiAgLCBQUk9UT1RZUEUgICA9ICdwcm90b3R5cGUnO1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uKCl7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpXG4gICAgLCBpICAgICAgPSBlbnVtQnVnS2V5cy5sZW5ndGhcbiAgICAsIGx0ICAgICA9ICc8J1xuICAgICwgZ3QgICAgID0gJz4nXG4gICAgLCBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZShpLS0pZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tpXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpe1xuICB2YXIgcmVzdWx0O1xuICBpZihPICE9PSBudWxsKXtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5O1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsInZhciBhbk9iamVjdCAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpXG4gICwgdG9QcmltaXRpdmUgICAgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKVxuICAsIGRQICAgICAgICAgICAgID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyl7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZihJRThfRE9NX0RFRklORSl0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxuICBpZignZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKU9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07IiwidmFyIGRQICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJylcbiAgLCBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgZ2V0S2V5cyAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcyl7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyAgID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKVxuICAgICwgbGVuZ3RoID0ga2V5cy5sZW5ndGhcbiAgICAsIGkgPSAwXG4gICAgLCBQO1xuICB3aGlsZShsZW5ndGggPiBpKWRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTsiLCIvLyBGb3JjZWQgcmVwbGFjZW1lbnQgcHJvdG90eXBlIGFjY2Vzc29ycyBtZXRob2RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKXx8ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIHZhciBLID0gTWF0aC5yYW5kb20oKTtcbiAgLy8gSW4gRkYgdGhyb3dzIG9ubHkgZGVmaW5lIG1ldGhvZHNcbiAgX19kZWZpbmVTZXR0ZXJfXy5jYWxsKG51bGwsIEssIGZ1bmN0aW9uKCl7IC8qIGVtcHR5ICovfSk7XG4gIGRlbGV0ZSByZXF1aXJlKCcuL19nbG9iYWwnKVtLXTtcbn0pOyIsInZhciBwSUUgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKVxuICAsIGNyZWF0ZURlc2MgICAgID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpXG4gICwgdG9JT2JqZWN0ICAgICAgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JylcbiAgLCB0b1ByaW1pdGl2ZSAgICA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpXG4gICwgaGFzICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKVxuICAsIGdPUEQgICAgICAgICAgID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCl7XG4gIE8gPSB0b0lPYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYoSUU4X0RPTV9ERUZJTkUpdHJ5IHtcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcbiAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxuICBpZihoYXMoTywgUCkpcmV0dXJuIGNyZWF0ZURlc2MoIXBJRS5mLmNhbGwoTywgUCksIE9bUF0pO1xufTsiLCIvLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgZ09QTiAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mXG4gICwgdG9TdHJpbmcgID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbihpdCl7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGdPUE4oaXQpO1xuICB9IGNhdGNoKGUpe1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCl7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJyA/IGdldFdpbmRvd05hbWVzKGl0KSA6IGdPUE4odG9JT2JqZWN0KGl0KSk7XG59O1xuIiwiLy8gMTkuMS4yLjcgLyAxNS4yLjMuNCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxudmFyICRrZXlzICAgICAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpXG4gICwgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKS5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKXtcbiAgcmV0dXJuICRrZXlzKE8sIGhpZGRlbktleXMpO1xufTsiLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzOyIsIi8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgaGFzICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIHRvT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCBJRV9QUk9UTyAgICA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKVxuICAsIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24oTyl7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYoaGFzKE8sIElFX1BST1RPKSlyZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3Ipe1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07IiwidmFyIGhhcyAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgdG9JT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgYXJyYXlJbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSlcbiAgLCBJRV9QUk9UTyAgICAgPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqZWN0LCBuYW1lcyl7XG4gIHZhciBPICAgICAgPSB0b0lPYmplY3Qob2JqZWN0KVxuICAgICwgaSAgICAgID0gMFxuICAgICwgcmVzdWx0ID0gW11cbiAgICAsIGtleTtcbiAgZm9yKGtleSBpbiBPKWlmKGtleSAhPSBJRV9QUk9UTyloYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlKG5hbWVzLmxlbmd0aCA+IGkpaWYoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKXtcbiAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59OyIsIi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxudmFyICRrZXlzICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKVxuICAsIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTyl7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59OyIsImV4cG9ydHMuZiA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlOyIsIi8vIG1vc3QgT2JqZWN0IG1ldGhvZHMgYnkgRVM2IHNob3VsZCBhY2NlcHQgcHJpbWl0aXZlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGNvcmUgICAgPSByZXF1aXJlKCcuL19jb3JlJylcbiAgLCBmYWlscyAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oS0VZLCBleGVjKXtcbiAgdmFyIGZuICA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXVxuICAgICwgZXhwID0ge307XG4gIGV4cFtLRVldID0gZXhlYyhmbik7XG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24oKXsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcbn07IiwidmFyIGdldEtleXMgICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJylcbiAgLCB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JylcbiAgLCBpc0VudW0gICAgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXNFbnRyaWVzKXtcbiAgcmV0dXJuIGZ1bmN0aW9uKGl0KXtcbiAgICB2YXIgTyAgICAgID0gdG9JT2JqZWN0KGl0KVxuICAgICAgLCBrZXlzICAgPSBnZXRLZXlzKE8pXG4gICAgICAsIGxlbmd0aCA9IGtleXMubGVuZ3RoXG4gICAgICAsIGkgICAgICA9IDBcbiAgICAgICwgcmVzdWx0ID0gW11cbiAgICAgICwga2V5O1xuICAgIHdoaWxlKGxlbmd0aCA+IGkpaWYoaXNFbnVtLmNhbGwoTywga2V5ID0ga2V5c1tpKytdKSl7XG4gICAgICByZXN1bHQucHVzaChpc0VudHJpZXMgPyBba2V5LCBPW2tleV1dIDogT1trZXldKTtcbiAgICB9IHJldHVybiByZXN1bHQ7XG4gIH07XG59OyIsIi8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHNcbnZhciBnT1BOICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJylcbiAgLCBnT1BTICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJylcbiAgLCBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgUmVmbGVjdCAgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBSZWZsZWN0ICYmIFJlZmxlY3Qub3duS2V5cyB8fCBmdW5jdGlvbiBvd25LZXlzKGl0KXtcbiAgdmFyIGtleXMgICAgICAgPSBnT1BOLmYoYW5PYmplY3QoaXQpKVxuICAgICwgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgcmV0dXJuIGdldFN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTsiLCJ2YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wYXJzZUZsb2F0XG4gICwgJHRyaW0gICAgICAgPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG5cbm1vZHVsZS5leHBvcnRzID0gMSAvICRwYXJzZUZsb2F0KHJlcXVpcmUoJy4vX3N0cmluZy13cycpICsgJy0wJykgIT09IC1JbmZpbml0eSA/IGZ1bmN0aW9uIHBhcnNlRmxvYXQoc3RyKXtcbiAgdmFyIHN0cmluZyA9ICR0cmltKFN0cmluZyhzdHIpLCAzKVxuICAgICwgcmVzdWx0ID0gJHBhcnNlRmxvYXQoc3RyaW5nKTtcbiAgcmV0dXJuIHJlc3VsdCA9PT0gMCAmJiBzdHJpbmcuY2hhckF0KDApID09ICctJyA/IC0wIDogcmVzdWx0O1xufSA6ICRwYXJzZUZsb2F0OyIsInZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wYXJzZUludFxuICAsICR0cmltICAgICA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbVxuICAsIHdzICAgICAgICA9IHJlcXVpcmUoJy4vX3N0cmluZy13cycpXG4gICwgaGV4ICAgICAgID0gL15bXFwtK10/MFt4WF0vO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICRwYXJzZUludCh3cyArICcwOCcpICE9PSA4IHx8ICRwYXJzZUludCh3cyArICcweDE2JykgIT09IDIyID8gZnVuY3Rpb24gcGFyc2VJbnQoc3RyLCByYWRpeCl7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XG4gIHJldHVybiAkcGFyc2VJbnQoc3RyaW5nLCAocmFkaXggPj4+IDApIHx8IChoZXgudGVzdChzdHJpbmcpID8gMTYgOiAxMCkpO1xufSA6ICRwYXJzZUludDsiLCIndXNlIHN0cmljdCc7XG52YXIgcGF0aCAgICAgID0gcmVxdWlyZSgnLi9fcGF0aCcpXG4gICwgaW52b2tlICAgID0gcmVxdWlyZSgnLi9faW52b2tlJylcbiAgLCBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKC8qIC4uLnBhcmdzICovKXtcbiAgdmFyIGZuICAgICA9IGFGdW5jdGlvbih0aGlzKVxuICAgICwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICwgcGFyZ3MgID0gQXJyYXkobGVuZ3RoKVxuICAgICwgaSAgICAgID0gMFxuICAgICwgXyAgICAgID0gcGF0aC5fXG4gICAgLCBob2xkZXIgPSBmYWxzZTtcbiAgd2hpbGUobGVuZ3RoID4gaSlpZigocGFyZ3NbaV0gPSBhcmd1bWVudHNbaSsrXSkgPT09IF8paG9sZGVyID0gdHJ1ZTtcbiAgcmV0dXJuIGZ1bmN0aW9uKC8qIC4uLmFyZ3MgKi8pe1xuICAgIHZhciB0aGF0ID0gdGhpc1xuICAgICAgLCBhTGVuID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgLCBqID0gMCwgayA9IDAsIGFyZ3M7XG4gICAgaWYoIWhvbGRlciAmJiAhYUxlbilyZXR1cm4gaW52b2tlKGZuLCBwYXJncywgdGhhdCk7XG4gICAgYXJncyA9IHBhcmdzLnNsaWNlKCk7XG4gICAgaWYoaG9sZGVyKWZvcig7bGVuZ3RoID4gajsgaisrKWlmKGFyZ3Nbal0gPT09IF8pYXJnc1tqXSA9IGFyZ3VtZW50c1trKytdO1xuICAgIHdoaWxlKGFMZW4gPiBrKWFyZ3MucHVzaChhcmd1bWVudHNbaysrXSk7XG4gICAgcmV0dXJuIGludm9rZShmbiwgYXJncywgdGhhdCk7XG4gIH07XG59OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihiaXRtYXAsIHZhbHVlKXtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlICA6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlICAgIDogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZSAgICAgICA6IHZhbHVlXG4gIH07XG59OyIsInZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHRhcmdldCwgc3JjLCBzYWZlKXtcbiAgZm9yKHZhciBrZXkgaW4gc3JjKXJlZGVmaW5lKHRhcmdldCwga2V5LCBzcmNba2V5XSwgc2FmZSk7XG4gIHJldHVybiB0YXJnZXQ7XG59OyIsInZhciBnbG9iYWwgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGhpZGUgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKVxuICAsIGhhcyAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgU1JDICAgICAgID0gcmVxdWlyZSgnLi9fdWlkJykoJ3NyYycpXG4gICwgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJ1xuICAsICR0b1N0cmluZyA9IEZ1bmN0aW9uW1RPX1NUUklOR11cbiAgLCBUUEwgICAgICAgPSAoJycgKyAkdG9TdHJpbmcpLnNwbGl0KFRPX1NUUklORyk7XG5cbnJlcXVpcmUoJy4vX2NvcmUnKS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gJHRvU3RyaW5nLmNhbGwoaXQpO1xufTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oTywga2V5LCB2YWwsIHNhZmUpe1xuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiB2YWwgPT0gJ2Z1bmN0aW9uJztcbiAgaWYoaXNGdW5jdGlvbiloYXModmFsLCAnbmFtZScpIHx8IGhpZGUodmFsLCAnbmFtZScsIGtleSk7XG4gIGlmKE9ba2V5XSA9PT0gdmFsKXJldHVybjtcbiAgaWYoaXNGdW5jdGlvbiloYXModmFsLCBTUkMpIHx8IGhpZGUodmFsLCBTUkMsIE9ba2V5XSA/ICcnICsgT1trZXldIDogVFBMLmpvaW4oU3RyaW5nKGtleSkpKTtcbiAgaWYoTyA9PT0gZ2xvYmFsKXtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSB7XG4gICAgaWYoIXNhZmUpe1xuICAgICAgZGVsZXRlIE9ba2V5XTtcbiAgICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZihPW2tleV0pT1trZXldID0gdmFsO1xuICAgICAgZWxzZSBoaWRlKE8sIGtleSwgdmFsKTtcbiAgICB9XG4gIH1cbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCl7XG4gIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIHRoaXNbU1JDXSB8fCAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbn0pOyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ocmVnRXhwLCByZXBsYWNlKXtcbiAgdmFyIHJlcGxhY2VyID0gcmVwbGFjZSA9PT0gT2JqZWN0KHJlcGxhY2UpID8gZnVuY3Rpb24ocGFydCl7XG4gICAgcmV0dXJuIHJlcGxhY2VbcGFydF07XG4gIH0gOiByZXBsYWNlO1xuICByZXR1cm4gZnVuY3Rpb24oaXQpe1xuICAgIHJldHVybiBTdHJpbmcoaXQpLnJlcGxhY2UocmVnRXhwLCByZXBsYWNlcik7XG4gIH07XG59OyIsIi8vIDcuMi45IFNhbWVWYWx1ZSh4LCB5KVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuaXMgfHwgZnVuY3Rpb24gaXMoeCwgeSl7XG4gIHJldHVybiB4ID09PSB5ID8geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHkgOiB4ICE9IHggJiYgeSAhPSB5O1xufTsiLCIvLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgY2hlY2sgPSBmdW5jdGlvbihPLCBwcm90byl7XG4gIGFuT2JqZWN0KE8pO1xuICBpZighaXNPYmplY3QocHJvdG8pICYmIHByb3RvICE9PSBudWxsKXRocm93IFR5cGVFcnJvcihwcm90byArIFwiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlIVwiKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGZ1bmN0aW9uKHRlc3QsIGJ1Z2d5LCBzZXQpe1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2V0ID0gcmVxdWlyZSgnLi9fY3R4JykoRnVuY3Rpb24uY2FsbCwgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQsIDIpO1xuICAgICAgICBzZXQodGVzdCwgW10pO1xuICAgICAgICBidWdneSA9ICEodGVzdCBpbnN0YW5jZW9mIEFycmF5KTtcbiAgICAgIH0gY2F0Y2goZSl7IGJ1Z2d5ID0gdHJ1ZTsgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKXtcbiAgICAgICAgY2hlY2soTywgcHJvdG8pO1xuICAgICAgICBpZihidWdneSlPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgICAgICBlbHNlIHNldChPLCBwcm90byk7XG4gICAgICAgIHJldHVybiBPO1xuICAgICAgfTtcbiAgICB9KHt9LCBmYWxzZSkgOiB1bmRlZmluZWQpLFxuICBjaGVjazogY2hlY2tcbn07IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBkUCAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpXG4gICwgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpXG4gICwgU1BFQ0lFUyAgICAgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEtFWSl7XG4gIHZhciBDID0gZ2xvYmFsW0tFWV07XG4gIGlmKERFU0NSSVBUT1JTICYmIEMgJiYgIUNbU1BFQ0lFU10pZFAuZihDLCBTUEVDSUVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXM7IH1cbiAgfSk7XG59OyIsInZhciBkZWYgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mXG4gICwgaGFzID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwgdGFnLCBzdGF0KXtcbiAgaWYoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSlkZWYoaXQsIFRBRywge2NvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZ30pO1xufTsiLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ2tleXMnKVxuICAsIHVpZCAgICA9IHJlcXVpcmUoJy4vX3VpZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihrZXkpe1xuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xufTsiLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJ1xuICAsIHN0b3JlICA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB7fSk7XG59OyIsIi8vIDcuMy4yMCBTcGVjaWVzQ29uc3RydWN0b3IoTywgZGVmYXVsdENvbnN0cnVjdG9yKVxudmFyIGFuT2JqZWN0ICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpXG4gICwgU1BFQ0lFUyAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oTywgRCl7XG4gIHZhciBDID0gYW5PYmplY3QoTykuY29uc3RydWN0b3IsIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gRCA6IGFGdW5jdGlvbihTKTtcbn07IiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtZXRob2QsIGFyZyl7XG4gIHJldHVybiAhIW1ldGhvZCAmJiBmYWlscyhmdW5jdGlvbigpe1xuICAgIGFyZyA/IG1ldGhvZC5jYWxsKG51bGwsIGZ1bmN0aW9uKCl7fSwgMSkgOiBtZXRob2QuY2FsbChudWxsKTtcbiAgfSk7XG59OyIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJylcbiAgLCBkZWZpbmVkICAgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihUT19TVFJJTkcpe1xuICByZXR1cm4gZnVuY3Rpb24odGhhdCwgcG9zKXtcbiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKVxuICAgICAgLCBpID0gdG9JbnRlZ2VyKHBvcylcbiAgICAgICwgbCA9IHMubGVuZ3RoXG4gICAgICAsIGEsIGI7XG4gICAgaWYoaSA8IDAgfHwgaSA+PSBsKXJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59OyIsIi8vIGhlbHBlciBmb3IgU3RyaW5nI3tzdGFydHNXaXRoLCBlbmRzV2l0aCwgaW5jbHVkZXN9XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKVxuICAsIGRlZmluZWQgID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHRoYXQsIHNlYXJjaFN0cmluZywgTkFNRSl7XG4gIGlmKGlzUmVnRXhwKHNlYXJjaFN0cmluZykpdGhyb3cgVHlwZUVycm9yKCdTdHJpbmcjJyArIE5BTUUgKyBcIiBkb2Vzbid0IGFjY2VwdCByZWdleCFcIik7XG4gIHJldHVybiBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG59OyIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBmYWlscyAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKVxuICAsIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJylcbiAgLCBxdW90ICAgID0gL1wiL2c7XG4vLyBCLjIuMy4yLjEgQ3JlYXRlSFRNTChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSlcbnZhciBjcmVhdGVIVE1MID0gZnVuY3Rpb24oc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgdmFyIFMgID0gU3RyaW5nKGRlZmluZWQoc3RyaW5nKSlcbiAgICAsIHAxID0gJzwnICsgdGFnO1xuICBpZihhdHRyaWJ1dGUgIT09ICcnKXAxICs9ICcgJyArIGF0dHJpYnV0ZSArICc9XCInICsgU3RyaW5nKHZhbHVlKS5yZXBsYWNlKHF1b3QsICcmcXVvdDsnKSArICdcIic7XG4gIHJldHVybiBwMSArICc+JyArIFMgKyAnPC8nICsgdGFnICsgJz4nO1xufTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oTkFNRSwgZXhlYyl7XG4gIHZhciBPID0ge307XG4gIE9bTkFNRV0gPSBleGVjKGNyZWF0ZUhUTUwpO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uKCl7XG4gICAgdmFyIHRlc3QgPSAnJ1tOQU1FXSgnXCInKTtcbiAgICByZXR1cm4gdGVzdCAhPT0gdGVzdC50b0xvd2VyQ2FzZSgpIHx8IHRlc3Quc3BsaXQoJ1wiJykubGVuZ3RoID4gMztcbiAgfSksICdTdHJpbmcnLCBPKTtcbn07IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgcmVwZWF0ICAgPSByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0JylcbiAgLCBkZWZpbmVkICA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih0aGF0LCBtYXhMZW5ndGgsIGZpbGxTdHJpbmcsIGxlZnQpe1xuICB2YXIgUyAgICAgICAgICAgID0gU3RyaW5nKGRlZmluZWQodGhhdCkpXG4gICAgLCBzdHJpbmdMZW5ndGggPSBTLmxlbmd0aFxuICAgICwgZmlsbFN0ciAgICAgID0gZmlsbFN0cmluZyA9PT0gdW5kZWZpbmVkID8gJyAnIDogU3RyaW5nKGZpbGxTdHJpbmcpXG4gICAgLCBpbnRNYXhMZW5ndGggPSB0b0xlbmd0aChtYXhMZW5ndGgpO1xuICBpZihpbnRNYXhMZW5ndGggPD0gc3RyaW5nTGVuZ3RoIHx8IGZpbGxTdHIgPT0gJycpcmV0dXJuIFM7XG4gIHZhciBmaWxsTGVuID0gaW50TWF4TGVuZ3RoIC0gc3RyaW5nTGVuZ3RoXG4gICAgLCBzdHJpbmdGaWxsZXIgPSByZXBlYXQuY2FsbChmaWxsU3RyLCBNYXRoLmNlaWwoZmlsbExlbiAvIGZpbGxTdHIubGVuZ3RoKSk7XG4gIGlmKHN0cmluZ0ZpbGxlci5sZW5ndGggPiBmaWxsTGVuKXN0cmluZ0ZpbGxlciA9IHN0cmluZ0ZpbGxlci5zbGljZSgwLCBmaWxsTGVuKTtcbiAgcmV0dXJuIGxlZnQgPyBzdHJpbmdGaWxsZXIgKyBTIDogUyArIHN0cmluZ0ZpbGxlcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpXG4gICwgZGVmaW5lZCAgID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlcGVhdChjb3VudCl7XG4gIHZhciBzdHIgPSBTdHJpbmcoZGVmaW5lZCh0aGlzKSlcbiAgICAsIHJlcyA9ICcnXG4gICAgLCBuICAgPSB0b0ludGVnZXIoY291bnQpO1xuICBpZihuIDwgMCB8fCBuID09IEluZmluaXR5KXRocm93IFJhbmdlRXJyb3IoXCJDb3VudCBjYW4ndCBiZSBuZWdhdGl2ZVwiKTtcbiAgZm9yKDtuID4gMDsgKG4gPj4+PSAxKSAmJiAoc3RyICs9IHN0cikpaWYobiAmIDEpcmVzICs9IHN0cjtcbiAgcmV0dXJuIHJlcztcbn07IiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJylcbiAgLCBmYWlscyAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKVxuICAsIHNwYWNlcyAgPSByZXF1aXJlKCcuL19zdHJpbmctd3MnKVxuICAsIHNwYWNlICAgPSAnWycgKyBzcGFjZXMgKyAnXSdcbiAgLCBub24gICAgID0gJ1xcdTIwMGJcXHUwMDg1J1xuICAsIGx0cmltICAgPSBSZWdFeHAoJ14nICsgc3BhY2UgKyBzcGFjZSArICcqJylcbiAgLCBydHJpbSAgID0gUmVnRXhwKHNwYWNlICsgc3BhY2UgKyAnKiQnKTtcblxudmFyIGV4cG9ydGVyID0gZnVuY3Rpb24oS0VZLCBleGVjLCBBTElBUyl7XG4gIHZhciBleHAgICA9IHt9O1xuICB2YXIgRk9SQ0UgPSBmYWlscyhmdW5jdGlvbigpe1xuICAgIHJldHVybiAhIXNwYWNlc1tLRVldKCkgfHwgbm9uW0tFWV0oKSAhPSBub247XG4gIH0pO1xuICB2YXIgZm4gPSBleHBbS0VZXSA9IEZPUkNFID8gZXhlYyh0cmltKSA6IHNwYWNlc1tLRVldO1xuICBpZihBTElBUylleHBbQUxJQVNdID0gZm47XG4gICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0UsICdTdHJpbmcnLCBleHApO1xufTtcblxuLy8gMSAtPiBTdHJpbmcjdHJpbUxlZnRcbi8vIDIgLT4gU3RyaW5nI3RyaW1SaWdodFxuLy8gMyAtPiBTdHJpbmcjdHJpbVxudmFyIHRyaW0gPSBleHBvcnRlci50cmltID0gZnVuY3Rpb24oc3RyaW5nLCBUWVBFKXtcbiAgc3RyaW5nID0gU3RyaW5nKGRlZmluZWQoc3RyaW5nKSk7XG4gIGlmKFRZUEUgJiAxKXN0cmluZyA9IHN0cmluZy5yZXBsYWNlKGx0cmltLCAnJyk7XG4gIGlmKFRZUEUgJiAyKXN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJ0cmltLCAnJyk7XG4gIHJldHVybiBzdHJpbmc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVyOyIsIm1vZHVsZS5leHBvcnRzID0gJ1xceDA5XFx4MEFcXHgwQlxceDBDXFx4MERcXHgyMFxceEEwXFx1MTY4MFxcdTE4MEVcXHUyMDAwXFx1MjAwMVxcdTIwMDJcXHUyMDAzJyArXG4gICdcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOFxcdTIwMjlcXHVGRUZGJzsiLCJ2YXIgY3R4ICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fY3R4JylcbiAgLCBpbnZva2UgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19pbnZva2UnKVxuICAsIGh0bWwgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2h0bWwnKVxuICAsIGNlbCAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKVxuICAsIGdsb2JhbCAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgcHJvY2VzcyAgICAgICAgICAgID0gZ2xvYmFsLnByb2Nlc3NcbiAgLCBzZXRUYXNrICAgICAgICAgICAgPSBnbG9iYWwuc2V0SW1tZWRpYXRlXG4gICwgY2xlYXJUYXNrICAgICAgICAgID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlXG4gICwgTWVzc2FnZUNoYW5uZWwgICAgID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsXG4gICwgY291bnRlciAgICAgICAgICAgID0gMFxuICAsIHF1ZXVlICAgICAgICAgICAgICA9IHt9XG4gICwgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSdcbiAgLCBkZWZlciwgY2hhbm5lbCwgcG9ydDtcbnZhciBydW4gPSBmdW5jdGlvbigpe1xuICB2YXIgaWQgPSArdGhpcztcbiAgaWYocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKXtcbiAgICB2YXIgZm4gPSBxdWV1ZVtpZF07XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgICBmbigpO1xuICB9XG59O1xudmFyIGxpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQpe1xuICBydW4uY2FsbChldmVudC5kYXRhKTtcbn07XG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZighc2V0VGFzayB8fCAhY2xlYXJUYXNrKXtcbiAgc2V0VGFzayA9IGZ1bmN0aW9uIHNldEltbWVkaWF0ZShmbil7XG4gICAgdmFyIGFyZ3MgPSBbXSwgaSA9IDE7XG4gICAgd2hpbGUoYXJndW1lbnRzLmxlbmd0aCA+IGkpYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICBxdWV1ZVsrK2NvdW50ZXJdID0gZnVuY3Rpb24oKXtcbiAgICAgIGludm9rZSh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhclRhc2sgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCl7XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgfTtcbiAgLy8gTm9kZS5qcyAwLjgtXG4gIGlmKHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJyl7XG4gICAgZGVmZXIgPSBmdW5jdGlvbihpZCl7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xuICB9IGVsc2UgaWYoTWVzc2FnZUNoYW5uZWwpe1xuICAgIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWw7XG4gICAgcG9ydCAgICA9IGNoYW5uZWwucG9ydDI7XG4gICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBsaXN0ZW5lcjtcbiAgICBkZWZlciA9IGN0eChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0LCAxKTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBwb3N0TWVzc2FnZSwgc2tpcCBXZWJXb3JrZXJzXG4gIC8vIElFOCBoYXMgcG9zdE1lc3NhZ2UsIGJ1dCBpdCdzIHN5bmMgJiB0eXBlb2YgaXRzIHBvc3RNZXNzYWdlIGlzICdvYmplY3QnXG4gIH0gZWxzZSBpZihnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAmJiB0eXBlb2YgcG9zdE1lc3NhZ2UgPT0gJ2Z1bmN0aW9uJyAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpe1xuICAgIGRlZmVyID0gZnVuY3Rpb24oaWQpe1xuICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKGlkICsgJycsICcqJyk7XG4gICAgfTtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyLCBmYWxzZSk7XG4gIC8vIElFOC1cbiAgfSBlbHNlIGlmKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjZWwoJ3NjcmlwdCcpKXtcbiAgICBkZWZlciA9IGZ1bmN0aW9uKGlkKXtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY2VsKCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgICAgIHJ1bi5jYWxsKGlkKTtcbiAgICAgIH07XG4gICAgfTtcbiAgLy8gUmVzdCBvbGQgYnJvd3NlcnNcbiAgfSBlbHNlIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uKGlkKXtcbiAgICAgIHNldFRpbWVvdXQoY3R4KHJ1biwgaWQsIDEpLCAwKTtcbiAgICB9O1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiAgIHNldFRhc2ssXG4gIGNsZWFyOiBjbGVhclRhc2tcbn07IiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKVxuICAsIG1heCAgICAgICA9IE1hdGgubWF4XG4gICwgbWluICAgICAgID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGluZGV4LCBsZW5ndGgpe1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTsiLCIvLyA3LjEuNCBUb0ludGVnZXJcbnZhciBjZWlsICA9IE1hdGguY2VpbFxuICAsIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcbn07IiwiLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKVxuICAsIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpO1xufTsiLCIvLyA3LjEuMTUgVG9MZW5ndGhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJylcbiAgLCBtaW4gICAgICAgPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTsiLCIvLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07IiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwgUyl7XG4gIGlmKCFpc09iamVjdChpdCkpcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSlyZXR1cm4gdmFsO1xuICBpZih0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7XG4gIGlmKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuaWYocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSl7XG4gIHZhciBMSUJSQVJZICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbGlicmFyeScpXG4gICAgLCBnbG9iYWwgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgICAsIGZhaWxzICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19mYWlscycpXG4gICAgLCAkZXhwb3J0ICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgICAsICR0eXBlZCAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL190eXBlZCcpXG4gICAgLCAkYnVmZmVyICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJylcbiAgICAsIGN0eCAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19jdHgnKVxuICAgICwgYW5JbnN0YW5jZSAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJylcbiAgICAsIHByb3BlcnR5RGVzYyAgICAgICAgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJylcbiAgICAsIGhpZGUgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oaWRlJylcbiAgICAsIHJlZGVmaW5lQWxsICAgICAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKVxuICAgICwgdG9JbnRlZ2VyICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKVxuICAgICwgdG9MZW5ndGggICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICAgLCB0b0luZGV4ICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKVxuICAgICwgdG9QcmltaXRpdmUgICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpXG4gICAgLCBoYXMgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgICAsIHNhbWUgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19zYW1lLXZhbHVlJylcbiAgICAsIGNsYXNzb2YgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19jbGFzc29mJylcbiAgICAsIGlzT2JqZWN0ICAgICAgICAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAgICwgdG9PYmplY3QgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICAgLCBpc0FycmF5SXRlciAgICAgICAgID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpXG4gICAgLCBjcmVhdGUgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpXG4gICAgLCBnZXRQcm90b3R5cGVPZiAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpXG4gICAgLCBnT1BOICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mXG4gICAgLCBnZXRJdGVyRm4gICAgICAgICAgID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKVxuICAgICwgdWlkICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3VpZCcpXG4gICAgLCB3a3MgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fd2tzJylcbiAgICAsIGNyZWF0ZUFycmF5TWV0aG9kICAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJylcbiAgICAsIGNyZWF0ZUFycmF5SW5jbHVkZXMgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpXG4gICAgLCBzcGVjaWVzQ29uc3RydWN0b3IgID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpXG4gICAgLCBBcnJheUl0ZXJhdG9ycyAgICAgID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKVxuICAgICwgSXRlcmF0b3JzICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpXG4gICAgLCAkaXRlckRldGVjdCAgICAgICAgID0gcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKVxuICAgICwgc2V0U3BlY2llcyAgICAgICAgICA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJylcbiAgICAsIGFycmF5RmlsbCAgICAgICAgICAgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJylcbiAgICAsIGFycmF5Q29weVdpdGhpbiAgICAgPSByZXF1aXJlKCcuL19hcnJheS1jb3B5LXdpdGhpbicpXG4gICAgLCAkRFAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJylcbiAgICAsICRHT1BEICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpXG4gICAgLCBkUCAgICAgICAgICAgICAgICAgID0gJERQLmZcbiAgICAsIGdPUEQgICAgICAgICAgICAgICAgPSAkR09QRC5mXG4gICAgLCBSYW5nZUVycm9yICAgICAgICAgID0gZ2xvYmFsLlJhbmdlRXJyb3JcbiAgICAsIFR5cGVFcnJvciAgICAgICAgICAgPSBnbG9iYWwuVHlwZUVycm9yXG4gICAgLCBVaW50OEFycmF5ICAgICAgICAgID0gZ2xvYmFsLlVpbnQ4QXJyYXlcbiAgICAsIEFSUkFZX0JVRkZFUiAgICAgICAgPSAnQXJyYXlCdWZmZXInXG4gICAgLCBTSEFSRURfQlVGRkVSICAgICAgID0gJ1NoYXJlZCcgKyBBUlJBWV9CVUZGRVJcbiAgICAsIEJZVEVTX1BFUl9FTEVNRU5UICAgPSAnQllURVNfUEVSX0VMRU1FTlQnXG4gICAgLCBQUk9UT1RZUEUgICAgICAgICAgID0gJ3Byb3RvdHlwZSdcbiAgICAsIEFycmF5UHJvdG8gICAgICAgICAgPSBBcnJheVtQUk9UT1RZUEVdXG4gICAgLCAkQXJyYXlCdWZmZXIgICAgICAgID0gJGJ1ZmZlci5BcnJheUJ1ZmZlclxuICAgICwgJERhdGFWaWV3ICAgICAgICAgICA9ICRidWZmZXIuRGF0YVZpZXdcbiAgICAsIGFycmF5Rm9yRWFjaCAgICAgICAgPSBjcmVhdGVBcnJheU1ldGhvZCgwKVxuICAgICwgYXJyYXlGaWx0ZXIgICAgICAgICA9IGNyZWF0ZUFycmF5TWV0aG9kKDIpXG4gICAgLCBhcnJheVNvbWUgICAgICAgICAgID0gY3JlYXRlQXJyYXlNZXRob2QoMylcbiAgICAsIGFycmF5RXZlcnkgICAgICAgICAgPSBjcmVhdGVBcnJheU1ldGhvZCg0KVxuICAgICwgYXJyYXlGaW5kICAgICAgICAgICA9IGNyZWF0ZUFycmF5TWV0aG9kKDUpXG4gICAgLCBhcnJheUZpbmRJbmRleCAgICAgID0gY3JlYXRlQXJyYXlNZXRob2QoNilcbiAgICAsIGFycmF5SW5jbHVkZXMgICAgICAgPSBjcmVhdGVBcnJheUluY2x1ZGVzKHRydWUpXG4gICAgLCBhcnJheUluZGV4T2YgICAgICAgID0gY3JlYXRlQXJyYXlJbmNsdWRlcyhmYWxzZSlcbiAgICAsIGFycmF5VmFsdWVzICAgICAgICAgPSBBcnJheUl0ZXJhdG9ycy52YWx1ZXNcbiAgICAsIGFycmF5S2V5cyAgICAgICAgICAgPSBBcnJheUl0ZXJhdG9ycy5rZXlzXG4gICAgLCBhcnJheUVudHJpZXMgICAgICAgID0gQXJyYXlJdGVyYXRvcnMuZW50cmllc1xuICAgICwgYXJyYXlMYXN0SW5kZXhPZiAgICA9IEFycmF5UHJvdG8ubGFzdEluZGV4T2ZcbiAgICAsIGFycmF5UmVkdWNlICAgICAgICAgPSBBcnJheVByb3RvLnJlZHVjZVxuICAgICwgYXJyYXlSZWR1Y2VSaWdodCAgICA9IEFycmF5UHJvdG8ucmVkdWNlUmlnaHRcbiAgICAsIGFycmF5Sm9pbiAgICAgICAgICAgPSBBcnJheVByb3RvLmpvaW5cbiAgICAsIGFycmF5U29ydCAgICAgICAgICAgPSBBcnJheVByb3RvLnNvcnRcbiAgICAsIGFycmF5U2xpY2UgICAgICAgICAgPSBBcnJheVByb3RvLnNsaWNlXG4gICAgLCBhcnJheVRvU3RyaW5nICAgICAgID0gQXJyYXlQcm90by50b1N0cmluZ1xuICAgICwgYXJyYXlUb0xvY2FsZVN0cmluZyA9IEFycmF5UHJvdG8udG9Mb2NhbGVTdHJpbmdcbiAgICAsIElURVJBVE9SICAgICAgICAgICAgPSB3a3MoJ2l0ZXJhdG9yJylcbiAgICAsIFRBRyAgICAgICAgICAgICAgICAgPSB3a3MoJ3RvU3RyaW5nVGFnJylcbiAgICAsIFRZUEVEX0NPTlNUUlVDVE9SICAgPSB1aWQoJ3R5cGVkX2NvbnN0cnVjdG9yJylcbiAgICAsIERFRl9DT05TVFJVQ1RPUiAgICAgPSB1aWQoJ2RlZl9jb25zdHJ1Y3RvcicpXG4gICAgLCBBTExfQ09OU1RSVUNUT1JTICAgID0gJHR5cGVkLkNPTlNUUlxuICAgICwgVFlQRURfQVJSQVkgICAgICAgICA9ICR0eXBlZC5UWVBFRFxuICAgICwgVklFVyAgICAgICAgICAgICAgICA9ICR0eXBlZC5WSUVXXG4gICAgLCBXUk9OR19MRU5HVEggICAgICAgID0gJ1dyb25nIGxlbmd0aCEnO1xuXG4gIHZhciAkbWFwID0gY3JlYXRlQXJyYXlNZXRob2QoMSwgZnVuY3Rpb24oTywgbGVuZ3RoKXtcbiAgICByZXR1cm4gYWxsb2NhdGUoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxlbmd0aCk7XG4gIH0pO1xuXG4gIHZhciBMSVRUTEVfRU5ESUFOID0gZmFpbHMoZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkobmV3IFVpbnQxNkFycmF5KFsxXSkuYnVmZmVyKVswXSA9PT0gMTtcbiAgfSk7XG5cbiAgdmFyIEZPUkNFRF9TRVQgPSAhIVVpbnQ4QXJyYXkgJiYgISFVaW50OEFycmF5W1BST1RPVFlQRV0uc2V0ICYmIGZhaWxzKGZ1bmN0aW9uKCl7XG4gICAgbmV3IFVpbnQ4QXJyYXkoMSkuc2V0KHt9KTtcbiAgfSk7XG5cbiAgdmFyIHN0cmljdFRvTGVuZ3RoID0gZnVuY3Rpb24oaXQsIFNBTUUpe1xuICAgIGlmKGl0ID09PSB1bmRlZmluZWQpdGhyb3cgVHlwZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgdmFyIG51bWJlciA9ICtpdFxuICAgICAgLCBsZW5ndGggPSB0b0xlbmd0aChpdCk7XG4gICAgaWYoU0FNRSAmJiAhc2FtZShudW1iZXIsIGxlbmd0aCkpdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHJldHVybiBsZW5ndGg7XG4gIH07XG5cbiAgdmFyIHRvT2Zmc2V0ID0gZnVuY3Rpb24oaXQsIEJZVEVTKXtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGl0KTtcbiAgICBpZihvZmZzZXQgPCAwIHx8IG9mZnNldCAlIEJZVEVTKXRocm93IFJhbmdlRXJyb3IoJ1dyb25nIG9mZnNldCEnKTtcbiAgICByZXR1cm4gb2Zmc2V0O1xuICB9O1xuXG4gIHZhciB2YWxpZGF0ZSA9IGZ1bmN0aW9uKGl0KXtcbiAgICBpZihpc09iamVjdChpdCkgJiYgVFlQRURfQVJSQVkgaW4gaXQpcmV0dXJuIGl0O1xuICAgIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgdHlwZWQgYXJyYXkhJyk7XG4gIH07XG5cbiAgdmFyIGFsbG9jYXRlID0gZnVuY3Rpb24oQywgbGVuZ3RoKXtcbiAgICBpZighKGlzT2JqZWN0KEMpICYmIFRZUEVEX0NPTlNUUlVDVE9SIGluIEMpKXtcbiAgICAgIHRocm93IFR5cGVFcnJvcignSXQgaXMgbm90IGEgdHlwZWQgYXJyYXkgY29uc3RydWN0b3IhJyk7XG4gICAgfSByZXR1cm4gbmV3IEMobGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgc3BlY2llc0Zyb21MaXN0ID0gZnVuY3Rpb24oTywgbGlzdCl7XG4gICAgcmV0dXJuIGZyb21MaXN0KHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pLCBsaXN0KTtcbiAgfTtcblxuICB2YXIgZnJvbUxpc3QgPSBmdW5jdGlvbihDLCBsaXN0KXtcbiAgICB2YXIgaW5kZXggID0gMFxuICAgICAgLCBsZW5ndGggPSBsaXN0Lmxlbmd0aFxuICAgICAgLCByZXN1bHQgPSBhbGxvY2F0ZShDLCBsZW5ndGgpO1xuICAgIHdoaWxlKGxlbmd0aCA+IGluZGV4KXJlc3VsdFtpbmRleF0gPSBsaXN0W2luZGV4KytdO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyIGFkZEdldHRlciA9IGZ1bmN0aW9uKGl0LCBrZXksIGludGVybmFsKXtcbiAgICBkUChpdCwga2V5LCB7Z2V0OiBmdW5jdGlvbigpeyByZXR1cm4gdGhpcy5fZFtpbnRlcm5hbF07IH19KTtcbiAgfTtcblxuICB2YXIgJGZyb20gPSBmdW5jdGlvbiBmcm9tKHNvdXJjZSAvKiwgbWFwZm4sIHRoaXNBcmcgKi8pe1xuICAgIHZhciBPICAgICAgID0gdG9PYmplY3Qoc291cmNlKVxuICAgICAgLCBhTGVuICAgID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgLCBtYXBmbiAgID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWRcbiAgICAgICwgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWRcbiAgICAgICwgaXRlckZuICA9IGdldEl0ZXJGbihPKVxuICAgICAgLCBpLCBsZW5ndGgsIHZhbHVlcywgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZihpdGVyRm4gIT0gdW5kZWZpbmVkICYmICFpc0FycmF5SXRlcihpdGVyRm4pKXtcbiAgICAgIGZvcihpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCB2YWx1ZXMgPSBbXSwgaSA9IDA7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaSsrKXtcbiAgICAgICAgdmFsdWVzLnB1c2goc3RlcC52YWx1ZSk7XG4gICAgICB9IE8gPSB2YWx1ZXM7XG4gICAgfVxuICAgIGlmKG1hcHBpbmcgJiYgYUxlbiA+IDIpbWFwZm4gPSBjdHgobWFwZm4sIGFyZ3VtZW50c1syXSwgMik7XG4gICAgZm9yKGkgPSAwLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCksIHJlc3VsdCA9IGFsbG9jYXRlKHRoaXMsIGxlbmd0aCk7IGxlbmd0aCA+IGk7IGkrKyl7XG4gICAgICByZXN1bHRbaV0gPSBtYXBwaW5nID8gbWFwZm4oT1tpXSwgaSkgOiBPW2ldO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHZhciAkb2YgPSBmdW5jdGlvbiBvZigvKi4uLml0ZW1zKi8pe1xuICAgIHZhciBpbmRleCAgPSAwXG4gICAgICAsIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICwgcmVzdWx0ID0gYWxsb2NhdGUodGhpcywgbGVuZ3RoKTtcbiAgICB3aGlsZShsZW5ndGggPiBpbmRleClyZXN1bHRbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4KytdO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gaU9TIFNhZmFyaSA2LnggZmFpbHMgaGVyZVxuICB2YXIgVE9fTE9DQUxFX0JVRyA9ICEhVWludDhBcnJheSAmJiBmYWlscyhmdW5jdGlvbigpeyBhcnJheVRvTG9jYWxlU3RyaW5nLmNhbGwobmV3IFVpbnQ4QXJyYXkoMSkpOyB9KTtcblxuICB2YXIgJHRvTG9jYWxlU3RyaW5nID0gZnVuY3Rpb24gdG9Mb2NhbGVTdHJpbmcoKXtcbiAgICByZXR1cm4gYXJyYXlUb0xvY2FsZVN0cmluZy5hcHBseShUT19MT0NBTEVfQlVHID8gYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpKSA6IHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICB9O1xuXG4gIHZhciBwcm90byA9IHtcbiAgICBjb3B5V2l0aGluOiBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldCwgc3RhcnQgLyosIGVuZCAqLyl7XG4gICAgICByZXR1cm4gYXJyYXlDb3B5V2l0aGluLmNhbGwodmFsaWRhdGUodGhpcyksIHRhcmdldCwgc3RhcnQsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qLCB0aGlzQXJnICovKXtcbiAgICAgIHJldHVybiBhcnJheUV2ZXJ5KHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaWxsOiBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qLCBzdGFydCwgZW5kICovKXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5RmlsbC5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyosIHRoaXNBcmcgKi8pe1xuICAgICAgcmV0dXJuIHNwZWNpZXNGcm9tTGlzdCh0aGlzLCBhcnJheUZpbHRlcih2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbixcbiAgICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpKTtcbiAgICB9LFxuICAgIGZpbmQ6IGZ1bmN0aW9uIGZpbmQocHJlZGljYXRlIC8qLCB0aGlzQXJnICovKXtcbiAgICAgIHJldHVybiBhcnJheUZpbmQodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgocHJlZGljYXRlIC8qLCB0aGlzQXJnICovKXtcbiAgICAgIHJldHVybiBhcnJheUZpbmRJbmRleCh2YWxpZGF0ZSh0aGlzKSwgcHJlZGljYXRlLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyosIHRoaXNBcmcgKi8pe1xuICAgICAgYXJyYXlGb3JFYWNoKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyosIGZyb21JbmRleCAqLyl7XG4gICAgICByZXR1cm4gYXJyYXlJbmRleE9mKHZhbGlkYXRlKHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoRWxlbWVudCAvKiwgZnJvbUluZGV4ICovKXtcbiAgICAgIHJldHVybiBhcnJheUluY2x1ZGVzKHZhbGlkYXRlKHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcil7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUpvaW4uYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiwgZnJvbUluZGV4ICovKXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5TGFzdEluZGV4T2YuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBtYXA6IGZ1bmN0aW9uIG1hcChtYXBmbiAvKiwgdGhpc0FyZyAqLyl7XG4gICAgICByZXR1cm4gJG1hcCh2YWxpZGF0ZSh0aGlzKSwgbWFwZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyosIGluaXRpYWxWYWx1ZSAqLyl7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZS5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qLCBpbml0aWFsVmFsdWUgKi8peyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlSZWR1Y2VSaWdodC5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHJldmVyc2U6IGZ1bmN0aW9uIHJldmVyc2UoKXtcbiAgICAgIHZhciB0aGF0ICAgPSB0aGlzXG4gICAgICAgICwgbGVuZ3RoID0gdmFsaWRhdGUodGhhdCkubGVuZ3RoXG4gICAgICAgICwgbWlkZGxlID0gTWF0aC5mbG9vcihsZW5ndGggLyAyKVxuICAgICAgICAsIGluZGV4ICA9IDBcbiAgICAgICAgLCB2YWx1ZTtcbiAgICAgIHdoaWxlKGluZGV4IDwgbWlkZGxlKXtcbiAgICAgICAgdmFsdWUgICAgICAgICA9IHRoYXRbaW5kZXhdO1xuICAgICAgICB0aGF0W2luZGV4KytdID0gdGhhdFstLWxlbmd0aF07XG4gICAgICAgIHRoYXRbbGVuZ3RoXSAgPSB2YWx1ZTtcbiAgICAgIH0gcmV0dXJuIHRoYXQ7XG4gICAgfSxcbiAgICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyosIHRoaXNBcmcgKi8pe1xuICAgICAgcmV0dXJuIGFycmF5U29tZSh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlZm4pe1xuICAgICAgcmV0dXJuIGFycmF5U29ydC5jYWxsKHZhbGlkYXRlKHRoaXMpLCBjb21wYXJlZm4pO1xuICAgIH0sXG4gICAgc3ViYXJyYXk6IGZ1bmN0aW9uIHN1YmFycmF5KGJlZ2luLCBlbmQpe1xuICAgICAgdmFyIE8gICAgICA9IHZhbGlkYXRlKHRoaXMpXG4gICAgICAgICwgbGVuZ3RoID0gTy5sZW5ndGhcbiAgICAgICAgLCAkYmVnaW4gPSB0b0luZGV4KGJlZ2luLCBsZW5ndGgpO1xuICAgICAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSkpKFxuICAgICAgICBPLmJ1ZmZlcixcbiAgICAgICAgTy5ieXRlT2Zmc2V0ICsgJGJlZ2luICogTy5CWVRFU19QRVJfRUxFTUVOVCxcbiAgICAgICAgdG9MZW5ndGgoKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9JbmRleChlbmQsIGxlbmd0aCkpIC0gJGJlZ2luKVxuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyICRzbGljZSA9IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpe1xuICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpLCBzdGFydCwgZW5kKSk7XG4gIH07XG5cbiAgdmFyICRzZXQgPSBmdW5jdGlvbiBzZXQoYXJyYXlMaWtlIC8qLCBvZmZzZXQgKi8pe1xuICAgIHZhbGlkYXRlKHRoaXMpO1xuICAgIHZhciBvZmZzZXQgPSB0b09mZnNldChhcmd1bWVudHNbMV0sIDEpXG4gICAgICAsIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgICAsIHNyYyAgICA9IHRvT2JqZWN0KGFycmF5TGlrZSlcbiAgICAgICwgbGVuICAgID0gdG9MZW5ndGgoc3JjLmxlbmd0aClcbiAgICAgICwgaW5kZXggID0gMDtcbiAgICBpZihsZW4gKyBvZmZzZXQgPiBsZW5ndGgpdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHdoaWxlKGluZGV4IDwgbGVuKXRoaXNbb2Zmc2V0ICsgaW5kZXhdID0gc3JjW2luZGV4KytdO1xuICB9O1xuXG4gIHZhciAkaXRlcmF0b3JzID0ge1xuICAgIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoKXtcbiAgICAgIHJldHVybiBhcnJheUVudHJpZXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICBrZXlzOiBmdW5jdGlvbiBrZXlzKCl7XG4gICAgICByZXR1cm4gYXJyYXlLZXlzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH0sXG4gICAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoKXtcbiAgICAgIHJldHVybiBhcnJheVZhbHVlcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzVEFJbmRleCA9IGZ1bmN0aW9uKHRhcmdldCwga2V5KXtcbiAgICByZXR1cm4gaXNPYmplY3QodGFyZ2V0KVxuICAgICAgJiYgdGFyZ2V0W1RZUEVEX0FSUkFZXVxuICAgICAgJiYgdHlwZW9mIGtleSAhPSAnc3ltYm9sJ1xuICAgICAgJiYga2V5IGluIHRhcmdldFxuICAgICAgJiYgU3RyaW5nKCtrZXkpID09IFN0cmluZyhrZXkpO1xuICB9O1xuICB2YXIgJGdldERlc2MgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpe1xuICAgIHJldHVybiBpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgPyBwcm9wZXJ0eURlc2MoMiwgdGFyZ2V0W2tleV0pXG4gICAgICA6IGdPUEQodGFyZ2V0LCBrZXkpO1xuICB9O1xuICB2YXIgJHNldERlc2MgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzYyl7XG4gICAgaWYoaXNUQUluZGV4KHRhcmdldCwga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSlcbiAgICAgICYmIGlzT2JqZWN0KGRlc2MpXG4gICAgICAmJiBoYXMoZGVzYywgJ3ZhbHVlJylcbiAgICAgICYmICFoYXMoZGVzYywgJ2dldCcpXG4gICAgICAmJiAhaGFzKGRlc2MsICdzZXQnKVxuICAgICAgLy8gVE9ETzogYWRkIHZhbGlkYXRpb24gZGVzY3JpcHRvciB3L28gY2FsbGluZyBhY2Nlc3NvcnNcbiAgICAgICYmICFkZXNjLmNvbmZpZ3VyYWJsZVxuICAgICAgJiYgKCFoYXMoZGVzYywgJ3dyaXRhYmxlJykgfHwgZGVzYy53cml0YWJsZSlcbiAgICAgICYmICghaGFzKGRlc2MsICdlbnVtZXJhYmxlJykgfHwgZGVzYy5lbnVtZXJhYmxlKVxuICAgICl7XG4gICAgICB0YXJnZXRba2V5XSA9IGRlc2MudmFsdWU7XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH0gZWxzZSByZXR1cm4gZFAodGFyZ2V0LCBrZXksIGRlc2MpO1xuICB9O1xuXG4gIGlmKCFBTExfQ09OU1RSVUNUT1JTKXtcbiAgICAkR09QRC5mID0gJGdldERlc2M7XG4gICAgJERQLmYgICA9ICRzZXREZXNjO1xuICB9XG5cbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhQUxMX0NPTlNUUlVDVE9SUywgJ09iamVjdCcsIHtcbiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXREZXNjLFxuICAgIGRlZmluZVByb3BlcnR5OiAgICAgICAgICAgJHNldERlc2NcbiAgfSk7XG5cbiAgaWYoZmFpbHMoZnVuY3Rpb24oKXsgYXJyYXlUb1N0cmluZy5jYWxsKHt9KTsgfSkpe1xuICAgIGFycmF5VG9TdHJpbmcgPSBhcnJheVRvTG9jYWxlU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKXtcbiAgICAgIHJldHVybiBhcnJheUpvaW4uY2FsbCh0aGlzKTtcbiAgICB9XG4gIH1cblxuICB2YXIgJFR5cGVkQXJyYXlQcm90b3R5cGUkID0gcmVkZWZpbmVBbGwoe30sIHByb3RvKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAkaXRlcmF0b3JzKTtcbiAgaGlkZSgkVHlwZWRBcnJheVByb3RvdHlwZSQsIElURVJBVE9SLCAkaXRlcmF0b3JzLnZhbHVlcyk7XG4gIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwge1xuICAgIHNsaWNlOiAgICAgICAgICAkc2xpY2UsXG4gICAgc2V0OiAgICAgICAgICAgICRzZXQsXG4gICAgY29uc3RydWN0b3I6ICAgIGZ1bmN0aW9uKCl7IC8qIG5vb3AgKi8gfSxcbiAgICB0b1N0cmluZzogICAgICAgYXJyYXlUb1N0cmluZyxcbiAgICB0b0xvY2FsZVN0cmluZzogJHRvTG9jYWxlU3RyaW5nXG4gIH0pO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnVmZmVyJywgJ2InKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVPZmZzZXQnLCAnbycpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZUxlbmd0aCcsICdsJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdsZW5ndGgnLCAnZScpO1xuICBkUCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIFRBRywge1xuICAgIGdldDogZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXNbVFlQRURfQVJSQVldOyB9XG4gIH0pO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oS0VZLCBCWVRFUywgd3JhcHBlciwgQ0xBTVBFRCl7XG4gICAgQ0xBTVBFRCA9ICEhQ0xBTVBFRDtcbiAgICB2YXIgTkFNRSAgICAgICA9IEtFWSArIChDTEFNUEVEID8gJ0NsYW1wZWQnIDogJycpICsgJ0FycmF5J1xuICAgICAgLCBJU05UX1VJTlQ4ID0gTkFNRSAhPSAnVWludDhBcnJheSdcbiAgICAgICwgR0VUVEVSICAgICA9ICdnZXQnICsgS0VZXG4gICAgICAsIFNFVFRFUiAgICAgPSAnc2V0JyArIEtFWVxuICAgICAgLCBUeXBlZEFycmF5ID0gZ2xvYmFsW05BTUVdXG4gICAgICAsIEJhc2UgICAgICAgPSBUeXBlZEFycmF5IHx8IHt9XG4gICAgICAsIFRBQyAgICAgICAgPSBUeXBlZEFycmF5ICYmIGdldFByb3RvdHlwZU9mKFR5cGVkQXJyYXkpXG4gICAgICAsIEZPUkNFRCAgICAgPSAhVHlwZWRBcnJheSB8fCAhJHR5cGVkLkFCVlxuICAgICAgLCBPICAgICAgICAgID0ge31cbiAgICAgICwgVHlwZWRBcnJheVByb3RvdHlwZSA9IFR5cGVkQXJyYXkgJiYgVHlwZWRBcnJheVtQUk9UT1RZUEVdO1xuICAgIHZhciBnZXR0ZXIgPSBmdW5jdGlvbih0aGF0LCBpbmRleCl7XG4gICAgICB2YXIgZGF0YSA9IHRoYXQuX2Q7XG4gICAgICByZXR1cm4gZGF0YS52W0dFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEubywgTElUVExFX0VORElBTik7XG4gICAgfTtcbiAgICB2YXIgc2V0dGVyID0gZnVuY3Rpb24odGhhdCwgaW5kZXgsIHZhbHVlKXtcbiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDtcbiAgICAgIGlmKENMQU1QRUQpdmFsdWUgPSAodmFsdWUgPSBNYXRoLnJvdW5kKHZhbHVlKSkgPCAwID8gMCA6IHZhbHVlID4gMHhmZiA/IDB4ZmYgOiB2YWx1ZSAmIDB4ZmY7XG4gICAgICBkYXRhLnZbU0VUVEVSXShpbmRleCAqIEJZVEVTICsgZGF0YS5vLCB2YWx1ZSwgTElUVExFX0VORElBTik7XG4gICAgfTtcbiAgICB2YXIgYWRkRWxlbWVudCA9IGZ1bmN0aW9uKHRoYXQsIGluZGV4KXtcbiAgICAgIGRQKHRoYXQsIGluZGV4LCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKXtcbiAgICAgICAgICByZXR1cm4gZ2V0dGVyKHRoaXMsIGluZGV4KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSl7XG4gICAgICAgICAgcmV0dXJuIHNldHRlcih0aGlzLCBpbmRleCwgdmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9O1xuICAgIGlmKEZPUkNFRCl7XG4gICAgICBUeXBlZEFycmF5ID0gd3JhcHBlcihmdW5jdGlvbih0aGF0LCBkYXRhLCAkb2Zmc2V0LCAkbGVuZ3RoKXtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FLCAnX2QnKTtcbiAgICAgICAgdmFyIGluZGV4ICA9IDBcbiAgICAgICAgICAsIG9mZnNldCA9IDBcbiAgICAgICAgICAsIGJ1ZmZlciwgYnl0ZUxlbmd0aCwgbGVuZ3RoLCBrbGFzcztcbiAgICAgICAgaWYoIWlzT2JqZWN0KGRhdGEpKXtcbiAgICAgICAgICBsZW5ndGggICAgID0gc3RyaWN0VG9MZW5ndGgoZGF0YSwgdHJ1ZSlcbiAgICAgICAgICBieXRlTGVuZ3RoID0gbGVuZ3RoICogQllURVM7XG4gICAgICAgICAgYnVmZmVyICAgICA9IG5ldyAkQXJyYXlCdWZmZXIoYnl0ZUxlbmd0aCk7XG4gICAgICAgIH0gZWxzZSBpZihkYXRhIGluc3RhbmNlb2YgJEFycmF5QnVmZmVyIHx8IChrbGFzcyA9IGNsYXNzb2YoZGF0YSkpID09IEFSUkFZX0JVRkZFUiB8fCBrbGFzcyA9PSBTSEFSRURfQlVGRkVSKXtcbiAgICAgICAgICBidWZmZXIgPSBkYXRhO1xuICAgICAgICAgIG9mZnNldCA9IHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKTtcbiAgICAgICAgICB2YXIgJGxlbiA9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgICBpZigkbGVuZ3RoID09PSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgaWYoJGxlbiAlIEJZVEVTKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSAkbGVuIC0gb2Zmc2V0O1xuICAgICAgICAgICAgaWYoYnl0ZUxlbmd0aCA8IDApdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gdG9MZW5ndGgoJGxlbmd0aCkgKiBCWVRFUztcbiAgICAgICAgICAgIGlmKGJ5dGVMZW5ndGggKyBvZmZzZXQgPiAkbGVuKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGVuZ3RoID0gYnl0ZUxlbmd0aCAvIEJZVEVTO1xuICAgICAgICB9IGVsc2UgaWYoVFlQRURfQVJSQVkgaW4gZGF0YSl7XG4gICAgICAgICAgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiAkZnJvbS5jYWxsKFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGhpZGUodGhhdCwgJ19kJywge1xuICAgICAgICAgIGI6IGJ1ZmZlcixcbiAgICAgICAgICBvOiBvZmZzZXQsXG4gICAgICAgICAgbDogYnl0ZUxlbmd0aCxcbiAgICAgICAgICBlOiBsZW5ndGgsXG4gICAgICAgICAgdjogbmV3ICREYXRhVmlldyhidWZmZXIpXG4gICAgICAgIH0pO1xuICAgICAgICB3aGlsZShpbmRleCA8IGxlbmd0aClhZGRFbGVtZW50KHRoYXQsIGluZGV4KyspO1xuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gY3JlYXRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCk7XG4gICAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIFR5cGVkQXJyYXkpO1xuICAgIH0gZWxzZSBpZighJGl0ZXJEZXRlY3QoZnVuY3Rpb24oaXRlcil7XG4gICAgICAvLyBWOCB3b3JrcyB3aXRoIGl0ZXJhdG9ycywgYnV0IGZhaWxzIGluIG1hbnkgb3RoZXIgY2FzZXNcbiAgICAgIC8vIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00NTUyXG4gICAgICBuZXcgVHlwZWRBcnJheShudWxsKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KGl0ZXIpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIH0sIHRydWUpKXtcbiAgICAgIFR5cGVkQXJyYXkgPSB3cmFwcGVyKGZ1bmN0aW9uKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpe1xuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXksIE5BTUUpO1xuICAgICAgICB2YXIga2xhc3M7XG4gICAgICAgIC8vIGB3c2AgbW9kdWxlIGJ1ZywgdGVtcG9yYXJpbHkgcmVtb3ZlIHZhbGlkYXRpb24gbGVuZ3RoIGZvciBVaW50OEFycmF5XG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJzb2NrZXRzL3dzL3B1bGwvNjQ1XG4gICAgICAgIGlmKCFpc09iamVjdChkYXRhKSlyZXR1cm4gbmV3IEJhc2Uoc3RyaWN0VG9MZW5ndGgoZGF0YSwgSVNOVF9VSU5UOCkpO1xuICAgICAgICBpZihkYXRhIGluc3RhbmNlb2YgJEFycmF5QnVmZmVyIHx8IChrbGFzcyA9IGNsYXNzb2YoZGF0YSkpID09IEFSUkFZX0JVRkZFUiB8fCBrbGFzcyA9PSBTSEFSRURfQlVGRkVSKXtcbiAgICAgICAgICByZXR1cm4gJGxlbmd0aCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSwgJGxlbmd0aClcbiAgICAgICAgICAgIDogJG9mZnNldCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gbmV3IEJhc2UoZGF0YSwgdG9PZmZzZXQoJG9mZnNldCwgQllURVMpKVxuICAgICAgICAgICAgICA6IG5ldyBCYXNlKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGlmKFRZUEVEX0FSUkFZIGluIGRhdGEpcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgIH0pO1xuICAgICAgYXJyYXlGb3JFYWNoKFRBQyAhPT0gRnVuY3Rpb24ucHJvdG90eXBlID8gZ09QTihCYXNlKS5jb25jYXQoZ09QTihUQUMpKSA6IGdPUE4oQmFzZSksIGZ1bmN0aW9uKGtleSl7XG4gICAgICAgIGlmKCEoa2V5IGluIFR5cGVkQXJyYXkpKWhpZGUoVHlwZWRBcnJheSwga2V5LCBCYXNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5W1BST1RPVFlQRV0gPSBUeXBlZEFycmF5UHJvdG90eXBlO1xuICAgICAgaWYoIUxJQlJBUlkpVHlwZWRBcnJheVByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFR5cGVkQXJyYXk7XG4gICAgfVxuICAgIHZhciAkbmF0aXZlSXRlcmF0b3IgICA9IFR5cGVkQXJyYXlQcm90b3R5cGVbSVRFUkFUT1JdXG4gICAgICAsIENPUlJFQ1RfSVRFUl9OQU1FID0gISEkbmF0aXZlSXRlcmF0b3IgJiYgKCRuYXRpdmVJdGVyYXRvci5uYW1lID09ICd2YWx1ZXMnIHx8ICRuYXRpdmVJdGVyYXRvci5uYW1lID09IHVuZGVmaW5lZClcbiAgICAgICwgJGl0ZXJhdG9yICAgICAgICAgPSAkaXRlcmF0b3JzLnZhbHVlcztcbiAgICBoaWRlKFR5cGVkQXJyYXksIFRZUEVEX0NPTlNUUlVDVE9SLCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIFRZUEVEX0FSUkFZLCBOQU1FKTtcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIFZJRVcsIHRydWUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgREVGX0NPTlNUUlVDVE9SLCBUeXBlZEFycmF5KTtcblxuICAgIGlmKENMQU1QRUQgPyBuZXcgVHlwZWRBcnJheSgxKVtUQUddICE9IE5BTUUgOiAhKFRBRyBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSl7XG4gICAgICBkUChUeXBlZEFycmF5UHJvdG90eXBlLCBUQUcsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpeyByZXR1cm4gTkFNRTsgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgT1tOQU1FXSA9IFR5cGVkQXJyYXk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChUeXBlZEFycmF5ICE9IEJhc2UpLCBPKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TLCBOQU1FLCB7XG4gICAgICBCWVRFU19QRVJfRUxFTUVOVDogQllURVMsXG4gICAgICBmcm9tOiAkZnJvbSxcbiAgICAgIG9mOiAkb2ZcbiAgICB9KTtcblxuICAgIGlmKCEoQllURVNfUEVSX0VMRU1FTlQgaW4gVHlwZWRBcnJheVByb3RvdHlwZSkpaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBCWVRFU19QRVJfRUxFTUVOVCwgQllURVMpO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAsIE5BTUUsIHByb3RvKTtcblxuICAgIHNldFNwZWNpZXMoTkFNRSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIEZPUkNFRF9TRVQsIE5BTUUsIHtzZXQ6ICRzZXR9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIUNPUlJFQ1RfSVRFUl9OQU1FLCBOQU1FLCAkaXRlcmF0b3JzKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKFR5cGVkQXJyYXlQcm90b3R5cGUudG9TdHJpbmcgIT0gYXJyYXlUb1N0cmluZyksIE5BTUUsIHt0b1N0cmluZzogYXJyYXlUb1N0cmluZ30pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbigpe1xuICAgICAgbmV3IFR5cGVkQXJyYXkoMSkuc2xpY2UoKTtcbiAgICB9KSwgTkFNRSwge3NsaWNlOiAkc2xpY2V9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKGZhaWxzKGZ1bmN0aW9uKCl7XG4gICAgICByZXR1cm4gWzEsIDJdLnRvTG9jYWxlU3RyaW5nKCkgIT0gbmV3IFR5cGVkQXJyYXkoWzEsIDJdKS50b0xvY2FsZVN0cmluZygpXG4gICAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uKCl7XG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlLnRvTG9jYWxlU3RyaW5nLmNhbGwoWzEsIDJdKTtcbiAgICB9KSksIE5BTUUsIHt0b0xvY2FsZVN0cmluZzogJHRvTG9jYWxlU3RyaW5nfSk7XG5cbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBDT1JSRUNUX0lURVJfTkFNRSA/ICRuYXRpdmVJdGVyYXRvciA6ICRpdGVyYXRvcjtcbiAgICBpZighTElCUkFSWSAmJiAhQ09SUkVDVF9JVEVSX05BTUUpaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBJVEVSQVRPUiwgJGl0ZXJhdG9yKTtcbiAgfTtcbn0gZWxzZSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCl7IC8qIGVtcHR5ICovIH07IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCAgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBERVNDUklQVE9SUyAgICA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJylcbiAgLCBMSUJSQVJZICAgICAgICA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKVxuICAsICR0eXBlZCAgICAgICAgID0gcmVxdWlyZSgnLi9fdHlwZWQnKVxuICAsIGhpZGUgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpXG4gICwgcmVkZWZpbmVBbGwgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKVxuICAsIGZhaWxzICAgICAgICAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKVxuICAsIGFuSW5zdGFuY2UgICAgID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKVxuICAsIHRvSW50ZWdlciAgICAgID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpXG4gICwgdG9MZW5ndGggICAgICAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKVxuICAsIGdPUE4gICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mXG4gICwgZFAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mXG4gICwgYXJyYXlGaWxsICAgICAgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJylcbiAgLCBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJylcbiAgLCBBUlJBWV9CVUZGRVIgICA9ICdBcnJheUJ1ZmZlcidcbiAgLCBEQVRBX1ZJRVcgICAgICA9ICdEYXRhVmlldydcbiAgLCBQUk9UT1RZUEUgICAgICA9ICdwcm90b3R5cGUnXG4gICwgV1JPTkdfTEVOR1RIICAgPSAnV3JvbmcgbGVuZ3RoISdcbiAgLCBXUk9OR19JTkRFWCAgICA9ICdXcm9uZyBpbmRleCEnXG4gICwgJEFycmF5QnVmZmVyICAgPSBnbG9iYWxbQVJSQVlfQlVGRkVSXVxuICAsICREYXRhVmlldyAgICAgID0gZ2xvYmFsW0RBVEFfVklFV11cbiAgLCBNYXRoICAgICAgICAgICA9IGdsb2JhbC5NYXRoXG4gICwgUmFuZ2VFcnJvciAgICAgPSBnbG9iYWwuUmFuZ2VFcnJvclxuICAsIEluZmluaXR5ICAgICAgID0gZ2xvYmFsLkluZmluaXR5XG4gICwgQmFzZUJ1ZmZlciAgICAgPSAkQXJyYXlCdWZmZXJcbiAgLCBhYnMgICAgICAgICAgICA9IE1hdGguYWJzXG4gICwgcG93ICAgICAgICAgICAgPSBNYXRoLnBvd1xuICAsIGZsb29yICAgICAgICAgID0gTWF0aC5mbG9vclxuICAsIGxvZyAgICAgICAgICAgID0gTWF0aC5sb2dcbiAgLCBMTjIgICAgICAgICAgICA9IE1hdGguTE4yXG4gICwgQlVGRkVSICAgICAgICAgPSAnYnVmZmVyJ1xuICAsIEJZVEVfTEVOR1RIICAgID0gJ2J5dGVMZW5ndGgnXG4gICwgQllURV9PRkZTRVQgICAgPSAnYnl0ZU9mZnNldCdcbiAgLCAkQlVGRkVSICAgICAgICA9IERFU0NSSVBUT1JTID8gJ19iJyA6IEJVRkZFUlxuICAsICRMRU5HVEggICAgICAgID0gREVTQ1JJUFRPUlMgPyAnX2wnIDogQllURV9MRU5HVEhcbiAgLCAkT0ZGU0VUICAgICAgICA9IERFU0NSSVBUT1JTID8gJ19vJyA6IEJZVEVfT0ZGU0VUO1xuXG4vLyBJRUVFNzU0IGNvbnZlcnNpb25zIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvaWVlZTc1NFxudmFyIHBhY2tJRUVFNzU0ID0gZnVuY3Rpb24odmFsdWUsIG1MZW4sIG5CeXRlcyl7XG4gIHZhciBidWZmZXIgPSBBcnJheShuQnl0ZXMpXG4gICAgLCBlTGVuICAgPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDFcbiAgICAsIGVNYXggICA9ICgxIDw8IGVMZW4pIC0gMVxuICAgICwgZUJpYXMgID0gZU1heCA+PiAxXG4gICAgLCBydCAgICAgPSBtTGVuID09PSAyMyA/IHBvdygyLCAtMjQpIC0gcG93KDIsIC03NykgOiAwXG4gICAgLCBpICAgICAgPSAwXG4gICAgLCBzICAgICAgPSB2YWx1ZSA8IDAgfHwgdmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCA/IDEgOiAwXG4gICAgLCBlLCBtLCBjO1xuICB2YWx1ZSA9IGFicyh2YWx1ZSlcbiAgaWYodmFsdWUgIT0gdmFsdWUgfHwgdmFsdWUgPT09IEluZmluaXR5KXtcbiAgICBtID0gdmFsdWUgIT0gdmFsdWUgPyAxIDogMDtcbiAgICBlID0gZU1heDtcbiAgfSBlbHNlIHtcbiAgICBlID0gZmxvb3IobG9nKHZhbHVlKSAvIExOMik7XG4gICAgaWYodmFsdWUgKiAoYyA9IHBvdygyLCAtZSkpIDwgMSl7XG4gICAgICBlLS07XG4gICAgICBjICo9IDI7XG4gICAgfVxuICAgIGlmKGUgKyBlQmlhcyA+PSAxKXtcbiAgICAgIHZhbHVlICs9IHJ0IC8gYztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBwb3coMiwgMSAtIGVCaWFzKTtcbiAgICB9XG4gICAgaWYodmFsdWUgKiBjID49IDIpe1xuICAgICAgZSsrO1xuICAgICAgYyAvPSAyO1xuICAgIH1cbiAgICBpZihlICsgZUJpYXMgPj0gZU1heCl7XG4gICAgICBtID0gMDtcbiAgICAgIGUgPSBlTWF4O1xuICAgIH0gZWxzZSBpZihlICsgZUJpYXMgPj0gMSl7XG4gICAgICBtID0gKHZhbHVlICogYyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IGUgKyBlQmlhcztcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogcG93KDIsIGVCaWFzIC0gMSkgKiBwb3coMiwgbUxlbik7XG4gICAgICBlID0gMDtcbiAgICB9XG4gIH1cbiAgZm9yKDsgbUxlbiA+PSA4OyBidWZmZXJbaSsrXSA9IG0gJiAyNTUsIG0gLz0gMjU2LCBtTGVuIC09IDgpO1xuICBlID0gZSA8PCBtTGVuIHwgbTtcbiAgZUxlbiArPSBtTGVuO1xuICBmb3IoOyBlTGVuID4gMDsgYnVmZmVyW2krK10gPSBlICYgMjU1LCBlIC89IDI1NiwgZUxlbiAtPSA4KTtcbiAgYnVmZmVyWy0taV0gfD0gcyAqIDEyODtcbiAgcmV0dXJuIGJ1ZmZlcjtcbn07XG52YXIgdW5wYWNrSUVFRTc1NCA9IGZ1bmN0aW9uKGJ1ZmZlciwgbUxlbiwgbkJ5dGVzKXtcbiAgdmFyIGVMZW4gID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxXG4gICAgLCBlTWF4ICA9ICgxIDw8IGVMZW4pIC0gMVxuICAgICwgZUJpYXMgPSBlTWF4ID4+IDFcbiAgICAsIG5CaXRzID0gZUxlbiAtIDdcbiAgICAsIGkgICAgID0gbkJ5dGVzIC0gMVxuICAgICwgcyAgICAgPSBidWZmZXJbaS0tXVxuICAgICwgZSAgICAgPSBzICYgMTI3XG4gICAgLCBtO1xuICBzID4+PSA3O1xuICBmb3IoOyBuQml0cyA+IDA7IGUgPSBlICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpO1xuICBtID0gZSAmICgxIDw8IC1uQml0cykgLSAxO1xuICBlID4+PSAtbkJpdHM7XG4gIG5CaXRzICs9IG1MZW47XG4gIGZvcig7IG5CaXRzID4gMDsgbSA9IG0gKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIGlmKGUgPT09IDApe1xuICAgIGUgPSAxIC0gZUJpYXM7XG4gIH0gZWxzZSBpZihlID09PSBlTWF4KXtcbiAgICByZXR1cm4gbSA/IE5hTiA6IHMgPyAtSW5maW5pdHkgOiBJbmZpbml0eTtcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIHBvdygyLCBtTGVuKTtcbiAgICBlID0gZSAtIGVCaWFzO1xuICB9IHJldHVybiAocyA/IC0xIDogMSkgKiBtICogcG93KDIsIGUgLSBtTGVuKTtcbn07XG5cbnZhciB1bnBhY2tJMzIgPSBmdW5jdGlvbihieXRlcyl7XG4gIHJldHVybiBieXRlc1szXSA8PCAyNCB8IGJ5dGVzWzJdIDw8IDE2IHwgYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xufTtcbnZhciBwYWNrSTggPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBbaXQgJiAweGZmXTtcbn07XG52YXIgcGFja0kxNiA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIFtpdCAmIDB4ZmYsIGl0ID4+IDggJiAweGZmXTtcbn07XG52YXIgcGFja0kzMiA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIFtpdCAmIDB4ZmYsIGl0ID4+IDggJiAweGZmLCBpdCA+PiAxNiAmIDB4ZmYsIGl0ID4+IDI0ICYgMHhmZl07XG59O1xudmFyIHBhY2tGNjQgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBwYWNrSUVFRTc1NChpdCwgNTIsIDgpO1xufTtcbnZhciBwYWNrRjMyID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDIzLCA0KTtcbn07XG5cbnZhciBhZGRHZXR0ZXIgPSBmdW5jdGlvbihDLCBrZXksIGludGVybmFsKXtcbiAgZFAoQ1tQUk9UT1RZUEVdLCBrZXksIHtnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzW2ludGVybmFsXTsgfX0pO1xufTtcblxudmFyIGdldCA9IGZ1bmN0aW9uKHZpZXcsIGJ5dGVzLCBpbmRleCwgaXNMaXR0bGVFbmRpYW4pe1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXhcbiAgICAsIGludEluZGV4ID0gdG9JbnRlZ2VyKG51bUluZGV4KTtcbiAgaWYobnVtSW5kZXggIT0gaW50SW5kZXggfHwgaW50SW5kZXggPCAwIHx8IGludEluZGV4ICsgYnl0ZXMgPiB2aWV3WyRMRU5HVEhdKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iXG4gICAgLCBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXVxuICAgICwgcGFjayAgPSBzdG9yZS5zbGljZShzdGFydCwgc3RhcnQgKyBieXRlcyk7XG4gIHJldHVybiBpc0xpdHRsZUVuZGlhbiA/IHBhY2sgOiBwYWNrLnJldmVyc2UoKTtcbn07XG52YXIgc2V0ID0gZnVuY3Rpb24odmlldywgYnl0ZXMsIGluZGV4LCBjb252ZXJzaW9uLCB2YWx1ZSwgaXNMaXR0bGVFbmRpYW4pe1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXhcbiAgICAsIGludEluZGV4ID0gdG9JbnRlZ2VyKG51bUluZGV4KTtcbiAgaWYobnVtSW5kZXggIT0gaW50SW5kZXggfHwgaW50SW5kZXggPCAwIHx8IGludEluZGV4ICsgYnl0ZXMgPiB2aWV3WyRMRU5HVEhdKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iXG4gICAgLCBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXVxuICAgICwgcGFjayAgPSBjb252ZXJzaW9uKCt2YWx1ZSk7XG4gIGZvcih2YXIgaSA9IDA7IGkgPCBieXRlczsgaSsrKXN0b3JlW3N0YXJ0ICsgaV0gPSBwYWNrW2lzTGl0dGxlRW5kaWFuID8gaSA6IGJ5dGVzIC0gaSAtIDFdO1xufTtcblxudmFyIHZhbGlkYXRlQXJyYXlCdWZmZXJBcmd1bWVudHMgPSBmdW5jdGlvbih0aGF0LCBsZW5ndGgpe1xuICBhbkluc3RhbmNlKHRoYXQsICRBcnJheUJ1ZmZlciwgQVJSQVlfQlVGRkVSKTtcbiAgdmFyIG51bWJlckxlbmd0aCA9ICtsZW5ndGhcbiAgICAsIGJ5dGVMZW5ndGggICA9IHRvTGVuZ3RoKG51bWJlckxlbmd0aCk7XG4gIGlmKG51bWJlckxlbmd0aCAhPSBieXRlTGVuZ3RoKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgcmV0dXJuIGJ5dGVMZW5ndGg7XG59O1xuXG5pZighJHR5cGVkLkFCVil7XG4gICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCl7XG4gICAgdmFyIGJ5dGVMZW5ndGggPSB2YWxpZGF0ZUFycmF5QnVmZmVyQXJndW1lbnRzKHRoaXMsIGxlbmd0aCk7XG4gICAgdGhpcy5fYiAgICAgICA9IGFycmF5RmlsbC5jYWxsKEFycmF5KGJ5dGVMZW5ndGgpLCAwKTtcbiAgICB0aGlzWyRMRU5HVEhdID0gYnl0ZUxlbmd0aDtcbiAgfTtcblxuICAkRGF0YVZpZXcgPSBmdW5jdGlvbiBEYXRhVmlldyhidWZmZXIsIGJ5dGVPZmZzZXQsIGJ5dGVMZW5ndGgpe1xuICAgIGFuSW5zdGFuY2UodGhpcywgJERhdGFWaWV3LCBEQVRBX1ZJRVcpO1xuICAgIGFuSW5zdGFuY2UoYnVmZmVyLCAkQXJyYXlCdWZmZXIsIERBVEFfVklFVyk7XG4gICAgdmFyIGJ1ZmZlckxlbmd0aCA9IGJ1ZmZlclskTEVOR1RIXVxuICAgICAgLCBvZmZzZXQgICAgICAgPSB0b0ludGVnZXIoYnl0ZU9mZnNldCk7XG4gICAgaWYob2Zmc2V0IDwgMCB8fCBvZmZzZXQgPiBidWZmZXJMZW5ndGgpdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID09PSB1bmRlZmluZWQgPyBidWZmZXJMZW5ndGggLSBvZmZzZXQgOiB0b0xlbmd0aChieXRlTGVuZ3RoKTtcbiAgICBpZihvZmZzZXQgKyBieXRlTGVuZ3RoID4gYnVmZmVyTGVuZ3RoKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB0aGlzWyRCVUZGRVJdID0gYnVmZmVyO1xuICAgIHRoaXNbJE9GRlNFVF0gPSBvZmZzZXQ7XG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgaWYoREVTQ1JJUFRPUlMpe1xuICAgIGFkZEdldHRlcigkQXJyYXlCdWZmZXIsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCVUZGRVIsICdfYicpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX09GRlNFVCwgJ19vJyk7XG4gIH1cblxuICByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIGdldEludDg6IGZ1bmN0aW9uIGdldEludDgoYnl0ZU9mZnNldCl7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdIDw8IDI0ID4+IDI0O1xuICAgIH0sXG4gICAgZ2V0VWludDg6IGZ1bmN0aW9uIGdldFVpbnQ4KGJ5dGVPZmZzZXQpe1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXTtcbiAgICB9LFxuICAgIGdldEludDE2OiBmdW5jdGlvbiBnZXRJbnQxNihieXRlT2Zmc2V0IC8qLCBsaXR0bGVFbmRpYW4gKi8pe1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7XG4gICAgICByZXR1cm4gKGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXSkgPDwgMTYgPj4gMTY7XG4gICAgfSxcbiAgICBnZXRVaW50MTY6IGZ1bmN0aW9uIGdldFVpbnQxNihieXRlT2Zmc2V0IC8qLCBsaXR0bGVFbmRpYW4gKi8pe1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7XG4gICAgICByZXR1cm4gYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MzI6IGZ1bmN0aW9uIGdldEludDMyKGJ5dGVPZmZzZXQgLyosIGxpdHRsZUVuZGlhbiAqLyl7XG4gICAgICByZXR1cm4gdW5wYWNrSTMyKGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pKTtcbiAgICB9LFxuICAgIGdldFVpbnQzMjogZnVuY3Rpb24gZ2V0VWludDMyKGJ5dGVPZmZzZXQgLyosIGxpdHRsZUVuZGlhbiAqLyl7XG4gICAgICByZXR1cm4gdW5wYWNrSTMyKGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pKSA+Pj4gMDtcbiAgICB9LFxuICAgIGdldEZsb2F0MzI6IGZ1bmN0aW9uIGdldEZsb2F0MzIoYnl0ZU9mZnNldCAvKiwgbGl0dGxlRW5kaWFuICovKXtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCAyMywgNCk7XG4gICAgfSxcbiAgICBnZXRGbG9hdDY0OiBmdW5jdGlvbiBnZXRGbG9hdDY0KGJ5dGVPZmZzZXQgLyosIGxpdHRsZUVuZGlhbiAqLyl7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSwgNTIsIDgpO1xuICAgIH0sXG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSl7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpe1xuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJOCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2V0SW50MTY6IGZ1bmN0aW9uIHNldEludDE2KGJ5dGVPZmZzZXQsIHZhbHVlIC8qLCBsaXR0bGVFbmRpYW4gKi8pe1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDE2OiBmdW5jdGlvbiBzZXRVaW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyosIGxpdHRsZUVuZGlhbiAqLyl7XG4gICAgICBzZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgcGFja0kxNiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRJbnQzMjogZnVuY3Rpb24gc2V0SW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyosIGxpdHRsZUVuZGlhbiAqLyl7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0kzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRVaW50MzI6IGZ1bmN0aW9uIHNldFVpbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiwgbGl0dGxlRW5kaWFuICovKXtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0MzI6IGZ1bmN0aW9uIHNldEZsb2F0MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyosIGxpdHRsZUVuZGlhbiAqLyl7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0YzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRGbG9hdDY0OiBmdW5jdGlvbiBzZXRGbG9hdDY0KGJ5dGVPZmZzZXQsIHZhbHVlIC8qLCBsaXR0bGVFbmRpYW4gKi8pe1xuICAgICAgc2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIHBhY2tGNjQsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH1cbiAgfSk7XG59IGVsc2Uge1xuICBpZighZmFpbHMoZnVuY3Rpb24oKXtcbiAgICBuZXcgJEFycmF5QnVmZmVyOyAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uKCl7XG4gICAgbmV3ICRBcnJheUJ1ZmZlciguNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gIH0pKXtcbiAgICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpe1xuICAgICAgcmV0dXJuIG5ldyBCYXNlQnVmZmVyKHZhbGlkYXRlQXJyYXlCdWZmZXJBcmd1bWVudHModGhpcywgbGVuZ3RoKSk7XG4gICAgfTtcbiAgICB2YXIgQXJyYXlCdWZmZXJQcm90byA9ICRBcnJheUJ1ZmZlcltQUk9UT1RZUEVdID0gQmFzZUJ1ZmZlcltQUk9UT1RZUEVdO1xuICAgIGZvcih2YXIga2V5cyA9IGdPUE4oQmFzZUJ1ZmZlciksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajsgKXtcbiAgICAgIGlmKCEoKGtleSA9IGtleXNbaisrXSkgaW4gJEFycmF5QnVmZmVyKSloaWRlKCRBcnJheUJ1ZmZlciwga2V5LCBCYXNlQnVmZmVyW2tleV0pO1xuICAgIH07XG4gICAgaWYoIUxJQlJBUlkpQXJyYXlCdWZmZXJQcm90by5jb25zdHJ1Y3RvciA9ICRBcnJheUJ1ZmZlcjtcbiAgfVxuICAvLyBpT1MgU2FmYXJpIDcueCBidWdcbiAgdmFyIHZpZXcgPSBuZXcgJERhdGFWaWV3KG5ldyAkQXJyYXlCdWZmZXIoMikpXG4gICAgLCAkc2V0SW50OCA9ICREYXRhVmlld1tQUk9UT1RZUEVdLnNldEludDg7XG4gIHZpZXcuc2V0SW50OCgwLCAyMTQ3NDgzNjQ4KTtcbiAgdmlldy5zZXRJbnQ4KDEsIDIxNDc0ODM2NDkpO1xuICBpZih2aWV3LmdldEludDgoMCkgfHwgIXZpZXcuZ2V0SW50OCgxKSlyZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIHNldEludDg6IGZ1bmN0aW9uIHNldEludDgoYnl0ZU9mZnNldCwgdmFsdWUpe1xuICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpe1xuICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfVxuICB9LCB0cnVlKTtcbn1cbnNldFRvU3RyaW5nVGFnKCRBcnJheUJ1ZmZlciwgQVJSQVlfQlVGRkVSKTtcbnNldFRvU3RyaW5nVGFnKCREYXRhVmlldywgREFUQV9WSUVXKTtcbmhpZGUoJERhdGFWaWV3W1BST1RPVFlQRV0sICR0eXBlZC5WSUVXLCB0cnVlKTtcbmV4cG9ydHNbQVJSQVlfQlVGRkVSXSA9ICRBcnJheUJ1ZmZlcjtcbmV4cG9ydHNbREFUQV9WSUVXXSA9ICREYXRhVmlldzsiLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBoaWRlICAgPSByZXF1aXJlKCcuL19oaWRlJylcbiAgLCB1aWQgICAgPSByZXF1aXJlKCcuL191aWQnKVxuICAsIFRZUEVEICA9IHVpZCgndHlwZWRfYXJyYXknKVxuICAsIFZJRVcgICA9IHVpZCgndmlldycpXG4gICwgQUJWICAgID0gISEoZ2xvYmFsLkFycmF5QnVmZmVyICYmIGdsb2JhbC5EYXRhVmlldylcbiAgLCBDT05TVFIgPSBBQlZcbiAgLCBpID0gMCwgbCA9IDksIFR5cGVkO1xuXG52YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9ycyA9IChcbiAgJ0ludDhBcnJheSxVaW50OEFycmF5LFVpbnQ4Q2xhbXBlZEFycmF5LEludDE2QXJyYXksVWludDE2QXJyYXksSW50MzJBcnJheSxVaW50MzJBcnJheSxGbG9hdDMyQXJyYXksRmxvYXQ2NEFycmF5J1xuKS5zcGxpdCgnLCcpO1xuXG53aGlsZShpIDwgbCl7XG4gIGlmKFR5cGVkID0gZ2xvYmFsW1R5cGVkQXJyYXlDb25zdHJ1Y3RvcnNbaSsrXV0pe1xuICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBUWVBFRCwgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZC5wcm90b3R5cGUsIFZJRVcsIHRydWUpO1xuICB9IGVsc2UgQ09OU1RSID0gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBBQlY6ICAgIEFCVixcbiAgQ09OU1RSOiBDT05TVFIsXG4gIFRZUEVEOiAgVFlQRUQsXG4gIFZJRVc6ICAgVklFV1xufTsiLCJ2YXIgaWQgPSAwXG4gICwgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihrZXkpe1xuICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpO1xufTsiLCJ2YXIgZ2xvYmFsICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGNvcmUgICAgICAgICAgID0gcmVxdWlyZSgnLi9fY29yZScpXG4gICwgTElCUkFSWSAgICAgICAgPSByZXF1aXJlKCcuL19saWJyYXJ5JylcbiAgLCB3a3NFeHQgICAgICAgICA9IHJlcXVpcmUoJy4vX3drcy1leHQnKVxuICAsIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obmFtZSl7XG4gIHZhciAkU3ltYm9sID0gY29yZS5TeW1ib2wgfHwgKGNvcmUuU3ltYm9sID0gTElCUkFSWSA/IHt9IDogZ2xvYmFsLlN5bWJvbCB8fCB7fSk7XG4gIGlmKG5hbWUuY2hhckF0KDApICE9ICdfJyAmJiAhKG5hbWUgaW4gJFN5bWJvbCkpZGVmaW5lUHJvcGVydHkoJFN5bWJvbCwgbmFtZSwge3ZhbHVlOiB3a3NFeHQuZihuYW1lKX0pO1xufTsiLCJleHBvcnRzLmYgPSByZXF1aXJlKCcuL193a3MnKTsiLCJ2YXIgc3RvcmUgICAgICA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCd3a3MnKVxuICAsIHVpZCAgICAgICAgPSByZXF1aXJlKCcuL191aWQnKVxuICAsIFN5bWJvbCAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5TeW1ib2xcbiAgLCBVU0VfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xuXG52YXIgJGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG5hbWUpe1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTsiLCJ2YXIgY2xhc3NvZiAgID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpXG4gICwgSVRFUkFUT1IgID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJylcbiAgLCBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29yZScpLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24oaXQpe1xuICBpZihpdCAhPSB1bmRlZmluZWQpcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTsiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vYmVuamFtaW5nci9SZXhFeHAuZXNjYXBlXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJHJlICAgICA9IHJlcXVpcmUoJy4vX3JlcGxhY2VyJykoL1tcXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVnRXhwJywge2VzY2FwZTogZnVuY3Rpb24gZXNjYXBlKGl0KXsgcmV0dXJuICRyZShpdCk7IH19KTtcbiIsIi8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtjb3B5V2l0aGluOiByZXF1aXJlKCcuL19hcnJheS1jb3B5LXdpdGhpbicpfSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdjb3B5V2l0aGluJyk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRldmVyeSAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNCk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5ldmVyeSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjUgLyAxNS40LjQuMTYgQXJyYXkucHJvdG90eXBlLmV2ZXJ5KGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLyl7XG4gICAgcmV0dXJuICRldmVyeSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTsiLCIvLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7ZmlsbDogcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpfSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmaWxsJyk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRmaWx0ZXIgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMik7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5maWx0ZXIsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy43IC8gMTUuNC40LjIwIEFycmF5LnByb3RvdHlwZS5maWx0ZXIoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pe1xuICAgIHJldHVybiAkZmlsdGVyKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy45IEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXgocHJlZGljYXRlLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRmaW5kICAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNilcbiAgLCBLRVkgICAgID0gJ2ZpbmRJbmRleCdcbiAgLCBmb3JjZWQgID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZihLRVkgaW4gW10pQXJyYXkoMSlbS0VZXShmdW5jdGlvbigpeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChjYWxsYmFja2ZuLyosIHRoYXQgPSB1bmRlZmluZWQgKi8pe1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoS0VZKTsiLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuOCBBcnJheS5wcm90b3R5cGUuZmluZChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJGZpbmQgICA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg1KVxuICAsIEtFWSAgICAgPSAnZmluZCdcbiAgLCBmb3JjZWQgID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZihLRVkgaW4gW10pQXJyYXkoMSlbS0VZXShmdW5jdGlvbigpeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kOiBmdW5jdGlvbiBmaW5kKGNhbGxiYWNrZm4vKiwgdGhhdCA9IHVuZGVmaW5lZCAqLyl7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKShLRVkpOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJGZvckVhY2ggPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMClcbiAgLCBTVFJJQ1QgICA9IHJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5mb3JFYWNoLCB0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhU1RSSUNULCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xMCAvIDE1LjQuNC4xOCBBcnJheS5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKXtcbiAgICByZXR1cm4gJGZvckVhY2godGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGN0eCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fY3R4JylcbiAgLCAkZXhwb3J0ICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgdG9PYmplY3QgICAgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsIGNhbGwgICAgICAgICAgID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJylcbiAgLCBpc0FycmF5SXRlciAgICA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKVxuICAsIHRvTGVuZ3RoICAgICAgID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgLCBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpXG4gICwgZ2V0SXRlckZuICAgICAgPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uKGl0ZXIpeyBBcnJheS5mcm9tKGl0ZXIpOyB9KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMSBBcnJheS5mcm9tKGFycmF5TGlrZSwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gIGZyb206IGZ1bmN0aW9uIGZyb20oYXJyYXlMaWtlLyosIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkKi8pe1xuICAgIHZhciBPICAgICAgID0gdG9PYmplY3QoYXJyYXlMaWtlKVxuICAgICAgLCBDICAgICAgID0gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheVxuICAgICAgLCBhTGVuICAgID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgLCBtYXBmbiAgID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWRcbiAgICAgICwgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWRcbiAgICAgICwgaW5kZXggICA9IDBcbiAgICAgICwgaXRlckZuICA9IGdldEl0ZXJGbihPKVxuICAgICAgLCBsZW5ndGgsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7XG4gICAgaWYobWFwcGluZyltYXBmbiA9IGN0eChtYXBmbiwgYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQsIDIpO1xuICAgIC8vIGlmIG9iamVjdCBpc24ndCBpdGVyYWJsZSBvciBpdCdzIGFycmF5IHdpdGggZGVmYXVsdCBpdGVyYXRvciAtIHVzZSBzaW1wbGUgY2FzZVxuICAgIGlmKGl0ZXJGbiAhPSB1bmRlZmluZWQgJiYgIShDID09IEFycmF5ICYmIGlzQXJyYXlJdGVyKGl0ZXJGbikpKXtcbiAgICAgIGZvcihpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCByZXN1bHQgPSBuZXcgQzsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpbmRleCsrKXtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IGNhbGwoaXRlcmF0b3IsIG1hcGZuLCBbc3RlcC52YWx1ZSwgaW5kZXhdLCB0cnVlKSA6IHN0ZXAudmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgICBmb3IocmVzdWx0ID0gbmV3IEMobGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4Kyspe1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGluZGV4O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRpbmRleE9mICAgICAgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKVxuICAsICRuYXRpdmUgICAgICAgPSBbXS5pbmRleE9mXG4gICwgTkVHQVRJVkVfWkVSTyA9ICEhJG5hdGl2ZSAmJiAxIC8gWzFdLmluZGV4T2YoMSwgLTApIDwgMDtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRuYXRpdmUpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTEgLyAxNS40LjQuMTQgQXJyYXkucHJvdG90eXBlLmluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxuICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyosIGZyb21JbmRleCA9IDAgKi8pe1xuICAgIHJldHVybiBORUdBVElWRV9aRVJPXG4gICAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgICA/ICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwXG4gICAgICA6ICRpbmRleE9mKHRoaXMsIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pOyIsIi8vIDIyLjEuMi4yIC8gMTUuNC4zLjIgQXJyYXkuaXNBcnJheShhcmcpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0FycmF5Jywge2lzQXJyYXk6IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyl9KTsiLCIndXNlIHN0cmljdCc7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpXG4gICwgc3RlcCAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpXG4gICwgSXRlcmF0b3JzICAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpXG4gICwgdG9JT2JqZWN0ICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbihpdGVyYXRlZCwga2luZCl7XG4gIHRoaXMuX3QgPSB0b0lPYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgIC8vIGtpbmRcbi8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24oKXtcbiAgdmFyIE8gICAgID0gdGhpcy5fdFxuICAgICwga2luZCAgPSB0aGlzLl9rXG4gICAgLCBpbmRleCA9IHRoaXMuX2krKztcbiAgaWYoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpe1xuICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHN0ZXAoMSk7XG4gIH1cbiAgaWYoa2luZCA9PSAna2V5cycgIClyZXR1cm4gc3RlcCgwLCBpbmRleCk7XG4gIGlmKGtpbmQgPT0gJ3ZhbHVlcycpcmV0dXJuIHN0ZXAoMCwgT1tpbmRleF0pO1xuICByZXR1cm4gc3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNylcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpOyIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUuam9pbihzZXBhcmF0b3IpXG52YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JylcbiAgLCBhcnJheUpvaW4gPSBbXS5qb2luO1xuXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2Ugc3RyaW5nc1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAocmVxdWlyZSgnLi9faW9iamVjdCcpICE9IE9iamVjdCB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKGFycmF5Sm9pbikpLCAnQXJyYXknLCB7XG4gIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKXtcbiAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodG9JT2JqZWN0KHRoaXMpLCBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCA/ICcsJyA6IHNlcGFyYXRvcik7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCB0b0lPYmplY3QgICAgID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgdG9JbnRlZ2VyICAgICA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKVxuICAsIHRvTGVuZ3RoICAgICAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKVxuICAsICRuYXRpdmUgICAgICAgPSBbXS5sYXN0SW5kZXhPZlxuICAsIE5FR0FUSVZFX1pFUk8gPSAhISRuYXRpdmUgJiYgMSAvIFsxXS5sYXN0SW5kZXhPZigxLCAtMCkgPCAwO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChORUdBVElWRV9aRVJPIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJG5hdGl2ZSkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xNCAvIDE1LjQuNC4xNSBBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxuICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiwgZnJvbUluZGV4ID0gQFsqLTFdICovKXtcbiAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgaWYoTkVHQVRJVkVfWkVSTylyZXR1cm4gJG5hdGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDA7XG4gICAgdmFyIE8gICAgICA9IHRvSU9iamVjdCh0aGlzKVxuICAgICAgLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aClcbiAgICAgICwgaW5kZXggID0gbGVuZ3RoIC0gMTtcbiAgICBpZihhcmd1bWVudHMubGVuZ3RoID4gMSlpbmRleCA9IE1hdGgubWluKGluZGV4LCB0b0ludGVnZXIoYXJndW1lbnRzWzFdKSk7XG4gICAgaWYoaW5kZXggPCAwKWluZGV4ID0gbGVuZ3RoICsgaW5kZXg7XG4gICAgZm9yKDtpbmRleCA+PSAwOyBpbmRleC0tKWlmKGluZGV4IGluIE8paWYoT1tpbmRleF0gPT09IHNlYXJjaEVsZW1lbnQpcmV0dXJuIGluZGV4IHx8IDA7XG4gICAgcmV0dXJuIC0xO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJG1hcCAgICA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgxKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLm1hcCwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE1IC8gMTUuNC40LjE5IEFycmF5LnByb3RvdHlwZS5tYXAoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgbWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pe1xuICAgIHJldHVybiAkbWFwKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcblxuLy8gV2ViS2l0IEFycmF5Lm9mIGlzbid0IGdlbmVyaWNcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICBmdW5jdGlvbiBGKCl7fVxuICByZXR1cm4gIShBcnJheS5vZi5jYWxsKEYpIGluc3RhbmNlb2YgRik7XG59KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMyBBcnJheS5vZiggLi4uaXRlbXMpXG4gIG9mOiBmdW5jdGlvbiBvZigvKiAuLi5hcmdzICovKXtcbiAgICB2YXIgaW5kZXggID0gMFxuICAgICAgLCBhTGVuICAgPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAsIHJlc3VsdCA9IG5ldyAodHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheSkoYUxlbik7XG4gICAgd2hpbGUoYUxlbiA+IGluZGV4KWNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGFMZW47XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRyZWR1Y2UgPSByZXF1aXJlKCcuL19hcnJheS1yZWR1Y2UnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnJlZHVjZVJpZ2h0LCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTkgLyAxNS40LjQuMjIgQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pe1xuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgdHJ1ZSk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5yZWR1Y2UsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xOCAvIDE1LjQuNC4yMSBBcnJheS5wcm90b3R5cGUucmVkdWNlKGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLyl7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzWzFdLCBmYWxzZSk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBodG1sICAgICAgID0gcmVxdWlyZSgnLi9faHRtbCcpXG4gICwgY29mICAgICAgICA9IHJlcXVpcmUoJy4vX2NvZicpXG4gICwgdG9JbmRleCAgICA9IHJlcXVpcmUoJy4vX3RvLWluZGV4JylcbiAgLCB0b0xlbmd0aCAgID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgLCBhcnJheVNsaWNlID0gW10uc2xpY2U7XG5cbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBFUzMgc3RyaW5ncyBhbmQgRE9NIG9iamVjdHNcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICBpZihodG1sKWFycmF5U2xpY2UuY2FsbChodG1sKTtcbn0pLCAnQXJyYXknLCB7XG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShiZWdpbiwgZW5kKXtcbiAgICB2YXIgbGVuICAgPSB0b0xlbmd0aCh0aGlzLmxlbmd0aClcbiAgICAgICwga2xhc3MgPSBjb2YodGhpcyk7XG4gICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiBlbmQ7XG4gICAgaWYoa2xhc3MgPT0gJ0FycmF5JylyZXR1cm4gYXJyYXlTbGljZS5jYWxsKHRoaXMsIGJlZ2luLCBlbmQpO1xuICAgIHZhciBzdGFydCAgPSB0b0luZGV4KGJlZ2luLCBsZW4pXG4gICAgICAsIHVwVG8gICA9IHRvSW5kZXgoZW5kLCBsZW4pXG4gICAgICAsIHNpemUgICA9IHRvTGVuZ3RoKHVwVG8gLSBzdGFydClcbiAgICAgICwgY2xvbmVkID0gQXJyYXkoc2l6ZSlcbiAgICAgICwgaSAgICAgID0gMDtcbiAgICBmb3IoOyBpIDwgc2l6ZTsgaSsrKWNsb25lZFtpXSA9IGtsYXNzID09ICdTdHJpbmcnXG4gICAgICA/IHRoaXMuY2hhckF0KHN0YXJ0ICsgaSlcbiAgICAgIDogdGhpc1tzdGFydCArIGldO1xuICAgIHJldHVybiBjbG9uZWQ7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkc29tZSAgID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uc29tZSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjIzIC8gMTUuNC40LjE3IEFycmF5LnByb3RvdHlwZS5zb21lKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pe1xuICAgIHJldHVybiAkc29tZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJylcbiAgLCB0b09iamVjdCAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsIGZhaWxzICAgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJylcbiAgLCAkc29ydCAgICAgPSBbXS5zb3J0XG4gICwgdGVzdCAgICAgID0gWzEsIDIsIDNdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbigpe1xuICAvLyBJRTgtXG4gIHRlc3Quc29ydCh1bmRlZmluZWQpO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uKCl7XG4gIC8vIFY4IGJ1Z1xuICB0ZXN0LnNvcnQobnVsbCk7XG4gIC8vIE9sZCBXZWJLaXRcbn0pIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJHNvcnQpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMjUgQXJyYXkucHJvdG90eXBlLnNvcnQoY29tcGFyZWZuKVxuICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbil7XG4gICAgcmV0dXJuIGNvbXBhcmVmbiA9PT0gdW5kZWZpbmVkXG4gICAgICA/ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcykpXG4gICAgICA6ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcyksIGFGdW5jdGlvbihjb21wYXJlZm4pKTtcbiAgfVxufSk7IiwicmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnQXJyYXknKTsiLCIvLyAyMC4zLjMuMSAvIDE1LjkuNC40IERhdGUubm93KClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnRGF0ZScsIHtub3c6IGZ1bmN0aW9uKCl7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgfX0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIDIwLjMuNC4zNiAvIDE1LjkuNS40MyBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZygpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgZmFpbHMgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJylcbiAgLCBnZXRUaW1lID0gRGF0ZS5wcm90b3R5cGUuZ2V0VGltZTtcblxudmFyIGx6ID0gZnVuY3Rpb24obnVtKXtcbiAgcmV0dXJuIG51bSA+IDkgPyBudW0gOiAnMCcgKyBudW07XG59O1xuXG4vLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnNcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKGZhaWxzKGZ1bmN0aW9uKCl7XG4gIHJldHVybiBuZXcgRGF0ZSgtNWUxMyAtIDEpLnRvSVNPU3RyaW5nKCkgIT0gJzAzODUtMDctMjVUMDc6MDY6MzkuOTk5Wic7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24oKXtcbiAgbmV3IERhdGUoTmFOKS50b0lTT1N0cmluZygpO1xufSkpLCAnRGF0ZScsIHtcbiAgdG9JU09TdHJpbmc6IGZ1bmN0aW9uIHRvSVNPU3RyaW5nKCl7XG4gICAgaWYoIWlzRmluaXRlKGdldFRpbWUuY2FsbCh0aGlzKSkpdGhyb3cgUmFuZ2VFcnJvcignSW52YWxpZCB0aW1lIHZhbHVlJyk7XG4gICAgdmFyIGQgPSB0aGlzXG4gICAgICAsIHkgPSBkLmdldFVUQ0Z1bGxZZWFyKClcbiAgICAgICwgbSA9IGQuZ2V0VVRDTWlsbGlzZWNvbmRzKClcbiAgICAgICwgcyA9IHkgPCAwID8gJy0nIDogeSA+IDk5OTkgPyAnKycgOiAnJztcbiAgICByZXR1cm4gcyArICgnMDAwMDAnICsgTWF0aC5hYnMoeSkpLnNsaWNlKHMgPyAtNiA6IC00KSArXG4gICAgICAnLScgKyBseihkLmdldFVUQ01vbnRoKCkgKyAxKSArICctJyArIGx6KGQuZ2V0VVRDRGF0ZSgpKSArXG4gICAgICAnVCcgKyBseihkLmdldFVUQ0hvdXJzKCkpICsgJzonICsgbHooZC5nZXRVVENNaW51dGVzKCkpICtcbiAgICAgICc6JyArIGx6KGQuZ2V0VVRDU2Vjb25kcygpKSArICcuJyArIChtID4gOTkgPyBtIDogJzAnICsgbHoobSkpICsgJ1onO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHRvT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgcmV0dXJuIG5ldyBEYXRlKE5hTikudG9KU09OKCkgIT09IG51bGwgfHwgRGF0ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoe3RvSVNPU3RyaW5nOiBmdW5jdGlvbigpeyByZXR1cm4gMTsgfX0pICE9PSAxO1xufSksICdEYXRlJywge1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTihrZXkpe1xuICAgIHZhciBPICA9IHRvT2JqZWN0KHRoaXMpXG4gICAgICAsIHB2ID0gdG9QcmltaXRpdmUoTyk7XG4gICAgcmV0dXJuIHR5cGVvZiBwdiA9PSAnbnVtYmVyJyAmJiAhaXNGaW5pdGUocHYpID8gbnVsbCA6IE8udG9JU09TdHJpbmcoKTtcbiAgfVxufSk7IiwidmFyIFRPX1BSSU1JVElWRSA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1ByaW1pdGl2ZScpXG4gICwgcHJvdG8gICAgICAgID0gRGF0ZS5wcm90b3R5cGU7XG5cbmlmKCEoVE9fUFJJTUlUSVZFIGluIHByb3RvKSlyZXF1aXJlKCcuL19oaWRlJykocHJvdG8sIFRPX1BSSU1JVElWRSwgcmVxdWlyZSgnLi9fZGF0ZS10by1wcmltaXRpdmUnKSk7IiwidmFyIERhdGVQcm90byAgICA9IERhdGUucHJvdG90eXBlXG4gICwgSU5WQUxJRF9EQVRFID0gJ0ludmFsaWQgRGF0ZSdcbiAgLCBUT19TVFJJTkcgICAgPSAndG9TdHJpbmcnXG4gICwgJHRvU3RyaW5nICAgID0gRGF0ZVByb3RvW1RPX1NUUklOR11cbiAgLCBnZXRUaW1lICAgICAgPSBEYXRlUHJvdG8uZ2V0VGltZTtcbmlmKG5ldyBEYXRlKE5hTikgKyAnJyAhPSBJTlZBTElEX0RBVEUpe1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKERhdGVQcm90bywgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpe1xuICAgIHZhciB2YWx1ZSA9IGdldFRpbWUuY2FsbCh0aGlzKTtcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gJHRvU3RyaW5nLmNhbGwodGhpcykgOiBJTlZBTElEX0RBVEU7XG4gIH0pO1xufSIsIi8vIDE5LjIuMy4yIC8gMTUuMy40LjUgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQodGhpc0FyZywgYXJncy4uLilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnRnVuY3Rpb24nLCB7YmluZDogcmVxdWlyZSgnLi9fYmluZCcpfSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGlzT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKVxuICAsIEhBU19JTlNUQU5DRSAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ2hhc0luc3RhbmNlJylcbiAgLCBGdW5jdGlvblByb3RvICA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbi8vIDE5LjIuMy42IEZ1bmN0aW9uLnByb3RvdHlwZVtAQGhhc0luc3RhbmNlXShWKVxuaWYoIShIQVNfSU5TVEFOQ0UgaW4gRnVuY3Rpb25Qcm90bykpcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZihGdW5jdGlvblByb3RvLCBIQVNfSU5TVEFOQ0UsIHt2YWx1ZTogZnVuY3Rpb24oTyl7XG4gIGlmKHR5cGVvZiB0aGlzICE9ICdmdW5jdGlvbicgfHwgIWlzT2JqZWN0KE8pKXJldHVybiBmYWxzZTtcbiAgaWYoIWlzT2JqZWN0KHRoaXMucHJvdG90eXBlKSlyZXR1cm4gTyBpbnN0YW5jZW9mIHRoaXM7XG4gIC8vIGZvciBlbnZpcm9ubWVudCB3L28gbmF0aXZlIGBAQGhhc0luc3RhbmNlYCBsb2dpYyBlbm91Z2ggYGluc3RhbmNlb2ZgLCBidXQgYWRkIHRoaXM6XG4gIHdoaWxlKE8gPSBnZXRQcm90b3R5cGVPZihPKSlpZih0aGlzLnByb3RvdHlwZSA9PT0gTylyZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIGZhbHNlO1xufX0pOyIsInZhciBkUCAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZlxuICAsIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJylcbiAgLCBoYXMgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCBGUHJvdG8gICAgID0gRnVuY3Rpb24ucHJvdG90eXBlXG4gICwgbmFtZVJFICAgICA9IC9eXFxzKmZ1bmN0aW9uIChbXiAoXSopL1xuICAsIE5BTUUgICAgICAgPSAnbmFtZSc7XG5cbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlIHx8IGZ1bmN0aW9uKCl7XG4gIHJldHVybiB0cnVlO1xufTtcblxuLy8gMTkuMi40LjIgbmFtZVxuTkFNRSBpbiBGUHJvdG8gfHwgcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiBkUChGUHJvdG8sIE5BTUUsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCl7XG4gICAgdHJ5IHtcbiAgICAgIHZhciB0aGF0ID0gdGhpc1xuICAgICAgICAsIG5hbWUgPSAoJycgKyB0aGF0KS5tYXRjaChuYW1lUkUpWzFdO1xuICAgICAgaGFzKHRoYXQsIE5BTUUpIHx8ICFpc0V4dGVuc2libGUodGhhdCkgfHwgZFAodGhhdCwgTkFNRSwgY3JlYXRlRGVzYyg1LCBuYW1lKSk7XG4gICAgICByZXR1cm4gbmFtZTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XG5cbi8vIDIzLjEgTWFwIE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKCdNYXAnLCBmdW5jdGlvbihnZXQpe1xuICByZXR1cm4gZnVuY3Rpb24gTWFwKCl7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4xLjMuNiBNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSl7XG4gICAgdmFyIGVudHJ5ID0gc3Ryb25nLmdldEVudHJ5KHRoaXMsIGtleSk7XG4gICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnY7XG4gIH0sXG4gIC8vIDIzLjEuMy45IE1hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpe1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHRoaXMsIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nLCB0cnVlKTsiLCIvLyAyMC4yLjIuMyBNYXRoLmFjb3NoKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgbG9nMXAgICA9IHJlcXVpcmUoJy4vX21hdGgtbG9nMXAnKVxuICAsIHNxcnQgICAgPSBNYXRoLnNxcnRcbiAgLCAkYWNvc2ggID0gTWF0aC5hY29zaDtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhY29zaFxuICAvLyBWOCBidWc6IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNTA5XG4gICYmIE1hdGguZmxvb3IoJGFjb3NoKE51bWJlci5NQVhfVkFMVUUpKSA9PSA3MTBcbiAgLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFjb3NoKEluZmluaXR5KSAtPiBOYU4gXG4gICYmICRhY29zaChJbmZpbml0eSkgPT0gSW5maW5pdHlcbiksICdNYXRoJywge1xuICBhY29zaDogZnVuY3Rpb24gYWNvc2goeCl7XG4gICAgcmV0dXJuICh4ID0gK3gpIDwgMSA/IE5hTiA6IHggPiA5NDkwNjI2NS42MjQyNTE1NlxuICAgICAgPyBNYXRoLmxvZyh4KSArIE1hdGguTE4yXG4gICAgICA6IGxvZzFwKHggLSAxICsgc3FydCh4IC0gMSkgKiBzcXJ0KHggKyAxKSk7XG4gIH1cbn0pOyIsIi8vIDIwLjIuMi41IE1hdGguYXNpbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkYXNpbmggID0gTWF0aC5hc2luaDtcblxuZnVuY3Rpb24gYXNpbmgoeCl7XG4gIHJldHVybiAhaXNGaW5pdGUoeCA9ICt4KSB8fCB4ID09IDAgPyB4IDogeCA8IDAgPyAtYXNpbmgoLXgpIDogTWF0aC5sb2coeCArIE1hdGguc3FydCh4ICogeCArIDEpKTtcbn1cblxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFzaW5oKDApIC0+IC0wIFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhc2luaCAmJiAxIC8gJGFzaW5oKDApID4gMCksICdNYXRoJywge2FzaW5oOiBhc2luaH0pOyIsIi8vIDIwLjIuMi43IE1hdGguYXRhbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkYXRhbmggID0gTWF0aC5hdGFuaDtcblxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmF0YW5oKC0wKSAtPiAwIFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhdGFuaCAmJiAxIC8gJGF0YW5oKC0wKSA8IDApLCAnTWF0aCcsIHtcbiAgYXRhbmg6IGZ1bmN0aW9uIGF0YW5oKHgpe1xuICAgIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IE1hdGgubG9nKCgxICsgeCkgLyAoMSAtIHgpKSAvIDI7XG4gIH1cbn0pOyIsIi8vIDIwLjIuMi45IE1hdGguY2JydCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHNpZ24gICAgPSByZXF1aXJlKCcuL19tYXRoLXNpZ24nKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjYnJ0OiBmdW5jdGlvbiBjYnJ0KHgpe1xuICAgIHJldHVybiBzaWduKHggPSAreCkgKiBNYXRoLnBvdyhNYXRoLmFicyh4KSwgMSAvIDMpO1xuICB9XG59KTsiLCIvLyAyMC4yLjIuMTEgTWF0aC5jbHozMih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjbHozMjogZnVuY3Rpb24gY2x6MzIoeCl7XG4gICAgcmV0dXJuICh4ID4+Pj0gMCkgPyAzMSAtIE1hdGguZmxvb3IoTWF0aC5sb2coeCArIDAuNSkgKiBNYXRoLkxPRzJFKSA6IDMyO1xuICB9XG59KTsiLCIvLyAyMC4yLjIuMTIgTWF0aC5jb3NoKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgZXhwICAgICA9IE1hdGguZXhwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNvc2g6IGZ1bmN0aW9uIGNvc2goeCl7XG4gICAgcmV0dXJuIChleHAoeCA9ICt4KSArIGV4cCgteCkpIC8gMjtcbiAgfVxufSk7IiwiLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkZXhwbTEgID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICgkZXhwbTEgIT0gTWF0aC5leHBtMSksICdNYXRoJywge2V4cG0xOiAkZXhwbTF9KTsiLCIvLyAyMC4yLjIuMTYgTWF0aC5mcm91bmQoeClcbnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHNpZ24gICAgICA9IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpXG4gICwgcG93ICAgICAgID0gTWF0aC5wb3dcbiAgLCBFUFNJTE9OICAgPSBwb3coMiwgLTUyKVxuICAsIEVQU0lMT04zMiA9IHBvdygyLCAtMjMpXG4gICwgTUFYMzIgICAgID0gcG93KDIsIDEyNykgKiAoMiAtIEVQU0lMT04zMilcbiAgLCBNSU4zMiAgICAgPSBwb3coMiwgLTEyNik7XG5cbnZhciByb3VuZFRpZXNUb0V2ZW4gPSBmdW5jdGlvbihuKXtcbiAgcmV0dXJuIG4gKyAxIC8gRVBTSUxPTiAtIDEgLyBFUFNJTE9OO1xufTtcblxuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGZyb3VuZDogZnVuY3Rpb24gZnJvdW5kKHgpe1xuICAgIHZhciAkYWJzICA9IE1hdGguYWJzKHgpXG4gICAgICAsICRzaWduID0gc2lnbih4KVxuICAgICAgLCBhLCByZXN1bHQ7XG4gICAgaWYoJGFicyA8IE1JTjMyKXJldHVybiAkc2lnbiAqIHJvdW5kVGllc1RvRXZlbigkYWJzIC8gTUlOMzIgLyBFUFNJTE9OMzIpICogTUlOMzIgKiBFUFNJTE9OMzI7XG4gICAgYSA9ICgxICsgRVBTSUxPTjMyIC8gRVBTSUxPTikgKiAkYWJzO1xuICAgIHJlc3VsdCA9IGEgLSAoYSAtICRhYnMpO1xuICAgIGlmKHJlc3VsdCA+IE1BWDMyIHx8IHJlc3VsdCAhPSByZXN1bHQpcmV0dXJuICRzaWduICogSW5maW5pdHk7XG4gICAgcmV0dXJuICRzaWduICogcmVzdWx0O1xuICB9XG59KTsiLCIvLyAyMC4yLjIuMTcgTWF0aC5oeXBvdChbdmFsdWUxWywgdmFsdWUyWywg4oCmIF1dXSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBhYnMgICAgID0gTWF0aC5hYnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgaHlwb3Q6IGZ1bmN0aW9uIGh5cG90KHZhbHVlMSwgdmFsdWUyKXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciBzdW0gID0gMFxuICAgICAgLCBpICAgID0gMFxuICAgICAgLCBhTGVuID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgLCBsYXJnID0gMFxuICAgICAgLCBhcmcsIGRpdjtcbiAgICB3aGlsZShpIDwgYUxlbil7XG4gICAgICBhcmcgPSBhYnMoYXJndW1lbnRzW2krK10pO1xuICAgICAgaWYobGFyZyA8IGFyZyl7XG4gICAgICAgIGRpdiAgPSBsYXJnIC8gYXJnO1xuICAgICAgICBzdW0gID0gc3VtICogZGl2ICogZGl2ICsgMTtcbiAgICAgICAgbGFyZyA9IGFyZztcbiAgICAgIH0gZWxzZSBpZihhcmcgPiAwKXtcbiAgICAgICAgZGl2ICA9IGFyZyAvIGxhcmc7XG4gICAgICAgIHN1bSArPSBkaXYgKiBkaXY7XG4gICAgICB9IGVsc2Ugc3VtICs9IGFyZztcbiAgICB9XG4gICAgcmV0dXJuIGxhcmcgPT09IEluZmluaXR5ID8gSW5maW5pdHkgOiBsYXJnICogTWF0aC5zcXJ0KHN1bSk7XG4gIH1cbn0pOyIsIi8vIDIwLjIuMi4xOCBNYXRoLmltdWwoeCwgeSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkaW11bCAgID0gTWF0aC5pbXVsO1xuXG4vLyBzb21lIFdlYktpdCB2ZXJzaW9ucyBmYWlscyB3aXRoIGJpZyBudW1iZXJzLCBzb21lIGhhcyB3cm9uZyBhcml0eVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIHJldHVybiAkaW11bCgweGZmZmZmZmZmLCA1KSAhPSAtNSB8fCAkaW11bC5sZW5ndGggIT0gMjtcbn0pLCAnTWF0aCcsIHtcbiAgaW11bDogZnVuY3Rpb24gaW11bCh4LCB5KXtcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmXG4gICAgICAsIHhuID0gK3hcbiAgICAgICwgeW4gPSAreVxuICAgICAgLCB4bCA9IFVJTlQxNiAmIHhuXG4gICAgICAsIHlsID0gVUlOVDE2ICYgeW47XG4gICAgcmV0dXJuIDAgfCB4bCAqIHlsICsgKChVSU5UMTYgJiB4biA+Pj4gMTYpICogeWwgKyB4bCAqIChVSU5UMTYgJiB5biA+Pj4gMTYpIDw8IDE2ID4+PiAwKTtcbiAgfVxufSk7IiwiLy8gMjAuMi4yLjIxIE1hdGgubG9nMTAoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgbG9nMTA6IGZ1bmN0aW9uIGxvZzEwKHgpe1xuICAgIHJldHVybiBNYXRoLmxvZyh4KSAvIE1hdGguTE4xMDtcbiAgfVxufSk7IiwiLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtsb2cxcDogcmVxdWlyZSgnLi9fbWF0aC1sb2cxcCcpfSk7IiwiLy8gMjAuMi4yLjIyIE1hdGgubG9nMih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBsb2cyOiBmdW5jdGlvbiBsb2cyKHgpe1xuICAgIHJldHVybiBNYXRoLmxvZyh4KSAvIE1hdGguTE4yO1xuICB9XG59KTsiLCIvLyAyMC4yLjIuMjggTWF0aC5zaWduKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7c2lnbjogcmVxdWlyZSgnLi9fbWF0aC1zaWduJyl9KTsiLCIvLyAyMC4yLjIuMzAgTWF0aC5zaW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgZXhwbTEgICA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKVxuICAsIGV4cCAgICAgPSBNYXRoLmV4cDtcblxuLy8gVjggbmVhciBDaHJvbWl1bSAzOCBoYXMgYSBwcm9ibGVtIHdpdGggdmVyeSBzbWFsbCBudW1iZXJzXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgcmV0dXJuICFNYXRoLnNpbmgoLTJlLTE3KSAhPSAtMmUtMTc7XG59KSwgJ01hdGgnLCB7XG4gIHNpbmg6IGZ1bmN0aW9uIHNpbmgoeCl7XG4gICAgcmV0dXJuIE1hdGguYWJzKHggPSAreCkgPCAxXG4gICAgICA/IChleHBtMSh4KSAtIGV4cG0xKC14KSkgLyAyXG4gICAgICA6IChleHAoeCAtIDEpIC0gZXhwKC14IC0gMSkpICogKE1hdGguRSAvIDIpO1xuICB9XG59KTsiLCIvLyAyMC4yLjIuMzMgTWF0aC50YW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgZXhwbTEgICA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKVxuICAsIGV4cCAgICAgPSBNYXRoLmV4cDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB0YW5oOiBmdW5jdGlvbiB0YW5oKHgpe1xuICAgIHZhciBhID0gZXhwbTEoeCA9ICt4KVxuICAgICAgLCBiID0gZXhwbTEoLXgpO1xuICAgIHJldHVybiBhID09IEluZmluaXR5ID8gMSA6IGIgPT0gSW5maW5pdHkgPyAtMSA6IChhIC0gYikgLyAoZXhwKHgpICsgZXhwKC14KSk7XG4gIH1cbn0pOyIsIi8vIDIwLjIuMi4zNCBNYXRoLnRydW5jKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHRydW5jOiBmdW5jdGlvbiB0cnVuYyhpdCl7XG4gICAgcmV0dXJuIChpdCA+IDAgPyBNYXRoLmZsb29yIDogTWF0aC5jZWlsKShpdCk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgaGFzICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIGNvZiAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fY29mJylcbiAgLCBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKVxuICAsIHRvUHJpbWl0aXZlICAgICAgID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJylcbiAgLCBmYWlscyAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJylcbiAgLCBnT1BOICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZlxuICAsIGdPUEQgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mXG4gICwgZFAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mXG4gICwgJHRyaW0gICAgICAgICAgICAgPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW1cbiAgLCBOVU1CRVIgICAgICAgICAgICA9ICdOdW1iZXInXG4gICwgJE51bWJlciAgICAgICAgICAgPSBnbG9iYWxbTlVNQkVSXVxuICAsIEJhc2UgICAgICAgICAgICAgID0gJE51bWJlclxuICAsIHByb3RvICAgICAgICAgICAgID0gJE51bWJlci5wcm90b3R5cGVcbiAgLy8gT3BlcmEgfjEyIGhhcyBicm9rZW4gT2JqZWN0I3RvU3RyaW5nXG4gICwgQlJPS0VOX0NPRiAgICAgICAgPSBjb2YocmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpKHByb3RvKSkgPT0gTlVNQkVSXG4gICwgVFJJTSAgICAgICAgICAgICAgPSAndHJpbScgaW4gU3RyaW5nLnByb3RvdHlwZTtcblxuLy8gNy4xLjMgVG9OdW1iZXIoYXJndW1lbnQpXG52YXIgdG9OdW1iZXIgPSBmdW5jdGlvbihhcmd1bWVudCl7XG4gIHZhciBpdCA9IHRvUHJpbWl0aXZlKGFyZ3VtZW50LCBmYWxzZSk7XG4gIGlmKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyAmJiBpdC5sZW5ndGggPiAyKXtcbiAgICBpdCA9IFRSSU0gPyBpdC50cmltKCkgOiAkdHJpbShpdCwgMyk7XG4gICAgdmFyIGZpcnN0ID0gaXQuY2hhckNvZGVBdCgwKVxuICAgICAgLCB0aGlyZCwgcmFkaXgsIG1heENvZGU7XG4gICAgaWYoZmlyc3QgPT09IDQzIHx8IGZpcnN0ID09PSA0NSl7XG4gICAgICB0aGlyZCA9IGl0LmNoYXJDb2RlQXQoMik7XG4gICAgICBpZih0aGlyZCA9PT0gODggfHwgdGhpcmQgPT09IDEyMClyZXR1cm4gTmFOOyAvLyBOdW1iZXIoJysweDEnKSBzaG91bGQgYmUgTmFOLCBvbGQgVjggZml4XG4gICAgfSBlbHNlIGlmKGZpcnN0ID09PSA0OCl7XG4gICAgICBzd2l0Y2goaXQuY2hhckNvZGVBdCgxKSl7XG4gICAgICAgIGNhc2UgNjYgOiBjYXNlIDk4ICA6IHJhZGl4ID0gMjsgbWF4Q29kZSA9IDQ5OyBicmVhazsgLy8gZmFzdCBlcXVhbCAvXjBiWzAxXSskL2lcbiAgICAgICAgY2FzZSA3OSA6IGNhc2UgMTExIDogcmFkaXggPSA4OyBtYXhDb2RlID0gNTU7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIC9eMG9bMC03XSskL2lcbiAgICAgICAgZGVmYXVsdCA6IHJldHVybiAraXQ7XG4gICAgICB9XG4gICAgICBmb3IodmFyIGRpZ2l0cyA9IGl0LnNsaWNlKDIpLCBpID0gMCwgbCA9IGRpZ2l0cy5sZW5ndGgsIGNvZGU7IGkgPCBsOyBpKyspe1xuICAgICAgICBjb2RlID0gZGlnaXRzLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIC8vIHBhcnNlSW50IHBhcnNlcyBhIHN0cmluZyB0byBhIGZpcnN0IHVuYXZhaWxhYmxlIHN5bWJvbFxuICAgICAgICAvLyBidXQgVG9OdW1iZXIgc2hvdWxkIHJldHVybiBOYU4gaWYgYSBzdHJpbmcgY29udGFpbnMgdW5hdmFpbGFibGUgc3ltYm9sc1xuICAgICAgICBpZihjb2RlIDwgNDggfHwgY29kZSA+IG1heENvZGUpcmV0dXJuIE5hTjtcbiAgICAgIH0gcmV0dXJuIHBhcnNlSW50KGRpZ2l0cywgcmFkaXgpO1xuICAgIH1cbiAgfSByZXR1cm4gK2l0O1xufTtcblxuaWYoISROdW1iZXIoJyAwbzEnKSB8fCAhJE51bWJlcignMGIxJykgfHwgJE51bWJlcignKzB4MScpKXtcbiAgJE51bWJlciA9IGZ1bmN0aW9uIE51bWJlcih2YWx1ZSl7XG4gICAgdmFyIGl0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgPyAwIDogdmFsdWVcbiAgICAgICwgdGhhdCA9IHRoaXM7XG4gICAgcmV0dXJuIHRoYXQgaW5zdGFuY2VvZiAkTnVtYmVyXG4gICAgICAvLyBjaGVjayBvbiAxLi5jb25zdHJ1Y3Rvcihmb28pIGNhc2VcbiAgICAgICYmIChCUk9LRU5fQ09GID8gZmFpbHMoZnVuY3Rpb24oKXsgcHJvdG8udmFsdWVPZi5jYWxsKHRoYXQpOyB9KSA6IGNvZih0aGF0KSAhPSBOVU1CRVIpXG4gICAgICAgID8gaW5oZXJpdElmUmVxdWlyZWQobmV3IEJhc2UodG9OdW1iZXIoaXQpKSwgdGhhdCwgJE51bWJlcikgOiB0b051bWJlcihpdCk7XG4gIH07XG4gIGZvcih2YXIga2V5cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BOKEJhc2UpIDogKFxuICAgIC8vIEVTMzpcbiAgICAnTUFYX1ZBTFVFLE1JTl9WQUxVRSxOYU4sTkVHQVRJVkVfSU5GSU5JVFksUE9TSVRJVkVfSU5GSU5JVFksJyArXG4gICAgLy8gRVM2IChpbiBjYXNlLCBpZiBtb2R1bGVzIHdpdGggRVM2IE51bWJlciBzdGF0aWNzIHJlcXVpcmVkIGJlZm9yZSk6XG4gICAgJ0VQU0lMT04saXNGaW5pdGUsaXNJbnRlZ2VyLGlzTmFOLGlzU2FmZUludGVnZXIsTUFYX1NBRkVfSU5URUdFUiwnICtcbiAgICAnTUlOX1NBRkVfSU5URUdFUixwYXJzZUZsb2F0LHBhcnNlSW50LGlzSW50ZWdlcidcbiAgKS5zcGxpdCgnLCcpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7IGorKyl7XG4gICAgaWYoaGFzKEJhc2UsIGtleSA9IGtleXNbal0pICYmICFoYXMoJE51bWJlciwga2V5KSl7XG4gICAgICBkUCgkTnVtYmVyLCBrZXksIGdPUEQoQmFzZSwga2V5KSk7XG4gICAgfVxuICB9XG4gICROdW1iZXIucHJvdG90eXBlID0gcHJvdG87XG4gIHByb3RvLmNvbnN0cnVjdG9yID0gJE51bWJlcjtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShnbG9iYWwsIE5VTUJFUiwgJE51bWJlcik7XG59IiwiLy8gMjAuMS4yLjEgTnVtYmVyLkVQU0lMT05cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge0VQU0lMT046IE1hdGgucG93KDIsIC01Mil9KTsiLCIvLyAyMC4xLjIuMiBOdW1iZXIuaXNGaW5pdGUobnVtYmVyKVxudmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgX2lzRmluaXRlID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuaXNGaW5pdGU7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc0Zpbml0ZTogZnVuY3Rpb24gaXNGaW5pdGUoaXQpe1xuICAgIHJldHVybiB0eXBlb2YgaXQgPT0gJ251bWJlcicgJiYgX2lzRmluaXRlKGl0KTtcbiAgfVxufSk7IiwiLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtpc0ludGVnZXI6IHJlcXVpcmUoJy4vX2lzLWludGVnZXInKX0pOyIsIi8vIDIwLjEuMi40IE51bWJlci5pc05hTihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNOYU46IGZ1bmN0aW9uIGlzTmFOKG51bWJlcil7XG4gICAgcmV0dXJuIG51bWJlciAhPSBudW1iZXI7XG4gIH1cbn0pOyIsIi8vIDIwLjEuMi41IE51bWJlci5pc1NhZmVJbnRlZ2VyKG51bWJlcilcbnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGlzSW50ZWdlciA9IHJlcXVpcmUoJy4vX2lzLWludGVnZXInKVxuICAsIGFicyAgICAgICA9IE1hdGguYWJzO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNTYWZlSW50ZWdlcjogZnVuY3Rpb24gaXNTYWZlSW50ZWdlcihudW1iZXIpe1xuICAgIHJldHVybiBpc0ludGVnZXIobnVtYmVyKSAmJiBhYnMobnVtYmVyKSA8PSAweDFmZmZmZmZmZmZmZmZmO1xuICB9XG59KTsiLCIvLyAyMC4xLjIuNiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7TUFYX1NBRkVfSU5URUdFUjogMHgxZmZmZmZmZmZmZmZmZn0pOyIsIi8vIDIwLjEuMi4xMCBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7TUlOX1NBRkVfSU5URUdFUjogLTB4MWZmZmZmZmZmZmZmZmZ9KTsiLCJ2YXIgJGV4cG9ydCAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fcGFyc2UtZmxvYXQnKTtcbi8vIDIwLjEuMi4xMiBOdW1iZXIucGFyc2VGbG9hdChzdHJpbmcpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VGbG9hdCAhPSAkcGFyc2VGbG9hdCksICdOdW1iZXInLCB7cGFyc2VGbG9hdDogJHBhcnNlRmxvYXR9KTsiLCJ2YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19wYXJzZS1pbnQnKTtcbi8vIDIwLjEuMi4xMyBOdW1iZXIucGFyc2VJbnQoc3RyaW5nLCByYWRpeClcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE51bWJlci5wYXJzZUludCAhPSAkcGFyc2VJbnQpLCAnTnVtYmVyJywge3BhcnNlSW50OiAkcGFyc2VJbnR9KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCB0b0ludGVnZXIgICAgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJylcbiAgLCBhTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuL19hLW51bWJlci12YWx1ZScpXG4gICwgcmVwZWF0ICAgICAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpXG4gICwgJHRvRml4ZWQgICAgID0gMS4udG9GaXhlZFxuICAsIGZsb29yICAgICAgICA9IE1hdGguZmxvb3JcbiAgLCBkYXRhICAgICAgICAgPSBbMCwgMCwgMCwgMCwgMCwgMF1cbiAgLCBFUlJPUiAgICAgICAgPSAnTnVtYmVyLnRvRml4ZWQ6IGluY29ycmVjdCBpbnZvY2F0aW9uISdcbiAgLCBaRVJPICAgICAgICAgPSAnMCc7XG5cbnZhciBtdWx0aXBseSA9IGZ1bmN0aW9uKG4sIGMpe1xuICB2YXIgaSAgPSAtMVxuICAgICwgYzIgPSBjO1xuICB3aGlsZSgrK2kgPCA2KXtcbiAgICBjMiArPSBuICogZGF0YVtpXTtcbiAgICBkYXRhW2ldID0gYzIgJSAxZTc7XG4gICAgYzIgPSBmbG9vcihjMiAvIDFlNyk7XG4gIH1cbn07XG52YXIgZGl2aWRlID0gZnVuY3Rpb24obil7XG4gIHZhciBpID0gNlxuICAgICwgYyA9IDA7XG4gIHdoaWxlKC0taSA+PSAwKXtcbiAgICBjICs9IGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGZsb29yKGMgLyBuKTtcbiAgICBjID0gKGMgJSBuKSAqIDFlNztcbiAgfVxufTtcbnZhciBudW1Ub1N0cmluZyA9IGZ1bmN0aW9uKCl7XG4gIHZhciBpID0gNlxuICAgICwgcyA9ICcnO1xuICB3aGlsZSgtLWkgPj0gMCl7XG4gICAgaWYocyAhPT0gJycgfHwgaSA9PT0gMCB8fCBkYXRhW2ldICE9PSAwKXtcbiAgICAgIHZhciB0ID0gU3RyaW5nKGRhdGFbaV0pO1xuICAgICAgcyA9IHMgPT09ICcnID8gdCA6IHMgKyByZXBlYXQuY2FsbChaRVJPLCA3IC0gdC5sZW5ndGgpICsgdDtcbiAgICB9XG4gIH0gcmV0dXJuIHM7XG59O1xudmFyIHBvdyA9IGZ1bmN0aW9uKHgsIG4sIGFjYyl7XG4gIHJldHVybiBuID09PSAwID8gYWNjIDogbiAlIDIgPT09IDEgPyBwb3coeCwgbiAtIDEsIGFjYyAqIHgpIDogcG93KHggKiB4LCBuIC8gMiwgYWNjKTtcbn07XG52YXIgbG9nID0gZnVuY3Rpb24oeCl7XG4gIHZhciBuICA9IDBcbiAgICAsIHgyID0geDtcbiAgd2hpbGUoeDIgPj0gNDA5Nil7XG4gICAgbiArPSAxMjtcbiAgICB4MiAvPSA0MDk2O1xuICB9XG4gIHdoaWxlKHgyID49IDIpe1xuICAgIG4gICs9IDE7XG4gICAgeDIgLz0gMjtcbiAgfSByZXR1cm4gbjtcbn07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKCEhJHRvRml4ZWQgJiYgKFxuICAwLjAwMDA4LnRvRml4ZWQoMykgIT09ICcwLjAwMCcgfHxcbiAgMC45LnRvRml4ZWQoMCkgIT09ICcxJyB8fFxuICAxLjI1NS50b0ZpeGVkKDIpICE9PSAnMS4yNScgfHxcbiAgMTAwMDAwMDAwMDAwMDAwMDEyOC4udG9GaXhlZCgwKSAhPT0gJzEwMDAwMDAwMDAwMDAwMDAxMjgnXG4pIHx8ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXG4gICR0b0ZpeGVkLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b0ZpeGVkOiBmdW5jdGlvbiB0b0ZpeGVkKGZyYWN0aW9uRGlnaXRzKXtcbiAgICB2YXIgeCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCBFUlJPUilcbiAgICAgICwgZiA9IHRvSW50ZWdlcihmcmFjdGlvbkRpZ2l0cylcbiAgICAgICwgcyA9ICcnXG4gICAgICAsIG0gPSBaRVJPXG4gICAgICAsIGUsIHosIGosIGs7XG4gICAgaWYoZiA8IDAgfHwgZiA+IDIwKXRocm93IFJhbmdlRXJyb3IoRVJST1IpO1xuICAgIGlmKHggIT0geClyZXR1cm4gJ05hTic7XG4gICAgaWYoeCA8PSAtMWUyMSB8fCB4ID49IDFlMjEpcmV0dXJuIFN0cmluZyh4KTtcbiAgICBpZih4IDwgMCl7XG4gICAgICBzID0gJy0nO1xuICAgICAgeCA9IC14O1xuICAgIH1cbiAgICBpZih4ID4gMWUtMjEpe1xuICAgICAgZSA9IGxvZyh4ICogcG93KDIsIDY5LCAxKSkgLSA2OTtcbiAgICAgIHogPSBlIDwgMCA/IHggKiBwb3coMiwgLWUsIDEpIDogeCAvIHBvdygyLCBlLCAxKTtcbiAgICAgIHogKj0gMHgxMDAwMDAwMDAwMDAwMDtcbiAgICAgIGUgPSA1MiAtIGU7XG4gICAgICBpZihlID4gMCl7XG4gICAgICAgIG11bHRpcGx5KDAsIHopO1xuICAgICAgICBqID0gZjtcbiAgICAgICAgd2hpbGUoaiA+PSA3KXtcbiAgICAgICAgICBtdWx0aXBseSgxZTcsIDApO1xuICAgICAgICAgIGogLT0gNztcbiAgICAgICAgfVxuICAgICAgICBtdWx0aXBseShwb3coMTAsIGosIDEpLCAwKTtcbiAgICAgICAgaiA9IGUgLSAxO1xuICAgICAgICB3aGlsZShqID49IDIzKXtcbiAgICAgICAgICBkaXZpZGUoMSA8PCAyMyk7XG4gICAgICAgICAgaiAtPSAyMztcbiAgICAgICAgfVxuICAgICAgICBkaXZpZGUoMSA8PCBqKTtcbiAgICAgICAgbXVsdGlwbHkoMSwgMSk7XG4gICAgICAgIGRpdmlkZSgyKTtcbiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtdWx0aXBseSgwLCB6KTtcbiAgICAgICAgbXVsdGlwbHkoMSA8PCAtZSwgMCk7XG4gICAgICAgIG0gPSBudW1Ub1N0cmluZygpICsgcmVwZWF0LmNhbGwoWkVSTywgZik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmKGYgPiAwKXtcbiAgICAgIGsgPSBtLmxlbmd0aDtcbiAgICAgIG0gPSBzICsgKGsgPD0gZiA/ICcwLicgKyByZXBlYXQuY2FsbChaRVJPLCBmIC0gaykgKyBtIDogbS5zbGljZSgwLCBrIC0gZikgKyAnLicgKyBtLnNsaWNlKGsgLSBmKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSBzICsgbTtcbiAgICB9IHJldHVybiBtO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkZmFpbHMgICAgICAgPSByZXF1aXJlKCcuL19mYWlscycpXG4gICwgYU51bWJlclZhbHVlID0gcmVxdWlyZSgnLi9fYS1udW1iZXItdmFsdWUnKVxuICAsICR0b1ByZWNpc2lvbiA9IDEuLnRvUHJlY2lzaW9uO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICgkZmFpbHMoZnVuY3Rpb24oKXtcbiAgLy8gSUU3LVxuICByZXR1cm4gJHRvUHJlY2lzaW9uLmNhbGwoMSwgdW5kZWZpbmVkKSAhPT0gJzEnO1xufSkgfHwgISRmYWlscyhmdW5jdGlvbigpe1xuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxuICAkdG9QcmVjaXNpb24uY2FsbCh7fSk7XG59KSksICdOdW1iZXInLCB7XG4gIHRvUHJlY2lzaW9uOiBmdW5jdGlvbiB0b1ByZWNpc2lvbihwcmVjaXNpb24pe1xuICAgIHZhciB0aGF0ID0gYU51bWJlclZhbHVlKHRoaXMsICdOdW1iZXIjdG9QcmVjaXNpb246IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICAgIHJldHVybiBwcmVjaXNpb24gPT09IHVuZGVmaW5lZCA/ICR0b1ByZWNpc2lvbi5jYWxsKHRoYXQpIDogJHRvUHJlY2lzaW9uLmNhbGwodGhhdCwgcHJlY2lzaW9uKTsgXG4gIH1cbn0pOyIsIi8vIDE5LjEuMy4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiwgJ09iamVjdCcsIHthc3NpZ246IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKX0pOyIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jylcbi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7Y3JlYXRlOiByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyl9KTsiLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjMgLyAxNS4yLjMuNyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHtkZWZpbmVQcm9wZXJ0aWVzOiByZXF1aXJlKCcuL19vYmplY3QtZHBzJyl9KTsiLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjQgLyAxNS4yLjMuNiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7ZGVmaW5lUHJvcGVydHk6IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmZ9KTsiLCIvLyAxOS4xLjIuNSBPYmplY3QuZnJlZXplKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIG1ldGEgICAgID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2ZyZWV6ZScsIGZ1bmN0aW9uKCRmcmVlemUpe1xuICByZXR1cm4gZnVuY3Rpb24gZnJlZXplKGl0KXtcbiAgICByZXR1cm4gJGZyZWV6ZSAmJiBpc09iamVjdChpdCkgPyAkZnJlZXplKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7IiwiLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxudmFyIHRvSU9iamVjdCAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JylcbiAgLCAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5RGVzY3JpcHRvcicsIGZ1bmN0aW9uKCl7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSl7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodG9JT2JqZWN0KGl0KSwga2V5KTtcbiAgfTtcbn0pOyIsIi8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5TmFtZXMnLCBmdW5jdGlvbigpe1xuICByZXR1cm4gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0JykuZjtcbn0pOyIsIi8vIDE5LjEuMi45IE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIHRvT2JqZWN0ICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgJGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldFByb3RvdHlwZU9mJywgZnVuY3Rpb24oKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKGl0KXtcbiAgICByZXR1cm4gJGdldFByb3RvdHlwZU9mKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTsiLCIvLyAxOS4xLjIuMTEgT2JqZWN0LmlzRXh0ZW5zaWJsZShPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNFeHRlbnNpYmxlJywgZnVuY3Rpb24oJGlzRXh0ZW5zaWJsZSl7XG4gIHJldHVybiBmdW5jdGlvbiBpc0V4dGVuc2libGUoaXQpe1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZShpdCkgOiB0cnVlIDogZmFsc2U7XG4gIH07XG59KTsiLCIvLyAxOS4xLjIuMTIgT2JqZWN0LmlzRnJvemVuKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc0Zyb3plbicsIGZ1bmN0aW9uKCRpc0Zyb3plbil7XG4gIHJldHVybiBmdW5jdGlvbiBpc0Zyb3plbihpdCl7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc0Zyb3plbiA/ICRpc0Zyb3plbihpdCkgOiBmYWxzZSA6IHRydWU7XG4gIH07XG59KTsiLCIvLyAxOS4xLjIuMTMgT2JqZWN0LmlzU2VhbGVkKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc1NlYWxlZCcsIGZ1bmN0aW9uKCRpc1NlYWxlZCl7XG4gIHJldHVybiBmdW5jdGlvbiBpc1NlYWxlZChpdCl7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc1NlYWxlZCA/ICRpc1NlYWxlZChpdCkgOiBmYWxzZSA6IHRydWU7XG4gIH07XG59KTsiLCIvLyAxOS4xLjMuMTAgT2JqZWN0LmlzKHZhbHVlMSwgdmFsdWUyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge2lzOiByZXF1aXJlKCcuL19zYW1lLXZhbHVlJyl9KTsiLCIvLyAxOS4xLjIuMTQgT2JqZWN0LmtleXMoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgJGtleXMgICAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2tleXMnLCBmdW5jdGlvbigpe1xuICByZXR1cm4gZnVuY3Rpb24ga2V5cyhpdCl7XG4gICAgcmV0dXJuICRrZXlzKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTsiLCIvLyAxOS4xLjIuMTUgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIG1ldGEgICAgID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ3ByZXZlbnRFeHRlbnNpb25zJywgZnVuY3Rpb24oJHByZXZlbnRFeHRlbnNpb25zKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKGl0KXtcbiAgICByZXR1cm4gJHByZXZlbnRFeHRlbnNpb25zICYmIGlzT2JqZWN0KGl0KSA/ICRwcmV2ZW50RXh0ZW5zaW9ucyhtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pOyIsIi8vIDE5LjEuMi4xNyBPYmplY3Quc2VhbChPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBtZXRhICAgICA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdzZWFsJywgZnVuY3Rpb24oJHNlYWwpe1xuICByZXR1cm4gZnVuY3Rpb24gc2VhbChpdCl7XG4gICAgcmV0dXJuICRzZWFsICYmIGlzT2JqZWN0KGl0KSA/ICRzZWFsKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7IiwiLy8gMTkuMS4zLjE5IE9iamVjdC5zZXRQcm90b3R5cGVPZihPLCBwcm90bylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtzZXRQcm90b3R5cGVPZjogcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0fSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKVxuICAsIHRlc3QgICAgPSB7fTtcbnRlc3RbcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyldID0gJ3onO1xuaWYodGVzdCArICcnICE9ICdbb2JqZWN0IHpdJyl7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoT2JqZWN0LnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKXtcbiAgICByZXR1cm4gJ1tvYmplY3QgJyArIGNsYXNzb2YodGhpcykgKyAnXSc7XG4gIH0sIHRydWUpO1xufSIsInZhciAkZXhwb3J0ICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19wYXJzZS1mbG9hdCcpO1xuLy8gMTguMi40IHBhcnNlRmxvYXQoc3RyaW5nKVxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VGbG9hdCAhPSAkcGFyc2VGbG9hdCksIHtwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdH0pOyIsInZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX3BhcnNlLWludCcpO1xuLy8gMTguMi41IHBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuRiAqIChwYXJzZUludCAhPSAkcGFyc2VJbnQpLCB7cGFyc2VJbnQ6ICRwYXJzZUludH0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZICAgICAgICAgICAgPSByZXF1aXJlKCcuL19saWJyYXJ5JylcbiAgLCBnbG9iYWwgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGN0eCAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2N0eCcpXG4gICwgY2xhc3NvZiAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpXG4gICwgJGV4cG9ydCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBpc09iamVjdCAgICAgICAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGFGdW5jdGlvbiAgICAgICAgICA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKVxuICAsIGFuSW5zdGFuY2UgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJylcbiAgLCBmb3JPZiAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19mb3Itb2YnKVxuICAsIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKVxuICAsIHRhc2sgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXRcbiAgLCBtaWNyb3Rhc2sgICAgICAgICAgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpXG4gICwgUFJPTUlTRSAgICAgICAgICAgID0gJ1Byb21pc2UnXG4gICwgVHlwZUVycm9yICAgICAgICAgID0gZ2xvYmFsLlR5cGVFcnJvclxuICAsIHByb2Nlc3MgICAgICAgICAgICA9IGdsb2JhbC5wcm9jZXNzXG4gICwgJFByb21pc2UgICAgICAgICAgID0gZ2xvYmFsW1BST01JU0VdXG4gICwgcHJvY2VzcyAgICAgICAgICAgID0gZ2xvYmFsLnByb2Nlc3NcbiAgLCBpc05vZGUgICAgICAgICAgICAgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJ1xuICAsIGVtcHR5ICAgICAgICAgICAgICA9IGZ1bmN0aW9uKCl7IC8qIGVtcHR5ICovIH1cbiAgLCBJbnRlcm5hbCwgR2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5LCBXcmFwcGVyO1xuXG52YXIgVVNFX05BVElWRSA9ICEhZnVuY3Rpb24oKXtcbiAgdHJ5IHtcbiAgICAvLyBjb3JyZWN0IHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnRcbiAgICB2YXIgcHJvbWlzZSAgICAgPSAkUHJvbWlzZS5yZXNvbHZlKDEpXG4gICAgICAsIEZha2VQcm9taXNlID0gKHByb21pc2UuY29uc3RydWN0b3IgPSB7fSlbcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKV0gPSBmdW5jdGlvbihleGVjKXsgZXhlYyhlbXB0eSwgZW1wdHkpOyB9O1xuICAgIC8vIHVuaGFuZGxlZCByZWplY3Rpb25zIHRyYWNraW5nIHN1cHBvcnQsIE5vZGVKUyBQcm9taXNlIHdpdGhvdXQgaXQgZmFpbHMgQEBzcGVjaWVzIHRlc3RcbiAgICByZXR1cm4gKGlzTm9kZSB8fCB0eXBlb2YgUHJvbWlzZVJlamVjdGlvbkV2ZW50ID09ICdmdW5jdGlvbicpICYmIHByb21pc2UudGhlbihlbXB0eSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZTtcbiAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxufSgpO1xuXG4vLyBoZWxwZXJzXG52YXIgc2FtZUNvbnN0cnVjdG9yID0gZnVuY3Rpb24oYSwgYil7XG4gIC8vIHdpdGggbGlicmFyeSB3cmFwcGVyIHNwZWNpYWwgY2FzZVxuICByZXR1cm4gYSA9PT0gYiB8fCBhID09PSAkUHJvbWlzZSAmJiBiID09PSBXcmFwcGVyO1xufTtcbnZhciBpc1RoZW5hYmxlID0gZnVuY3Rpb24oaXQpe1xuICB2YXIgdGhlbjtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSA9PSAnZnVuY3Rpb24nID8gdGhlbiA6IGZhbHNlO1xufTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uKEMpe1xuICByZXR1cm4gc2FtZUNvbnN0cnVjdG9yKCRQcm9taXNlLCBDKVxuICAgID8gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgOiBuZXcgR2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5KEMpO1xufTtcbnZhciBQcm9taXNlQ2FwYWJpbGl0eSA9IEdlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uKEMpe1xuICB2YXIgcmVzb2x2ZSwgcmVqZWN0O1xuICB0aGlzLnByb21pc2UgPSBuZXcgQyhmdW5jdGlvbigkJHJlc29sdmUsICQkcmVqZWN0KXtcbiAgICBpZihyZXNvbHZlICE9PSB1bmRlZmluZWQgfHwgcmVqZWN0ICE9PSB1bmRlZmluZWQpdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgcmVqZWN0ICA9ICQkcmVqZWN0O1xuICB9KTtcbiAgdGhpcy5yZXNvbHZlID0gYUZ1bmN0aW9uKHJlc29sdmUpO1xuICB0aGlzLnJlamVjdCAgPSBhRnVuY3Rpb24ocmVqZWN0KTtcbn07XG52YXIgcGVyZm9ybSA9IGZ1bmN0aW9uKGV4ZWMpe1xuICB0cnkge1xuICAgIGV4ZWMoKTtcbiAgfSBjYXRjaChlKXtcbiAgICByZXR1cm4ge2Vycm9yOiBlfTtcbiAgfVxufTtcbnZhciBub3RpZnkgPSBmdW5jdGlvbihwcm9taXNlLCBpc1JlamVjdCl7XG4gIGlmKHByb21pc2UuX24pcmV0dXJuO1xuICBwcm9taXNlLl9uID0gdHJ1ZTtcbiAgdmFyIGNoYWluID0gcHJvbWlzZS5fYztcbiAgbWljcm90YXNrKGZ1bmN0aW9uKCl7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdlxuICAgICAgLCBvayAgICA9IHByb21pc2UuX3MgPT0gMVxuICAgICAgLCBpICAgICA9IDA7XG4gICAgdmFyIHJ1biA9IGZ1bmN0aW9uKHJlYWN0aW9uKXtcbiAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWxcbiAgICAgICAgLCByZXNvbHZlID0gcmVhY3Rpb24ucmVzb2x2ZVxuICAgICAgICAsIHJlamVjdCAgPSByZWFjdGlvbi5yZWplY3RcbiAgICAgICAgLCBkb21haW4gID0gcmVhY3Rpb24uZG9tYWluXG4gICAgICAgICwgcmVzdWx0LCB0aGVuO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYoaGFuZGxlcil7XG4gICAgICAgICAgaWYoIW9rKXtcbiAgICAgICAgICAgIGlmKHByb21pc2UuX2ggPT0gMilvbkhhbmRsZVVuaGFuZGxlZChwcm9taXNlKTtcbiAgICAgICAgICAgIHByb21pc2UuX2ggPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZihoYW5kbGVyID09PSB0cnVlKXJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYoZG9tYWluKWRvbWFpbi5lbnRlcigpO1xuICAgICAgICAgICAgcmVzdWx0ID0gaGFuZGxlcih2YWx1ZSk7XG4gICAgICAgICAgICBpZihkb21haW4pZG9tYWluLmV4aXQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYocmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlKXtcbiAgICAgICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICAgICAgfSBlbHNlIGlmKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpe1xuICAgICAgICAgICAgdGhlbi5jYWxsKHJlc3VsdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9IGVsc2UgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9IGVsc2UgcmVqZWN0KHZhbHVlKTtcbiAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHdoaWxlKGNoYWluLmxlbmd0aCA+IGkpcnVuKGNoYWluW2krK10pOyAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaFxuICAgIHByb21pc2UuX2MgPSBbXTtcbiAgICBwcm9taXNlLl9uID0gZmFsc2U7XG4gICAgaWYoaXNSZWplY3QgJiYgIXByb21pc2UuX2gpb25VbmhhbmRsZWQocHJvbWlzZSk7XG4gIH0pO1xufTtcbnZhciBvblVuaGFuZGxlZCA9IGZ1bmN0aW9uKHByb21pc2Upe1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbigpe1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3ZcbiAgICAgICwgYWJydXB0LCBoYW5kbGVyLCBjb25zb2xlO1xuICAgIGlmKGlzVW5oYW5kbGVkKHByb21pc2UpKXtcbiAgICAgIGFicnVwdCA9IHBlcmZvcm0oZnVuY3Rpb24oKXtcbiAgICAgICAgaWYoaXNOb2RlKXtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIGlmKGhhbmRsZXIgPSBnbG9iYWwub251bmhhbmRsZWRyZWplY3Rpb24pe1xuICAgICAgICAgIGhhbmRsZXIoe3Byb21pc2U6IHByb21pc2UsIHJlYXNvbjogdmFsdWV9KTtcbiAgICAgICAgfSBlbHNlIGlmKChjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGUpICYmIGNvbnNvbGUuZXJyb3Ipe1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxuICAgICAgcHJvbWlzZS5faCA9IGlzTm9kZSB8fCBpc1VuaGFuZGxlZChwcm9taXNlKSA/IDIgOiAxO1xuICAgIH0gcHJvbWlzZS5fYSA9IHVuZGVmaW5lZDtcbiAgICBpZihhYnJ1cHQpdGhyb3cgYWJydXB0LmVycm9yO1xuICB9KTtcbn07XG52YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbihwcm9taXNlKXtcbiAgaWYocHJvbWlzZS5faCA9PSAxKXJldHVybiBmYWxzZTtcbiAgdmFyIGNoYWluID0gcHJvbWlzZS5fYSB8fCBwcm9taXNlLl9jXG4gICAgLCBpICAgICA9IDBcbiAgICAsIHJlYWN0aW9uO1xuICB3aGlsZShjaGFpbi5sZW5ndGggPiBpKXtcbiAgICByZWFjdGlvbiA9IGNoYWluW2krK107XG4gICAgaWYocmVhY3Rpb24uZmFpbCB8fCAhaXNVbmhhbmRsZWQocmVhY3Rpb24ucHJvbWlzZSkpcmV0dXJuIGZhbHNlO1xuICB9IHJldHVybiB0cnVlO1xufTtcbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uKHByb21pc2Upe1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbigpe1xuICAgIHZhciBoYW5kbGVyO1xuICAgIGlmKGlzTm9kZSl7XG4gICAgICBwcm9jZXNzLmVtaXQoJ3JlamVjdGlvbkhhbmRsZWQnLCBwcm9taXNlKTtcbiAgICB9IGVsc2UgaWYoaGFuZGxlciA9IGdsb2JhbC5vbnJlamVjdGlvbmhhbmRsZWQpe1xuICAgICAgaGFuZGxlcih7cHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiBwcm9taXNlLl92fSk7XG4gICAgfVxuICB9KTtcbn07XG52YXIgJHJlamVjdCA9IGZ1bmN0aW9uKHZhbHVlKXtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICBpZihwcm9taXNlLl9kKXJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICBwcm9taXNlLl92ID0gdmFsdWU7XG4gIHByb21pc2UuX3MgPSAyO1xuICBpZighcHJvbWlzZS5fYSlwcm9taXNlLl9hID0gcHJvbWlzZS5fYy5zbGljZSgpO1xuICBub3RpZnkocHJvbWlzZSwgdHJ1ZSk7XG59O1xudmFyICRyZXNvbHZlID0gZnVuY3Rpb24odmFsdWUpe1xuICB2YXIgcHJvbWlzZSA9IHRoaXNcbiAgICAsIHRoZW47XG4gIGlmKHByb21pc2UuX2QpcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHRyeSB7XG4gICAgaWYocHJvbWlzZSA9PT0gdmFsdWUpdGhyb3cgVHlwZUVycm9yKFwiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGZcIik7XG4gICAgaWYodGhlbiA9IGlzVGhlbmFibGUodmFsdWUpKXtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbigpe1xuICAgICAgICB2YXIgd3JhcHBlciA9IHtfdzogcHJvbWlzZSwgX2Q6IGZhbHNlfTsgLy8gd3JhcFxuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoZW4uY2FsbCh2YWx1ZSwgY3R4KCRyZXNvbHZlLCB3cmFwcGVyLCAxKSwgY3R4KCRyZWplY3QsIHdyYXBwZXIsIDEpKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAkcmVqZWN0LmNhbGwod3JhcHBlciwgZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9taXNlLl92ID0gdmFsdWU7XG4gICAgICBwcm9taXNlLl9zID0gMTtcbiAgICAgIG5vdGlmeShwcm9taXNlLCBmYWxzZSk7XG4gICAgfVxuICB9IGNhdGNoKGUpe1xuICAgICRyZWplY3QuY2FsbCh7X3c6IHByb21pc2UsIF9kOiBmYWxzZX0sIGUpOyAvLyB3cmFwXG4gIH1cbn07XG5cbi8vIGNvbnN0cnVjdG9yIHBvbHlmaWxsXG5pZighVVNFX05BVElWRSl7XG4gIC8vIDI1LjQuMy4xIFByb21pc2UoZXhlY3V0b3IpXG4gICRQcm9taXNlID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcil7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkUHJvbWlzZSwgUFJPTUlTRSwgJ19oJyk7XG4gICAgYUZ1bmN0aW9uKGV4ZWN1dG9yKTtcbiAgICBJbnRlcm5hbC5jYWxsKHRoaXMpO1xuICAgIHRyeSB7XG4gICAgICBleGVjdXRvcihjdHgoJHJlc29sdmUsIHRoaXMsIDEpLCBjdHgoJHJlamVjdCwgdGhpcywgMSkpO1xuICAgIH0gY2F0Y2goZXJyKXtcbiAgICAgICRyZWplY3QuY2FsbCh0aGlzLCBlcnIpO1xuICAgIH1cbiAgfTtcbiAgSW50ZXJuYWwgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKXtcbiAgICB0aGlzLl9jID0gW107ICAgICAgICAgICAgIC8vIDwtIGF3YWl0aW5nIHJlYWN0aW9uc1xuICAgIHRoaXMuX2EgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gY2hlY2tlZCBpbiBpc1VuaGFuZGxlZCByZWFjdGlvbnNcbiAgICB0aGlzLl9zID0gMDsgICAgICAgICAgICAgIC8vIDwtIHN0YXRlXG4gICAgdGhpcy5fZCA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBkb25lXG4gICAgdGhpcy5fdiA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSB2YWx1ZVxuICAgIHRoaXMuX2ggPSAwOyAgICAgICAgICAgICAgLy8gPC0gcmVqZWN0aW9uIHN0YXRlLCAwIC0gZGVmYXVsdCwgMSAtIGhhbmRsZWQsIDIgLSB1bmhhbmRsZWRcbiAgICB0aGlzLl9uID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIG5vdGlmeVxuICB9O1xuICBJbnRlcm5hbC5wcm90b3R5cGUgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKSgkUHJvbWlzZS5wcm90b3R5cGUsIHtcbiAgICAvLyAyNS40LjUuMyBQcm9taXNlLnByb3RvdHlwZS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKVxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpe1xuICAgICAgdmFyIHJlYWN0aW9uICAgID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRQcm9taXNlKSk7XG4gICAgICByZWFjdGlvbi5vayAgICAgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLmZhaWwgICA9IHR5cGVvZiBvblJlamVjdGVkID09ICdmdW5jdGlvbicgJiYgb25SZWplY3RlZDtcbiAgICAgIHJlYWN0aW9uLmRvbWFpbiA9IGlzTm9kZSA/IHByb2Nlc3MuZG9tYWluIDogdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fYy5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmKHRoaXMuX2EpdGhpcy5fYS5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmKHRoaXMuX3Mpbm90aWZ5KHRoaXMsIGZhbHNlKTtcbiAgICAgIHJldHVybiByZWFjdGlvbi5wcm9taXNlO1xuICAgIH0sXG4gICAgLy8gMjUuNC41LjEgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2gob25SZWplY3RlZClcbiAgICAnY2F0Y2gnOiBmdW5jdGlvbihvblJlamVjdGVkKXtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgICB9XG4gIH0pO1xuICBQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIHByb21pc2UgID0gbmV3IEludGVybmFsO1xuICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG4gICAgdGhpcy5yZXNvbHZlID0gY3R4KCRyZXNvbHZlLCBwcm9taXNlLCAxKTtcbiAgICB0aGlzLnJlamVjdCAgPSBjdHgoJHJlamVjdCwgcHJvbWlzZSwgMSk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHtQcm9taXNlOiAkUHJvbWlzZX0pO1xucmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKSgkUHJvbWlzZSwgUFJPTUlTRSk7XG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKFBST01JU0UpO1xuV3JhcHBlciA9IHJlcXVpcmUoJy4vX2NvcmUnKVtQUk9NSVNFXTtcblxuLy8gc3RhdGljc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNSBQcm9taXNlLnJlamVjdChyKVxuICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyKXtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpXG4gICAgICAsICQkcmVqZWN0ICAgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICAkJHJlamVjdChyKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKExJQlJBUlkgfHwgIVVTRV9OQVRJVkUpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC42IFByb21pc2UucmVzb2x2ZSh4KVxuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHgpe1xuICAgIC8vIGluc3RhbmNlb2YgaW5zdGVhZCBvZiBpbnRlcm5hbCBzbG90IGNoZWNrIGJlY2F1c2Ugd2Ugc2hvdWxkIGZpeCBpdCB3aXRob3V0IHJlcGxhY2VtZW50IG5hdGl2ZSBQcm9taXNlIGNvcmVcbiAgICBpZih4IGluc3RhbmNlb2YgJFByb21pc2UgJiYgc2FtZUNvbnN0cnVjdG9yKHguY29uc3RydWN0b3IsIHRoaXMpKXJldHVybiB4O1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcylcbiAgICAgICwgJCRyZXNvbHZlICA9IGNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICAkJHJlc29sdmUoeCk7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoVVNFX05BVElWRSAmJiByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uKGl0ZXIpe1xuICAkUHJvbWlzZS5hbGwoaXRlcilbJ2NhdGNoJ10oZW1wdHkpO1xufSkpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC4xIFByb21pc2UuYWxsKGl0ZXJhYmxlKVxuICBhbGw6IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSl7XG4gICAgdmFyIEMgICAgICAgICAgPSB0aGlzXG4gICAgICAsIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgICAgLCByZXNvbHZlICAgID0gY2FwYWJpbGl0eS5yZXNvbHZlXG4gICAgICAsIHJlamVjdCAgICAgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgYWJydXB0ID0gcGVyZm9ybShmdW5jdGlvbigpe1xuICAgICAgdmFyIHZhbHVlcyAgICA9IFtdXG4gICAgICAgICwgaW5kZXggICAgID0gMFxuICAgICAgICAsIHJlbWFpbmluZyA9IDE7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uKHByb21pc2Upe1xuICAgICAgICB2YXIgJGluZGV4ICAgICAgICA9IGluZGV4KytcbiAgICAgICAgICAsIGFscmVhZHlDYWxsZWQgPSBmYWxzZTtcbiAgICAgICAgdmFsdWVzLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgcmVtYWluaW5nKys7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAgICAgICBpZihhbHJlYWR5Q2FsbGVkKXJldHVybjtcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkICA9IHRydWU7XG4gICAgICAgICAgdmFsdWVzWyRpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICB9KTtcbiAgICBpZihhYnJ1cHQpcmVqZWN0KGFicnVwdC5lcnJvcik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfSxcbiAgLy8gMjUuNC40LjQgUHJvbWlzZS5yYWNlKGl0ZXJhYmxlKVxuICByYWNlOiBmdW5jdGlvbiByYWNlKGl0ZXJhYmxlKXtcbiAgICB2YXIgQyAgICAgICAgICA9IHRoaXNcbiAgICAgICwgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgICAsIHJlamVjdCAgICAgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgYWJydXB0ID0gcGVyZm9ybShmdW5jdGlvbigpe1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbihwcm9taXNlKXtcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oY2FwYWJpbGl0eS5yZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaWYoYWJydXB0KXJlamVjdChhYnJ1cHQuZXJyb3IpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pOyIsIi8vIDI2LjEuMSBSZWZsZWN0LmFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KVxudmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpXG4gICwgYW5PYmplY3QgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCByQXBwbHkgICAgPSAocmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdCB8fCB7fSkuYXBwbHlcbiAgLCBmQXBwbHkgICAgPSBGdW5jdGlvbi5hcHBseTtcbi8vIE1TIEVkZ2UgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICByQXBwbHkoZnVuY3Rpb24oKXt9KTtcbn0pLCAnUmVmbGVjdCcsIHtcbiAgYXBwbHk6IGZ1bmN0aW9uIGFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KXtcbiAgICB2YXIgVCA9IGFGdW5jdGlvbih0YXJnZXQpXG4gICAgICAsIEwgPSBhbk9iamVjdChhcmd1bWVudHNMaXN0KTtcbiAgICByZXR1cm4gckFwcGx5ID8gckFwcGx5KFQsIHRoaXNBcmd1bWVudCwgTCkgOiBmQXBwbHkuY2FsbChULCB0aGlzQXJndW1lbnQsIEwpO1xuICB9XG59KTsiLCIvLyAyNi4xLjIgUmVmbGVjdC5jb25zdHJ1Y3QodGFyZ2V0LCBhcmd1bWVudHNMaXN0IFssIG5ld1RhcmdldF0pXG52YXIgJGV4cG9ydCAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgY3JlYXRlICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKVxuICAsIGFGdW5jdGlvbiAgPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJylcbiAgLCBhbk9iamVjdCAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBpc09iamVjdCAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBmYWlscyAgICAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKVxuICAsIGJpbmQgICAgICAgPSByZXF1aXJlKCcuL19iaW5kJylcbiAgLCByQ29uc3RydWN0ID0gKHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3QgfHwge30pLmNvbnN0cnVjdDtcblxuLy8gTVMgRWRnZSBzdXBwb3J0cyBvbmx5IDIgYXJndW1lbnRzIGFuZCBhcmd1bWVudHNMaXN0IGFyZ3VtZW50IGlzIG9wdGlvbmFsXG4vLyBGRiBOaWdodGx5IHNldHMgdGhpcmQgYXJndW1lbnQgYXMgYG5ldy50YXJnZXRgLCBidXQgZG9lcyBub3QgY3JlYXRlIGB0aGlzYCBmcm9tIGl0XG52YXIgTkVXX1RBUkdFVF9CVUcgPSBmYWlscyhmdW5jdGlvbigpe1xuICBmdW5jdGlvbiBGKCl7fVxuICByZXR1cm4gIShyQ29uc3RydWN0KGZ1bmN0aW9uKCl7fSwgW10sIEYpIGluc3RhbmNlb2YgRik7XG59KTtcbnZhciBBUkdTX0JVRyA9ICFmYWlscyhmdW5jdGlvbigpe1xuICByQ29uc3RydWN0KGZ1bmN0aW9uKCl7fSk7XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTkVXX1RBUkdFVF9CVUcgfHwgQVJHU19CVUcpLCAnUmVmbGVjdCcsIHtcbiAgY29uc3RydWN0OiBmdW5jdGlvbiBjb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzIC8qLCBuZXdUYXJnZXQqLyl7XG4gICAgYUZ1bmN0aW9uKFRhcmdldCk7XG4gICAgYW5PYmplY3QoYXJncyk7XG4gICAgdmFyIG5ld1RhcmdldCA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gVGFyZ2V0IDogYUZ1bmN0aW9uKGFyZ3VtZW50c1syXSk7XG4gICAgaWYoQVJHU19CVUcgJiYgIU5FV19UQVJHRVRfQlVHKXJldHVybiByQ29uc3RydWN0KFRhcmdldCwgYXJncywgbmV3VGFyZ2V0KTtcbiAgICBpZihUYXJnZXQgPT0gbmV3VGFyZ2V0KXtcbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgb3B0aW1pemF0aW9uIGZvciAwLTQgYXJndW1lbnRzXG4gICAgICBzd2l0Y2goYXJncy5sZW5ndGgpe1xuICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgVGFyZ2V0O1xuICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0pO1xuICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICBjYXNlIDM6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICBjYXNlIDQ6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgfVxuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBsb3Qgb2YgYXJndW1lbnRzIGNhc2VcbiAgICAgIHZhciAkYXJncyA9IFtudWxsXTtcbiAgICAgICRhcmdzLnB1c2guYXBwbHkoJGFyZ3MsIGFyZ3MpO1xuICAgICAgcmV0dXJuIG5ldyAoYmluZC5hcHBseShUYXJnZXQsICRhcmdzKSk7XG4gICAgfVxuICAgIC8vIHdpdGggYWx0ZXJlZCBuZXdUYXJnZXQsIG5vdCBzdXBwb3J0IGJ1aWx0LWluIGNvbnN0cnVjdG9yc1xuICAgIHZhciBwcm90byAgICA9IG5ld1RhcmdldC5wcm90b3R5cGVcbiAgICAgICwgaW5zdGFuY2UgPSBjcmVhdGUoaXNPYmplY3QocHJvdG8pID8gcHJvdG8gOiBPYmplY3QucHJvdG90eXBlKVxuICAgICAgLCByZXN1bHQgICA9IEZ1bmN0aW9uLmFwcGx5LmNhbGwoVGFyZ2V0LCBpbnN0YW5jZSwgYXJncyk7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiBpbnN0YW5jZTtcbiAgfVxufSk7IiwiLy8gMjYuMS4zIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcylcbnZhciBkUCAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpXG4gICwgJGV4cG9ydCAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGFuT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuXG4vLyBNUyBFZGdlIGhhcyBicm9rZW4gUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSAtIHRocm93aW5nIGluc3RlYWQgb2YgcmV0dXJuaW5nIGZhbHNlXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShkUC5mKHt9LCAxLCB7dmFsdWU6IDF9KSwgMSwge3ZhbHVlOiAyfSk7XG59KSwgJ1JlZmxlY3QnLCB7XG4gIGRlZmluZVByb3BlcnR5OiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKXtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHByb3BlcnR5S2V5ID0gdG9QcmltaXRpdmUocHJvcGVydHlLZXksIHRydWUpO1xuICAgIGFuT2JqZWN0KGF0dHJpYnV0ZXMpO1xuICAgIHRyeSB7XG4gICAgICBkUC5mKHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pOyIsIi8vIDI2LjEuNCBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgJGV4cG9ydCAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGdPUEQgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mXG4gICwgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBkZWxldGVQcm9wZXJ0eTogZnVuY3Rpb24gZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSl7XG4gICAgdmFyIGRlc2MgPSBnT1BEKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgICByZXR1cm4gZGVzYyAmJiAhZGVzYy5jb25maWd1cmFibGUgPyBmYWxzZSA6IGRlbGV0ZSB0YXJnZXRbcHJvcGVydHlLZXldO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyAyNi4xLjUgUmVmbGVjdC5lbnVtZXJhdGUodGFyZ2V0KVxudmFyICRleHBvcnQgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIEVudW1lcmF0ZSA9IGZ1bmN0aW9uKGl0ZXJhdGVkKXtcbiAgdGhpcy5fdCA9IGFuT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdmFyIGtleXMgPSB0aGlzLl9rID0gW10gICAgICAgLy8ga2V5c1xuICAgICwga2V5O1xuICBmb3Ioa2V5IGluIGl0ZXJhdGVkKWtleXMucHVzaChrZXkpO1xufTtcbnJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJykoRW51bWVyYXRlLCAnT2JqZWN0JywgZnVuY3Rpb24oKXtcbiAgdmFyIHRoYXQgPSB0aGlzXG4gICAgLCBrZXlzID0gdGhhdC5fa1xuICAgICwga2V5O1xuICBkbyB7XG4gICAgaWYodGhhdC5faSA+PSBrZXlzLmxlbmd0aClyZXR1cm4ge3ZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWV9O1xuICB9IHdoaWxlKCEoKGtleSA9IGtleXNbdGhhdC5faSsrXSkgaW4gdGhhdC5fdCkpO1xuICByZXR1cm4ge3ZhbHVlOiBrZXksIGRvbmU6IGZhbHNlfTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGVudW1lcmF0ZTogZnVuY3Rpb24gZW51bWVyYXRlKHRhcmdldCl7XG4gICAgcmV0dXJuIG5ldyBFbnVtZXJhdGUodGFyZ2V0KTtcbiAgfVxufSk7IiwiLy8gMjYuMS43IFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgZ09QRCAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpXG4gICwgJGV4cG9ydCAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSl7XG4gICAgcmV0dXJuIGdPUEQuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIH1cbn0pOyIsIi8vIDI2LjEuOCBSZWZsZWN0LmdldFByb3RvdHlwZU9mKHRhcmdldClcbnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgZ2V0UHJvdG8gPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJylcbiAgLCBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGdldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZih0YXJnZXQpe1xuICAgIHJldHVybiBnZXRQcm90byhhbk9iamVjdCh0YXJnZXQpKTtcbiAgfVxufSk7IiwiLy8gMjYuMS42IFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgWywgcmVjZWl2ZXJdKVxudmFyIGdPUEQgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKVxuICAsIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpXG4gICwgaGFzICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsICRleHBvcnQgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBpc09iamVjdCAgICAgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgYW5PYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuZnVuY3Rpb24gZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkvKiwgcmVjZWl2ZXIqLyl7XG4gIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdGFyZ2V0IDogYXJndW1lbnRzWzJdXG4gICAgLCBkZXNjLCBwcm90bztcbiAgaWYoYW5PYmplY3QodGFyZ2V0KSA9PT0gcmVjZWl2ZXIpcmV0dXJuIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIGlmKGRlc2MgPSBnT1BELmYodGFyZ2V0LCBwcm9wZXJ0eUtleSkpcmV0dXJuIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgID8gZGVzYy52YWx1ZVxuICAgIDogZGVzYy5nZXQgIT09IHVuZGVmaW5lZFxuICAgICAgPyBkZXNjLmdldC5jYWxsKHJlY2VpdmVyKVxuICAgICAgOiB1bmRlZmluZWQ7XG4gIGlmKGlzT2JqZWN0KHByb3RvID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpcmV0dXJuIGdldChwcm90bywgcHJvcGVydHlLZXksIHJlY2VpdmVyKTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge2dldDogZ2V0fSk7IiwiLy8gMjYuMS45IFJlZmxlY3QuaGFzKHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGhhczogZnVuY3Rpb24gaGFzKHRhcmdldCwgcHJvcGVydHlLZXkpe1xuICAgIHJldHVybiBwcm9wZXJ0eUtleSBpbiB0YXJnZXQ7XG4gIH1cbn0pOyIsIi8vIDI2LjEuMTAgUmVmbGVjdC5pc0V4dGVuc2libGUodGFyZ2V0KVxudmFyICRleHBvcnQgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGFuT2JqZWN0ICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsICRpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGlzRXh0ZW5zaWJsZTogZnVuY3Rpb24gaXNFeHRlbnNpYmxlKHRhcmdldCl7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICByZXR1cm4gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUodGFyZ2V0KSA6IHRydWU7XG4gIH1cbn0pOyIsIi8vIDI2LjEuMTEgUmVmbGVjdC5vd25LZXlzKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtvd25LZXlzOiByZXF1aXJlKCcuL19vd24ta2V5cycpfSk7IiwiLy8gMjYuMS4xMiBSZWZsZWN0LnByZXZlbnRFeHRlbnNpb25zKHRhcmdldClcbnZhciAkZXhwb3J0ICAgICAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGFuT2JqZWN0ICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgJHByZXZlbnRFeHRlbnNpb25zID0gT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIHByZXZlbnRFeHRlbnNpb25zOiBmdW5jdGlvbiBwcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpe1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgdHJ5IHtcbiAgICAgIGlmKCRwcmV2ZW50RXh0ZW5zaW9ucykkcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTsiLCIvLyAyNi4xLjE0IFJlZmxlY3Quc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bylcbnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgc2V0UHJvdG8gPSByZXF1aXJlKCcuL19zZXQtcHJvdG8nKTtcblxuaWYoc2V0UHJvdG8pJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBzZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90byl7XG4gICAgc2V0UHJvdG8uY2hlY2sodGFyZ2V0LCBwcm90byk7XG4gICAgdHJ5IHtcbiAgICAgIHNldFByb3RvLnNldCh0YXJnZXQsIHByb3RvKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTsiLCIvLyAyNi4xLjEzIFJlZmxlY3Quc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgWywgcmVjZWl2ZXJdKVxudmFyIGRQICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJylcbiAgLCBnT1BEICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJylcbiAgLCBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKVxuICAsIGhhcyAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCAkZXhwb3J0ICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgY3JlYXRlRGVzYyAgICAgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJylcbiAgLCBhbk9iamVjdCAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgaXNPYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxuZnVuY3Rpb24gc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYvKiwgcmVjZWl2ZXIqLyl7XG4gIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCA0ID8gdGFyZ2V0IDogYXJndW1lbnRzWzNdXG4gICAgLCBvd25EZXNjICA9IGdPUEQuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSlcbiAgICAsIGV4aXN0aW5nRGVzY3JpcHRvciwgcHJvdG87XG4gIGlmKCFvd25EZXNjKXtcbiAgICBpZihpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKXtcbiAgICAgIHJldHVybiBzZXQocHJvdG8sIHByb3BlcnR5S2V5LCBWLCByZWNlaXZlcik7XG4gICAgfVxuICAgIG93bkRlc2MgPSBjcmVhdGVEZXNjKDApO1xuICB9XG4gIGlmKGhhcyhvd25EZXNjLCAndmFsdWUnKSl7XG4gICAgaWYob3duRGVzYy53cml0YWJsZSA9PT0gZmFsc2UgfHwgIWlzT2JqZWN0KHJlY2VpdmVyKSlyZXR1cm4gZmFsc2U7XG4gICAgZXhpc3RpbmdEZXNjcmlwdG9yID0gZ09QRC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSkgfHwgY3JlYXRlRGVzYygwKTtcbiAgICBleGlzdGluZ0Rlc2NyaXB0b3IudmFsdWUgPSBWO1xuICAgIGRQLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5LCBleGlzdGluZ0Rlc2NyaXB0b3IpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBvd25EZXNjLnNldCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiAob3duRGVzYy5zZXQuY2FsbChyZWNlaXZlciwgViksIHRydWUpO1xufVxuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7c2V0OiBzZXR9KTsiLCJ2YXIgZ2xvYmFsICAgICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpXG4gICwgZFAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mXG4gICwgZ09QTiAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmZcbiAgLCBpc1JlZ0V4cCAgICAgICAgICA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpXG4gICwgJGZsYWdzICAgICAgICAgICAgPSByZXF1aXJlKCcuL19mbGFncycpXG4gICwgJFJlZ0V4cCAgICAgICAgICAgPSBnbG9iYWwuUmVnRXhwXG4gICwgQmFzZSAgICAgICAgICAgICAgPSAkUmVnRXhwXG4gICwgcHJvdG8gICAgICAgICAgICAgPSAkUmVnRXhwLnByb3RvdHlwZVxuICAsIHJlMSAgICAgICAgICAgICAgID0gL2EvZ1xuICAsIHJlMiAgICAgICAgICAgICAgID0gL2EvZ1xuICAvLyBcIm5ld1wiIGNyZWF0ZXMgYSBuZXcgb2JqZWN0LCBvbGQgd2Via2l0IGJ1Z2d5IGhlcmVcbiAgLCBDT1JSRUNUX05FVyAgICAgICA9IG5ldyAkUmVnRXhwKHJlMSkgIT09IHJlMTtcblxuaWYocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAoIUNPUlJFQ1RfTkVXIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgcmUyW3JlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpXSA9IGZhbHNlO1xuICAvLyBSZWdFeHAgY29uc3RydWN0b3IgY2FuIGFsdGVyIGZsYWdzIGFuZCBJc1JlZ0V4cCB3b3JrcyBjb3JyZWN0IHdpdGggQEBtYXRjaFxuICByZXR1cm4gJFJlZ0V4cChyZTEpICE9IHJlMSB8fCAkUmVnRXhwKHJlMikgPT0gcmUyIHx8ICRSZWdFeHAocmUxLCAnaScpICE9ICcvYS9pJztcbn0pKSl7XG4gICRSZWdFeHAgPSBmdW5jdGlvbiBSZWdFeHAocCwgZil7XG4gICAgdmFyIHRpUkUgPSB0aGlzIGluc3RhbmNlb2YgJFJlZ0V4cFxuICAgICAgLCBwaVJFID0gaXNSZWdFeHAocClcbiAgICAgICwgZmlVICA9IGYgPT09IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gIXRpUkUgJiYgcGlSRSAmJiBwLmNvbnN0cnVjdG9yID09PSAkUmVnRXhwICYmIGZpVSA/IHBcbiAgICAgIDogaW5oZXJpdElmUmVxdWlyZWQoQ09SUkVDVF9ORVdcbiAgICAgICAgPyBuZXcgQmFzZShwaVJFICYmICFmaVUgPyBwLnNvdXJjZSA6IHAsIGYpXG4gICAgICAgIDogQmFzZSgocGlSRSA9IHAgaW5zdGFuY2VvZiAkUmVnRXhwKSA/IHAuc291cmNlIDogcCwgcGlSRSAmJiBmaVUgPyAkZmxhZ3MuY2FsbChwKSA6IGYpXG4gICAgICAsIHRpUkUgPyB0aGlzIDogcHJvdG8sICRSZWdFeHApO1xuICB9O1xuICB2YXIgcHJveHkgPSBmdW5jdGlvbihrZXkpe1xuICAgIGtleSBpbiAkUmVnRXhwIHx8IGRQKCRSZWdFeHAsIGtleSwge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbigpeyByZXR1cm4gQmFzZVtrZXldOyB9LFxuICAgICAgc2V0OiBmdW5jdGlvbihpdCl7IEJhc2Vba2V5XSA9IGl0OyB9XG4gICAgfSk7XG4gIH07XG4gIGZvcih2YXIga2V5cyA9IGdPUE4oQmFzZSksIGkgPSAwOyBrZXlzLmxlbmd0aCA+IGk7IClwcm94eShrZXlzW2krK10pO1xuICBwcm90by5jb25zdHJ1Y3RvciA9ICRSZWdFeHA7XG4gICRSZWdFeHAucHJvdG90eXBlID0gcHJvdG87XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoZ2xvYmFsLCAnUmVnRXhwJywgJFJlZ0V4cCk7XG59XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ1JlZ0V4cCcpOyIsIi8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzKClcbmlmKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgLy4vZy5mbGFncyAhPSAnZycpcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZihSZWdFeHAucHJvdG90eXBlLCAnZmxhZ3MnLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiByZXF1aXJlKCcuL19mbGFncycpXG59KTsiLCIvLyBAQG1hdGNoIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ21hdGNoJywgMSwgZnVuY3Rpb24oZGVmaW5lZCwgTUFUQ0gsICRtYXRjaCl7XG4gIC8vIDIxLjEuMy4xMSBTdHJpbmcucHJvdG90eXBlLm1hdGNoKHJlZ2V4cClcbiAgcmV0dXJuIFtmdW5jdGlvbiBtYXRjaChyZWdleHApe1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgTyAgPSBkZWZpbmVkKHRoaXMpXG4gICAgICAsIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtNQVRDSF07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbTUFUQ0hdKFN0cmluZyhPKSk7XG4gIH0sICRtYXRjaF07XG59KTsiLCIvLyBAQHJlcGxhY2UgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgncmVwbGFjZScsIDIsIGZ1bmN0aW9uKGRlZmluZWQsIFJFUExBQ0UsICRyZXBsYWNlKXtcbiAgLy8gMjEuMS4zLjE0IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKVxuICByZXR1cm4gW2Z1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSl7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBPICA9IGRlZmluZWQodGhpcylcbiAgICAgICwgZm4gPSBzZWFyY2hWYWx1ZSA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZWFyY2hWYWx1ZVtSRVBMQUNFXTtcbiAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZFxuICAgICAgPyBmbi5jYWxsKHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpXG4gICAgICA6ICRyZXBsYWNlLmNhbGwoU3RyaW5nKE8pLCBzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKTtcbiAgfSwgJHJlcGxhY2VdO1xufSk7IiwiLy8gQEBzZWFyY2ggbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnc2VhcmNoJywgMSwgZnVuY3Rpb24oZGVmaW5lZCwgU0VBUkNILCAkc2VhcmNoKXtcbiAgLy8gMjEuMS4zLjE1IFN0cmluZy5wcm90b3R5cGUuc2VhcmNoKHJlZ2V4cClcbiAgcmV0dXJuIFtmdW5jdGlvbiBzZWFyY2gocmVnZXhwKXtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIE8gID0gZGVmaW5lZCh0aGlzKVxuICAgICAgLCBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbU0VBUkNIXTtcbiAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtTRUFSQ0hdKFN0cmluZyhPKSk7XG4gIH0sICRzZWFyY2hdO1xufSk7IiwiLy8gQEBzcGxpdCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdzcGxpdCcsIDIsIGZ1bmN0aW9uKGRlZmluZWQsIFNQTElULCAkc3BsaXQpe1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBpc1JlZ0V4cCAgID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJylcbiAgICAsIF9zcGxpdCAgICAgPSAkc3BsaXRcbiAgICAsICRwdXNoICAgICAgPSBbXS5wdXNoXG4gICAgLCAkU1BMSVQgICAgID0gJ3NwbGl0J1xuICAgICwgTEVOR1RIICAgICA9ICdsZW5ndGgnXG4gICAgLCBMQVNUX0lOREVYID0gJ2xhc3RJbmRleCc7XG4gIGlmKFxuICAgICdhYmJjJ1skU1BMSVRdKC8oYikqLylbMV0gPT0gJ2MnIHx8XG4gICAgJ3Rlc3QnWyRTUExJVF0oLyg/OikvLCAtMSlbTEVOR1RIXSAhPSA0IHx8XG4gICAgJ2FiJ1skU1BMSVRdKC8oPzphYikqLylbTEVOR1RIXSAhPSAyIHx8XG4gICAgJy4nWyRTUExJVF0oLyguPykoLj8pLylbTEVOR1RIXSAhPSA0IHx8XG4gICAgJy4nWyRTUExJVF0oLygpKCkvKVtMRU5HVEhdID4gMSB8fFxuICAgICcnWyRTUExJVF0oLy4/LylbTEVOR1RIXVxuICApe1xuICAgIHZhciBOUENHID0gLygpPz8vLmV4ZWMoJycpWzFdID09PSB1bmRlZmluZWQ7IC8vIG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwXG4gICAgLy8gYmFzZWQgb24gZXM1LXNoaW0gaW1wbGVtZW50YXRpb24sIG5lZWQgdG8gcmV3b3JrIGl0XG4gICAgJHNwbGl0ID0gZnVuY3Rpb24oc2VwYXJhdG9yLCBsaW1pdCl7XG4gICAgICB2YXIgc3RyaW5nID0gU3RyaW5nKHRoaXMpO1xuICAgICAgaWYoc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDApcmV0dXJuIFtdO1xuICAgICAgLy8gSWYgYHNlcGFyYXRvcmAgaXMgbm90IGEgcmVnZXgsIHVzZSBuYXRpdmUgc3BsaXRcbiAgICAgIGlmKCFpc1JlZ0V4cChzZXBhcmF0b3IpKXJldHVybiBfc3BsaXQuY2FsbChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgICAgdmFyIG91dHB1dCA9IFtdO1xuICAgICAgdmFyIGZsYWdzID0gKHNlcGFyYXRvci5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnN0aWNreSA/ICd5JyA6ICcnKTtcbiAgICAgIHZhciBsYXN0TGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciBzcGxpdExpbWl0ID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IDQyOTQ5NjcyOTUgOiBsaW1pdCA+Pj4gMDtcbiAgICAgIC8vIE1ha2UgYGdsb2JhbGAgYW5kIGF2b2lkIGBsYXN0SW5kZXhgIGlzc3VlcyBieSB3b3JraW5nIHdpdGggYSBjb3B5XG4gICAgICB2YXIgc2VwYXJhdG9yQ29weSA9IG5ldyBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgZmxhZ3MgKyAnZycpO1xuICAgICAgdmFyIHNlcGFyYXRvcjIsIG1hdGNoLCBsYXN0SW5kZXgsIGxhc3RMZW5ndGgsIGk7XG4gICAgICAvLyBEb2Vzbid0IG5lZWQgZmxhZ3MgZ3ksIGJ1dCB0aGV5IGRvbid0IGh1cnRcbiAgICAgIGlmKCFOUENHKXNlcGFyYXRvcjIgPSBuZXcgUmVnRXhwKCdeJyArIHNlcGFyYXRvckNvcHkuc291cmNlICsgJyQoPyFcXFxccyknLCBmbGFncyk7XG4gICAgICB3aGlsZShtYXRjaCA9IHNlcGFyYXRvckNvcHkuZXhlYyhzdHJpbmcpKXtcbiAgICAgICAgLy8gYHNlcGFyYXRvckNvcHkubGFzdEluZGV4YCBpcyBub3QgcmVsaWFibGUgY3Jvc3MtYnJvd3NlclxuICAgICAgICBsYXN0SW5kZXggPSBtYXRjaC5pbmRleCArIG1hdGNoWzBdW0xFTkdUSF07XG4gICAgICAgIGlmKGxhc3RJbmRleCA+IGxhc3RMYXN0SW5kZXgpe1xuICAgICAgICAgIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4LCBtYXRjaC5pbmRleCkpO1xuICAgICAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgIGZvciBOUENHXG4gICAgICAgICAgaWYoIU5QQ0cgJiYgbWF0Y2hbTEVOR1RIXSA+IDEpbWF0Y2hbMF0ucmVwbGFjZShzZXBhcmF0b3IyLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgZm9yKGkgPSAxOyBpIDwgYXJndW1lbnRzW0xFTkdUSF0gLSAyOyBpKyspaWYoYXJndW1lbnRzW2ldID09PSB1bmRlZmluZWQpbWF0Y2hbaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYobWF0Y2hbTEVOR1RIXSA+IDEgJiYgbWF0Y2guaW5kZXggPCBzdHJpbmdbTEVOR1RIXSkkcHVzaC5hcHBseShvdXRwdXQsIG1hdGNoLnNsaWNlKDEpKTtcbiAgICAgICAgICBsYXN0TGVuZ3RoID0gbWF0Y2hbMF1bTEVOR1RIXTtcbiAgICAgICAgICBsYXN0TGFzdEluZGV4ID0gbGFzdEluZGV4O1xuICAgICAgICAgIGlmKG91dHB1dFtMRU5HVEhdID49IHNwbGl0TGltaXQpYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYoc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXSA9PT0gbWF0Y2guaW5kZXgpc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXSsrOyAvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wXG4gICAgICB9XG4gICAgICBpZihsYXN0TGFzdEluZGV4ID09PSBzdHJpbmdbTEVOR1RIXSl7XG4gICAgICAgIGlmKGxhc3RMZW5ndGggfHwgIXNlcGFyYXRvckNvcHkudGVzdCgnJykpb3V0cHV0LnB1c2goJycpO1xuICAgICAgfSBlbHNlIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4KSk7XG4gICAgICByZXR1cm4gb3V0cHV0W0xFTkdUSF0gPiBzcGxpdExpbWl0ID8gb3V0cHV0LnNsaWNlKDAsIHNwbGl0TGltaXQpIDogb3V0cHV0O1xuICAgIH07XG4gIC8vIENoYWtyYSwgVjhcbiAgfSBlbHNlIGlmKCcwJ1skU1BMSVRdKHVuZGVmaW5lZCwgMClbTEVOR1RIXSl7XG4gICAgJHNwbGl0ID0gZnVuY3Rpb24oc2VwYXJhdG9yLCBsaW1pdCl7XG4gICAgICByZXR1cm4gc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDAgPyBbXSA6IF9zcGxpdC5jYWxsKHRoaXMsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH07XG4gIH1cbiAgLy8gMjEuMS4zLjE3IFN0cmluZy5wcm90b3R5cGUuc3BsaXQoc2VwYXJhdG9yLCBsaW1pdClcbiAgcmV0dXJuIFtmdW5jdGlvbiBzcGxpdChzZXBhcmF0b3IsIGxpbWl0KXtcbiAgICB2YXIgTyAgPSBkZWZpbmVkKHRoaXMpXG4gICAgICAsIGZuID0gc2VwYXJhdG9yID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlcGFyYXRvcltTUExJVF07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHNlcGFyYXRvciwgTywgbGltaXQpIDogJHNwbGl0LmNhbGwoU3RyaW5nKE8pLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgfSwgJHNwbGl0XTtcbn0pOyIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5mbGFncycpO1xudmFyIGFuT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCAkZmxhZ3MgICAgICA9IHJlcXVpcmUoJy4vX2ZsYWdzJylcbiAgLCBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJylcbiAgLCBUT19TVFJJTkcgICA9ICd0b1N0cmluZydcbiAgLCAkdG9TdHJpbmcgICA9IC8uL1tUT19TVFJJTkddO1xuXG52YXIgZGVmaW5lID0gZnVuY3Rpb24oZm4pe1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKFJlZ0V4cC5wcm90b3R5cGUsIFRPX1NUUklORywgZm4sIHRydWUpO1xufTtcblxuLy8gMjEuMi41LjE0IFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcoKVxuaWYocmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpeyByZXR1cm4gJHRvU3RyaW5nLmNhbGwoe3NvdXJjZTogJ2EnLCBmbGFnczogJ2InfSkgIT0gJy9hL2InOyB9KSl7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpe1xuICAgIHZhciBSID0gYW5PYmplY3QodGhpcyk7XG4gICAgcmV0dXJuICcvJy5jb25jYXQoUi5zb3VyY2UsICcvJyxcbiAgICAgICdmbGFncycgaW4gUiA/IFIuZmxhZ3MgOiAhREVTQ1JJUFRPUlMgJiYgUiBpbnN0YW5jZW9mIFJlZ0V4cCA/ICRmbGFncy5jYWxsKFIpIDogdW5kZWZpbmVkKTtcbiAgfSk7XG4vLyBGRjQ0LSBSZWdFeHAjdG9TdHJpbmcgaGFzIGEgd3JvbmcgbmFtZVxufSBlbHNlIGlmKCR0b1N0cmluZy5uYW1lICE9IFRPX1NUUklORyl7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpe1xuICAgIHJldHVybiAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbiAgfSk7XG59IiwiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XG5cbi8vIDIzLjIgU2V0IE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKCdTZXQnLCBmdW5jdGlvbihnZXQpe1xuICByZXR1cm4gZnVuY3Rpb24gU2V0KCl7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4yLjMuMSBTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlcbiAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpe1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHRoaXMsIHZhbHVlID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWUsIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nKTsiLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4yIFN0cmluZy5wcm90b3R5cGUuYW5jaG9yKG5hbWUpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdhbmNob3InLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGFuY2hvcihuYW1lKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICduYW1lJywgbmFtZSk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjMgU3RyaW5nLnByb3RvdHlwZS5iaWcoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYmlnJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBiaWcoKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmlnJywgJycsICcnKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNCBTdHJpbmcucHJvdG90eXBlLmJsaW5rKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JsaW5rJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBibGluaygpe1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdibGluaycsICcnLCAnJyk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjUgU3RyaW5nLnByb3RvdHlwZS5ib2xkKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JvbGQnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJvbGQoKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYicsICcnLCAnJyk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkYXQgICAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykoZmFsc2UpO1xuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMy4zIFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQocG9zKVxuICBjb2RlUG9pbnRBdDogZnVuY3Rpb24gY29kZVBvaW50QXQocG9zKXtcbiAgICByZXR1cm4gJGF0KHRoaXMsIHBvcyk7XG4gIH1cbn0pOyIsIi8vIDIxLjEuMy42IFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGgoc2VhcmNoU3RyaW5nIFssIGVuZFBvc2l0aW9uXSlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHRvTGVuZ3RoICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgY29udGV4dCAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKVxuICAsIEVORFNfV0lUSCA9ICdlbmRzV2l0aCdcbiAgLCAkZW5kc1dpdGggPSAnJ1tFTkRTX1dJVEhdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKEVORFNfV0lUSCksICdTdHJpbmcnLCB7XG4gIGVuZHNXaXRoOiBmdW5jdGlvbiBlbmRzV2l0aChzZWFyY2hTdHJpbmcgLyosIGVuZFBvc2l0aW9uID0gQGxlbmd0aCAqLyl7XG4gICAgdmFyIHRoYXQgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgRU5EU19XSVRIKVxuICAgICAgLCBlbmRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkXG4gICAgICAsIGxlbiAgICA9IHRvTGVuZ3RoKHRoYXQubGVuZ3RoKVxuICAgICAgLCBlbmQgICAgPSBlbmRQb3NpdGlvbiA9PT0gdW5kZWZpbmVkID8gbGVuIDogTWF0aC5taW4odG9MZW5ndGgoZW5kUG9zaXRpb24pLCBsZW4pXG4gICAgICAsIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiAkZW5kc1dpdGhcbiAgICAgID8gJGVuZHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBlbmQpXG4gICAgICA6IHRoYXQuc2xpY2UoZW5kIC0gc2VhcmNoLmxlbmd0aCwgZW5kKSA9PT0gc2VhcmNoO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy42IFN0cmluZy5wcm90b3R5cGUuZml4ZWQoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZml4ZWQnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZpeGVkKCl7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3R0JywgJycsICcnKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNyBTdHJpbmcucHJvdG90eXBlLmZvbnRjb2xvcihjb2xvcilcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZvbnRjb2xvcicsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpe1xuICByZXR1cm4gZnVuY3Rpb24gZm9udGNvbG9yKGNvbG9yKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnZm9udCcsICdjb2xvcicsIGNvbG9yKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuOCBTdHJpbmcucHJvdG90eXBlLmZvbnRzaXplKHNpemUpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmb250c2l6ZScsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpe1xuICByZXR1cm4gZnVuY3Rpb24gZm9udHNpemUoc2l6ZSl7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnc2l6ZScsIHNpemUpO1xuICB9XG59KTsiLCJ2YXIgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHRvSW5kZXggICAgICAgID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKVxuICAsIGZyb21DaGFyQ29kZSAgID0gU3RyaW5nLmZyb21DaGFyQ29kZVxuICAsICRmcm9tQ29kZVBvaW50ID0gU3RyaW5nLmZyb21Db2RlUG9pbnQ7XG5cbi8vIGxlbmd0aCBzaG91bGQgYmUgMSwgb2xkIEZGIHByb2JsZW1cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCEhJGZyb21Db2RlUG9pbnQgJiYgJGZyb21Db2RlUG9pbnQubGVuZ3RoICE9IDEpLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjIuMiBTdHJpbmcuZnJvbUNvZGVQb2ludCguLi5jb2RlUG9pbnRzKVxuICBmcm9tQ29kZVBvaW50OiBmdW5jdGlvbiBmcm9tQ29kZVBvaW50KHgpeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHJlcyAgPSBbXVxuICAgICAgLCBhTGVuID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgLCBpICAgID0gMFxuICAgICAgLCBjb2RlO1xuICAgIHdoaWxlKGFMZW4gPiBpKXtcbiAgICAgIGNvZGUgPSArYXJndW1lbnRzW2krK107XG4gICAgICBpZih0b0luZGV4KGNvZGUsIDB4MTBmZmZmKSAhPT0gY29kZSl0aHJvdyBSYW5nZUVycm9yKGNvZGUgKyAnIGlzIG5vdCBhIHZhbGlkIGNvZGUgcG9pbnQnKTtcbiAgICAgIHJlcy5wdXNoKGNvZGUgPCAweDEwMDAwXG4gICAgICAgID8gZnJvbUNoYXJDb2RlKGNvZGUpXG4gICAgICAgIDogZnJvbUNoYXJDb2RlKCgoY29kZSAtPSAweDEwMDAwKSA+PiAxMCkgKyAweGQ4MDAsIGNvZGUgJSAweDQwMCArIDB4ZGMwMClcbiAgICAgICk7XG4gICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xuICB9XG59KTsiLCIvLyAyMS4xLjMuNyBTdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzKHNlYXJjaFN0cmluZywgcG9zaXRpb24gPSAwKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBjb250ZXh0ICA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0JylcbiAgLCBJTkNMVURFUyA9ICdpbmNsdWRlcyc7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoSU5DTFVERVMpLCAnU3RyaW5nJywge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoU3RyaW5nIC8qLCBwb3NpdGlvbiA9IDAgKi8pe1xuICAgIHJldHVybiAhIX5jb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgSU5DTFVERVMpXG4gICAgICAuaW5kZXhPZihzZWFyY2hTdHJpbmcsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuOSBTdHJpbmcucHJvdG90eXBlLml0YWxpY3MoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnaXRhbGljcycsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpe1xuICByZXR1cm4gZnVuY3Rpb24gaXRhbGljcygpe1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdpJywgJycsICcnKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRhdCAgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuLy8gMjEuMS4zLjI3IFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbihpdGVyYXRlZCl7XG4gIHRoaXMuX3QgPSBTdHJpbmcoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbi8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uKCl7XG4gIHZhciBPICAgICA9IHRoaXMuX3RcbiAgICAsIGluZGV4ID0gdGhpcy5faVxuICAgICwgcG9pbnQ7XG4gIGlmKGluZGV4ID49IE8ubGVuZ3RoKXJldHVybiB7dmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZX07XG4gIHBvaW50ID0gJGF0KE8sIGluZGV4KTtcbiAgdGhpcy5faSArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7dmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZX07XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMCBTdHJpbmcucHJvdG90eXBlLmxpbmsodXJsKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnbGluaycsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpe1xuICByZXR1cm4gZnVuY3Rpb24gbGluayh1cmwpe1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ2hyZWYnLCB1cmwpO1xuICB9XG59KTsiLCJ2YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JylcbiAgLCB0b0xlbmd0aCAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMi40IFN0cmluZy5yYXcoY2FsbFNpdGUsIC4uLnN1YnN0aXR1dGlvbnMpXG4gIHJhdzogZnVuY3Rpb24gcmF3KGNhbGxTaXRlKXtcbiAgICB2YXIgdHBsICA9IHRvSU9iamVjdChjYWxsU2l0ZS5yYXcpXG4gICAgICAsIGxlbiAgPSB0b0xlbmd0aCh0cGwubGVuZ3RoKVxuICAgICAgLCBhTGVuID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgLCByZXMgID0gW11cbiAgICAgICwgaSAgICA9IDA7XG4gICAgd2hpbGUobGVuID4gaSl7XG4gICAgICByZXMucHVzaChTdHJpbmcodHBsW2krK10pKTtcbiAgICAgIGlmKGkgPCBhTGVuKXJlcy5wdXNoKFN0cmluZyhhcmd1bWVudHNbaV0pKTtcbiAgICB9IHJldHVybiByZXMuam9pbignJyk7XG4gIH1cbn0pOyIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjMuMTMgU3RyaW5nLnByb3RvdHlwZS5yZXBlYXQoY291bnQpXG4gIHJlcGVhdDogcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpXG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMSBTdHJpbmcucHJvdG90eXBlLnNtYWxsKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3NtYWxsJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBzbWFsbCgpe1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzbWFsbCcsICcnLCAnJyk7XG4gIH1cbn0pOyIsIi8vIDIxLjEuMy4xOCBTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIFssIHBvc2l0aW9uIF0pXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHRvTGVuZ3RoICAgID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgLCBjb250ZXh0ICAgICA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0JylcbiAgLCBTVEFSVFNfV0lUSCA9ICdzdGFydHNXaXRoJ1xuICAsICRzdGFydHNXaXRoID0gJydbU1RBUlRTX1dJVEhdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKFNUQVJUU19XSVRIKSwgJ1N0cmluZycsIHtcbiAgc3RhcnRzV2l0aDogZnVuY3Rpb24gc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgLyosIHBvc2l0aW9uID0gMCAqLyl7XG4gICAgdmFyIHRoYXQgICA9IGNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBTVEFSVFNfV0lUSClcbiAgICAgICwgaW5kZXggID0gdG9MZW5ndGgoTWF0aC5taW4oYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRoYXQubGVuZ3RoKSlcbiAgICAgICwgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRzdGFydHNXaXRoXG4gICAgICA/ICRzdGFydHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBpbmRleClcbiAgICAgIDogdGhhdC5zbGljZShpbmRleCwgaW5kZXggKyBzZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMiBTdHJpbmcucHJvdG90eXBlLnN0cmlrZSgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdHJpa2UnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN0cmlrZSgpe1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdHJpa2UnLCAnJywgJycpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMyBTdHJpbmcucHJvdG90eXBlLnN1YigpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdWInLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN1Yigpe1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdWInLCAnJywgJycpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xNCBTdHJpbmcucHJvdG90eXBlLnN1cCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdXAnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN1cCgpe1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdXAnLCAnJywgJycpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyAyMS4xLjMuMjUgU3RyaW5nLnByb3RvdHlwZS50cmltKClcbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW0nLCBmdW5jdGlvbigkdHJpbSl7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltKCl7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDMpO1xuICB9O1xufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gRUNNQVNjcmlwdCA2IHN5bWJvbHMgc2hpbVxudmFyIGdsb2JhbCAgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBoYXMgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgREVTQ1JJUFRPUlMgICAgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpXG4gICwgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHJlZGVmaW5lICAgICAgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKVxuICAsIE1FVEEgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YScpLktFWVxuICAsICRmYWlscyAgICAgICAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKVxuICAsIHNoYXJlZCAgICAgICAgID0gcmVxdWlyZSgnLi9fc2hhcmVkJylcbiAgLCBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJylcbiAgLCB1aWQgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3VpZCcpXG4gICwgd2tzICAgICAgICAgICAgPSByZXF1aXJlKCcuL193a3MnKVxuICAsIHdrc0V4dCAgICAgICAgID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpXG4gICwgd2tzRGVmaW5lICAgICAgPSByZXF1aXJlKCcuL193a3MtZGVmaW5lJylcbiAgLCBrZXlPZiAgICAgICAgICA9IHJlcXVpcmUoJy4vX2tleW9mJylcbiAgLCBlbnVtS2V5cyAgICAgICA9IHJlcXVpcmUoJy4vX2VudW0ta2V5cycpXG4gICwgaXNBcnJheSAgICAgICAgPSByZXF1aXJlKCcuL19pcy1hcnJheScpXG4gICwgYW5PYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIHRvSU9iamVjdCAgICAgID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgdG9QcmltaXRpdmUgICAgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKVxuICAsIGNyZWF0ZURlc2MgICAgID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpXG4gICwgX2NyZWF0ZSAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJylcbiAgLCBnT1BORXh0ICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpXG4gICwgJEdPUEQgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpXG4gICwgJERQICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKVxuICAsICRrZXlzICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKVxuICAsIGdPUEQgICAgICAgICAgID0gJEdPUEQuZlxuICAsIGRQICAgICAgICAgICAgID0gJERQLmZcbiAgLCBnT1BOICAgICAgICAgICA9IGdPUE5FeHQuZlxuICAsICRTeW1ib2wgICAgICAgID0gZ2xvYmFsLlN5bWJvbFxuICAsICRKU09OICAgICAgICAgID0gZ2xvYmFsLkpTT05cbiAgLCBfc3RyaW5naWZ5ICAgICA9ICRKU09OICYmICRKU09OLnN0cmluZ2lmeVxuICAsIFBST1RPVFlQRSAgICAgID0gJ3Byb3RvdHlwZSdcbiAgLCBISURERU4gICAgICAgICA9IHdrcygnX2hpZGRlbicpXG4gICwgVE9fUFJJTUlUSVZFICAgPSB3a3MoJ3RvUHJpbWl0aXZlJylcbiAgLCBpc0VudW0gICAgICAgICA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlXG4gICwgU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC1yZWdpc3RyeScpXG4gICwgQWxsU3ltYm9scyAgICAgPSBzaGFyZWQoJ3N5bWJvbHMnKVxuICAsIE9QU3ltYm9scyAgICAgID0gc2hhcmVkKCdvcC1zeW1ib2xzJylcbiAgLCBPYmplY3RQcm90byAgICA9IE9iamVjdFtQUk9UT1RZUEVdXG4gICwgVVNFX05BVElWRSAgICAgPSB0eXBlb2YgJFN5bWJvbCA9PSAnZnVuY3Rpb24nXG4gICwgUU9iamVjdCAgICAgICAgPSBnbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIHNldHRlciA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2MgPSBERVNDUklQVE9SUyAmJiAkZmFpbHMoZnVuY3Rpb24oKXtcbiAgcmV0dXJuIF9jcmVhdGUoZFAoe30sICdhJywge1xuICAgIGdldDogZnVuY3Rpb24oKXsgcmV0dXJuIGRQKHRoaXMsICdhJywge3ZhbHVlOiA3fSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbihpdCwga2V5LCBEKXtcbiAgdmFyIHByb3RvRGVzYyA9IGdPUEQoT2JqZWN0UHJvdG8sIGtleSk7XG4gIGlmKHByb3RvRGVzYylkZWxldGUgT2JqZWN0UHJvdG9ba2V5XTtcbiAgZFAoaXQsIGtleSwgRCk7XG4gIGlmKHByb3RvRGVzYyAmJiBpdCAhPT0gT2JqZWN0UHJvdG8pZFAoT2JqZWN0UHJvdG8sIGtleSwgcHJvdG9EZXNjKTtcbn0gOiBkUDtcblxudmFyIHdyYXAgPSBmdW5jdGlvbih0YWcpe1xuICB2YXIgc3ltID0gQWxsU3ltYm9sc1t0YWddID0gX2NyZWF0ZSgkU3ltYm9sW1BST1RPVFlQRV0pO1xuICBzeW0uX2sgPSB0YWc7XG4gIHJldHVybiBzeW07XG59O1xuXG52YXIgaXNTeW1ib2wgPSBVU0VfTkFUSVZFICYmIHR5cGVvZiAkU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnID8gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGl0IGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBEKXtcbiAgaWYoaXQgPT09IE9iamVjdFByb3RvKSRkZWZpbmVQcm9wZXJ0eShPUFN5bWJvbHMsIGtleSwgRCk7XG4gIGFuT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgYW5PYmplY3QoRCk7XG4gIGlmKGhhcyhBbGxTeW1ib2xzLCBrZXkpKXtcbiAgICBpZighRC5lbnVtZXJhYmxlKXtcbiAgICAgIGlmKCFoYXMoaXQsIEhJRERFTikpZFAoaXQsIEhJRERFTiwgY3JlYXRlRGVzYygxLCB7fSkpO1xuICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSlpdFtISURERU5dW2tleV0gPSBmYWxzZTtcbiAgICAgIEQgPSBfY3JlYXRlKEQsIHtlbnVtZXJhYmxlOiBjcmVhdGVEZXNjKDAsIGZhbHNlKX0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7XG4gIH0gcmV0dXJuIGRQKGl0LCBrZXksIEQpO1xufTtcbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoaXQsIFApe1xuICBhbk9iamVjdChpdCk7XG4gIHZhciBrZXlzID0gZW51bUtleXMoUCA9IHRvSU9iamVjdChQKSlcbiAgICAsIGkgICAgPSAwXG4gICAgLCBsID0ga2V5cy5sZW5ndGhcbiAgICAsIGtleTtcbiAgd2hpbGUobCA+IGkpJGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpdCwgUCl7XG4gIHJldHVybiBQID09PSB1bmRlZmluZWQgPyBfY3JlYXRlKGl0KSA6ICRkZWZpbmVQcm9wZXJ0aWVzKF9jcmVhdGUoaXQpLCBQKTtcbn07XG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoa2V5KXtcbiAgdmFyIEUgPSBpc0VudW0uY2FsbCh0aGlzLCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKTtcbiAgaWYodGhpcyA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gRSB8fCAhaGFzKHRoaXMsIGtleSkgfHwgIWhhcyhBbGxTeW1ib2xzLCBrZXkpIHx8IGhhcyh0aGlzLCBISURERU4pICYmIHRoaXNbSElEREVOXVtrZXldID8gRSA6IHRydWU7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSl7XG4gIGl0ICA9IHRvSU9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGlmKGl0ID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSlyZXR1cm47XG4gIHZhciBEID0gZ09QRChpdCwga2V5KTtcbiAgaWYoRCAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pKUQuZW51bWVyYWJsZSA9IHRydWU7XG4gIHJldHVybiBEO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpe1xuICB2YXIgbmFtZXMgID0gZ09QTih0b0lPYmplY3QoaXQpKVxuICAgICwgcmVzdWx0ID0gW11cbiAgICAsIGkgICAgICA9IDBcbiAgICAsIGtleTtcbiAgd2hpbGUobmFtZXMubGVuZ3RoID4gaSl7XG4gICAgaWYoIWhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiBrZXkgIT0gSElEREVOICYmIGtleSAhPSBNRVRBKXJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCl7XG4gIHZhciBJU19PUCAgPSBpdCA9PT0gT2JqZWN0UHJvdG9cbiAgICAsIG5hbWVzICA9IGdPUE4oSVNfT1AgPyBPUFN5bWJvbHMgOiB0b0lPYmplY3QoaXQpKVxuICAgICwgcmVzdWx0ID0gW11cbiAgICAsIGkgICAgICA9IDBcbiAgICAsIGtleTtcbiAgd2hpbGUobmFtZXMubGVuZ3RoID4gaSl7XG4gICAgaWYoaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIChJU19PUCA/IGhhcyhPYmplY3RQcm90bywga2V5KSA6IHRydWUpKXJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIDE5LjQuMS4xIFN5bWJvbChbZGVzY3JpcHRpb25dKVxuaWYoIVVTRV9OQVRJVkUpe1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCl7XG4gICAgaWYodGhpcyBpbnN0YW5jZW9mICRTeW1ib2wpdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhJyk7XG4gICAgdmFyIHRhZyA9IHVpZChhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gICAgdmFyICRzZXQgPSBmdW5jdGlvbih2YWx1ZSl7XG4gICAgICBpZih0aGlzID09PSBPYmplY3RQcm90bykkc2V0LmNhbGwoT1BTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZihoYXModGhpcywgSElEREVOKSAmJiBoYXModGhpc1tISURERU5dLCB0YWcpKXRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjKHRoaXMsIHRhZywgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYoREVTQ1JJUFRPUlMgJiYgc2V0dGVyKXNldFN5bWJvbERlc2MoT2JqZWN0UHJvdG8sIHRhZywge2NvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiAkc2V0fSk7XG4gICAgcmV0dXJuIHdyYXAodGFnKTtcbiAgfTtcbiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpe1xuICAgIHJldHVybiB0aGlzLl9rO1xuICB9KTtcblxuICAkR09QRC5mID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgJERQLmYgICA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mID0gZ09QTkV4dC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mICA9ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKS5mID0gJGdldE93blByb3BlcnR5U3ltYm9scztcblxuICBpZihERVNDUklQVE9SUyAmJiAhcmVxdWlyZSgnLi9fbGlicmFyeScpKXtcbiAgICByZWRlZmluZShPYmplY3RQcm90bywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB0cnVlKTtcbiAgfVxuXG4gIHdrc0V4dC5mID0gZnVuY3Rpb24obmFtZSl7XG4gICAgcmV0dXJuIHdyYXAod2tzKG5hbWUpKTtcbiAgfVxufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7U3ltYm9sOiAkU3ltYm9sfSk7XG5cbmZvcih2YXIgc3ltYm9scyA9IChcbiAgLy8gMTkuNC4yLjIsIDE5LjQuMi4zLCAxOS40LjIuNCwgMTkuNC4yLjYsIDE5LjQuMi44LCAxOS40LjIuOSwgMTkuNC4yLjEwLCAxOS40LjIuMTEsIDE5LjQuMi4xMiwgMTkuNC4yLjEzLCAxOS40LjIuMTRcbiAgJ2hhc0luc3RhbmNlLGlzQ29uY2F0U3ByZWFkYWJsZSxpdGVyYXRvcixtYXRjaCxyZXBsYWNlLHNlYXJjaCxzcGVjaWVzLHNwbGl0LHRvUHJpbWl0aXZlLHRvU3RyaW5nVGFnLHVuc2NvcGFibGVzJ1xuKS5zcGxpdCgnLCcpLCBpID0gMDsgc3ltYm9scy5sZW5ndGggPiBpOyApd2tzKHN5bWJvbHNbaSsrXSk7XG5cbmZvcih2YXIgc3ltYm9scyA9ICRrZXlzKHdrcy5zdG9yZSksIGkgPSAwOyBzeW1ib2xzLmxlbmd0aCA+IGk7ICl3a3NEZWZpbmUoc3ltYm9sc1tpKytdKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ1N5bWJvbCcsIHtcbiAgLy8gMTkuNC4yLjEgU3ltYm9sLmZvcihrZXkpXG4gICdmb3InOiBmdW5jdGlvbihrZXkpe1xuICAgIHJldHVybiBoYXMoU3ltYm9sUmVnaXN0cnksIGtleSArPSAnJylcbiAgICAgID8gU3ltYm9sUmVnaXN0cnlba2V5XVxuICAgICAgOiBTeW1ib2xSZWdpc3RyeVtrZXldID0gJFN5bWJvbChrZXkpO1xuICB9LFxuICAvLyAxOS40LjIuNSBTeW1ib2wua2V5Rm9yKHN5bSlcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioa2V5KXtcbiAgICBpZihpc1N5bWJvbChrZXkpKXJldHVybiBrZXlPZihTeW1ib2xSZWdpc3RyeSwga2V5KTtcbiAgICB0aHJvdyBUeXBlRXJyb3Ioa2V5ICsgJyBpcyBub3QgYSBzeW1ib2whJyk7XG4gIH0sXG4gIHVzZVNldHRlcjogZnVuY3Rpb24oKXsgc2V0dGVyID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbigpeyBzZXR0ZXIgPSBmYWxzZTsgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdPYmplY3QnLCB7XG4gIC8vIDE5LjEuMi4yIE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyAxOS4xLjIuNCBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gMTkuMS4yLjMgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgLy8gMTkuMS4yLjggT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhPKVxuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyAyNC4zLjIgSlNPTi5zdHJpbmdpZnkodmFsdWUgWywgcmVwbGFjZXIgWywgc3BhY2VdXSlcbiRKU09OICYmICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCFVU0VfTkFUSVZFIHx8ICRmYWlscyhmdW5jdGlvbigpe1xuICB2YXIgUyA9ICRTeW1ib2woKTtcbiAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gIHJldHVybiBfc3RyaW5naWZ5KFtTXSkgIT0gJ1tudWxsXScgfHwgX3N0cmluZ2lmeSh7YTogU30pICE9ICd7fScgfHwgX3N0cmluZ2lmeShPYmplY3QoUykpICE9ICd7fSc7XG59KSksICdKU09OJywge1xuICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCl7XG4gICAgaWYoaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgdmFyIGFyZ3MgPSBbaXRdXG4gICAgICAsIGkgICAgPSAxXG4gICAgICAsIHJlcGxhY2VyLCAkcmVwbGFjZXI7XG4gICAgd2hpbGUoYXJndW1lbnRzLmxlbmd0aCA+IGkpYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICByZXBsYWNlciA9IGFyZ3NbMV07XG4gICAgaWYodHlwZW9mIHJlcGxhY2VyID09ICdmdW5jdGlvbicpJHJlcGxhY2VyID0gcmVwbGFjZXI7XG4gICAgaWYoJHJlcGxhY2VyIHx8ICFpc0FycmF5KHJlcGxhY2VyKSlyZXBsYWNlciA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpe1xuICAgICAgaWYoJHJlcGxhY2VyKXZhbHVlID0gJHJlcGxhY2VyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICBpZighaXNTeW1ib2wodmFsdWUpKXJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICByZXR1cm4gX3N0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJncyk7XG4gIH1cbn0pO1xuXG4vLyAxOS40LjMuNCBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdKGhpbnQpXG4kU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSB8fCByZXF1aXJlKCcuL19oaWRlJykoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcbi8vIDE5LjQuMy41IFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsICdTeW1ib2wnKTtcbi8vIDIwLjIuMS45IE1hdGhbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7XG4vLyAyNC4zLjMgSlNPTltAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoZ2xvYmFsLkpTT04sICdKU09OJywgdHJ1ZSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJHR5cGVkICAgICAgID0gcmVxdWlyZSgnLi9fdHlwZWQnKVxuICAsIGJ1ZmZlciAgICAgICA9IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpXG4gICwgYW5PYmplY3QgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCB0b0luZGV4ICAgICAgPSByZXF1aXJlKCcuL190by1pbmRleCcpXG4gICwgdG9MZW5ndGggICAgID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgLCBpc09iamVjdCAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIEFycmF5QnVmZmVyICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLkFycmF5QnVmZmVyXG4gICwgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpXG4gICwgJEFycmF5QnVmZmVyID0gYnVmZmVyLkFycmF5QnVmZmVyXG4gICwgJERhdGFWaWV3ICAgID0gYnVmZmVyLkRhdGFWaWV3XG4gICwgJGlzVmlldyAgICAgID0gJHR5cGVkLkFCViAmJiBBcnJheUJ1ZmZlci5pc1ZpZXdcbiAgLCAkc2xpY2UgICAgICAgPSAkQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlXG4gICwgVklFVyAgICAgICAgID0gJHR5cGVkLlZJRVdcbiAgLCBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChBcnJheUJ1ZmZlciAhPT0gJEFycmF5QnVmZmVyKSwge0FycmF5QnVmZmVyOiAkQXJyYXlCdWZmZXJ9KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhJHR5cGVkLkNPTlNUUiwgQVJSQVlfQlVGRkVSLCB7XG4gIC8vIDI0LjEuMy4xIEFycmF5QnVmZmVyLmlzVmlldyhhcmcpXG4gIGlzVmlldzogZnVuY3Rpb24gaXNWaWV3KGl0KXtcbiAgICByZXR1cm4gJGlzVmlldyAmJiAkaXNWaWV3KGl0KSB8fCBpc09iamVjdChpdCkgJiYgVklFVyBpbiBpdDtcbiAgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5VICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICByZXR1cm4gIW5ldyAkQXJyYXlCdWZmZXIoMikuc2xpY2UoMSwgdW5kZWZpbmVkKS5ieXRlTGVuZ3RoO1xufSksIEFSUkFZX0JVRkZFUiwge1xuICAvLyAyNC4xLjQuMyBBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2Uoc3RhcnQsIGVuZClcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpe1xuICAgIGlmKCRzbGljZSAhPT0gdW5kZWZpbmVkICYmIGVuZCA9PT0gdW5kZWZpbmVkKXJldHVybiAkc2xpY2UuY2FsbChhbk9iamVjdCh0aGlzKSwgc3RhcnQpOyAvLyBGRiBmaXhcbiAgICB2YXIgbGVuICAgID0gYW5PYmplY3QodGhpcykuYnl0ZUxlbmd0aFxuICAgICAgLCBmaXJzdCAgPSB0b0luZGV4KHN0YXJ0LCBsZW4pXG4gICAgICAsIGZpbmFsICA9IHRvSW5kZXgoZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiBlbmQsIGxlbilcbiAgICAgICwgcmVzdWx0ID0gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJEFycmF5QnVmZmVyKSkodG9MZW5ndGgoZmluYWwgLSBmaXJzdCkpXG4gICAgICAsIHZpZXdTICA9IG5ldyAkRGF0YVZpZXcodGhpcylcbiAgICAgICwgdmlld1QgID0gbmV3ICREYXRhVmlldyhyZXN1bHQpXG4gICAgICAsIGluZGV4ICA9IDA7XG4gICAgd2hpbGUoZmlyc3QgPCBmaW5hbCl7XG4gICAgICB2aWV3VC5zZXRVaW50OChpbmRleCsrLCB2aWV3Uy5nZXRVaW50OChmaXJzdCsrKSk7XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShBUlJBWV9CVUZGRVIpOyIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL190eXBlZCcpLkFCViwge1xuICBEYXRhVmlldzogcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJykuRGF0YVZpZXdcbn0pOyIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0Zsb2F0MzInLCA0LCBmdW5jdGlvbihpbml0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpe1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTsiLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDY0JywgOCwgZnVuY3Rpb24oaW5pdCl7XG4gIHJldHVybiBmdW5jdGlvbiBGbG9hdDY0QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7IiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50MTYnLCAyLCBmdW5jdGlvbihpbml0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7IiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50MzInLCA0LCBmdW5jdGlvbihpbml0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7IiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50OCcsIDEsIGZ1bmN0aW9uKGluaXQpe1xuICByZXR1cm4gZnVuY3Rpb24gSW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pOyIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQxNicsIDIsIGZ1bmN0aW9uKGluaXQpe1xuICByZXR1cm4gZnVuY3Rpb24gVWludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7IiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDMyJywgNCwgZnVuY3Rpb24oaW5pdCl7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpe1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTsiLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uKGluaXQpe1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpe1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTsiLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uKGluaXQpe1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhDbGFtcGVkQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSwgdHJ1ZSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGVhY2ggICAgICAgICA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKVxuICAsIHJlZGVmaW5lICAgICA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJylcbiAgLCBtZXRhICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhJylcbiAgLCBhc3NpZ24gICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJylcbiAgLCB3ZWFrICAgICAgICAgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXdlYWsnKVxuICAsIGlzT2JqZWN0ICAgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgZ2V0V2VhayAgICAgID0gbWV0YS5nZXRXZWFrXG4gICwgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZVxuICAsIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSB3ZWFrLnVmc3RvcmVcbiAgLCB0bXAgICAgICAgICAgPSB7fVxuICAsIEludGVybmFsTWFwO1xuXG52YXIgd3JhcHBlciA9IGZ1bmN0aW9uKGdldCl7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrTWFwKCl7XG4gICAgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gIH07XG59O1xuXG52YXIgbWV0aG9kcyA9IHtcbiAgLy8gMjMuMy4zLjMgV2Vha01hcC5wcm90b3R5cGUuZ2V0KGtleSlcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KXtcbiAgICBpZihpc09iamVjdChrZXkpKXtcbiAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgaWYoZGF0YSA9PT0gdHJ1ZSlyZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh0aGlzKS5nZXQoa2V5KTtcbiAgICAgIHJldHVybiBkYXRhID8gZGF0YVt0aGlzLl9pXSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0sXG4gIC8vIDIzLjMuMy41IFdlYWtNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKXtcbiAgICByZXR1cm4gd2Vhay5kZWYodGhpcywga2V5LCB2YWx1ZSk7XG4gIH1cbn07XG5cbi8vIDIzLjMgV2Vha01hcCBPYmplY3RzXG52YXIgJFdlYWtNYXAgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKSgnV2Vha01hcCcsIHdyYXBwZXIsIG1ldGhvZHMsIHdlYWssIHRydWUsIHRydWUpO1xuXG4vLyBJRTExIFdlYWtNYXAgZnJvemVuIGtleXMgZml4XG5pZihuZXcgJFdlYWtNYXAoKS5zZXQoKE9iamVjdC5mcmVlemUgfHwgT2JqZWN0KSh0bXApLCA3KS5nZXQodG1wKSAhPSA3KXtcbiAgSW50ZXJuYWxNYXAgPSB3ZWFrLmdldENvbnN0cnVjdG9yKHdyYXBwZXIpO1xuICBhc3NpZ24oSW50ZXJuYWxNYXAucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgbWV0YS5ORUVEID0gdHJ1ZTtcbiAgZWFjaChbJ2RlbGV0ZScsICdoYXMnLCAnZ2V0JywgJ3NldCddLCBmdW5jdGlvbihrZXkpe1xuICAgIHZhciBwcm90byAgPSAkV2Vha01hcC5wcm90b3R5cGVcbiAgICAgICwgbWV0aG9kID0gcHJvdG9ba2V5XTtcbiAgICByZWRlZmluZShwcm90bywga2V5LCBmdW5jdGlvbihhLCBiKXtcbiAgICAgIC8vIHN0b3JlIGZyb3plbiBvYmplY3RzIG9uIGludGVybmFsIHdlYWttYXAgc2hpbVxuICAgICAgaWYoaXNPYmplY3QoYSkgJiYgIWlzRXh0ZW5zaWJsZShhKSl7XG4gICAgICAgIGlmKCF0aGlzLl9mKXRoaXMuX2YgPSBuZXcgSW50ZXJuYWxNYXA7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9mW2tleV0oYSwgYik7XG4gICAgICAgIHJldHVybiBrZXkgPT0gJ3NldCcgPyB0aGlzIDogcmVzdWx0O1xuICAgICAgLy8gc3RvcmUgYWxsIHRoZSByZXN0IG9uIG5hdGl2ZSB3ZWFrbWFwXG4gICAgICB9IHJldHVybiBtZXRob2QuY2FsbCh0aGlzLCBhLCBiKTtcbiAgICB9KTtcbiAgfSk7XG59IiwiJ3VzZSBzdHJpY3QnO1xudmFyIHdlYWsgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXdlYWsnKTtcblxuLy8gMjMuNCBXZWFrU2V0IE9iamVjdHNcbnJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKSgnV2Vha1NldCcsIGZ1bmN0aW9uKGdldCl7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrU2V0KCl7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy40LjMuMSBXZWFrU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKXtcbiAgICByZXR1cm4gd2Vhay5kZWYodGhpcywgdmFsdWUsIHRydWUpO1xuICB9XG59LCB3ZWFrLCBmYWxzZSwgdHJ1ZSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG52YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkaW5jbHVkZXMgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoZWwgLyosIGZyb21JbmRleCA9IDAgKi8pe1xuICAgIHJldHVybiAkaW5jbHVkZXModGhpcywgZWwsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdpbmNsdWRlcycpOyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yd2FsZHJvbi90YzM5LW5vdGVzL2Jsb2IvbWFzdGVyL2VzNi8yMDE0LTA5L3NlcHQtMjUubWQjNTEwLWdsb2JhbGFzYXAtZm9yLWVucXVldWluZy1hLW1pY3JvdGFza1xudmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgbWljcm90YXNrID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKVxuICAsIHByb2Nlc3MgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnByb2Nlc3NcbiAgLCBpc05vZGUgICAgPSByZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG5cbiRleHBvcnQoJGV4cG9ydC5HLCB7XG4gIGFzYXA6IGZ1bmN0aW9uIGFzYXAoZm4pe1xuICAgIHZhciBkb21haW4gPSBpc05vZGUgJiYgcHJvY2Vzcy5kb21haW47XG4gICAgbWljcm90YXNrKGRvbWFpbiA/IGRvbWFpbi5iaW5kKGZuKSA6IGZuKTtcbiAgfVxufSk7IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9wcm9wb3NhbC1pcy1lcnJvclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGNvZiAgICAgPSByZXF1aXJlKCcuL19jb2YnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdFcnJvcicsIHtcbiAgaXNFcnJvcjogZnVuY3Rpb24gaXNFcnJvcihpdCl7XG4gICAgcmV0dXJuIGNvZihpdCkgPT09ICdFcnJvcic7XG4gIH1cbn0pOyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT05cbnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ01hcCcsIHt0b0pTT046IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tdG8tanNvbicpKCdNYXAnKX0pOyIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGlhZGRoOiBmdW5jdGlvbiBpYWRkaCh4MCwgeDEsIHkwLCB5MSl7XG4gICAgdmFyICR4MCA9IHgwID4+PiAwXG4gICAgICAsICR4MSA9IHgxID4+PiAwXG4gICAgICAsICR5MCA9IHkwID4+PiAwO1xuICAgIHJldHVybiAkeDEgKyAoeTEgPj4+IDApICsgKCgkeDAgJiAkeTAgfCAoJHgwIHwgJHkwKSAmIH4oJHgwICsgJHkwID4+PiAwKSkgPj4+IDMxKSB8IDA7XG4gIH1cbn0pOyIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGltdWxoOiBmdW5jdGlvbiBpbXVsaCh1LCB2KXtcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmXG4gICAgICAsICR1ID0gK3VcbiAgICAgICwgJHYgPSArdlxuICAgICAgLCB1MCA9ICR1ICYgVUlOVDE2XG4gICAgICAsIHYwID0gJHYgJiBVSU5UMTZcbiAgICAgICwgdTEgPSAkdSA+PiAxNlxuICAgICAgLCB2MSA9ICR2ID4+IDE2XG4gICAgICAsIHQgID0gKHUxICogdjAgPj4+IDApICsgKHUwICogdjAgPj4+IDE2KTtcbiAgICByZXR1cm4gdTEgKiB2MSArICh0ID4+IDE2KSArICgodTAgKiB2MSA+Pj4gMCkgKyAodCAmIFVJTlQxNikgPj4gMTYpO1xuICB9XG59KTsiLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpc3ViaDogZnVuY3Rpb24gaXN1YmgoeDAsIHgxLCB5MCwgeTEpe1xuICAgIHZhciAkeDAgPSB4MCA+Pj4gMFxuICAgICAgLCAkeDEgPSB4MSA+Pj4gMFxuICAgICAgLCAkeTAgPSB5MCA+Pj4gMDtcbiAgICByZXR1cm4gJHgxIC0gKHkxID4+PiAwKSAtICgofiR4MCAmICR5MCB8IH4oJHgwIF4gJHkwKSAmICR4MCAtICR5MCA+Pj4gMCkgPj4+IDMxKSB8IDA7XG4gIH1cbn0pOyIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHVtdWxoOiBmdW5jdGlvbiB1bXVsaCh1LCB2KXtcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmXG4gICAgICAsICR1ID0gK3VcbiAgICAgICwgJHYgPSArdlxuICAgICAgLCB1MCA9ICR1ICYgVUlOVDE2XG4gICAgICAsIHYwID0gJHYgJiBVSU5UMTZcbiAgICAgICwgdTEgPSAkdSA+Pj4gMTZcbiAgICAgICwgdjEgPSAkdiA+Pj4gMTZcbiAgICAgICwgdCAgPSAodTEgKiB2MCA+Pj4gMCkgKyAodTAgKiB2MCA+Pj4gMTYpO1xuICAgIHJldHVybiB1MSAqIHYxICsgKHQgPj4+IDE2KSArICgodTAgKiB2MSA+Pj4gMCkgKyAodCAmIFVJTlQxNikgPj4+IDE2KTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgdG9PYmplY3QgICAgICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCBhRnVuY3Rpb24gICAgICAgPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJylcbiAgLCAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcblxuLy8gQi4yLjIuMiBPYmplY3QucHJvdG90eXBlLl9fZGVmaW5lR2V0dGVyX18oUCwgZ2V0dGVyKVxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XG4gIF9fZGVmaW5lR2V0dGVyX186IGZ1bmN0aW9uIF9fZGVmaW5lR2V0dGVyX18oUCwgZ2V0dGVyKXtcbiAgICAkZGVmaW5lUHJvcGVydHkuZih0b09iamVjdCh0aGlzKSwgUCwge2dldDogYUZ1bmN0aW9uKGdldHRlciksIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZX0pO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCB0b09iamVjdCAgICAgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsIGFGdW5jdGlvbiAgICAgICA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKVxuICAsICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xuXG4vLyBCLjIuMi4zIE9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVTZXR0ZXJfXyhQLCBzZXR0ZXIpXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19kZWZpbmVTZXR0ZXJfXzogZnVuY3Rpb24gX19kZWZpbmVTZXR0ZXJfXyhQLCBzZXR0ZXIpe1xuICAgICRkZWZpbmVQcm9wZXJ0eS5mKHRvT2JqZWN0KHRoaXMpLCBQLCB7c2V0OiBhRnVuY3Rpb24oc2V0dGVyKSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlfSk7XG4gIH1cbn0pOyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xudmFyICRleHBvcnQgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkZW50cmllcyA9IHJlcXVpcmUoJy4vX29iamVjdC10by1hcnJheScpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgZW50cmllczogZnVuY3Rpb24gZW50cmllcyhpdCl7XG4gICAgcmV0dXJuICRlbnRyaWVzKGl0KTtcbiAgfVxufSk7IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvcnNcbnZhciAkZXhwb3J0ICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgb3duS2V5cyAgICAgICAgPSByZXF1aXJlKCcuL19vd24ta2V5cycpXG4gICwgdG9JT2JqZWN0ICAgICAgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JylcbiAgLCBnT1BEICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJylcbiAgLCBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmplY3Qpe1xuICAgIHZhciBPICAgICAgID0gdG9JT2JqZWN0KG9iamVjdClcbiAgICAgICwgZ2V0RGVzYyA9IGdPUEQuZlxuICAgICAgLCBrZXlzICAgID0gb3duS2V5cyhPKVxuICAgICAgLCByZXN1bHQgID0ge31cbiAgICAgICwgaSAgICAgICA9IDBcbiAgICAgICwga2V5O1xuICAgIHdoaWxlKGtleXMubGVuZ3RoID4gaSljcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGtleSA9IGtleXNbaSsrXSwgZ2V0RGVzYyhPLCBrZXkpKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCB0b09iamVjdCAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsIHRvUHJpbWl0aXZlICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpXG4gICwgZ2V0UHJvdG90eXBlT2YgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpXG4gICwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xuXG4vLyBCLjIuMi40IE9iamVjdC5wcm90b3R5cGUuX19sb29rdXBHZXR0ZXJfXyhQKVxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XG4gIF9fbG9va3VwR2V0dGVyX186IGZ1bmN0aW9uIF9fbG9va3VwR2V0dGVyX18oUCl7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKVxuICAgICAgLCBLID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSlcbiAgICAgICwgRDtcbiAgICBkbyB7XG4gICAgICBpZihEID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIEspKXJldHVybiBELmdldDtcbiAgICB9IHdoaWxlKE8gPSBnZXRQcm90b3R5cGVPZihPKSk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHRvT2JqZWN0ICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgdG9QcmltaXRpdmUgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJylcbiAgLCBnZXRQcm90b3R5cGVPZiAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJylcbiAgLCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG5cbi8vIEIuMi4yLjUgT2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cFNldHRlcl9fKFApXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19sb29rdXBTZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBTZXR0ZXJfXyhQKXtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpXG4gICAgICAsIEsgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKVxuICAgICAgLCBEO1xuICAgIGRvIHtcbiAgICAgIGlmKEQgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgSykpcmV0dXJuIEQuc2V0O1xuICAgIH0gd2hpbGUoTyA9IGdldFByb3RvdHlwZU9mKE8pKTtcbiAgfVxufSk7IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJHZhbHVlcyA9IHJlcXVpcmUoJy4vX29iamVjdC10by1hcnJheScpKGZhbHNlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKGl0KXtcbiAgICByZXR1cm4gJHZhbHVlcyhpdCk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96ZW5wYXJzaW5nL2VzLW9ic2VydmFibGVcbnZhciAkZXhwb3J0ICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgZ2xvYmFsICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGNvcmUgICAgICAgID0gcmVxdWlyZSgnLi9fY29yZScpXG4gICwgbWljcm90YXNrICAgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpXG4gICwgT0JTRVJWQUJMRSAgPSByZXF1aXJlKCcuL193a3MnKSgnb2JzZXJ2YWJsZScpXG4gICwgYUZ1bmN0aW9uICAgPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJylcbiAgLCBhbk9iamVjdCAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgYW5JbnN0YW5jZSAgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpXG4gICwgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKVxuICAsIGhpZGUgICAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpXG4gICwgZm9yT2YgICAgICAgPSByZXF1aXJlKCcuL19mb3Itb2YnKVxuICAsIFJFVFVSTiAgICAgID0gZm9yT2YuUkVUVVJOO1xuXG52YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24oZm4pe1xuICByZXR1cm4gZm4gPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGFGdW5jdGlvbihmbik7XG59O1xuXG52YXIgY2xlYW51cFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uKHN1YnNjcmlwdGlvbil7XG4gIHZhciBjbGVhbnVwID0gc3Vic2NyaXB0aW9uLl9jO1xuICBpZihjbGVhbnVwKXtcbiAgICBzdWJzY3JpcHRpb24uX2MgPSB1bmRlZmluZWQ7XG4gICAgY2xlYW51cCgpO1xuICB9XG59O1xuXG52YXIgc3Vic2NyaXB0aW9uQ2xvc2VkID0gZnVuY3Rpb24oc3Vic2NyaXB0aW9uKXtcbiAgcmV0dXJuIHN1YnNjcmlwdGlvbi5fbyA9PT0gdW5kZWZpbmVkO1xufTtcblxudmFyIGNsb3NlU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24oc3Vic2NyaXB0aW9uKXtcbiAgaWYoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKXtcbiAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7XG4gICAgY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICB9XG59O1xuXG52YXIgU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24ob2JzZXJ2ZXIsIHN1YnNjcmliZXIpe1xuICBhbk9iamVjdChvYnNlcnZlcik7XG4gIHRoaXMuX2MgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX28gPSBvYnNlcnZlcjtcbiAgb2JzZXJ2ZXIgPSBuZXcgU3Vic2NyaXB0aW9uT2JzZXJ2ZXIodGhpcyk7XG4gIHRyeSB7XG4gICAgdmFyIGNsZWFudXAgICAgICA9IHN1YnNjcmliZXIob2JzZXJ2ZXIpXG4gICAgICAsIHN1YnNjcmlwdGlvbiA9IGNsZWFudXA7XG4gICAgaWYoY2xlYW51cCAhPSBudWxsKXtcbiAgICAgIGlmKHR5cGVvZiBjbGVhbnVwLnVuc3Vic2NyaWJlID09PSAnZnVuY3Rpb24nKWNsZWFudXAgPSBmdW5jdGlvbigpeyBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTsgfTtcbiAgICAgIGVsc2UgYUZ1bmN0aW9uKGNsZWFudXApO1xuICAgICAgdGhpcy5fYyA9IGNsZWFudXA7XG4gICAgfVxuICB9IGNhdGNoKGUpe1xuICAgIG9ic2VydmVyLmVycm9yKGUpO1xuICAgIHJldHVybjtcbiAgfSBpZihzdWJzY3JpcHRpb25DbG9zZWQodGhpcykpY2xlYW51cFN1YnNjcmlwdGlvbih0aGlzKTtcbn07XG5cblN1YnNjcmlwdGlvbi5wcm90b3R5cGUgPSByZWRlZmluZUFsbCh7fSwge1xuICB1bnN1YnNjcmliZTogZnVuY3Rpb24gdW5zdWJzY3JpYmUoKXsgY2xvc2VTdWJzY3JpcHRpb24odGhpcyk7IH1cbn0pO1xuXG52YXIgU3Vic2NyaXB0aW9uT2JzZXJ2ZXIgPSBmdW5jdGlvbihzdWJzY3JpcHRpb24pe1xuICB0aGlzLl9zID0gc3Vic2NyaXB0aW9uO1xufTtcblxuU3Vic2NyaXB0aW9uT2JzZXJ2ZXIucHJvdG90eXBlID0gcmVkZWZpbmVBbGwoe30sIHtcbiAgbmV4dDogZnVuY3Rpb24gbmV4dCh2YWx1ZSl7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKXtcbiAgICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fbztcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBtID0gZ2V0TWV0aG9kKG9ic2VydmVyLm5leHQpO1xuICAgICAgICBpZihtKXJldHVybiBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKTtcbiAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2xvc2VTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBlcnJvcjogZnVuY3Rpb24gZXJyb3IodmFsdWUpe1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLl9zO1xuICAgIGlmKHN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKXRocm93IHZhbHVlO1xuICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fbztcbiAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBtID0gZ2V0TWV0aG9kKG9ic2VydmVyLmVycm9yKTtcbiAgICAgIGlmKCFtKXRocm93IHZhbHVlO1xuICAgICAgdmFsdWUgPSBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9IGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH0sXG4gIGNvbXBsZXRlOiBmdW5jdGlvbiBjb21wbGV0ZSh2YWx1ZSl7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKXtcbiAgICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fbztcbiAgICAgIHN1YnNjcmlwdGlvbi5fbyA9IHVuZGVmaW5lZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBtID0gZ2V0TWV0aG9kKG9ic2VydmVyLmNvbXBsZXRlKTtcbiAgICAgICAgdmFsdWUgPSBtID8gbS5jYWxsKG9ic2VydmVyLCB2YWx1ZSkgOiB1bmRlZmluZWQ7XG4gICAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9IGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gIH1cbn0pO1xuXG52YXIgJE9ic2VydmFibGUgPSBmdW5jdGlvbiBPYnNlcnZhYmxlKHN1YnNjcmliZXIpe1xuICBhbkluc3RhbmNlKHRoaXMsICRPYnNlcnZhYmxlLCAnT2JzZXJ2YWJsZScsICdfZicpLl9mID0gYUZ1bmN0aW9uKHN1YnNjcmliZXIpO1xufTtcblxucmVkZWZpbmVBbGwoJE9ic2VydmFibGUucHJvdG90eXBlLCB7XG4gIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKXtcbiAgICByZXR1cm4gbmV3IFN1YnNjcmlwdGlvbihvYnNlcnZlciwgdGhpcy5fZik7XG4gIH0sXG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goZm4pe1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICByZXR1cm4gbmV3IChjb3JlLlByb21pc2UgfHwgZ2xvYmFsLlByb21pc2UpKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgICBhRnVuY3Rpb24oZm4pO1xuICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoYXQuc3Vic2NyaWJlKHtcbiAgICAgICAgbmV4dCA6IGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGZuKHZhbHVlKTtcbiAgICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlcnJvcjogcmVqZWN0LFxuICAgICAgICBjb21wbGV0ZTogcmVzb2x2ZVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn0pO1xuXG5yZWRlZmluZUFsbCgkT2JzZXJ2YWJsZSwge1xuICBmcm9tOiBmdW5jdGlvbiBmcm9tKHgpe1xuICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT09ICdmdW5jdGlvbicgPyB0aGlzIDogJE9ic2VydmFibGU7XG4gICAgdmFyIG1ldGhvZCA9IGdldE1ldGhvZChhbk9iamVjdCh4KVtPQlNFUlZBQkxFXSk7XG4gICAgaWYobWV0aG9kKXtcbiAgICAgIHZhciBvYnNlcnZhYmxlID0gYW5PYmplY3QobWV0aG9kLmNhbGwoeCkpO1xuICAgICAgcmV0dXJuIG9ic2VydmFibGUuY29uc3RydWN0b3IgPT09IEMgPyBvYnNlcnZhYmxlIDogbmV3IEMoZnVuY3Rpb24ob2JzZXJ2ZXIpe1xuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZS5zdWJzY3JpYmUob2JzZXJ2ZXIpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgQyhmdW5jdGlvbihvYnNlcnZlcil7XG4gICAgICB2YXIgZG9uZSA9IGZhbHNlO1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uKCl7XG4gICAgICAgIGlmKCFkb25lKXtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYoZm9yT2YoeCwgZmFsc2UsIGZ1bmN0aW9uKGl0KXtcbiAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChpdCk7XG4gICAgICAgICAgICAgIGlmKGRvbmUpcmV0dXJuIFJFVFVSTjtcbiAgICAgICAgICAgIH0pID09PSBSRVRVUk4pcmV0dXJuO1xuICAgICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICBpZihkb25lKXRocm93IGU7XG4gICAgICAgICAgICBvYnNlcnZlci5lcnJvcihlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9IG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCl7IGRvbmUgPSB0cnVlOyB9O1xuICAgIH0pO1xuICB9LFxuICBvZjogZnVuY3Rpb24gb2YoKXtcbiAgICBmb3IodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aCwgaXRlbXMgPSBBcnJheShsKTsgaSA8IGw7KWl0ZW1zW2ldID0gYXJndW1lbnRzW2krK107XG4gICAgcmV0dXJuIG5ldyAodHlwZW9mIHRoaXMgPT09ICdmdW5jdGlvbicgPyB0aGlzIDogJE9ic2VydmFibGUpKGZ1bmN0aW9uKG9ic2VydmVyKXtcbiAgICAgIHZhciBkb25lID0gZmFsc2U7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24oKXtcbiAgICAgICAgaWYoIWRvbmUpe1xuICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7ICsraSl7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KGl0ZW1zW2ldKTtcbiAgICAgICAgICAgIGlmKGRvbmUpcmV0dXJuO1xuICAgICAgICAgIH0gb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKXsgZG9uZSA9IHRydWU7IH07XG4gICAgfSk7XG4gIH1cbn0pO1xuXG5oaWRlKCRPYnNlcnZhYmxlLnByb3RvdHlwZSwgT0JTRVJWQUJMRSwgZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXM7IH0pO1xuXG4kZXhwb3J0KCRleHBvcnQuRywge09ic2VydmFibGU6ICRPYnNlcnZhYmxlfSk7XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ09ic2VydmFibGUnKTsiLCJ2YXIgbWV0YWRhdGEgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJylcbiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCB0b01ldGFLZXkgICAgICAgICAgICAgICAgID0gbWV0YWRhdGEua2V5XG4gICwgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IG1ldGFkYXRhLnNldDtcblxubWV0YWRhdGEuZXhwKHtkZWZpbmVNZXRhZGF0YTogZnVuY3Rpb24gZGVmaW5lTWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsIHRhcmdldCwgdGFyZ2V0S2V5KXtcbiAgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgYW5PYmplY3QodGFyZ2V0KSwgdG9NZXRhS2V5KHRhcmdldEtleSkpO1xufX0pOyIsInZhciBtZXRhZGF0YSAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKVxuICAsIGFuT2JqZWN0ICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIHRvTWV0YUtleSAgICAgICAgICAgICAgPSBtZXRhZGF0YS5rZXlcbiAgLCBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwID0gbWV0YWRhdGEubWFwXG4gICwgc3RvcmUgICAgICAgICAgICAgICAgICA9IG1ldGFkYXRhLnN0b3JlO1xuXG5tZXRhZGF0YS5leHAoe2RlbGV0ZU1ldGFkYXRhOiBmdW5jdGlvbiBkZWxldGVNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qLCB0YXJnZXRLZXkgKi8pe1xuICB2YXIgdGFyZ2V0S2V5ICAgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pXG4gICAgLCBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoYW5PYmplY3QodGFyZ2V0KSwgdGFyZ2V0S2V5LCBmYWxzZSk7XG4gIGlmKG1ldGFkYXRhTWFwID09PSB1bmRlZmluZWQgfHwgIW1ldGFkYXRhTWFwWydkZWxldGUnXShtZXRhZGF0YUtleSkpcmV0dXJuIGZhbHNlO1xuICBpZihtZXRhZGF0YU1hcC5zaXplKXJldHVybiB0cnVlO1xuICB2YXIgdGFyZ2V0TWV0YWRhdGEgPSBzdG9yZS5nZXQodGFyZ2V0KTtcbiAgdGFyZ2V0TWV0YWRhdGFbJ2RlbGV0ZSddKHRhcmdldEtleSk7XG4gIHJldHVybiAhIXRhcmdldE1ldGFkYXRhLnNpemUgfHwgc3RvcmVbJ2RlbGV0ZSddKHRhcmdldCk7XG59fSk7IiwidmFyIFNldCAgICAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9lczYuc2V0JylcbiAgLCBmcm9tICAgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FycmF5LWZyb20taXRlcmFibGUnKVxuICAsIG1ldGFkYXRhICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKVxuICAsIGFuT2JqZWN0ICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBnZXRQcm90b3R5cGVPZiAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKVxuICAsIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gbWV0YWRhdGEua2V5c1xuICAsIHRvTWV0YUtleSAgICAgICAgICAgICAgID0gbWV0YWRhdGEua2V5O1xuXG52YXIgb3JkaW5hcnlNZXRhZGF0YUtleXMgPSBmdW5jdGlvbihPLCBQKXtcbiAgdmFyIG9LZXlzICA9IG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzKE8sIFApXG4gICAgLCBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgaWYocGFyZW50ID09PSBudWxsKXJldHVybiBvS2V5cztcbiAgdmFyIHBLZXlzICA9IG9yZGluYXJ5TWV0YWRhdGFLZXlzKHBhcmVudCwgUCk7XG4gIHJldHVybiBwS2V5cy5sZW5ndGggPyBvS2V5cy5sZW5ndGggPyBmcm9tKG5ldyBTZXQob0tleXMuY29uY2F0KHBLZXlzKSkpIDogcEtleXMgOiBvS2V5cztcbn07XG5cbm1ldGFkYXRhLmV4cCh7Z2V0TWV0YWRhdGFLZXlzOiBmdW5jdGlvbiBnZXRNZXRhZGF0YUtleXModGFyZ2V0IC8qLCB0YXJnZXRLZXkgKi8pe1xuICByZXR1cm4gb3JkaW5hcnlNZXRhZGF0YUtleXMoYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDIgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzFdKSk7XG59fSk7IiwidmFyIG1ldGFkYXRhICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpXG4gICwgYW5PYmplY3QgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgZ2V0UHJvdG90eXBlT2YgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKVxuICAsIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXNcbiAgLCBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gbWV0YWRhdGEuZ2V0XG4gICwgdG9NZXRhS2V5ICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleTtcblxudmFyIG9yZGluYXJ5R2V0TWV0YWRhdGEgPSBmdW5jdGlvbihNZXRhZGF0YUtleSwgTywgUCl7XG4gIHZhciBoYXNPd24gPSBvcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgaWYoaGFzT3duKXJldHVybiBvcmRpbmFyeUdldE93bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgdmFyIHBhcmVudCA9IGdldFByb3RvdHlwZU9mKE8pO1xuICByZXR1cm4gcGFyZW50ICE9PSBudWxsID8gb3JkaW5hcnlHZXRNZXRhZGF0YShNZXRhZGF0YUtleSwgcGFyZW50LCBQKSA6IHVuZGVmaW5lZDtcbn07XG5cbm1ldGFkYXRhLmV4cCh7Z2V0TWV0YWRhdGE6IGZ1bmN0aW9uIGdldE1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyosIHRhcmdldEtleSAqLyl7XG4gIHJldHVybiBvcmRpbmFyeUdldE1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn19KTsiLCJ2YXIgbWV0YWRhdGEgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpXG4gICwgYW5PYmplY3QgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gbWV0YWRhdGEua2V5c1xuICAsIHRvTWV0YUtleSAgICAgICAgICAgICAgID0gbWV0YWRhdGEua2V5O1xuXG5tZXRhZGF0YS5leHAoe2dldE93bk1ldGFkYXRhS2V5czogZnVuY3Rpb24gZ2V0T3duTWV0YWRhdGFLZXlzKHRhcmdldCAvKiwgdGFyZ2V0S2V5ICovKXtcbiAgcmV0dXJuIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzKGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1sxXSkpO1xufX0pOyIsInZhciBtZXRhZGF0YSAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKVxuICAsIGFuT2JqZWN0ICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBtZXRhZGF0YS5nZXRcbiAgLCB0b01ldGFLZXkgICAgICAgICAgICAgID0gbWV0YWRhdGEua2V5O1xuXG5tZXRhZGF0YS5leHAoe2dldE93bk1ldGFkYXRhOiBmdW5jdGlvbiBnZXRPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qLCB0YXJnZXRLZXkgKi8pe1xuICByZXR1cm4gb3JkaW5hcnlHZXRPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KVxuICAgICwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG59fSk7IiwidmFyIG1ldGFkYXRhICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpXG4gICwgYW5PYmplY3QgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgZ2V0UHJvdG90eXBlT2YgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKVxuICAsIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXNcbiAgLCB0b01ldGFLZXkgICAgICAgICAgICAgID0gbWV0YWRhdGEua2V5O1xuXG52YXIgb3JkaW5hcnlIYXNNZXRhZGF0YSA9IGZ1bmN0aW9uKE1ldGFkYXRhS2V5LCBPLCBQKXtcbiAgdmFyIGhhc093biA9IG9yZGluYXJ5SGFzT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xuICBpZihoYXNPd24pcmV0dXJuIHRydWU7XG4gIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgcmV0dXJuIHBhcmVudCAhPT0gbnVsbCA/IG9yZGluYXJ5SGFzTWV0YWRhdGEoTWV0YWRhdGFLZXksIHBhcmVudCwgUCkgOiBmYWxzZTtcbn07XG5cbm1ldGFkYXRhLmV4cCh7aGFzTWV0YWRhdGE6IGZ1bmN0aW9uIGhhc01ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyosIHRhcmdldEtleSAqLyl7XG4gIHJldHVybiBvcmRpbmFyeUhhc01ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn19KTsiLCJ2YXIgbWV0YWRhdGEgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJylcbiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzXG4gICwgdG9NZXRhS2V5ICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHtoYXNPd25NZXRhZGF0YTogZnVuY3Rpb24gaGFzT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiwgdGFyZ2V0S2V5ICovKXtcbiAgcmV0dXJuIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldClcbiAgICAsIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufX0pOyIsInZhciBtZXRhZGF0YSAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKVxuICAsIGFuT2JqZWN0ICAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGFGdW5jdGlvbiAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJylcbiAgLCB0b01ldGFLZXkgICAgICAgICAgICAgICAgID0gbWV0YWRhdGEua2V5XG4gICwgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IG1ldGFkYXRhLnNldDtcblxubWV0YWRhdGEuZXhwKHttZXRhZGF0YTogZnVuY3Rpb24gbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpe1xuICByZXR1cm4gZnVuY3Rpb24gZGVjb3JhdG9yKHRhcmdldCwgdGFyZ2V0S2V5KXtcbiAgICBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKFxuICAgICAgbWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsXG4gICAgICAodGFyZ2V0S2V5ICE9PSB1bmRlZmluZWQgPyBhbk9iamVjdCA6IGFGdW5jdGlvbikodGFyZ2V0KSxcbiAgICAgIHRvTWV0YUtleSh0YXJnZXRLZXkpXG4gICAgKTtcbiAgfTtcbn19KTsiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgJGV4cG9ydCAgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdTZXQnLCB7dG9KU09OOiByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXRvLWpzb24nKSgnU2V0Jyl9KTsiLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vbWF0aGlhc2J5bmVucy9TdHJpbmcucHJvdG90eXBlLmF0XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJGF0ICAgICA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgYXQ6IGZ1bmN0aW9uIGF0KHBvcyl7XG4gICAgcmV0dXJuICRhdCh0aGlzLCBwb3MpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL1N0cmluZy5wcm90b3R5cGUubWF0Y2hBbGwvXG52YXIgJGV4cG9ydCAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGRlZmluZWQgICAgID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpXG4gICwgdG9MZW5ndGggICAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKVxuICAsIGlzUmVnRXhwICAgID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJylcbiAgLCBnZXRGbGFncyAgICA9IHJlcXVpcmUoJy4vX2ZsYWdzJylcbiAgLCBSZWdFeHBQcm90byA9IFJlZ0V4cC5wcm90b3R5cGU7XG5cbnZhciAkUmVnRXhwU3RyaW5nSXRlcmF0b3IgPSBmdW5jdGlvbihyZWdleHAsIHN0cmluZyl7XG4gIHRoaXMuX3IgPSByZWdleHA7XG4gIHRoaXMuX3MgPSBzdHJpbmc7XG59O1xuXG5yZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpKCRSZWdFeHBTdHJpbmdJdGVyYXRvciwgJ1JlZ0V4cCBTdHJpbmcnLCBmdW5jdGlvbiBuZXh0KCl7XG4gIHZhciBtYXRjaCA9IHRoaXMuX3IuZXhlYyh0aGlzLl9zKTtcbiAgcmV0dXJuIHt2YWx1ZTogbWF0Y2gsIGRvbmU6IG1hdGNoID09PSBudWxsfTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgbWF0Y2hBbGw6IGZ1bmN0aW9uIG1hdGNoQWxsKHJlZ2V4cCl7XG4gICAgZGVmaW5lZCh0aGlzKTtcbiAgICBpZighaXNSZWdFeHAocmVnZXhwKSl0aHJvdyBUeXBlRXJyb3IocmVnZXhwICsgJyBpcyBub3QgYSByZWdleHAhJyk7XG4gICAgdmFyIFMgICAgID0gU3RyaW5nKHRoaXMpXG4gICAgICAsIGZsYWdzID0gJ2ZsYWdzJyBpbiBSZWdFeHBQcm90byA/IFN0cmluZyhyZWdleHAuZmxhZ3MpIDogZ2V0RmxhZ3MuY2FsbChyZWdleHApXG4gICAgICAsIHJ4ICAgID0gbmV3IFJlZ0V4cChyZWdleHAuc291cmNlLCB+ZmxhZ3MuaW5kZXhPZignZycpID8gZmxhZ3MgOiAnZycgKyBmbGFncyk7XG4gICAgcngubGFzdEluZGV4ID0gdG9MZW5ndGgocmVnZXhwLmxhc3RJbmRleCk7XG4gICAgcmV0dXJuIG5ldyAkUmVnRXhwU3RyaW5nSXRlcmF0b3IocngsIFMpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRwYWQgICAgPSByZXF1aXJlKCcuL19zdHJpbmctcGFkJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICBwYWRFbmQ6IGZ1bmN0aW9uIHBhZEVuZChtYXhMZW5ndGggLyosIGZpbGxTdHJpbmcgPSAnICcgKi8pe1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIGZhbHNlKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkcGFkICAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLXBhZCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgcGFkU3RhcnQ6IGZ1bmN0aW9uIHBhZFN0YXJ0KG1heExlbmd0aCAvKiwgZmlsbFN0cmluZyA9ICcgJyAqLyl7XG4gICAgcmV0dXJuICRwYWQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdHJ1ZSk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW1cbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW1MZWZ0JywgZnVuY3Rpb24oJHRyaW0pe1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbUxlZnQoKXtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMSk7XG4gIH07XG59LCAndHJpbVN0YXJ0Jyk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NlYm1hcmtiYWdlL2VjbWFzY3JpcHQtc3RyaW5nLWxlZnQtcmlnaHQtdHJpbVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbVJpZ2h0JywgZnVuY3Rpb24oJHRyaW0pe1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbVJpZ2h0KCl7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDIpO1xuICB9O1xufSwgJ3RyaW1FbmQnKTsiLCJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ2FzeW5jSXRlcmF0b3InKTsiLCJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ29ic2VydmFibGUnKTsiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vbGpoYXJiL3Byb3Bvc2FsLWdsb2JhbFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdTeXN0ZW0nLCB7Z2xvYmFsOiByZXF1aXJlKCcuL19nbG9iYWwnKX0pOyIsInZhciAkaXRlcmF0b3JzICAgID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKVxuICAsIHJlZGVmaW5lICAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZScpXG4gICwgZ2xvYmFsICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgaGlkZSAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKVxuICAsIEl0ZXJhdG9ycyAgICAgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKVxuICAsIHdrcyAgICAgICAgICAgPSByZXF1aXJlKCcuL193a3MnKVxuICAsIElURVJBVE9SICAgICAgPSB3a3MoJ2l0ZXJhdG9yJylcbiAgLCBUT19TVFJJTkdfVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpXG4gICwgQXJyYXlWYWx1ZXMgICA9IEl0ZXJhdG9ycy5BcnJheTtcblxuZm9yKHZhciBjb2xsZWN0aW9ucyA9IFsnTm9kZUxpc3QnLCAnRE9NVG9rZW5MaXN0JywgJ01lZGlhTGlzdCcsICdTdHlsZVNoZWV0TGlzdCcsICdDU1NSdWxlTGlzdCddLCBpID0gMDsgaSA8IDU7IGkrKyl7XG4gIHZhciBOQU1FICAgICAgID0gY29sbGVjdGlvbnNbaV1cbiAgICAsIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV1cbiAgICAsIHByb3RvICAgICAgPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlXG4gICAgLCBrZXk7XG4gIGlmKHByb3RvKXtcbiAgICBpZighcHJvdG9bSVRFUkFUT1JdKWhpZGUocHJvdG8sIElURVJBVE9SLCBBcnJheVZhbHVlcyk7XG4gICAgaWYoIXByb3RvW1RPX1NUUklOR19UQUddKWhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpO1xuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IEFycmF5VmFsdWVzO1xuICAgIGZvcihrZXkgaW4gJGl0ZXJhdG9ycylpZighcHJvdG9ba2V5XSlyZWRlZmluZShwcm90bywga2V5LCAkaXRlcmF0b3JzW2tleV0sIHRydWUpO1xuICB9XG59IiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICR0YXNrICAgPSByZXF1aXJlKCcuL190YXNrJyk7XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuQiwge1xuICBzZXRJbW1lZGlhdGU6ICAgJHRhc2suc2V0LFxuICBjbGVhckltbWVkaWF0ZTogJHRhc2suY2xlYXJcbn0pOyIsIi8vIGllOS0gc2V0VGltZW91dCAmIHNldEludGVydmFsIGFkZGl0aW9uYWwgcGFyYW1ldGVycyBmaXhcbnZhciBnbG9iYWwgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCAkZXhwb3J0ICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBpbnZva2UgICAgID0gcmVxdWlyZSgnLi9faW52b2tlJylcbiAgLCBwYXJ0aWFsICAgID0gcmVxdWlyZSgnLi9fcGFydGlhbCcpXG4gICwgbmF2aWdhdG9yICA9IGdsb2JhbC5uYXZpZ2F0b3JcbiAgLCBNU0lFICAgICAgID0gISFuYXZpZ2F0b3IgJiYgL01TSUUgLlxcLi8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTsgLy8gPC0gZGlydHkgaWU5LSBjaGVja1xudmFyIHdyYXAgPSBmdW5jdGlvbihzZXQpe1xuICByZXR1cm4gTVNJRSA/IGZ1bmN0aW9uKGZuLCB0aW1lIC8qLCAuLi5hcmdzICovKXtcbiAgICByZXR1cm4gc2V0KGludm9rZShcbiAgICAgIHBhcnRpYWwsXG4gICAgICBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMiksXG4gICAgICB0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pXG4gICAgKSwgdGltZSk7XG4gIH0gOiBzZXQ7XG59O1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIgKyAkZXhwb3J0LkYgKiBNU0lFLCB7XG4gIHNldFRpbWVvdXQ6ICB3cmFwKGdsb2JhbC5zZXRUaW1lb3V0KSxcbiAgc2V0SW50ZXJ2YWw6IHdyYXAoZ2xvYmFsLnNldEludGVydmFsKVxufSk7IiwicmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zeW1ib2wnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydGllcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnNlYWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1zZWFsZWQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5iaW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmZ1bmN0aW9uLm5hbWUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnBhcnNlLWludCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci50by1wcmVjaXNpb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLWZpbml0ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtaW50ZWdlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLm1heC1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWZsb2F0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1pbnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5hY29zaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmFzaW5oJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguYXRhbmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5jYnJ0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguY2x6MzInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5jb3NoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguZXhwbTEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5mcm91bmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5oeXBvdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmltdWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5sb2cxMCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgubG9nMicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnNpZ24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5zaW5oJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgudGFuaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnRydW5jJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5mcm9tLWNvZGUtcG9pbnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnJhdycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcudHJpbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmNvZGUtcG9pbnQtYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmVuZHMtd2l0aCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuaW5jbHVkZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3RhcnRzLXdpdGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmFuY2hvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5ibGluaycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYm9sZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRjb2xvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udHNpemUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLml0YWxpY3MnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmxpbmsnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN1YicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3VwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUubm93Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8tanNvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWlzby1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1wcmltaXRpdmUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZnJvbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5qb2luJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNsaWNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNvcnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZm9yLWVhY2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkubWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zb21lJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmV2ZXJ5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5jb3B5LXdpdGhpbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maWxsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zcGVjaWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5mbGFncycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnNlYXJjaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucHJvbWlzZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LndlYWstbWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LndlYWstc2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmFycmF5LWJ1ZmZlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5kYXRhLXZpZXcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1jbGFtcGVkLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmludDE2LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQzMi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50MzItYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDY0LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuYXBwbHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5kZWZpbmUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuaGFzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuaXMtZXh0ZW5zaWJsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QucHJldmVudC1leHRlbnNpb25zJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcuYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1zdGFydCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLWVuZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1sZWZ0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy50cmltLXJpZ2h0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5tYXRjaC1hbGwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmVudHJpZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1nZXR0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1zZXR0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1nZXR0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1zZXR0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWFwLnRvLWpzb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc2V0LnRvLWpzb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3lzdGVtLmdsb2JhbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5lcnJvci5pcy1lcnJvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmlhZGRoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguaXN1YmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5pbXVsaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLnVtdWxoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVmaW5lLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVsZXRlLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLWtleXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS1rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW93bi1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lm1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LmFzYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JzZXJ2YWJsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL3dlYi50aW1lcnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy93ZWIuaW1tZWRpYXRlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL21vZHVsZXMvX2NvcmUnKTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBodHRwczovL3Jhdy5naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL21hc3Rlci9MSUNFTlNFIGZpbGUuIEFuXG4gKiBhZGRpdGlvbmFsIGdyYW50IG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW5cbiAqIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG4hKGZ1bmN0aW9uKGdsb2JhbCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciBpdGVyYXRvclN5bWJvbCA9XG4gICAgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcblxuICB2YXIgaW5Nb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiO1xuICB2YXIgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWU7XG4gIGlmIChydW50aW1lKSB7XG4gICAgaWYgKGluTW9kdWxlKSB7XG4gICAgICAvLyBJZiByZWdlbmVyYXRvclJ1bnRpbWUgaXMgZGVmaW5lZCBnbG9iYWxseSBhbmQgd2UncmUgaW4gYSBtb2R1bGUsXG4gICAgICAvLyBtYWtlIHRoZSBleHBvcnRzIG9iamVjdCBpZGVudGljYWwgdG8gcmVnZW5lcmF0b3JSdW50aW1lLlxuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBydW50aW1lO1xuICAgIH1cbiAgICAvLyBEb24ndCBib3RoZXIgZXZhbHVhdGluZyB0aGUgcmVzdCBvZiB0aGlzIGZpbGUgaWYgdGhlIHJ1bnRpbWUgd2FzXG4gICAgLy8gYWxyZWFkeSBkZWZpbmVkIGdsb2JhbGx5LlxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIERlZmluZSB0aGUgcnVudGltZSBnbG9iYWxseSAoYXMgZXhwZWN0ZWQgYnkgZ2VuZXJhdGVkIGNvZGUpIGFzIGVpdGhlclxuICAvLyBtb2R1bGUuZXhwb3J0cyAoaWYgd2UncmUgaW4gYSBtb2R1bGUpIG9yIGEgbmV3LCBlbXB0eSBvYmplY3QuXG4gIHJ1bnRpbWUgPSBnbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lID0gaW5Nb2R1bGUgPyBtb2R1bGUuZXhwb3J0cyA6IHt9O1xuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKChvdXRlckZuIHx8IEdlbmVyYXRvcikucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBydW50aW1lLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPSBHZW5lcmF0b3IucHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBwcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBydW50aW1lLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGB2YWx1ZSBpbnN0YW5jZW9mIEF3YWl0QXJndW1lbnRgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLiBTb21lIG1heSBjb25zaWRlciB0aGUgbmFtZSBvZiB0aGlzIG1ldGhvZCB0b29cbiAgLy8gY3V0ZXN5LCBidXQgdGhleSBhcmUgY3VybXVkZ2VvbnMuXG4gIHJ1bnRpbWUuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gbmV3IEF3YWl0QXJndW1lbnQoYXJnKTtcbiAgfTtcblxuICBmdW5jdGlvbiBBd2FpdEFyZ3VtZW50KGFyZykge1xuICAgIHRoaXMuYXJnID0gYXJnO1xuICB9XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IpIHtcbiAgICAvLyBUaGlzIGludm9rZSBmdW5jdGlvbiBpcyB3cml0dGVuIGluIGEgc3R5bGUgdGhhdCBhc3N1bWVzIHNvbWVcbiAgICAvLyBjYWxsaW5nIGZ1bmN0aW9uIChvciBQcm9taXNlKSB3aWxsIGhhbmRsZSBleGNlcHRpb25zLlxuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgdmFyIHJlc3VsdCA9IGdlbmVyYXRvclttZXRob2RdKGFyZyk7XG4gICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBBd2FpdEFyZ3VtZW50XG4gICAgICAgID8gUHJvbWlzZS5yZXNvbHZlKHZhbHVlLmFyZykudGhlbihpbnZva2VOZXh0LCBpbnZva2VUaHJvdylcbiAgICAgICAgOiBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi4gSWYgdGhlIFByb21pc2UgaXMgcmVqZWN0ZWQsIGhvd2V2ZXIsIHRoZVxuICAgICAgICAgICAgLy8gcmVzdWx0IGZvciB0aGlzIGl0ZXJhdGlvbiB3aWxsIGJlIHJlamVjdGVkIHdpdGggdGhlIHNhbWVcbiAgICAgICAgICAgIC8vIHJlYXNvbi4gTm90ZSB0aGF0IHJlamVjdGlvbnMgb2YgeWllbGRlZCBQcm9taXNlcyBhcmUgbm90XG4gICAgICAgICAgICAvLyB0aHJvd24gYmFjayBpbnRvIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24sIGFzIGlzIHRoZSBjYXNlXG4gICAgICAgICAgICAvLyB3aGVuIGFuIGF3YWl0ZWQgUHJvbWlzZSBpcyByZWplY3RlZC4gVGhpcyBkaWZmZXJlbmNlIGluXG4gICAgICAgICAgICAvLyBiZWhhdmlvciBiZXR3ZWVuIHlpZWxkIGFuZCBhd2FpdCBpcyBpbXBvcnRhbnQsIGJlY2F1c2UgaXRcbiAgICAgICAgICAgIC8vIGFsbG93cyB0aGUgY29uc3VtZXIgdG8gZGVjaWRlIHdoYXQgdG8gZG8gd2l0aCB0aGUgeWllbGRlZFxuICAgICAgICAgICAgLy8gcmVqZWN0aW9uIChzd2FsbG93IGl0IGFuZCBjb250aW51ZSwgbWFudWFsbHkgLnRocm93IGl0IGJhY2tcbiAgICAgICAgICAgIC8vIGludG8gdGhlIGdlbmVyYXRvciwgYWJhbmRvbiBpdGVyYXRpb24sIHdoYXRldmVyKS4gV2l0aFxuICAgICAgICAgICAgLy8gYXdhaXQsIGJ5IGNvbnRyYXN0LCB0aGVyZSBpcyBubyBvcHBvcnR1bml0eSB0byBleGFtaW5lIHRoZVxuICAgICAgICAgICAgLy8gcmVqZWN0aW9uIHJlYXNvbiBvdXRzaWRlIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24sIHNvIHRoZVxuICAgICAgICAgICAgLy8gb25seSBvcHRpb24gaXMgdG8gdGhyb3cgaXQgZnJvbSB0aGUgYXdhaXQgZXhwcmVzc2lvbiwgYW5kXG4gICAgICAgICAgICAvLyBsZXQgdGhlIGdlbmVyYXRvciBmdW5jdGlvbiBoYW5kbGUgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBwcm9jZXNzID09PSBcIm9iamVjdFwiICYmIHByb2Nlc3MuZG9tYWluKSB7XG4gICAgICBpbnZva2UgPSBwcm9jZXNzLmRvbWFpbi5iaW5kKGludm9rZSk7XG4gICAgfVxuXG4gICAgdmFyIGludm9rZU5leHQgPSBpbnZva2UuYmluZChnZW5lcmF0b3IsIFwibmV4dFwiKTtcbiAgICB2YXIgaW52b2tlVGhyb3cgPSBpbnZva2UuYmluZChnZW5lcmF0b3IsIFwidGhyb3dcIik7XG4gICAgdmFyIGludm9rZVJldHVybiA9IGludm9rZS5iaW5kKGdlbmVyYXRvciwgXCJyZXR1cm5cIik7XG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gaW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICByZXNvbHZlKGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBydW50aW1lLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdClcbiAgICApO1xuXG4gICAgcmV0dXJuIHJ1bnRpbWUuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIGlmIChtZXRob2QgPT09IFwicmV0dXJuXCIgfHxcbiAgICAgICAgICAgICAgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiICYmIGRlbGVnYXRlLml0ZXJhdG9yW21ldGhvZF0gPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgIC8vIEEgcmV0dXJuIG9yIHRocm93ICh3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gdGhyb3dcbiAgICAgICAgICAgIC8vIG1ldGhvZCkgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICAgIHZhciByZXR1cm5NZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltcInJldHVyblwiXTtcbiAgICAgICAgICAgIGlmIChyZXR1cm5NZXRob2QpIHtcbiAgICAgICAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKHJldHVybk1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGFyZyk7XG4gICAgICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIHJldHVybiBtZXRob2QgdGhyZXcgYW4gZXhjZXB0aW9uLCBsZXQgdGhhdFxuICAgICAgICAgICAgICAgIC8vIGV4Y2VwdGlvbiBwcmV2YWlsIG92ZXIgdGhlIG9yaWdpbmFsIHJldHVybiBvciB0aHJvdy5cbiAgICAgICAgICAgICAgICBtZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgICAgICAgYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgICAgIC8vIENvbnRpbnVlIHdpdGggdGhlIG91dGVyIHJldHVybiwgbm93IHRoYXQgdGhlIGRlbGVnYXRlXG4gICAgICAgICAgICAgIC8vIGl0ZXJhdG9yIGhhcyBiZWVuIHRlcm1pbmF0ZWQuXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChcbiAgICAgICAgICAgIGRlbGVnYXRlLml0ZXJhdG9yW21ldGhvZF0sXG4gICAgICAgICAgICBkZWxlZ2F0ZS5pdGVyYXRvcixcbiAgICAgICAgICAgIGFyZ1xuICAgICAgICAgICk7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgICAgICAgIC8vIExpa2UgcmV0dXJuaW5nIGdlbmVyYXRvci50aHJvdyh1bmNhdWdodCksIGJ1dCB3aXRob3V0IHRoZVxuICAgICAgICAgICAgLy8gb3ZlcmhlYWQgb2YgYW4gZXh0cmEgZnVuY3Rpb24gY2FsbC5cbiAgICAgICAgICAgIG1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICAgIGFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBEZWxlZ2F0ZSBnZW5lcmF0b3IgcmFuIGFuZCBoYW5kbGVkIGl0cyBvd24gZXhjZXB0aW9ucyBzb1xuICAgICAgICAgIC8vIHJlZ2FyZGxlc3Mgb2Ygd2hhdCB0aGUgbWV0aG9kIHdhcywgd2UgY29udGludWUgYXMgaWYgaXQgaXNcbiAgICAgICAgICAvLyBcIm5leHRcIiB3aXRoIGFuIHVuZGVmaW5lZCBhcmcuXG4gICAgICAgICAgbWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuICAgICAgICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgICAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuICAgICAgICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuICAgICAgICAgICAgcmV0dXJuIGluZm87XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIGNvbnRleHQuX3NlbnQgPSBhcmc7XG5cbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkWWllbGQpIHtcbiAgICAgICAgICAgIGNvbnRleHQuc2VudCA9IGFyZztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29udGV4dC5zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihhcmcpKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICAgIG1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgICAgYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgdmFyIGluZm8gPSB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgaWYgKGNvbnRleHQuZGVsZWdhdGUgJiYgbWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgICAgICAgIGFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGluZm87XG4gICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIG1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBhcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgcnVudGltZS5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIHJ1bnRpbWUudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICB0aGlzLnNlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG4gICAgICAgIHJldHVybiAhIWNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG59KShcbiAgLy8gQW1vbmcgdGhlIHZhcmlvdXMgdHJpY2tzIGZvciBvYnRhaW5pbmcgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbFxuICAvLyBvYmplY3QsIHRoaXMgc2VlbXMgdG8gYmUgdGhlIG1vc3QgcmVsaWFibGUgdGVjaG5pcXVlIHRoYXQgZG9lcyBub3RcbiAgLy8gdXNlIGluZGlyZWN0IGV2YWwgKHdoaWNoIHZpb2xhdGVzIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5KS5cbiAgdHlwZW9mIGdsb2JhbCA9PT0gXCJvYmplY3RcIiA/IGdsb2JhbCA6XG4gIHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIgPyB3aW5kb3cgOlxuICB0eXBlb2Ygc2VsZiA9PT0gXCJvYmplY3RcIiA/IHNlbGYgOiB0aGlzXG4pO1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgdGhpcy5fZXZlbnRzID0gdGhpcy5fZXZlbnRzIHx8IHt9O1xuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkO1xufVxubW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueFxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG5FdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG4vLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3Ncbi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbihuKSB7XG4gIGlmICghaXNOdW1iZXIobikgfHwgbiA8IDAgfHwgaXNOYU4obikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCduIG11c3QgYmUgYSBwb3NpdGl2ZSBudW1iZXInKTtcbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbih0eXBlKSB7XG4gIHZhciBlciwgaGFuZGxlciwgbGVuLCBhcmdzLCBpLCBsaXN0ZW5lcnM7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMpXG4gICAgdGhpcy5fZXZlbnRzID0ge307XG5cbiAgLy8gSWYgdGhlcmUgaXMgbm8gJ2Vycm9yJyBldmVudCBsaXN0ZW5lciB0aGVuIHRocm93LlxuICBpZiAodHlwZSA9PT0gJ2Vycm9yJykge1xuICAgIGlmICghdGhpcy5fZXZlbnRzLmVycm9yIHx8XG4gICAgICAgIChpc09iamVjdCh0aGlzLl9ldmVudHMuZXJyb3IpICYmICF0aGlzLl9ldmVudHMuZXJyb3IubGVuZ3RoKSkge1xuICAgICAgZXIgPSBhcmd1bWVudHNbMV07XG4gICAgICBpZiAoZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEF0IGxlYXN0IGdpdmUgc29tZSBraW5kIG9mIGNvbnRleHQgdG8gdGhlIHVzZXJcbiAgICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcignVW5jYXVnaHQsIHVuc3BlY2lmaWVkIFwiZXJyb3JcIiBldmVudC4gKCcgKyBlciArICcpJyk7XG4gICAgICAgIGVyci5jb250ZXh0ID0gZXI7XG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBoYW5kbGVyID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gIGlmIChpc1VuZGVmaW5lZChoYW5kbGVyKSlcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKGlzRnVuY3Rpb24oaGFuZGxlcikpIHtcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIC8vIGZhc3QgY2FzZXNcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMsIGFyZ3VtZW50c1sxXSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOlxuICAgICAgICBoYW5kbGVyLmNhbGwodGhpcywgYXJndW1lbnRzWzFdLCBhcmd1bWVudHNbMl0pO1xuICAgICAgICBicmVhaztcbiAgICAgIC8vIHNsb3dlclxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgICAgIGhhbmRsZXIuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzT2JqZWN0KGhhbmRsZXIpKSB7XG4gICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgbGlzdGVuZXJzID0gaGFuZGxlci5zbGljZSgpO1xuICAgIGxlbiA9IGxpc3RlbmVycy5sZW5ndGg7XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKVxuICAgICAgbGlzdGVuZXJzW2ldLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgdmFyIG07XG5cbiAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzKVxuICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuXG4gIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09IFwibmV3TGlzdGVuZXJcIiEgQmVmb3JlXG4gIC8vIGFkZGluZyBpdCB0byB0aGUgbGlzdGVuZXJzLCBmaXJzdCBlbWl0IFwibmV3TGlzdGVuZXJcIi5cbiAgaWYgKHRoaXMuX2V2ZW50cy5uZXdMaXN0ZW5lcilcbiAgICB0aGlzLmVtaXQoJ25ld0xpc3RlbmVyJywgdHlwZSxcbiAgICAgICAgICAgICAgaXNGdW5jdGlvbihsaXN0ZW5lci5saXN0ZW5lcikgP1xuICAgICAgICAgICAgICBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcblxuICBpZiAoIXRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICAvLyBPcHRpbWl6ZSB0aGUgY2FzZSBvZiBvbmUgbGlzdGVuZXIuIERvbid0IG5lZWQgdGhlIGV4dHJhIGFycmF5IG9iamVjdC5cbiAgICB0aGlzLl9ldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgZWxzZSBpZiAoaXNPYmplY3QodGhpcy5fZXZlbnRzW3R5cGVdKSlcbiAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGdvdCBhbiBhcnJheSwganVzdCBhcHBlbmQuXG4gICAgdGhpcy5fZXZlbnRzW3R5cGVdLnB1c2gobGlzdGVuZXIpO1xuICBlbHNlXG4gICAgLy8gQWRkaW5nIHRoZSBzZWNvbmQgZWxlbWVudCwgbmVlZCB0byBjaGFuZ2UgdG8gYXJyYXkuXG4gICAgdGhpcy5fZXZlbnRzW3R5cGVdID0gW3RoaXMuX2V2ZW50c1t0eXBlXSwgbGlzdGVuZXJdO1xuXG4gIC8vIENoZWNrIGZvciBsaXN0ZW5lciBsZWFrXG4gIGlmIChpc09iamVjdCh0aGlzLl9ldmVudHNbdHlwZV0pICYmICF0aGlzLl9ldmVudHNbdHlwZV0ud2FybmVkKSB7XG4gICAgaWYgKCFpc1VuZGVmaW5lZCh0aGlzLl9tYXhMaXN0ZW5lcnMpKSB7XG4gICAgICBtID0gdGhpcy5fbWF4TGlzdGVuZXJzO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gICAgfVxuXG4gICAgaWYgKG0gJiYgbSA+IDAgJiYgdGhpcy5fZXZlbnRzW3R5cGVdLmxlbmd0aCA+IG0pIHtcbiAgICAgIHRoaXMuX2V2ZW50c1t0eXBlXS53YXJuZWQgPSB0cnVlO1xuICAgICAgY29uc29sZS5lcnJvcignKG5vZGUpIHdhcm5pbmc6IHBvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgJyArXG4gICAgICAgICAgICAgICAgICAgICdsZWFrIGRldGVjdGVkLiAlZCBsaXN0ZW5lcnMgYWRkZWQuICcgK1xuICAgICAgICAgICAgICAgICAgICAnVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gaW5jcmVhc2UgbGltaXQuJyxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRzW3R5cGVdLmxlbmd0aCk7XG4gICAgICBpZiAodHlwZW9mIGNvbnNvbGUudHJhY2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gbm90IHN1cHBvcnRlZCBpbiBJRSAxMFxuICAgICAgICBjb25zb2xlLnRyYWNlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gIHZhciBmaXJlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGcoKSB7XG4gICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBnKTtcblxuICAgIGlmICghZmlyZWQpIHtcbiAgICAgIGZpcmVkID0gdHJ1ZTtcbiAgICAgIGxpc3RlbmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG5cbiAgZy5saXN0ZW5lciA9IGxpc3RlbmVyO1xuICB0aGlzLm9uKHR5cGUsIGcpO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gZW1pdHMgYSAncmVtb3ZlTGlzdGVuZXInIGV2ZW50IGlmZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWRcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgbGlzdCwgcG9zaXRpb24sIGxlbmd0aCwgaTtcblxuICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKVxuICAgIHRocm93IFR5cGVFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMgfHwgIXRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICByZXR1cm4gdGhpcztcblxuICBsaXN0ID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuICBsZW5ndGggPSBsaXN0Lmxlbmd0aDtcbiAgcG9zaXRpb24gPSAtMTtcblxuICBpZiAobGlzdCA9PT0gbGlzdGVuZXIgfHxcbiAgICAgIChpc0Z1bmN0aW9uKGxpc3QubGlzdGVuZXIpICYmIGxpc3QubGlzdGVuZXIgPT09IGxpc3RlbmVyKSkge1xuICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgaWYgKHRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcilcbiAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBsaXN0ZW5lcik7XG5cbiAgfSBlbHNlIGlmIChpc09iamVjdChsaXN0KSkge1xuICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tID4gMDspIHtcbiAgICAgIGlmIChsaXN0W2ldID09PSBsaXN0ZW5lciB8fFxuICAgICAgICAgIChsaXN0W2ldLmxpc3RlbmVyICYmIGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSkge1xuICAgICAgICBwb3NpdGlvbiA9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwb3NpdGlvbiA8IDApXG4gICAgICByZXR1cm4gdGhpcztcblxuICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgbGlzdC5sZW5ndGggPSAwO1xuICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGlzdC5zcGxpY2UocG9zaXRpb24sIDEpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdGVuZXIpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgdmFyIGtleSwgbGlzdGVuZXJzO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXRcbiAgaWYgKCF0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMClcbiAgICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuICAgIGVsc2UgaWYgKHRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyBlbWl0IHJlbW92ZUxpc3RlbmVyIGZvciBhbGwgbGlzdGVuZXJzIG9uIGFsbCBldmVudHNcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICBmb3IgKGtleSBpbiB0aGlzLl9ldmVudHMpIHtcbiAgICAgIGlmIChrZXkgPT09ICdyZW1vdmVMaXN0ZW5lcicpIGNvbnRpbnVlO1xuICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTtcbiAgICB9XG4gICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3JlbW92ZUxpc3RlbmVyJyk7XG4gICAgdGhpcy5fZXZlbnRzID0ge307XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbdHlwZV07XG5cbiAgaWYgKGlzRnVuY3Rpb24obGlzdGVuZXJzKSkge1xuICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzKTtcbiAgfSBlbHNlIGlmIChsaXN0ZW5lcnMpIHtcbiAgICAvLyBMSUZPIG9yZGVyXG4gICAgd2hpbGUgKGxpc3RlbmVycy5sZW5ndGgpXG4gICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyc1tsaXN0ZW5lcnMubGVuZ3RoIC0gMV0pO1xuICB9XG4gIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgdmFyIHJldDtcbiAgaWYgKCF0aGlzLl9ldmVudHMgfHwgIXRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICByZXQgPSBbXTtcbiAgZWxzZSBpZiAoaXNGdW5jdGlvbih0aGlzLl9ldmVudHNbdHlwZV0pKVxuICAgIHJldCA9IFt0aGlzLl9ldmVudHNbdHlwZV1dO1xuICBlbHNlXG4gICAgcmV0ID0gdGhpcy5fZXZlbnRzW3R5cGVdLnNsaWNlKCk7XG4gIHJldHVybiByZXQ7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbih0eXBlKSB7XG4gIGlmICh0aGlzLl9ldmVudHMpIHtcbiAgICB2YXIgZXZsaXN0ZW5lciA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcblxuICAgIGlmIChpc0Z1bmN0aW9uKGV2bGlzdGVuZXIpKVxuICAgICAgcmV0dXJuIDE7XG4gICAgZWxzZSBpZiAoZXZsaXN0ZW5lcilcbiAgICAgIHJldHVybiBldmxpc3RlbmVyLmxlbmd0aDtcbiAgfVxuICByZXR1cm4gMDtcbn07XG5cbkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkge1xuICByZXR1cm4gZW1pdHRlci5saXN0ZW5lckNvdW50KHR5cGUpO1xufTtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG59XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xufVxuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xufVxuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsImltcG9ydCBjcmVhdGVGYWN0b3J5RnVuY3Rpb24gZnJvbSAnLi91dGlsaXRpZXMvY3JlYXRlLWZhY3RvcnktZnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgSHR0cEludGVyY2VwdG9ycyBmcm9tICcuL3NlcnZpY2VzL2h0dHAtaW50ZXJjZXB0b3JzLmpzJztcclxuaW1wb3J0IFZpZGVvRXZlbnROYW1lcyBmcm9tIFwiLi4vY29uc3RhbnRzL3ZpZGVvLmV2ZW50cy5qc1wiO1xyXG5pbXBvcnQgU3RhdGVFdmVudHMgZnJvbSBcIi4uL2NvbnN0YW50cy9zdGF0ZS5ldmVudHMuanNcIjtcclxuXHJcbmxldCBzdGF0ZUV2ZW50cyA9IG5ldyBTdGF0ZUV2ZW50cygpO1xyXG5cclxuY2xhc3MgQXBwQ29uZmlnIHtcclxuICAgIGNvbnN0cnVjdG9yKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIsICRsb2NhdGlvblByb3ZpZGVyLCAkY29tcGlsZVByb3ZpZGVyLCAkaHR0cFByb3ZpZGVyLCAkc2NlRGVsZWdhdGVQcm92aWRlciwgJHByb3ZpZGUsIGlWWGpzKSB7XHJcbiAgICAgICAgaWYgKCFpVlhqcy5jb25maWcpIHJldHVybjtcclxuXHJcbiAgICAgICAgdGhpcy5jcmVhdGVTdGF0ZXMoJHN0YXRlUHJvdmlkZXIsIGlWWGpzLmNvbmZpZy5zdGF0ZXMpO1xyXG5cclxuICAgICAgICBsZXQge2V4cGVyaWVuY2V9ID0gaVZYanM7XHJcbiAgICAgICAgbGV0IHt0ZW1wbGF0ZXMgPSBbXX0gPSBpVlhqcy5jb25maWc7XHJcbiAgICAgICAgbGV0IGRlZmF1bHRTdGF0ZUlEID0gaVZYanMucnVsZXMoaVZYanMuY29uZmlnLmRlZmF1bHRTdGF0ZSk7XHJcbiAgICAgICAgbGV0IHt1cmx9ID0gaVZYanMuY29uZmlnLnN0YXRlcy5maW5kKChzdGF0ZSkgPT4geyByZXR1cm4gc3RhdGUuaWQgPT09IGRlZmF1bHRTdGF0ZUlEIH0pO1xyXG5cclxuICAgICAgICBpZiAoZXhwZXJpZW5jZS53aGl0ZUxpc3QpIHtcclxuICAgICAgICAgICAgJHNjZURlbGVnYXRlUHJvdmlkZXIucmVzb3VyY2VVcmxXaGl0ZWxpc3QoZXhwZXJpZW5jZS53aGl0ZUxpc3QpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJHVybFJvdXRlclByb3ZpZGVyXHJcbiAgICAgICAgICAgIC5vdGhlcndpc2UoKCRpbmplY3RvciwgJGxvY2F0aW9uKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY3VycmVudFVybCA9ICRsb2NhdGlvbi51cmwoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIWN1cnJlbnRVcmwgfHwgY3VycmVudFVybC5sZW5ndGggPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1cmw7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaVZYanMuQnVzLmVtaXQoc3RhdGVFdmVudHMuTk9UX0ZPVU5ELCBjdXJyZW50VXJsKTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgcGFnZU5vdEZvdW5kU3RhdGVJZCA9IGlWWGpzLnJ1bGVzKGlWWGpzLmNvbmZpZy5wYWdlTm90Rm91bmRTdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgcGFnZU5vdEZvdW5kVXJsO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBwYWdlTm90Rm91bmRTdGF0ZSA9IGlWWGpzLmNvbmZpZy5zdGF0ZXMuZmluZCgoc3RhdGUpID0+IHsgcmV0dXJuIHN0YXRlLmlkID09PSBwYWdlTm90Rm91bmRTdGF0ZUlkIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChwYWdlTm90Rm91bmRTdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhZ2VOb3RGb3VuZFVybCA9IHBhZ2VOb3RGb3VuZFN0YXRlLnVybDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFnZU5vdEZvdW5kVXJsID8gcGFnZU5vdEZvdW5kVXJsIDogdXJsO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmNyZWF0ZSRodHRwSW5qZWN0b3JzKCRodHRwUHJvdmlkZXIsICRwcm92aWRlKTtcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGUkaHR0cEluamVjdG9ycygkaHR0cFByb3ZpZGVyLCAkcHJvdmlkZSkge1xyXG4gICAgICAgICRwcm92aWRlLmZhY3RvcnkoXCJpVlhqc0h0dHBJbnRlcmNlcHRvcnNcIiwgSHR0cEludGVyY2VwdG9ycyk7XHJcblxyXG4gICAgICAgICRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzLnB1c2goXCJpVlhqc0h0dHBJbnRlcmNlcHRvcnNcIik7XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlU3RhdGVzKCRzdGF0ZVByb3ZpZGVyLCBzdGF0ZXMgPSBbXSkge1xyXG4gICAgICAgIHN0YXRlcy5mb3JFYWNoKChzdGF0ZSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgbGV0IHt0eXBlLCBpZCwgdXJsLCBvbkVudGVyID0gW10sIG9uRXhpdCA9IFtdfSA9IHN0YXRlO1xyXG4gICAgICAgICAgICBsZXQgdmlkZW9FdmVudE5hbWVzID0gbmV3IFZpZGVvRXZlbnROYW1lcygpO1xyXG5cclxuICAgICAgICAgICAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoaWQsIHtcclxuICAgICAgICAgICAgICAgIHVybDogdXJsLFxyXG4gICAgICAgICAgICAgICAgZGF0YTogc3RhdGUsXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogYDxpdnhqcy0ke3R5cGV9LXN0YXRlIGNsYXNzPVwiaGlkZVwiPjwvaXZ4anMtJHt0eXBlfS1zdGF0ZT5gLFxyXG4gICAgICAgICAgICAgICAgb25FbnRlcjogWyckcm9vdFNjb3BlJywgJyRzdGF0ZScsICdpVlhqcycsICdpdnhqcy5hY3Rpb25zJywgJ2l2eGpzLmJ1cycsICdpdnhqcy5tb2R1bGVzLmF1ZGlvLmV4cGVyaWVuY2UnLCAnaXZ4anMubW9kdWxlcy5hdWRpbycsXHJcbiAgICAgICAgICAgICAgICAgICAgKCRyb290U2NvcGUsICRzdGF0ZSwgaVZYanMsIGlWWGpzQWN0aW9ucywgaVZYanNCdXMsIGlWWGpzQXVkaW9FeHBlcmllbmNlLCBpVlhqc0F1ZGlvKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaVZYanNBdWRpb0V4cGVyaWVuY2UuZXZlbnRzQWRkZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlWWGpzQXVkaW9FeHBlcmllbmNlLmFkZEV2ZW50TGlzdGVuZXJzKGlWWGpzQnVzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlWWGpzQXVkaW8uYWRkRXZlbnRMaXN0ZW5lcnMoaVZYanNCdXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaVZYanMuZXhwZXJpZW5jZS5CdXMgPSBpVlhqc0J1cztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlWWGpzQXVkaW9FeHBlcmllbmNlLmV2ZW50c0FkZGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlWWGpzQXVkaW8uZXZlbnRzQWRkZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaVZYanMuZXhwZXJpZW5jZS5hdWRpbyA9IGlWWGpzQXVkaW9FeHBlcmllbmNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaVZYanMuZXhwZXJpZW5jZS5hY3Rpb25zID0gaVZYanNBY3Rpb25zO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSUQgPSBpZDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlWWGpzQWN0aW9ucy5yZXNvbHZlQWN0aW9ucyhvbkVudGVyLCAoKSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgIG9uRXhpdDogWyckcm9vdFNjb3BlJywgJ2l2eGpzLmFjdGlvbnMnLCAnaVZYanMnLCAnaXZ4anMuYnVzJywgKCRyb290U2NvcGUsIGlWWGpzQWN0aW9ucywgaVZYanMsIGlWWGpzQnVzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaVZYanNCdXMuZW1pdCh2aWRlb0V2ZW50TmFtZXMuRElTUE9TRSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaVZYanNBY3Rpb25zLnJlc29sdmVBY3Rpb25zKG9uRXhpdCwgKCkgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1dXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5BcHBDb25maWcuJGluamVjdCA9IFsnJHN0YXRlUHJvdmlkZXInLCAnJHVybFJvdXRlclByb3ZpZGVyJywgJyRsb2NhdGlvblByb3ZpZGVyJywgJyRjb21waWxlUHJvdmlkZXInLCAnJGh0dHBQcm92aWRlcicsICckc2NlRGVsZWdhdGVQcm92aWRlcicsICckcHJvdmlkZScsICdpVlhqcyddO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlRmFjdG9yeUZ1bmN0aW9uKEFwcENvbmZpZyk7IiwiLy9VdGlsaXRpZXNcclxuaW1wb3J0IGlWWFBhZ2VTZXRVcCBmcm9tICcuL3V0aWxpdGllcy9jb250YWluZXItc2V0dXAuanMnO1xyXG5pbXBvcnQgeyBTdHJpbmdQYXJzZXJzIH0gZnJvbSAnLi9maWx0ZXJzL3N0cmluZy1wYXJzZXJzLmpzJztcclxuaW1wb3J0IHsgT2JqZWN0UGFyc2VycyB9IGZyb20gJy4uL3V0aWxpdGllcy90eXBlLXBhcnNlcnMuanMnO1xyXG5pbXBvcnQgQW5ndWxhckV2ZW50TmFtZXMgZnJvbSAnLi4vY29uc3RhbnRzL2FuZ3VsYXIuZXZlbnRzLmpzJztcclxuaW1wb3J0IGlWWGpzQ29uZmlnRXZlbnROYW1lcyBmcm9tICcuLi9jb25zdGFudHMvaVZYanMuY29uZmlnLmV2ZW50cy5qcyc7XHJcbmltcG9ydCBpVlhqc0NvbnN0YW50cyBmcm9tIFwiLi4vY29uc3RhbnRzL3JlZ2lzdGVyZWQtY29uc3RhbnRzLmpzXCI7XHJcbmltcG9ydCB7IGlWWGpzIH0gZnJvbSAnLi4vY29yZS9hcHAuanMnO1xyXG5pbXBvcnQgRXZlbnRTdG9yZSBmcm9tICcuLi9jb3JlL2V2ZW50LXN0b3JlLmpzJztcclxuXHJcbmxldCBzdHJpbmdQYXJzZXIgPSBuZXcgU3RyaW5nUGFyc2VycygpO1xyXG5sZXQgb2JqZWN0UGFyc2VycyA9IG5ldyBPYmplY3RQYXJzZXJzKCk7XHJcbmxldCBhbmd1bGFyRXZlbnROYW1lcyA9IG5ldyBBbmd1bGFyRXZlbnROYW1lcygpO1xyXG5sZXQgaVZYanNDb25maWdFdmVudHMgPSBuZXcgaVZYanNDb25maWdFdmVudE5hbWVzKCk7XHJcbmxldCBteUlWWGpzID0gbmV3IGlWWGpzKCk7XHJcblxyXG4vL1Byb3ZpZGVyc1xyXG5pbXBvcnQgaVZYanNTZXR1cCBmcm9tICcuL3Byb3ZpZGVycy9pdnhqcy5zZXR1cC5qcyc7XHJcblxyXG4vLyBEaXJlY3RpdmVzXHJcblxyXG4vLyBTdGF0ZXNcclxuaW1wb3J0IElucHV0U3RhdGUgZnJvbSAnLi9kaXJlY3RpdmVzL3N0YXRlLmlucHV0LmpzJztcclxuaW1wb3J0IFZpZGVvU3RhdGUgZnJvbSAnLi9kaXJlY3RpdmVzL3N0YXRlLnZpZGVvLmpzJztcclxuaW1wb3J0IEhUTUxTdGF0ZSBmcm9tICcuL2RpcmVjdGl2ZXMvc3RhdGUuaHRtbC5qcyc7XHJcbmltcG9ydCBOYXZpZ2F0aW9uU3RhdGUgZnJvbSAnLi9kaXJlY3RpdmVzL3N0YXRlLm5hdmlnYXRpb24uanMnO1xyXG5cclxuLy8gSW5wdXRzXHJcbmltcG9ydCBGb3JtSW5wdXQgZnJvbSAnLi9kaXJlY3RpdmVzL2lucHV0LmZvcm0uanMnO1xyXG5pbXBvcnQgVGV4dElucHV0IGZyb20gJy4vZGlyZWN0aXZlcy9pbnB1dC50ZXh0LmpzJztcclxuaW1wb3J0IEFuY2hvcnMgZnJvbSAnLi9kaXJlY3RpdmVzL3VpLmFuY2hvci5qcyc7XHJcbmltcG9ydCBDYXNjYWRpbmdPcHRpb25zIGZyb20gJy4vZGlyZWN0aXZlcy91aS5jYXNjYWRpbmctb3B0aW9ucy5qcyc7XHJcblxyXG5pbXBvcnQgQnV0dG9uc0lucHV0IGZyb20gJy4vZGlyZWN0aXZlcy9pbnB1dC5idXR0b25zLmpzJztcclxuaW1wb3J0IEVtYWlsSW5wdXQgZnJvbSAnLi9kaXJlY3RpdmVzL2lucHV0LmVtYWlsLmpzJztcclxuaW1wb3J0IFVybElucHV0IGZyb20gJy4vZGlyZWN0aXZlcy9pbnB1dC51cmwuanMnO1xyXG5pbXBvcnQgRGF0ZUlucHV0IGZyb20gJy4vZGlyZWN0aXZlcy9pbnB1dC5kYXRlLmpzJztcclxuaW1wb3J0IERhdGVUaW1lTG9jYWxJbnB1dCBmcm9tICcuL2RpcmVjdGl2ZXMvaW5wdXQuZGF0ZXRpbWUtbG9jYWwuanMnO1xyXG5pbXBvcnQgT3B0aW9uc0lucHV0IGZyb20gJy4vZGlyZWN0aXZlcy9pbnB1dC5vcHRpb25zLmpzJztcclxuaW1wb3J0IFJhZGlvSW5wdXQgZnJvbSAnLi9kaXJlY3RpdmVzL2lucHV0LnJhZGlvLmpzJztcclxuaW1wb3J0IENoZWNrYm94SW5wdXQgZnJvbSAnLi9kaXJlY3RpdmVzL2lucHV0LmNoZWNrYm94LmpzJztcclxuaW1wb3J0IE51bWJlcklucHV0IGZyb20gJy4vZGlyZWN0aXZlcy9pbnB1dC5udW1iZXIuanMnO1xyXG5pbXBvcnQgVGV4dGFyZWFJbnB1dCBmcm9tICcuL2RpcmVjdGl2ZXMvaW5wdXQudGV4dGFyZWEuanMnO1xyXG5cclxuLy8gVmlkZW8gUGxheWVyc1xyXG5pbXBvcnQgWW91dHViZVBsYXllciBmcm9tICcuL2RpcmVjdGl2ZXMvdmlkZW8ueW91dHViZS5qcyc7XHJcbmltcG9ydCBIVE1MNVBsYXllciBmcm9tICcuL2RpcmVjdGl2ZXMvdmlkZW8uaHRtbDUuanMnO1xyXG5pbXBvcnQgVmltZW9QbGF5ZXIgZnJvbSAnLi9kaXJlY3RpdmVzL3ZpZGVvLnZpbWVvLmpzJztcclxuXHJcbi8vIFZpZGVvIENvbnRyb2xzXHJcblxyXG5pbXBvcnQgU3RhbmRhcmRWaWRlb0NvbnRyb2xzIGZyb20gJy4vZGlyZWN0aXZlcy92aWRlby5jb250cm9scy5zdGFuZGFyZC5qcyc7XHJcblxyXG4vL1NlcnZpY2VzXHJcbmltcG9ydCBBY3Rpb25zIGZyb20gJy4vc2VydmljZXMvYWN0aW9ucy5qcyc7XHJcbmltcG9ydCB7IEJ1c1NlcnZpY2UgYXMgQnVzIH0gZnJvbSAnLi9zZXJ2aWNlcy9idXMuanMnO1xyXG5pbXBvcnQgQ3JlYXRlSW5saW5lVmlkZW8gZnJvbSAnLi9zZXJ2aWNlcy9pb3MtaW5saW5lLXZpZGVvLmpzJztcclxuaW1wb3J0IFB1bGxJblRlbXBsYXRlIGZyb20gJy4vc2VydmljZXMvdGVtcGxhdGUtcmVuZGVyZXIuanMnO1xyXG5cclxuLy9UZW1wbGF0ZSBEaXJlY3RpdmVzIFxyXG5pbXBvcnQgU2V0RGF0YSBmcm9tICcuL2RpcmVjdGl2ZXMvdGVtcGxhdGUuc2V0LWRhdGEuanMnO1xyXG5pbXBvcnQgQW5pbWF0ZUVsZW1lbnQgZnJvbSAnLi9kaXJlY3RpdmVzL3RlbXBsYXRlLmFuaW1hdGUtZWxlbWVudC5qcyc7XHJcbmltcG9ydCBHb1RvU3RhdGUgZnJvbSAnLi9kaXJlY3RpdmVzL3RlbXBsYXRlLmdvLXRvLXN0YXRlLmpzJztcclxuaW1wb3J0IFJhaXNlaVZYanNFdmVudCBmcm9tICcuL2RpcmVjdGl2ZXMvdGVtcGxhdGUucmFpc2UtaXZ4anMtZXZlbnQuanMnO1xyXG5cclxuXHJcbi8vIENvbmZpZ1xyXG5pbXBvcnQgQXBwQ29uZmlnIGZyb20gJy4vYXBwLmNvbmZpZy5qcyc7XHJcblxyXG4vLyBSdW5cclxuaW1wb3J0IEFwcFJ1biBmcm9tICcuL2FwcC5ydW4uanMnO1xyXG5cclxubGV0IHsgaVZYanNHbG9iYWxDb25maWdzID0ge30gfSA9IHdpbmRvdztcclxubGV0IHsgbW9kdWxlcyA9IFtdIH0gPSBpVlhqc0dsb2JhbENvbmZpZ3M7XHJcbmxldCBkZXBzID0gW10uY29uY2F0KFtcclxuICAgICd1aS5yb3V0ZXInLFxyXG4gICAgJ25nU2FuaXRpemUnLFxyXG5dLCBtb2R1bGVzKTtcclxuXHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2l2eC1qcycsIGRlcHMpXHJcbiAgICAvL1Byb3ZpZGVyc1xyXG4gICAgLnByb3ZpZGVyKCdpVlhqc1NldHVwJywgaVZYanNTZXR1cClcclxuXHJcbiAgICAvLyBDb25zdGFudHNcclxuICAgIC5jb25zdGFudCgnaVZYanMnLCBteUlWWGpzKVxyXG4gICAgLmNvbnN0YW50KCdpdnhqcy5jb25zdGFudHMnLCBuZXcgaVZYanNDb25zdGFudHMoKSlcclxuICAgIC8vLmNvbnN0YW50KCdZVCcsIFlUKVxyXG5cclxuICAgIC8vIElucHV0c1xyXG4gICAgLmRpcmVjdGl2ZSgnaXZ4anNGb3JtSW5wdXQnLCBGb3JtSW5wdXQpXHJcbiAgICAuZGlyZWN0aXZlKCdpdnhqc1RleHRJbnB1dCcsIFRleHRJbnB1dClcclxuICAgIC5kaXJlY3RpdmUoJ2l2eGpzUmFkaW9JbnB1dCcsIFJhZGlvSW5wdXQpXHJcbiAgICAuZGlyZWN0aXZlKCdpdnhqc0J1dHRvbnNJbnB1dCcsIEJ1dHRvbnNJbnB1dClcclxuICAgIC5kaXJlY3RpdmUoJ2l2eGpzQW5jaG9yJywgQW5jaG9ycylcclxuICAgIC5kaXJlY3RpdmUoJ2l2eGpzQ2FzY2FkaW5nT3B0aW9uc0lucHV0JywgQ2FzY2FkaW5nT3B0aW9ucylcclxuICAgIC5kaXJlY3RpdmUoJ2l2eGpzT3B0aW9uc0lucHV0JywgT3B0aW9uc0lucHV0KVxyXG4gICAgLmRpcmVjdGl2ZSgnaXZ4anNFbWFpbElucHV0JywgRW1haWxJbnB1dClcclxuICAgIC5kaXJlY3RpdmUoJ2l2eGpzVXJsSW5wdXQnLCBVcmxJbnB1dClcclxuICAgIC5kaXJlY3RpdmUoJ2l2eGpzRGF0ZUlucHV0JywgRGF0ZUlucHV0KVxyXG4gICAgLmRpcmVjdGl2ZSgnaXZ4anNEYXRldGltZUxvY2FsSW5wdXQnLCBEYXRlVGltZUxvY2FsSW5wdXQpXHJcbiAgICAuZGlyZWN0aXZlKCdpdnhqc0NoZWNrYm94SW5wdXQnLCBDaGVja2JveElucHV0KVxyXG4gICAgLmRpcmVjdGl2ZSgnaXZ4anNOdW1iZXJJbnB1dCcsIE51bWJlcklucHV0KVxyXG4gICAgLmRpcmVjdGl2ZSgnaXZ4anNUZXh0YXJlYUlucHV0JywgVGV4dGFyZWFJbnB1dClcclxuXHJcbiAgICAvLyBJbnB1dCBTdGF0ZVxyXG4gICAgLmRpcmVjdGl2ZSgnaXZ4anNJbnB1dFN0YXRlJywgSW5wdXRTdGF0ZSlcclxuXHJcbiAgICAvLyBIVE1MIFN0YXRlXHJcbiAgICAuZGlyZWN0aXZlKCdpdnhqc0h0bWxTdGF0ZScsIEhUTUxTdGF0ZSlcclxuXHJcbiAgICAvLyBOYXZpZ2F0aW9uIFN0YXRlXHJcbiAgICAuZGlyZWN0aXZlKCdpdnhqc05hdmlnYXRpb25TdGF0ZScsIE5hdmlnYXRpb25TdGF0ZSlcclxuXHJcbiAgICAvLyBWaWRlbyBQbGF5ZXJzICAgIFxyXG4gICAgLmRpcmVjdGl2ZSgnaXZ4anNZb3V0dWJlVmlkZW9QbGF5ZXInLCBZb3V0dWJlUGxheWVyKVxyXG4gICAgLmRpcmVjdGl2ZSgnaXZ4anNIdG1sNVZpZGVvUGxheWVyJywgSFRNTDVQbGF5ZXIpXHJcbiAgICAuZGlyZWN0aXZlKCdpdnhqc1ZpbWVvVmlkZW9QbGF5ZXInLCBWaW1lb1BsYXllcilcclxuICAgIC5kaXJlY3RpdmUoJ2l2eGpzU3RhbmRhcmRWaWRlb0NvbnRyb2xzJywgU3RhbmRhcmRWaWRlb0NvbnRyb2xzKVxyXG5cclxuICAgIC8vIFZpZGVvIFN0YXRlXHJcbiAgICAuZGlyZWN0aXZlKCdpdnhqc1ZpZGVvU3RhdGUnLCBWaWRlb1N0YXRlKVxyXG5cclxuICAgIC8vVGVtYXBsYXRlXHJcbiAgICAuZGlyZWN0aXZlKCdpdnhTZXREYXRhJywgU2V0RGF0YSlcclxuICAgIC5kaXJlY3RpdmUoJ2l2eEFuaW1hdGUnLCBBbmltYXRlRWxlbWVudClcclxuICAgIC5kaXJlY3RpdmUoJ2l2eEdvVG9TdGF0ZScsIEdvVG9TdGF0ZSlcclxuICAgIC5kaXJlY3RpdmUoJ2l2eEV2ZW50JywgUmFpc2VpVlhqc0V2ZW50KVxyXG5cclxuICAgIC8vU2VydmljZXNcclxuICAgIC5zZXJ2aWNlKCdpdnhqcy5hY3Rpb25zJywgQWN0aW9ucylcclxuICAgIC5zZXJ2aWNlKCdjcmVhdGVJbmxpbmVWaWRlbycsIENyZWF0ZUlubGluZVZpZGVvKVxyXG4gICAgLnNlcnZpY2UoJ2l2eGpzLmJ1cycsIEJ1cylcclxuICAgIC5zZXJ2aWNlKCdwdWxsSW5UZW1wbGF0ZScsIFB1bGxJblRlbXBsYXRlKVxyXG5cclxuICAgIC8vQ29udHJvbGxlcnNcclxuXHJcbiAgICAvL0ZpbHRlcnMgXHJcbiAgICAuZmlsdGVyKCdzdHJpbmdQYXJzZXJzJywgWyckcm9vdFNjb3BlJyxcclxuICAgICAgICAoJHJvb3RTY29wZSkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gKG5hbWUsIHRleHQpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzdHJpbmdQYXJzZXJbbmFtZV0odGV4dCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XSlcclxuXHJcbiAgICAvL0NvbmZpZ1xyXG4gICAgLmNvbmZpZyhBcHBDb25maWcpXHJcblxyXG4gICAgLy9SdW5cclxuICAgIC5ydW4oQXBwUnVuKTtcclxuXHJcbi8vIEJvb3RzdHJhcCBBcHBcclxubXlJVlhqcy5CdXMub24oaVZYanNDb25maWdFdmVudHMuVkFMSURBVEVELCAoaVZYanMpID0+IHtcclxuICAgIGxldCBzdGF0ZUF1ZGlvID0gbmV3IGlWWGpzLmF1ZGlvKCdib2R5JywgJ3N0YXRlLWF1ZGlvJyk7XHJcbiAgICBsZXQgZXhwZXJpZW5jZUF1ZGlvID0gbmV3IGlWWGpzLmF1ZGlvKCdib2R5JywgJ2V4cGVyaWVuY2UtYXVkaW8nKTtcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnaXZ4LWpzJylcclxuICAgICAgICAuY29uc3RhbnQoJ2l2eGpzLm1vZHVsZXMudmlkZW8nLCBpVlhqcy52aWRlbylcclxuICAgICAgICAuY29uc3RhbnQoJ2l2eGpzLm1vZHVsZXMudWknLCBpVlhqcy51aSlcclxuICAgICAgICAuY29uc3RhbnQoJ2l2eGpzLmxvZycsIGlWWGpzLmxvZylcclxuICAgICAgICAuY29uc3RhbnQoJ2l2eGpzLm1vZHVsZXMuYXVkaW8nLCBzdGF0ZUF1ZGlvKVxyXG4gICAgICAgIC5jb25zdGFudCgnaXZ4anMubW9kdWxlcy5hdWRpby5leHBlcmllbmNlJywgZXhwZXJpZW5jZUF1ZGlvKVxyXG4gICAgICAgIC5jXHJcblxyXG4gICAgb2JqZWN0UGFyc2Vycy5tYXBLZXlzKGlWWGpzLnVpLmFuZ3VsYXIsICh2YWx1ZSwga2V5KSA9PiB7XHJcbiAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2l2eC1qcycpLmRpcmVjdGl2ZShrZXksIHZhbHVlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGlmIChpVlhqcy5leHBlcmllbmNlLmFkZEV2ZW50TGlzdGVuZXJzKSB7XHJcbiAgICAgICAgaVZYanMuZXhwZXJpZW5jZS5hZGRFdmVudExpc3RlbmVycyhpVlhqcy5CdXMsIGlWWGpzLmV4cGVyaWVuY2UpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICB2YXIgcGFnZVNldHVwID0gbmV3IGlWWFBhZ2VTZXRVcChpVlhqcy5jb25maWcuc2VsZWN0b3IsIGlWWGpzLmNvbmZpZy50ZW1wbGF0ZSk7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2l2eC1qcycpXHJcbiAgICAgICAgLmNvbnN0YW50KCdFeHBlcmllbmNlQ29udGFpbmVyJywgcGFnZVNldHVwLnNlbGVjdG9yKTtcclxuXHJcbiAgICBhbmd1bGFyLmJvb3RzdHJhcChpVlhqcy5jb25maWcuYm9vdHN0cmFwU2VsZWN0b3IgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGlWWGpzLmNvbmZpZy5ib290c3RyYXBTZWxlY3RvcikgOiBkb2N1bWVudCwgWydpdngtanMnXSk7XHJcbiAgICBpVlhqcy5CdXMuZW1pdChhbmd1bGFyRXZlbnROYW1lcy5CT09UU1RSQVBQRUQpO1xyXG59KTsiLCJpbXBvcnQgY3JlYXRlRmFjdG9yeUZ1bmN0aW9uIGZyb20gJy4vdXRpbGl0aWVzL2NyZWF0ZS1mYWN0b3J5LWZ1bmN0aW9uLmpzJztcclxuaW1wb3J0IEF1ZGlvRXZlbnROYW1lcyBmcm9tICcuLi9jb25zdGFudHMvYXVkaW8uZXZlbnRzLmpzJztcclxuaW1wb3J0IFN0YXRlRXZlbnROYW1lcyBmcm9tICcuLi9jb25zdGFudHMvc3RhdGUuZXZlbnRzLmpzJztcclxuaW1wb3J0IEFuZ3VsYXJFdmVudE5hbWVzIGZyb20gJy4uL2NvbnN0YW50cy9hbmd1bGFyLmV2ZW50cy5qcyc7XHJcblxyXG5jbGFzcyBBcHBSdW4ge1xyXG4gICAgY29uc3RydWN0b3IoJHJvb3RTY29wZSwgJHN0YXRlLCAkd2luZG93LCAkdHJhbnNpdGlvbnMsICRodHRwLCBpVlhqcywgaVZYanNCdXMsIGlWWGpzQWN0aW9ucywgaVZYanNDb25zdGFudHMpIHtcclxuICAgICAgICBpZiAoIWlWWGpzIHx8ICFpVlhqcy5jb25maWcpIHJldHVybjtcclxuXHJcbiAgICAgICAgbGV0IHttZXRhZGF0YSA9IHt9LCB0ZW1wbGF0ZXN9ID0gaVZYanMuY29uZmlnO1xyXG4gICAgICAgIGxldCB7dGl0bGUgPSAnaVZYIFN0b3J5IFBsYXllcicsIGRlc2NyaXB0aW9uLCBpbWFnZX0gPSBtZXRhZGF0YTtcclxuICAgICAgICBsZXQgYXVkaW9FdmVudE5hbWVzID0gbmV3IEF1ZGlvRXZlbnROYW1lcygpO1xyXG4gICAgICAgIGxldCBzdGF0ZUV2ZW50TmFtZXMgPSBuZXcgU3RhdGVFdmVudE5hbWVzKCk7XHJcbiAgICAgICAgbGV0IGFuZ3VsYXJFdmVudE5hbWVzID0gbmV3IEFuZ3VsYXJFdmVudE5hbWVzKCk7XHJcblxyXG4gICAgICAgICRyb290U2NvcGUucGFnZVRpdGxlID0gdGl0bGU7XHJcbiAgICAgICAgJHJvb3RTY29wZS5vZ0ltYWdlID0gaW1hZ2U7XHJcbiAgICAgICAgJHJvb3RTY29wZS5vZ0Rlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XHJcblxyXG4gICAgIFxyXG4gICAgICAgIGlWWGpzLmV4cGVyaWVuY2UuRXZlbnRTdG9yZS5ydW4oKTtcclxuICAgICAgICBcclxuICAgICAgICBpVlhqcy5CdXMub24oc3RhdGVFdmVudE5hbWVzLkdPLCAoc3RhdGUpID0+IHtcclxuICAgICAgICAgICAgbGV0IGV2YWxTdGF0ZSA9IHN0YXRlO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc3RhdGUpKSB7XHJcbiAgICAgICAgICAgICAgICBldmFsU3RhdGUgPSBzdGF0ZVswXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgJHN0YXRlLmdvKGV2YWxTdGF0ZS5zdGF0ZUlkKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJHJvb3RTY29wZS4kb24oXCIkaW5jbHVkZUNvbnRlbnRFcnJvclwiLCBmdW5jdGlvbiAoZXZlbnQsIGFyZ3MpIHtcclxuICAgICAgICAgICAgaVZYanMuQnVzLmVtaXQoYW5ndWxhckV2ZW50TmFtZXMuVEVNUExBVEVfTk9UX0ZPVU5ELCBldmVudCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICR0cmFuc2l0aW9ucy5vblN1Y2Nlc3MoeyB0bzogJyonIH0sIFsnJHN0YXRlJywgJ2l2eGpzLm1vZHVsZXMuYXVkaW8nLCAoJHN0YXRlLCBpVlhqc0F1ZGlvKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCB7IGRhdGEgfSA9ICRzdGF0ZS5jdXJyZW50O1xyXG4gICAgICAgICAgICBpVlhqcy5CdXMuZW1pdChzdGF0ZUV2ZW50TmFtZXMuQ0hBTkdFLCAkc3RhdGUuY3VycmVudCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAoZGF0YS5hdWRpbyAmJiBkYXRhLmF1ZGlvLnNyYykge1xyXG4gICAgICAgICAgICAgICAgZGF0YS5hdWRpby5pZCA9ICdzdGF0ZS1hdWRpbyc7XHJcblxyXG4gICAgICAgICAgICAgICAgaVZYanNCdXMuZW1pdChhdWRpb0V2ZW50TmFtZXMuU0VUX1VQLCBkYXRhLmF1ZGlvKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlWWGpzQXVkaW8ucGF1c2UoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCRzdGF0ZS5jdXJyZW50LmRhdGEucmVzdHJpY3RlZCkge1xyXG4gICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGxldCBuYXZpZ2F0ZUJhY2tTdGF0ZSA9IGlWWGpzLmV4cGVyaWVuY2UuY29uZmlnLnBhZ2VOb3RGb3VuZFN0YXRlID8gaVZYanMuZXhwZXJpZW5jZS5jb25maWcucGFnZU5vdEZvdW5kU3RhdGUgOiBpVlhqcy5leHBlcmllbmNlLmNvbmZpZy5kZWZhdWx0U3RhdGU7XHJcbiAgICAgICAgICAgICAgICBsZXQgcmVzdHJpY3RSZWRpcmVjdCA9IGlWWGpzLmV4cGVyaWVuY2UucnVsZXMobmF2aWdhdGVCYWNrU3RhdGUpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChpVlhqcy5leHBlcmllbmNlLmlzUmVzdHJpY3RlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlWWGpzLmV4cGVyaWVuY2UuaXNSZXN0cmljdGVkKCkudGhlbigocmVzdHJpY3RlZCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdHJpY3RlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKHJlc3RyaWN0UmVkaXJlY3QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XSk7XHJcblxyXG4gICAgICAgIGlWWGpzQnVzLm9uKGF1ZGlvRXZlbnROYW1lcy5FTkRFRCwgKGN1cnJlbnRBdWRpbykgPT4ge1xyXG4gICAgICAgICAgICBpZiAoY3VycmVudEF1ZGlvLmlkID09PSAnc3RhdGUtYXVkaW8nKSB7XHJcbiAgICAgICAgICAgICAgICBpVlhqc0FjdGlvbnMucmVzb2x2ZUFjdGlvbnMoY3VycmVudEF1ZGlvLm9uRW5kLCAoKSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpVlhqc0J1cy5vbihzdGF0ZUV2ZW50TmFtZXMuUkVRVUVTVF9TVEFURSwgKCkgPT57XHJcbiAgICAgICAgICAgIGxldCBjdXJyZW50U3RhdGUgPSAkc3RhdGUuY3VycmVudDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKCFjdXJyZW50U3RhdGUuZGF0YSl7XHJcbiAgICAgICAgICAgICAgICBsZXQgZGVmYXVsdFN0YXRlUnVsZXMgPSBpVlhqcy5leHBlcmllbmNlLmNvbmZpZy5kZWZhdWx0U3RhdGU7XHJcbiAgICAgICAgICAgICAgICBsZXQgZGVmYXVsdFN0YXRlSWQgPSBpVlhqcy5leHBlcmllbmNlLnJ1bGVzKGRlZmF1bHRTdGF0ZVJ1bGVzKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50U3RhdGUuZGF0YSA9IGlWWGpzLmNvbmZpZy5zdGF0ZXMuZmluZCgoc3RhdGUpPT57XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0YXRlLmlkID09PSBkZWZhdWx0U3RhdGVJZDtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9IFxyXG5cclxuICAgICAgICAgICAgaVZYanNCdXMuZW1pdChzdGF0ZUV2ZW50TmFtZXMuR0VUX1NUQVRFLCBjdXJyZW50U3RhdGUpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpVlhqc0J1cy5vbihhdWRpb0V2ZW50TmFtZXMuVElNRV9VUERBVEUsIChjdXJyZW50QXVkaW8pID0+IHtcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRBdWRpby5pZCA9PT0gJ3N0YXRlLWF1ZGlvJykge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudEF1ZGlvLnJ1bkN1ZVBvaW50cyhpVlhqcy5leHBlcmllbmNlLnByb2Nlc3Nvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cclxuQXBwUnVuLiRpbmplY3QgPSBbJyRyb290U2NvcGUnLCAnJHN0YXRlJywgJyR3aW5kb3cnLCAnJHRyYW5zaXRpb25zJywgJyRodHRwJywgJ2lWWGpzJywgJ2l2eGpzLmJ1cycsICdpdnhqcy5hY3Rpb25zJywgJ2l2eGpzLmNvbnN0YW50cyddO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlRmFjdG9yeUZ1bmN0aW9uKEFwcFJ1bik7IiwiaW1wb3J0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbiBmcm9tICcuLi91dGlsaXRpZXMvY3JlYXRlLWZhY3RvcnktZnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgeyBJbnB1dENvbnRyb2xsZXJIZWxwZXIgfSBmcm9tICcuLi91dGlsaXRpZXMvaW5wdXQtY29udHJvbGxlci5qcyc7XHJcblxyXG5jbGFzcyBCdXR0b25zSW5wdXRDb250cm9sbGVyIGV4dGVuZHMgSW5wdXRDb250cm9sbGVySGVscGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKCRzY29wZSwgaVZYanMsIGlWWGpzQWN0aW9ucykge1xyXG4gICAgICAgIHN1cGVyKCRzY29wZSwgaVZYanMsIGlWWGpzQWN0aW9ucyk7XHJcblxyXG4gICAgICAgIGxldCB7aW5wdXREYXRhOiBpbnB1dH0gPSAkc2NvcGU7XHJcbiAgICAgICAgbGV0IHskcGFyZW50fSA9ICRzY29wZTtcclxuICAgICAgICBsZXQge2lucHV0cywgZm9ybUlucHV0LCB2bTogcGFyZW50Q29udHJvbGxlcn0gPSAkcGFyZW50O1xyXG5cclxuICAgICAgICB0aGlzLm9uQ2xpY2sgPSAoJGV2ZW50LCBidXR0b24pID0+IHtcclxuICAgICAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KClcclxuXHJcbiAgICAgICAgICAgIGxldCB7IG9uQ2xpY2sgPSBbXX0gPSBidXR0b247XHJcblxyXG4gICAgICAgICAgICBvbkNsaWNrLnVuc2hpZnQoeyBldmVudE5hbWU6IFwic2V0RGF0YVwiLCBhcmdzOiB7IGtleTogaW5wdXQubmFtZSwgdmFsdWU6IGJ1dHRvbi52YWx1ZSB9IH0pO1xyXG5cclxuICAgICAgICAgICAgaVZYanNBY3Rpb25zLnJlc29sdmVBY3Rpb25zKG9uQ2xpY2ssICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICgkcGFyZW50LmhpZGVTdWJtaXQpIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXJlbnRDb250cm9sbGVyLm9uU3VibWl0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgJHBhcmVudC5oaWRlU3VibWl0ID0gaW5wdXRzLmxlbmd0aCA8PSAxO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuQnV0dG9uc0lucHV0Q29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnaVZYanMnLCAnaXZ4anMuYWN0aW9ucyddO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlRmFjdG9yeUZ1bmN0aW9uKEJ1dHRvbnNJbnB1dENvbnRyb2xsZXIpOyIsImltcG9ydCBjcmVhdGVGYWN0b3J5RnVuY3Rpb24gZnJvbSAnLi4vdXRpbGl0aWVzL2NyZWF0ZS1mYWN0b3J5LWZ1bmN0aW9uLmpzJztcclxuaW1wb3J0IHsgSW5wdXRDb250cm9sbGVySGVscGVyIH0gZnJvbSAnLi4vdXRpbGl0aWVzL2lucHV0LWNvbnRyb2xsZXIuanMnO1xyXG5cclxuY2xhc3MgQ2hlY2tib3hJbnB1dENvbnRyb2xsZXIgZXh0ZW5kcyBJbnB1dENvbnRyb2xsZXJIZWxwZXIgIHtcclxuXHRjb25zdHJ1Y3Rvcigkc2NvcGUsIGlWWGpzLCBpVlhqc0FjdGlvbnMpIHtcclxuICAgICAgICBzdXBlcigkc2NvcGUsIGlWWGpzLCBpVlhqc0FjdGlvbnMpOyAgXHJcblx0fVxyXG59XHJcblxyXG5DaGVja2JveElucHV0Q29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnaVZYanMnLCAnaXZ4anMuYWN0aW9ucyddO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlRmFjdG9yeUZ1bmN0aW9uKENoZWNrYm94SW5wdXRDb250cm9sbGVyKSIsImltcG9ydCBjcmVhdGVGYWN0b3J5RnVuY3Rpb24gZnJvbSAnLi4vdXRpbGl0aWVzL2NyZWF0ZS1mYWN0b3J5LWZ1bmN0aW9uLmpzJztcclxuaW1wb3J0IHsgSW5wdXRDb250cm9sbGVySGVscGVyIH0gZnJvbSAnLi4vdXRpbGl0aWVzL2lucHV0LWNvbnRyb2xsZXIuanMnO1xyXG5cclxuY2xhc3MgRGF0ZVRpbWVMb2NhbENvbnRyb2xsZXIgZXh0ZW5kcyBJbnB1dENvbnRyb2xsZXJIZWxwZXIge1xyXG4gICAgY29uc3RydWN0b3IoJHNjb3BlLCBpVlhqcywgaVZYanNBY3Rpb25zKSB7XHJcbiAgICAgICAgc3VwZXIoJHNjb3BlLCBpVlhqcywgaVZYanNBY3Rpb25zKTtcclxuICAgIH1cclxufVxyXG5cclxuRGF0ZVRpbWVMb2NhbENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJ2lWWGpzJywgJ2l2eGpzLmFjdGlvbnMnXTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbihEYXRlVGltZUxvY2FsQ29udHJvbGxlcik7IiwiaW1wb3J0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbiBmcm9tICcuLi91dGlsaXRpZXMvY3JlYXRlLWZhY3RvcnktZnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgeyBJbnB1dENvbnRyb2xsZXJIZWxwZXIgfSBmcm9tICcuLi91dGlsaXRpZXMvaW5wdXQtY29udHJvbGxlci5qcyc7XHJcblxyXG5jbGFzcyBEYXRlQ29udHJvbGxlciBleHRlbmRzIElucHV0Q29udHJvbGxlckhlbHBlciB7XHJcblx0Y29uc3RydWN0b3IoJHNjb3BlLCBpVlhqcywgaVZYanNBY3Rpb25zKSB7XHJcblx0XHRzdXBlcigkc2NvcGUsIGlWWGpzLCBpVlhqc0FjdGlvbnMpO1xyXG5cdH1cclxufVxyXG5cclxuRGF0ZUNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJ2lWWGpzJywgJ2l2eGpzLmFjdGlvbnMnXTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbihEYXRlQ29udHJvbGxlcik7IiwiaW1wb3J0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbiBmcm9tICcuLi91dGlsaXRpZXMvY3JlYXRlLWZhY3RvcnktZnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgeyBJbnB1dENvbnRyb2xsZXJIZWxwZXIgfSBmcm9tICcuLi91dGlsaXRpZXMvaW5wdXQtY29udHJvbGxlci5qcyc7XHJcblxyXG5jbGFzcyBFbWFpbElucHV0Q29udHJvbGxlciBleHRlbmRzIElucHV0Q29udHJvbGxlckhlbHBlciB7XHJcblx0Y29uc3RydWN0b3IoJHNjb3BlLCBpVlhqcywgaVZYanNBY3Rpb25zKSB7XHJcblx0XHRzdXBlcigkc2NvcGUsIGlWWGpzLCBpVlhqc0FjdGlvbnMpO1xyXG5cdH1cclxufVxyXG5cclxuRW1haWxJbnB1dENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJ2lWWGpzJywgJ2l2eGpzLmFjdGlvbnMnXTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbihFbWFpbElucHV0Q29udHJvbGxlcik7IiwiaW1wb3J0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbiBmcm9tICcuLi91dGlsaXRpZXMvY3JlYXRlLWZhY3RvcnktZnVuY3Rpb24uanMnO1xyXG5cclxuY2xhc3MgRm9ybUlucHV0Q29udHJvbGxlciB7XHJcbiAgICBjb25zdHJ1Y3Rvcigkc2NvcGUsICRmaWx0ZXIpIHtcclxuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgIHRoaXMuZm9ybUNvbnRyb2xsZXIgPSB7fTtcclxuICAgICAgICB0aGlzLm9uU3VibWl0ID0gKCRldmVudCkgPT4ge1xyXG4gICAgICAgICAgICBsZXQge2Zvcm1JbnB1dH0gPSAkc2NvcGU7XHJcblxyXG4gICAgICAgICAgICAkc2NvcGUub25TdWJtaXQoZm9ybUlucHV0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbkZvcm1JbnB1dENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRmaWx0ZXInXTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbihGb3JtSW5wdXRDb250cm9sbGVyKTsiLCJpbXBvcnQgY3JlYXRlRmFjdG9yeUZ1bmN0aW9uIGZyb20gJy4uL3V0aWxpdGllcy9jcmVhdGUtZmFjdG9yeS1mdW5jdGlvbi5qcyc7XHJcbmltcG9ydCB7IElucHV0Q29udHJvbGxlckhlbHBlciB9IGZyb20gJy4uL3V0aWxpdGllcy9pbnB1dC1jb250cm9sbGVyLmpzJztcclxuXHJcbmNsYXNzIE51bWJlcklucHV0Q29udHJvbGxlciBleHRlbmRzIElucHV0Q29udHJvbGxlckhlbHBlciAge1xyXG5cdGNvbnN0cnVjdG9yKCRzY29wZSwgaVZYanMsIGlWWGpzQWN0aW9ucykge1xyXG4gICAgICAgIHN1cGVyKCRzY29wZSwgaVZYanMsIGlWWGpzQWN0aW9ucyk7XHJcblx0fVxyXG59XHJcblxyXG5OdW1iZXJJbnB1dENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJ2lWWGpzJywgJ2l2eGpzLmFjdGlvbnMnXTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbihOdW1iZXJJbnB1dENvbnRyb2xsZXIpOyIsImltcG9ydCBjcmVhdGVGYWN0b3J5RnVuY3Rpb24gZnJvbSAnLi4vdXRpbGl0aWVzL2NyZWF0ZS1mYWN0b3J5LWZ1bmN0aW9uLmpzJztcclxuaW1wb3J0IHsgSW5wdXRDb250cm9sbGVySGVscGVyIH0gZnJvbSAnLi4vdXRpbGl0aWVzL2lucHV0LWNvbnRyb2xsZXIuanMnO1xyXG5cclxuY2xhc3MgT3B0aW9uc0lucHV0Q29udHJvbGxlciBleHRlbmRzIElucHV0Q29udHJvbGxlckhlbHBlciB7XHJcbiAgICBjb25zdHJ1Y3Rvcigkc2NvcGUsICR0aW1lb3V0LCBpVlhqcywgaVZYanNBY3Rpb25zKSB7XHJcbiAgICAgICAgc3VwZXIoJHNjb3BlLCBpVlhqcywgaVZYanNBY3Rpb25zKTtcclxuXHJcbiAgICAgICAgbGV0IHtkZWZhdWx0VmFsdWUsIG9wdGlvbnMsIG5hbWUsIGF0dHJpYnV0ZXMgPSB7fX0gPSAkc2NvcGUuaW5wdXREYXRhO1xyXG4gICAgICAgIGxldCBleHBlcmllbmNlVmFsdWUgPSBpVlhqcy5leHBlcmllbmNlLmRhdGFbbmFtZV07XHJcblxyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWQgPSB7XHJcbiAgICAgICAgICAgIHZhbHVlOiBleHBlcmllbmNlVmFsdWUgPyBleHBlcmllbmNlVmFsdWUgOiAnJ1xyXG4gICAgICAgIH07XHJcbiAgICAgICBcclxuICAgICAgICAkdGltZW91dCgoKSA9PntcclxuICAgICAgICAgICAgIGlmKGF0dHJpYnV0ZXMucmVxdWlyZWQpe1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLiRwYXJlbnQuZm9ybUlucHV0W25hbWVdLiRzZXRWYWxpZGl0eSgncmVxdWlyZWQnLCBleHBlcmllbmNlVmFsdWUgJiYgZXhwZXJpZW5jZVZhbHVlLmxlbmd0aCA+IDApO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLiRwYXJlbnQuZm9ybUlucHV0W25hbWVdLiRlcnJvci5yZXF1aXJlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgMSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbk9wdGlvbnNJbnB1dENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyR0aW1lb3V0JywgJ2lWWGpzJywgJ2l2eGpzLmFjdGlvbnMnXTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbihPcHRpb25zSW5wdXRDb250cm9sbGVyKSIsImltcG9ydCBjcmVhdGVGYWN0b3J5RnVuY3Rpb24gZnJvbSAnLi4vdXRpbGl0aWVzL2NyZWF0ZS1mYWN0b3J5LWZ1bmN0aW9uLmpzJztcclxuaW1wb3J0IHsgSW5wdXRDb250cm9sbGVySGVscGVyIH0gZnJvbSAnLi4vdXRpbGl0aWVzL2lucHV0LWNvbnRyb2xsZXIuanMnO1xyXG5cclxuY2xhc3MgUmFkaW9JbnB1dENvbnRyb2xsZXIgZXh0ZW5kcyBJbnB1dENvbnRyb2xsZXJIZWxwZXIge1xyXG4gICAgY29uc3RydWN0b3IoJHNjb3BlLCBpVlhqcywgaVZYanNBY3Rpb25zKSB7XHJcbiAgICAgICAgc3VwZXIoJHNjb3BlLCBpVlhqcywgaVZYanNBY3Rpb25zKTtcclxuXHJcbiAgICAgICAgbGV0IHsgbmFtZX0gPSAkc2NvcGUuaW5wdXREYXRhO1xyXG5cclxuICAgICAgICAkc2NvcGUucmFkaW9TZWxlY3RlZCA9IGlWWGpzLmV4cGVyaWVuY2UuZGF0YVtuYW1lXTtcclxuICAgIH1cclxufVxyXG5cclxuUmFkaW9JbnB1dENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJ2lWWGpzJywgJ2l2eGpzLmFjdGlvbnMnXTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbihSYWRpb0lucHV0Q29udHJvbGxlcikiLCJpbXBvcnQgY3JlYXRlRmFjdG9yeUZ1bmN0aW9uIGZyb20gJy4uL3V0aWxpdGllcy9jcmVhdGUtZmFjdG9yeS1mdW5jdGlvbi5qcyc7XHJcbmltcG9ydCB7IElucHV0Q29udHJvbGxlckhlbHBlciB9IGZyb20gJy4uL3V0aWxpdGllcy9pbnB1dC1jb250cm9sbGVyLmpzJztcclxuXHJcbmNsYXNzIFRleHRJbnB1dENvbnRyb2xsZXIgZXh0ZW5kcyBJbnB1dENvbnRyb2xsZXJIZWxwZXIgIHtcclxuXHRjb25zdHJ1Y3Rvcigkc2NvcGUsIGlWWGpzLCBpVlhqc0FjdGlvbnMpIHtcclxuICAgICAgICBzdXBlcigkc2NvcGUsIGlWWGpzLCBpVlhqc0FjdGlvbnMpOyAgICAgXHJcblx0fVxyXG59XHJcblxyXG5UZXh0SW5wdXRDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICdpVlhqcycsICdpdnhqcy5hY3Rpb25zJ107XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVGYWN0b3J5RnVuY3Rpb24oVGV4dElucHV0Q29udHJvbGxlcikiLCJpbXBvcnQgY3JlYXRlRmFjdG9yeUZ1bmN0aW9uIGZyb20gJy4uL3V0aWxpdGllcy9jcmVhdGUtZmFjdG9yeS1mdW5jdGlvbi5qcyc7XHJcbmltcG9ydCB7IElucHV0Q29udHJvbGxlckhlbHBlciB9IGZyb20gJy4uL3V0aWxpdGllcy9pbnB1dC1jb250cm9sbGVyLmpzJztcclxuXHJcbmNsYXNzIFRleHRBcmVhSW5wdXRDb250cm9sbGVyIGV4dGVuZHMgSW5wdXRDb250cm9sbGVySGVscGVyICB7XHJcblx0Y29uc3RydWN0b3IoJHNjb3BlLCBpVlhqcywgaVZYanNBY3Rpb25zKSB7XHJcbiAgICAgICAgc3VwZXIoJHNjb3BlLCBpVlhqcywgaVZYanNBY3Rpb25zKTtcclxuXHR9XHJcbn1cclxuXHJcblRleHRBcmVhSW5wdXRDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICdpVlhqcycsICdpdnhqcy5hY3Rpb25zJ107XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVGYWN0b3J5RnVuY3Rpb24oVGV4dEFyZWFJbnB1dENvbnRyb2xsZXIpIiwiaW1wb3J0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbiBmcm9tICcuLi91dGlsaXRpZXMvY3JlYXRlLWZhY3RvcnktZnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgeyBJbnB1dENvbnRyb2xsZXJIZWxwZXIgfSBmcm9tICcuLi91dGlsaXRpZXMvaW5wdXQtY29udHJvbGxlci5qcyc7XHJcblxyXG5jbGFzcyBVUkxJbnB1dENvbnRyb2xsZXIgZXh0ZW5kcyBJbnB1dENvbnRyb2xsZXJIZWxwZXIgIHtcclxuXHRjb25zdHJ1Y3Rvcigkc2NvcGUsIGlWWGpzLCBpVlhqc0FjdGlvbnMpIHtcclxuICAgICAgICBzdXBlcigkc2NvcGUsIGlWWGpzLCBpVlhqc0FjdGlvbnMpOyAgXHJcblx0fVxyXG59XHJcblxyXG5VUkxJbnB1dENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJ2lWWGpzJywgJ2l2eGpzLmFjdGlvbnMnXTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbihVUkxJbnB1dENvbnRyb2xsZXIpIiwiaW1wb3J0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbiBmcm9tICcuLi91dGlsaXRpZXMvY3JlYXRlLWZhY3RvcnktZnVuY3Rpb24uanMnO1xyXG5cclxuY2xhc3MgSHRtbFN0YXRlQ29udHJvbGxlcnsgICAgXHJcbiAgICBjb25zdHJ1Y3Rvcigkc3RhdGUsICRzY29wZSwgJHJvb3RTY29wZSwgaVZYanNBY3Rpb25zLCBpVlhqc0J1cykge1xyXG4gICAgICAgIGxldCB7aWQsIHRpbWVvdXRJbk1zLCBvblRpbWVvdXQgPSBbXSwgbmV4dCA9IFtdfSA9ICRzdGF0ZS5jdXJyZW50LmRhdGE7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xyXG4gICAgICAgIHRoaXMuaVZYanNBY3Rpb25zID0gaVZYanNBY3Rpb25zO1xyXG4gICAgICAgIHRoaXMuaVZYanNCdXMgPSBpVlhqc0J1cztcclxuICAgICAgICBcclxuICAgICAgICBpZiAodHlwZW9mIHRpbWVvdXRJbk1zICE9IFwidW5kZWZpbmVkXCIgJiYgdGltZW91dEluTXMgPiAwKSB7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBpVlhqc0FjdGlvbnMucmVzb2x2ZVRoZW5OYXZpZ2F0ZShvblRpbWVvdXQsIG5leHQpO1xyXG4gICAgICAgICAgICB9LCB0aW1lb3V0SW5Ncyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwZXJmb3JtRXZlbnRzKGV2ZW50cykge1xyXG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgICAgICBcclxuICAgICAgICBzZWxmLmlWWGpzQWN0aW9ucy5yZXNvbHZlQWN0aW9ucyhldmVudHMsICgpID0+IHtcclxuICAgICAgICAgICAgZXZlbnRzLmZvckVhY2goKGV2ZW50LCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5pVlhqc0J1cy5lbWl0KGV2ZW50LmV2ZW50TmFtZSwgZXZlbnQuYXJncylcclxuICAgICAgICAgICAgfSkgXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxufVxyXG5cclxuSHRtbFN0YXRlQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc3RhdGUnLCAnJHNjb3BlJywgJyRyb290U2NvcGUnLCAnaXZ4anMuYWN0aW9ucycsICdpdnhqcy5idXMnXTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbihIdG1sU3RhdGVDb250cm9sbGVyKTsiLCJpbXBvcnQgY3JlYXRlRmFjdG9yeUZ1bmN0aW9uIGZyb20gJy4uL3V0aWxpdGllcy9jcmVhdGUtZmFjdG9yeS1mdW5jdGlvbi5qcyc7XHJcbmltcG9ydCBTdGF0ZURhdGEgZnJvbSAnLi4vdXRpbGl0aWVzL3N0YXRlLWRhdGEuanMnO1xyXG5pbXBvcnQgQXVkaW9FdmVudE5hbWVzIGZyb20gXCIuLi8uLi9jb25zdGFudHMvYXVkaW8uZXZlbnRzLmpzXCI7XHJcblxyXG5cclxuY2xhc3MgSW5wdXRTdGF0ZUNvbnRyb2xsZXIge1xyXG4gICAgY29uc3RydWN0b3IoJHN0YXRlLCAkc2NvcGUsICRyb290U2NvcGUsICR0aW1lb3V0LCBpVlhqc0FjdGlvbnMsIGlWWGpzQnVzLCBpVlhqc1VJTW9kdWxlKSB7XHJcbiAgICAgICAgbGV0IHRoaXNTdGF0ZURhdGFDbGFzcyA9IG5ldyBTdGF0ZURhdGEoJHN0YXRlKTtcclxuICAgICAgICBsZXQge2lucHV0cywgaWQsIGhlYWRlckhUTUwsIGZvb3RlckhUTUwsIG5hbWUsIG5leHQgPSBbXSwgb25TdWJtaXQgPSBbXSwgb25JbnB1dFJlYWR5ID0gW10sIGF1ZGlvfSA9IHRoaXNTdGF0ZURhdGFDbGFzcy5zdGF0ZURhdGE7XHJcbiAgICAgICAgbGV0IGF1ZGlvRXZlbnROYW1lcyA9IG5ldyBBdWRpb0V2ZW50TmFtZXMoKTtcclxuXHJcbiAgICAgICAgdGhpcy5pbnB1dHMgPSBpbnB1dHM7XHJcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xyXG4gICAgICAgIHRoaXMuc3RhdGVJRCA9IGlkO1xyXG4gICAgICAgIHRoaXMub25TdWJtaXQgPSAoZm9ybUlucHV0KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChmb3JtSW5wdXQgJiYgZm9ybUlucHV0LiR2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgaVZYanNBY3Rpb25zLnJlc29sdmVUaGVuTmF2aWdhdGUob25TdWJtaXQsIG5leHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJHRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoaVZYanNVSU1vZHVsZS5pbml0aWFsaXplSW5wdXQpIHtcclxuICAgICAgICAgICAgICAgIGlWWGpzVUlNb2R1bGUuaW5pdGlhbGl6ZUlucHV0KCk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBsZXQgaGFzVHJhbnNpdGlvbiA9IG9uSW5wdXRSZWFkeS5maW5kKChldmVudCwgaW5kZXgpID0+e1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50LmV2ZW50TmFtZSA9PT0gXCJhbmltYXRlRWxlbWVudFwiICYmIGV2ZW50LmFyZ3MuZWxlbWVudCA9PT0gXCIuaW5wdXQtc3RhdGUtY29udGFpbmVyXCI7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgaWYoIWhhc1RyYW5zaXRpb24pe1xyXG4gICAgICAgICAgICAgICAgb25JbnB1dFJlYWR5LnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50TmFtZSA6IFwiYW5pbWF0ZUVsZW1lbnRcIixcclxuICAgICAgICAgICAgICAgICAgICBhcmdzIDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50IDogXCIuaW5wdXQtc3RhdGUtY29udGFpbmVyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbkNsYXNzZXMgOiBcInNob3dcIlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlWWGpzQWN0aW9ucy5yZXNvbHZlQWN0aW9ucyhvbklucHV0UmVhZHksICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChhdWRpbyAmJiBhdWRpby5zcmMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpVlhqc0J1cy5lbWl0KGF1ZGlvRXZlbnROYW1lcy5QTEFZKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9LCAxKTtcclxuICAgIH1cclxufVxyXG5cclxuSW5wdXRTdGF0ZUNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHN0YXRlJywgJyRzY29wZScsICckcm9vdFNjb3BlJywgJyR0aW1lb3V0JywgJ2l2eGpzLmFjdGlvbnMnLCAnaXZ4anMuYnVzJywgJ2l2eGpzLm1vZHVsZXMudWknXTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbihJbnB1dFN0YXRlQ29udHJvbGxlcik7IiwiaW1wb3J0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbiBmcm9tICcuLi91dGlsaXRpZXMvY3JlYXRlLWZhY3RvcnktZnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgVmlkZW9FdmVudENvbnN0YW50cyBmcm9tIFwiLi4vLi4vY29uc3RhbnRzL3ZpZGVvLmV2ZW50cy5qc1wiO1xyXG5cclxuZnVuY3Rpb24gc2V0VXBDdWVQb2ludHMoY3VlUG9pbnRzKSB7XHJcbiAgICBsZXQgY3VlUG9pbnRzVGVtcCA9IHNvcnRDdWVQb2ludHMoY3VlUG9pbnRzKTtcclxuXHJcbiAgICBjdWVQb2ludHNUZW1wID0gY3VlUG9pbnRzVGVtcC5tYXAoKGN1ZVBvaW50LCBpbmRleCkgPT4ge1xyXG4gICAgICAgIGN1ZVBvaW50LmZpcmVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHJldHVybiBjdWVQb2ludDtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBjdWVQb2ludHNUZW1wO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzb3J0Q3VlUG9pbnRzKGN1ZVBvaW50cykge1xyXG4gICAgcmV0dXJuIGN1ZVBvaW50cy5zb3J0KChjdWVQb2ludEEsIGN1ZVBvaW50QikgPT4ge1xyXG4gICAgICAgIGlmIChjdWVQb2ludEEudGltZUF0ID4gY3VlUG9pbnRCLnRpbWVBdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjdWVQb2ludEEudGltZUF0IDwgY3VlUG9pbnRCLnRpbWVBdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH0pO1xyXG59XHJcblxyXG5jbGFzcyBWaWRlb1N0YXRlQ29udHJvbGxlciB7XHJcbiAgICBjb25zdHJ1Y3Rvcigkcm9vdFNjb3BlLCAkc3RhdGUsIGlWWGpzQWN0aW9ucywgaVZYanNCdXMsIGlWWGpzLCBFdmVudFN0b3JlLCBFeHBlcmllbmNlQ29udGFpbmVyKSB7XHJcbiAgICAgICAgbGV0IHsgcGxheWVyU2V0dGluZ3MsIG9uVmlkZW9FbmQgPSBbXSwgb25WaWRlb1JlYWR5ID0gW10sIG5leHQsIGN1ZVBvaW50cyA9IFtdIH0gPSAkc3RhdGUuY3VycmVudC5kYXRhO1xyXG4gICAgICAgIGxldCB7IGF1dG9wbGF5ID0gZmFsc2UgfSA9IHBsYXllclNldHRpbmdzO1xyXG4gICAgICAgIGxldCB2aWRlb0V2ZW50TmFtZXMgPSBuZXcgVmlkZW9FdmVudENvbnN0YW50cygpO1xyXG5cclxuICAgICAgICBjdWVQb2ludHMgPSBzZXRVcEN1ZVBvaW50cyhjdWVQb2ludHMpO1xyXG5cclxuICAgICAgICB0aGlzLmlucHV0Q29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoRXhwZXJpZW5jZUNvbnRhaW5lci5pZCk7XHJcblxyXG4gICAgICAgIHRoaXMuaW5wdXRDb250YWluZXIuc3R5bGUub3BhY2l0eSA9IDA7XHJcbiAgICAgICAgdGhpcy5pbnB1dENvbnRhaW5lci5zdHlsZS5wb2ludGVyRXZlbnRzID0gJ25vbmUnO1xyXG4gICAgIFxyXG5cclxuICAgICAgICBpVlhqc0J1cy5vbmNlKHZpZGVvRXZlbnROYW1lcy5DQU5fUExBWSwgZnVuY3Rpb24gc3RhdGVWaWRlb0NhblBsYXkocGxheWVyKSB7XHJcbiAgICAgICAgICAgIC8vIGxldCB0cmFuc2l0aW9uQW5pbWF0aW9uID0gb25WaWRlb1JlYWR5LmZpbmQoKGV2ZW50LCBpbmRleCkgPT57XHJcbiAgICAgICAgICAgIC8vICAgICByZXR1cm4gZXZlbnQuZXZlbnROYW1lID09PSBcImFuaW1hdGVFbGVtZW50XCIgJiYgZXZlbnQuYXJncy5lbGVtZW50ID09PSBcIi52aWRlby1zdGF0ZS1jb250YWluZXJcIjtcclxuICAgICAgICAgICAgLy8gfSk7XHJcblxyXG4gICAgICAgICAgICAvLyBpZighdHJhbnNpdGlvbkFuaW1hdGlvbil7XHJcbiAgICAgICAgICAgIC8vICAgICBvblZpZGVvUmVhZHkucHVzaCh7XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgZXZlbnROYW1lIDogXCJhbmltYXRlRWxlbWVudFwiLFxyXG4gICAgICAgICAgICAvLyAgICAgICAgIGFyZ3MgOiB7XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgIGVsZW1lbnQgOiBcIi52aWRlby1zdGF0ZS1jb250YWluZXJcIixcclxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgYW5pbWF0aW9uQ2xhc3NlcyA6IFwic2hvd1wiXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyAgICAgfSlcclxuICAgICAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICAgICAgaVZYanNBY3Rpb25zLnJlc29sdmVBY3Rpb25zKG9uVmlkZW9SZWFkeSwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGF1dG9wbGF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaVZYanNCdXMuZW1pdCh2aWRlb0V2ZW50TmFtZXMuUExBWSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaVZYanNCdXMuZW1pdCh2aWRlb0V2ZW50TmFtZXMuQUREX1BMQVlJTkdfQ0xBU1MpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcblxyXG5cclxuICAgICAgICAgICAgc2VsZi5wbGF5ZXIgPSBwbGF5ZXI7XHJcbiAgICAgICAgICAgIEV2ZW50U3RvcmUucmVnaXN0ZXIodXBkYXRlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpVlhqc0J1cy5vbmNlKHZpZGVvRXZlbnROYW1lcy5FTkRFRCwgZnVuY3Rpb24gc3RhdGVWaWRlb0VuZGVkKCkge1xyXG4gICAgICAgICAgICBpVlhqc0J1cy5lbWl0KHZpZGVvRXZlbnROYW1lcy5ESVNQT1NFKTtcclxuICAgICAgICAgICAgaVZYanNBY3Rpb25zLnJlc29sdmVUaGVuTmF2aWdhdGUob25WaWRlb0VuZCwgbmV4dCk7XHJcbiAgICAgICAgICAgIEV2ZW50U3RvcmUucmVtb3ZlKHVwZGF0ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaVZYanNCdXMub24odmlkZW9FdmVudE5hbWVzLlRJTUVfVVBEQVRFLCBmdW5jdGlvbiBjdWVQb2ludHNPblVwZGF0ZShwbGF5ZXIsIHN0YXRlRGF0YSkge1xyXG4gICAgICAgICAgICBsZXQgeyBjdXJyZW50VGltZSB9ID0gcGxheWVyO1xyXG5cclxuXHJcblxyXG4gICAgICAgICBcclxuICAgICAgICAgICAgLy8gaWYgKGN1ZVBvaW50cy5sZW5ndGggPD0gMCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgLy8gY3VlUG9pbnRzLmZvckVhY2goKGN1ZVBvaW50LCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAvLyAgICAgbGV0IHsgdGltZUF0LCBmaXJlZCA9IGZhbHNlLCBhbHdheXMgPSBmYWxzZSB9ID0gY3VlUG9pbnQ7XHJcbiAgICAgICAgICAgIC8vICAgICBsZXQgdGltZVVudGlsID0gTWF0aC5hYnMoY3VlUG9pbnQudGltZUF0IC0gY3VycmVudFRpbWUpO1xyXG5cclxuICAgICAgICAgICAgLy8gICAgIGlmICh0aW1lQXQgPD0gY3VycmVudFRpbWUgJiYgKGFsd2F5cyB8fCAhZmlyZWQpKSB7XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgY3VlUG9pbnQuZmlyZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAvLyAgICAgICAgIGlWWGpzQnVzLmVtaXQoY3VlUG9pbnQuZXZlbnROYW1lKTtcclxuICAgICAgICAgICAgLy8gICAgICAgICBpVlhqc0FjdGlvbnMucmVzb2x2ZUFjdGlvbnMoW2N1ZVBvaW50XSwgKCkgPT4ge1xyXG5cclxuICAgICAgICAgICAgLy8gICAgICAgICB9KTtcclxuICAgICAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAgICAgLy8gfSk7XHJcblxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB2YXIgYmFsbCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2JhbGwnKVswXTtcclxuICAgICAgICB2YXIgaCA9IDU3NTsgLy8geCB2ZXJ0ZXgsIGhhbGYgb2YgdG90YWwgYm91bmNlIGR1cmF0aW9uXHJcbiAgICAgICAgdmFyIGsgPSAxNjA7IC8vIHkgdmVydGV4LCB0b3RhbCBib3VuY2UgaGVpZ2h0XHJcbiAgICAgICAgdmFyIGEgPSAtNCAqIGsgLyBNYXRoLnBvdyhoICogMiwgMik7IC8vIGNvZWZmaWNpZW50OiAtLjAwMDQ4MzkzMlxyXG4gICAgICAgIHZhciB5cG9zLCBzdGFydCwgdGltZTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlKHRpbWVPYmopIHtcclxuICAgICAgICAgICAgbGV0IGN1cnJlbnRUaW1lID0gc2VsZi5wbGF5ZXIuZ2V0Q3VycmVudFRpbWUoKSAqIDEwMDA7XHJcbiAgICAgICAgICAgIHlwb3MgPSBhICogTWF0aC5wb3coKChjdXJyZW50VGltZSArIGgpICUgKGggKiAyKSAtIGgpLCAyKSArIGs7XHJcbiAgICAgICAgICAgIGJhbGwuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVkoJyArIC15cG9zICsgJ3B4KSc7XHJcblxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgfVxyXG59XHJcblxyXG5WaWRlb1N0YXRlQ29udHJvbGxlci4kaW5qZWN0ID0gWyckcm9vdFNjb3BlJywgJyRzdGF0ZScsICdpdnhqcy5hY3Rpb25zJywgJ2l2eGpzLmJ1cycsICdpVlhqcycsICdFdmVudFN0b3JlJywgJ0V4cGVyaWVuY2VDb250YWluZXInXTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbihWaWRlb1N0YXRlQ29udHJvbGxlcikiLCJpbXBvcnQgY3JlYXRlRmFjdG9yeUZ1bmN0aW9uIGZyb20gJy4uL3V0aWxpdGllcy9jcmVhdGUtZmFjdG9yeS1mdW5jdGlvbi5qcyc7XG5cbmNsYXNzIEFuY2hvckNvbnRyb2xsZXIge1xuXHRjb25zdHJ1Y3Rvcigkc2NvcGUsICR3aW5kb3csIGlWWGpzQWN0aW9ucywgaVZYanNBdWRpbykge1xuXHRcdHRoaXMuaVZYanNBY3Rpb25zID0gaVZYanNBY3Rpb25zO1xuXHRcdHRoaXMuJHdpbmRvdyA9ICR3aW5kb3c7XG5cdFx0dGhpcy5pVlhqc0F1ZGlvID0gaVZYanNBdWRpb1xuXHR9XG5cblx0b25MaW5rQ2xpY2soJGV2ZW50KSB7XG5cdFx0bGV0IHtvbkNsaWNrOiBvbkNsaWNrRXZlbnRzID0gW10sIGhyZWYsIGF0dHJpYnV0ZXMgPSB7fX0gPSB0aGlzLmFuY2hvckluZm87XG5cdFx0bGV0IHNlbGYgPSB0aGlzO1xuXHRcdGxldCBoYXNHb1RvTmV4dFN0YXRlID0gb25DbGlja0V2ZW50cy5maW5kKChjbGlja0V2ZW50LCBpbmRleCkgPT4ge1xuXHRcdFx0cmV0dXJuIGNsaWNrRXZlbnQuZXZlbnROYW1lID09PSAnZ29Ub05leHRTdGF0ZSc7XG5cdFx0fSk7XG5cblx0XHRpZiAoYXR0cmlidXRlcy50YXJnZXQgIT09ICdfYmxhbmsnKSB7XG5cdFx0XHQkZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cblx0XHR0aGlzLmlWWGpzQWN0aW9ucy5yZXNvbHZlQWN0aW9ucyhvbkNsaWNrRXZlbnRzLCAoKSA9PiB7XG5cdFx0XHRpZiAoaGFzR29Ub05leHRTdGF0ZSkgcmV0dXJuO1xuXG5cdFx0XHRpZiAoYXR0cmlidXRlcy50YXJnZXQgIT09ICdfYmxhbmsnKSB7XG5cdFx0XHRcdHNlbGYuJHdpbmRvdy5sb2NhdGlvbiA9IGhyZWY7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHR0aGlzLmlWWGpzQXVkaW8uYXVkaW9FbGVtZW50LnBsYXkoKTtcblx0fVxufVxuXG5BbmNob3JDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckd2luZG93JywgJ2l2eGpzLmFjdGlvbnMnLCAnaXZ4anMubW9kdWxlcy5hdWRpbyddO1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVGYWN0b3J5RnVuY3Rpb24oQW5jaG9yQ29udHJvbGxlcikiLCJpbXBvcnQgY3JlYXRlRmFjdG9yeUZ1bmN0aW9uIGZyb20gJy4uL3V0aWxpdGllcy9jcmVhdGUtZmFjdG9yeS1mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBJbnB1dENvbnRyb2xsZXJIZWxwZXIgfSBmcm9tICcuLi91dGlsaXRpZXMvaW5wdXQtY29udHJvbGxlci5qcyc7XG5cbmNsYXNzIENhc2NhZGluZ09wdGlvbnNJbnB1dENvbnRyb2xsZXIgZXh0ZW5kcyBJbnB1dENvbnRyb2xsZXJIZWxwZXIge1xuICAgIGNvbnN0cnVjdG9yKCRzY29wZSwgaVZYanMsIGlWWGpzQnVzLCBpVlhqc0FjdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoJHNjb3BlLCBpVlhqcywgaVZYanNBY3Rpb25zKTtcblxuICAgICAgICBsZXQgdm0gPSB0aGlzO1xuICAgICAgICBsZXQgeyBpbnB1dERhdGEgfSA9ICRzY29wZTtcbiAgICAgICAgbGV0IGN1cnJlbnRUcmVlID0gT2JqZWN0LmFzc2lnbih7fSwgaW5wdXREYXRhLmRhdGFUcmVlKTtcbiAgICAgICAgbGV0IHsgbmFtZSwgYXR0cmlidXRlcyA9IHt9IH0gPSBpbnB1dERhdGE7XG4gICAgICAgIGxldCB7IHJlcXVpcmVkOiBjYXNjYWRlUmVxdWlyZWQgPSBmYWxzZSB9ID0gYXR0cmlidXRlcztcbiAgICAgICAgbGV0IHsgZGF0YSB9ID0gaVZYanMuZXhwZXJpZW5jZTtcbiAgICAgICAgbGV0IHsgbGFiZWxzLCBpdGVtcywgaXNTdGF0aWMgfSA9IGN1cnJlbnRUcmVlO1xuXG4gICAgICAgIHZtLnZpZXdTZXR0aW5ncyA9IHtcbiAgICAgICAgICAgIGxhYmVsczogY3VycmVudFRyZWUubGFiZWxzLFxuICAgICAgICAgICAgb3B0aW9uczogW2N1cnJlbnRUcmVlLml0ZW1zXSxcbiAgICAgICAgICAgIGlzU3RhdGljXG4gICAgICAgIH07XG4gICAgICAgIHZtLmN1cnJlbnRTZWxlY3Rpb24gPSBbXTtcbiAgICAgICAgdm0uY3VycmVudFRyZWUgPSBjdXJyZW50VHJlZTtcbiAgICAgICAgdm0ubW9kZWxVcGRhdGUgPSAoc2VsZWN0ZWRJdGVtKSA9PiB7XG4gICAgICAgICAgICBsZXQgeyBpc1N0YXRpYywgb3B0aW9ucyB9ID0gdm0udmlld1NldHRpbmdzO1xuICAgICAgICAgICAgbGV0IG11c3RCZUFuc3dlcmVkID0gY2FzY2FkZVJlcXVpcmVkIHx8IGlzU3RhdGljO1xuXG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWRJdGVtKSB7XG4gICAgICAgICAgICAgICAgbGV0IGhhc0l0ZW1zID0gc2VsZWN0ZWRJdGVtICYmIHNlbGVjdGVkSXRlbS5pdGVtcyAmJiBzZWxlY3RlZEl0ZW0uaXRlbXMubGVuZ3RoICYmIHNlbGVjdGVkSXRlbS5pdGVtcy5sZW5ndGggPiAwO1xuXG4gICAgICAgICAgICAgICAgaWYgKG11c3RCZUFuc3dlcmVkICYmICFoYXNJdGVtcykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZmluYWxLZXlQYXJ0cyA9IHNlbGVjdGVkSXRlbS5rZXkuc3BsaXQoJ34nKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGVkaXRTZWxlY3Rpb25zID0gb3B0aW9ucy5tYXAoKG9wdGlvbiwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBoYXNTZWxlY3Rpb24gPSB0eXBlb2Ygdm0uY3VycmVudFNlbGVjdGlvbltpbmRleF0gIT09ICd1bmRlZmluZWQnO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzU2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGhhc0tleSA9IHZtLmN1cnJlbnRTZWxlY3Rpb25baW5kZXhdLmtleSA/IHZtLmN1cnJlbnRTZWxlY3Rpb25baW5kZXhdLmtleSA6IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0b29GYXIgPSBoYXNLZXkgJiYgaGFzS2V5LnNwbGl0KFwiflwiKS5sZW5ndGggPiBmaW5hbEtleVBhcnRzLmxlbmd0aCA/IHRydWUgOiBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0b29GYXIgPyB7fSA6IHZtLmN1cnJlbnRTZWxlY3Rpb25baW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge31cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IG5ld09wdGlvbnMgPSBvcHRpb25zLm1hcCgob3B0aW9uLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGhhc1NlbGVjdGlvbiA9IHR5cGVvZiB2bS5jdXJyZW50U2VsZWN0aW9uW2luZGV4XSAhPT0gJ3VuZGVmaW5lZCc7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXNTZWxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaGFzS2V5ID0gdm0uY3VycmVudFNlbGVjdGlvbltpbmRleF0ua2V5ID8gdm0uY3VycmVudFNlbGVjdGlvbltpbmRleF0ua2V5IDogZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRvb0ZhciA9IGhhc0tleSAmJiBoYXNLZXkuc3BsaXQoXCJ+XCIpLmxlbmd0aCA+IGZpbmFsS2V5UGFydHMubGVuZ3RoID8gdHJ1ZSA6IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRvb0ZhciA/IFtdIDogb3B0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW11cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdm0udmlld1NldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgdm0udmlld1NldHRpbmdzLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBuZXdPcHRpb25zXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIHZtLmN1cnJlbnRTZWxlY3Rpb24gPSBlZGl0U2VsZWN0aW9ucztcbiAgICAgICAgICAgICAgICAgICAgdm0ub25DaGFuZ2Uoc2VsZWN0ZWRJdGVtLmtleSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlTW9kZWwoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIW11c3RCZUFuc3dlcmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZtLm9uQ2hhbmdlKHNlbGVjdGVkSXRlbS5rZXkpO1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IG1ha2VOdWxsID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGxldCBlZGl0U2VsZWN0aW9ucyA9IG9wdGlvbnMubWFwKChvcHRpb24sIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGhhc1NlbGVjdGlvbiA9IHR5cGVvZiB2bS5jdXJyZW50U2VsZWN0aW9uW2luZGV4XSAhPT0gJ3VuZGVmaW5lZCcgJiYgdm0uY3VycmVudFNlbGVjdGlvbltpbmRleF0uaXRlbXM7XG5cbiAgICAgICAgICAgICAgICBpZiAoaGFzU2VsZWN0aW9uICYmICFtYWtlTnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdm0uY3VycmVudFNlbGVjdGlvbltpbmRleF07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbWFrZU51bGwgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHZtLmN1cnJlbnRTZWxlY3Rpb24gPSBlZGl0U2VsZWN0aW9ucztcbiAgICAgICAgICAgIHVwZGF0ZU1vZGVsKCk7XG4gICAgICAgIH1cblxuICAgICAgICB2bS52aWV3U2V0dGluZ3MgPSBpbml0aWFsaXplVmlld1NldHRpbmdzKHZtLnZpZXdTZXR0aW5ncywgdm0uY3VycmVudFRyZWUsIGRhdGFbbmFtZV0pO1xuXG4gICAgICAgIHVwZGF0ZU1vZGVsKCk7XG5cbiAgICAgICAgZnVuY3Rpb24gaW5pdGlhbGl6ZVZpZXdTZXR0aW5ncyhvbGRWaWV3U2V0dGluZ3MsIGN1cnJlbnRUcmVlLCBrZXkpIHtcbiAgICAgICAgICAgIGxldCBuZXdWaWV3U2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBvbGRWaWV3U2V0dGluZ3MpO1xuICAgICAgICAgICAgbGV0IHsgb3B0aW9ucywgbGFiZWxzIH0gPSBuZXdWaWV3U2V0dGluZ3M7XG4gICAgICAgICAgICBsZXQgbmV3T3B0aW9ucyA9IGNyZWF0ZVN0YXRpY09wdGlvbnMobGFiZWxzLCBvcHRpb25zWzBdKTtcblxuICAgICAgICAgICAgbmV3Vmlld1NldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgbmV3Vmlld1NldHRpbmdzLCB7XG4gICAgICAgICAgICAgICAgb3B0aW9uczogbmV3T3B0aW9uc1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChrZXkgJiYga2V5LnNwbGl0KSB7XG4gICAgICAgICAgICAgICAgbGV0IG9sZE9wdGlvbnMgPSBbXS5jb25jYXQob3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgbGV0IHNlY3Rpb25zID0ga2V5LnNwbGl0KCd+Jyk7XG4gICAgICAgICAgICAgICAgbGV0IGZ1bGxQYXRoID0gJyc7XG4gICAgICAgICAgICAgICAgbGV0IGN1cnJlbnRJdGVtcyA9IFtdLmNvbmNhdChpdGVtcyk7XG4gICAgICAgICAgICAgICAgbGV0IHNlbGVjdGlvbnMgPSBzZWN0aW9ucy5yZWR1Y2UoKHRoZXNlU2VjdGlvbnMsIHNlY3Rpb24sIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZnVsbFBhdGggPSBzZWN0aW9uO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZnVsbFBhdGggPSBgJHtmdWxsUGF0aH1+JHtzZWN0aW9ufWBcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGxldCBjdXJyZW50SXRlbSA9IGN1cnJlbnRJdGVtcy5maW5kKGl0ZW0gPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0ua2V5ID09PSBmdWxsUGF0aDtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEl0ZW1zID0gW10uY29uY2F0KGN1cnJlbnRJdGVtLml0ZW1zKTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW10uY29uY2F0KHRoZXNlU2VjdGlvbnMsIGN1cnJlbnRJdGVtKTtcbiAgICAgICAgICAgICAgICB9LCBbXSk7XG5cbiAgICAgICAgICAgICAgICB2bS5jdXJyZW50U2VsZWN0aW9uID0gc2VsZWN0aW9ucztcblxuICAgICAgICAgICAgICAgIGxldCBlZGl0U2VsZWN0aW9ucyA9IG5ld1ZpZXdTZXR0aW5ncy5vcHRpb25zLm1hcCgob3B0aW9uLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgaGFzU2VsZWN0aW9uID0gdHlwZW9mIHZtLmN1cnJlbnRTZWxlY3Rpb25baW5kZXhdICE9PSAndW5kZWZpbmVkJztcblxuICAgICAgICAgICAgICAgICAgICBpZiAoaGFzU2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdm0uY3VycmVudFNlbGVjdGlvbltpbmRleF07XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHZtLmN1cnJlbnRTZWxlY3Rpb24gPSBlZGl0U2VsZWN0aW9ucztcblxuICAgICAgICAgICAgICAgIHZtLmlzVmFsaWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbmV3Vmlld1NldHRpbmdzO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVTdGF0aWNPcHRpb25zKGxhYmVscywgZGVmYXVsdE9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGFiZWxzLm1hcCgobGFiZWwsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRPcHRpb25zO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbXVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlTW9kZWwoKSB7XG4gICAgICAgICAgICBsZXQgb2xkVmlld1NldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgdm0udmlld1NldHRpbmdzKTtcbiAgICAgICAgICAgIGxldCB7IG9wdGlvbnMsIGxhYmVscywgaXNTdGF0aWMgfSA9IG9sZFZpZXdTZXR0aW5ncztcbiAgICAgICAgICAgIGxldCBzZWxlY3Rpb25zID0gW10uY29uY2F0KHZtLmN1cnJlbnRTZWxlY3Rpb24pO1xuICAgICAgICAgICAgbGV0IGtlZXBBZGRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgbGV0IG5ld09wdGlvbnMgPSBzZWxlY3Rpb25zLnJlZHVjZSgoY3VycmVudE9wdGlvbnMsIHNlbGVjdGlvbiwgZGVwdGgpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgZWRpdE9wdGlvbnMgPSBbXS5jb25jYXQoY3VycmVudE9wdGlvbnMpO1xuXG4gICAgICAgICAgICAgICAga2VlcEFkZGluZyA9IHNlbGVjdGlvbjtcblxuICAgICAgICAgICAgICAgIGlmIChrZWVwQWRkaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHNlbGVjdGlvbi5pdGVtcyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3Rpb24gJiYgc2VsZWN0aW9uLml0ZW1zICYmIHNlbGVjdGlvbi5pdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlZGl0T3B0aW9ucyA9IGN1cnJlbnRPcHRpb25zXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKDAsIDEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNvbmNhdChjdXJyZW50T3B0aW9ucy5zbGljZSgxLCBkZXB0aCArIDEpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jb25jYXQoW3NlbGVjdGlvbi5pdGVtc10pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNvbmNhdChjdXJyZW50T3B0aW9ucy5zbGljZShkZXB0aCArIDIpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkZXB0aCA8IGxhYmVscy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlZGl0T3B0aW9ucyA9IGN1cnJlbnRPcHRpb25zXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKDAsIDEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNvbmNhdChjdXJyZW50T3B0aW9ucy5zbGljZSgxLCBkZXB0aCArIDEpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jb25jYXQoW1tdXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY29uY2F0KGN1cnJlbnRPcHRpb25zLnNsaWNlKGRlcHRoICsgMikpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVkaXRPcHRpb25zO1xuICAgICAgICAgICAgfSwgb3B0aW9ucyk7XG5cbiAgICAgICAgICAgIGxldCBuZXdWaWV3U2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCB2bS52aWV3U2V0dGluZ3MsIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBuZXdPcHRpb25zXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICB2bS52aWV3U2V0dGluZ3MgPSBuZXdWaWV3U2V0dGluZ3M7XG4gICAgICAgICAgICBpVlhqc0J1cy5lbWl0KCd1cGRhdGUtdmlldycsIG5ld1ZpZXdTZXR0aW5ncyk7XG4gICAgICAgIH1cblxuICAgIH1cbn1cblxuQ2FzY2FkaW5nT3B0aW9uc0lucHV0Q29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnaVZYanMnLCAnaXZ4anMuYnVzJywgJ2l2eGpzLmFjdGlvbnMnXTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlRmFjdG9yeUZ1bmN0aW9uKENhc2NhZGluZ09wdGlvbnNJbnB1dENvbnRyb2xsZXIpIiwiaW1wb3J0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbiBmcm9tICcuLi91dGlsaXRpZXMvY3JlYXRlLWZhY3RvcnktZnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgVmlkZW9FdmVudE5hbWVzIGZyb20gJy4uLy4uL2NvbnN0YW50cy92aWRlby5ldmVudHMuanMnO1xyXG5cclxuY2xhc3MgU3RhbmRhcmRDb250cm9scyAge1xyXG5cdGNvbnN0cnVjdG9yKGlWWGpzQnVzKSB7XHJcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIGxldCB2aWRlb0V2ZW50TmFtZXMgPSBuZXcgVmlkZW9FdmVudE5hbWVzKCk7XHJcblx0XHRcclxuXHRcdGlWWGpzQnVzLm9uY2UodmlkZW9FdmVudE5hbWVzLkRJU1BPU0UsIGZ1bmN0aW9uIGRpc3Bvc2VTdGFuZGFyZENvbnRyb2xzKCkge1xyXG4gICAgICAgICAgICBzZWxmLmNvbnRyb2xzLmRpc3Bvc2UoaVZYanNCdXMpO1xyXG4gICAgICAgIH0pXHJcblx0fVxyXG59XHJcblxyXG5TdGFuZGFyZENvbnRyb2xzLiRpbmplY3QgPSBbJ2l2eGpzLmJ1cyddO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlRmFjdG9yeUZ1bmN0aW9uKFN0YW5kYXJkQ29udHJvbHMpIiwiaW1wb3J0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbiBmcm9tICcuLi91dGlsaXRpZXMvY3JlYXRlLWZhY3RvcnktZnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgVmlkZW9FdmVudE5hbWVzIGZyb20gJy4uLy4uL2NvbnN0YW50cy92aWRlby5ldmVudHMuanMnO1xyXG5cclxuY2xhc3MgSFRNTDVWaWRlb1BsYXllckNvbnRyb2xsZXIge1xyXG4gICAgY29uc3RydWN0b3IoJHNjb3BlLCBpVlhqc0J1cykge1xyXG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgICAgICBsZXQgdmlkZW9FdmVudE5hbWVzID0gbmV3IFZpZGVvRXZlbnROYW1lcygpO1xyXG4gICAgIFxyXG4gICAgICAgIGlWWGpzQnVzLm9uY2UodmlkZW9FdmVudE5hbWVzLkRJU1BPU0UsIGZ1bmN0aW9uIGRpc3Bvc2VIVE1MNVBsYXllcigpIHtcclxuICAgICAgICAgICAgc2VsZi5wbGF5ZXIuZGlzcG9zZShpVlhqc0J1cyk7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxufVxyXG5cclxuSFRNTDVWaWRlb1BsYXllckNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJ2l2eGpzLmJ1cyddO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlRmFjdG9yeUZ1bmN0aW9uKEhUTUw1VmlkZW9QbGF5ZXJDb250cm9sbGVyKSIsImltcG9ydCBjcmVhdGVGYWN0b3J5RnVuY3Rpb24gZnJvbSAnLi4vdXRpbGl0aWVzL2NyZWF0ZS1mYWN0b3J5LWZ1bmN0aW9uLmpzJztcclxuaW1wb3J0IFZpZGVvRXZlbnROYW1lcyBmcm9tICcuLi8uLi9jb25zdGFudHMvdmlkZW8uZXZlbnRzLmpzJztcclxuXHJcbmNsYXNzIFZpbWVvVmlkZW9QbGF5ZXJDb250cm9sbGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKCRzY29wZSwgaVZYanNCdXMpIHtcclxuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgbGV0IHZpZGVvRXZlbnROYW1lcyA9IG5ldyBWaWRlb0V2ZW50TmFtZXMoKTtcclxuXHJcbiAgICAgICAgaVZYanNCdXMub25jZSh2aWRlb0V2ZW50TmFtZXMuRElTUE9TRSwgZnVuY3Rpb24gZGlzcG9zZVZpbWVvUGxheWVyKCkge1xyXG4gICAgICAgICAgICBzZWxmLnBsYXllci5kaXNwb3NlKGlWWGpzQnVzKTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG59XHJcblxyXG5WaW1lb1ZpZGVvUGxheWVyQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnaXZ4anMuYnVzJ107XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVGYWN0b3J5RnVuY3Rpb24oVmltZW9WaWRlb1BsYXllckNvbnRyb2xsZXIpIiwiaW1wb3J0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbiBmcm9tICcuLi91dGlsaXRpZXMvY3JlYXRlLWZhY3RvcnktZnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgVmlkZW9FdmVudE5hbWVzIGZyb20gJy4uLy4uL2NvbnN0YW50cy92aWRlby5ldmVudHMuanMnO1xyXG5cclxuY2xhc3MgWW91dHViZVZpZGVvUGxheWVyQ29udHJvbGxlciB7XHJcbiAgICBjb25zdHJ1Y3Rvcigkcm9vdFNjb3BlLCAkc2NvcGUsICR3aW5kb3csIGlWWGpzQnVzLCBpVlhqcykge1xyXG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgICAgICBsZXQgdmlkZW9FdmVudE5hbWVzID0gbmV3IFZpZGVvRXZlbnROYW1lcygpO1xyXG5cclxuICAgICAgICBpVlhqc0J1cy5vbmNlKHZpZGVvRXZlbnROYW1lcy5ESVNQT1NFLCBmdW5jdGlvbiBkaXNwb3NlWW91VHViZVBsYXllcigpIHtcclxuICAgICAgICAgICAgc2VsZi5wbGF5ZXIuZGlzcG9zZShpVlhqc0J1cyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbllvdXR1YmVWaWRlb1BsYXllckNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHJvb3RTY29wZScsICckc2NvcGUnLCAnJHdpbmRvdycsICdpdnhqcy5idXMnLCAnaVZYanMnXTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbihZb3V0dWJlVmlkZW9QbGF5ZXJDb250cm9sbGVyKSIsImltcG9ydCBjcmVhdGVGYWN0b3J5RnVuY3Rpb24gZnJvbSAnLi4vdXRpbGl0aWVzL2NyZWF0ZS1mYWN0b3J5LWZ1bmN0aW9uLmpzJztcclxuaW1wb3J0IEJ1dHRvbklucHV0Q29udHJvbGxlciBmcm9tICcuLi9jb250cm9sbGVycy9pbnB1dC5idXR0b25zLmpzJztcclxuaW1wb3J0IHsgRXJyb3JNZXNzYWdlcyB9IGZyb20gJy4uL3V0aWxpdGllcy9tZXNzYWdlcy5lcnJvci5qcyc7XHJcblxyXG5jbGFzcyBCdXR0b25zSW5wdXQge1xyXG4gICAgY29uc3RydWN0b3IoJGNvbXBpbGUsICRmaWx0ZXIsIGlWWGpzLCBpVlhqc1VJTW9kdWxlLCBwdWxsSW5UZW1wbGF0ZSkge1xyXG4gICAgICAgIHRoaXMudGVtcGxhdGUgPSB0aGlzLnRlbXBsYXRlSFRNTDtcclxuICAgICAgICB0aGlzLnRyYW5zY2x1ZGUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMucmVzdHJpY3QgPSAnRSc7XHJcbiAgICAgICAgdGhpcy5yZXF1aXJlID0gXCJeaXZ4anNGb3JtSW5wdXRcIjtcclxuICAgICAgICB0aGlzLnJlcGxhY2UgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuc2NvcGUgPSB7XHJcbiAgICAgICAgICAgIGlucHV0RGF0YTogJz1pbnB1dERhdGEnXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY29udHJvbGxlciA9IEJ1dHRvbklucHV0Q29udHJvbGxlcjtcclxuICAgICAgICB0aGlzLmNvbnRyb2xsZXJBcyA9ICd2bSc7XHJcbiAgICAgICAgdGhpcy5saW5rID0gKCRzY29wZSwgaUVsbSwgaUF0dHJzLCBjb250cm9sbGVyKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCB7aW5wdXREYXRhOiBpbnB1dH0gPSAkc2NvcGU7XHJcbiAgICAgICAgICAgIGxldCB7aWQsIG5hbWUsIGxhYmVsSFRNTCwgbGFiZWwgPSAnJywgZXJyb3JzID0geyByZXF1aXJlZDogJ011c3QgY2xpY2sgdG8gY29udGludWUuJyB9LCBza2lwU2V0dGluZ3MgPSB7IGxhYmVsOiBcIlNraXBcIiB9LCBidXR0b25zLCBhdHRyaWJ1dGVzID0ge30sIHNldHRpbmdzID0ge319ID0gaW5wdXQ7ICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGxldCBpbnB1dEJ1dHRvbkRhdGEgPSBidXR0b25zLm1hcCgoYnV0dG9uLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgYnV0dG9uID0gcHVsbEluVGVtcGxhdGUuY29udmVydExhYmVsKGJ1dHRvbi52YWx1ZSwgYnV0dG9uLCAkc2NvcGUpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBsZXQgYnV0dG9uU3RyaW5nID0gYW5ndWxhci50b0pzb24oYnV0dG9uKTtcclxuICAgICAgICAgICAgICAgIGxldCB7bGFiZWwsIGxhYmVsSFRNTCwgdmFsdWUsIGNsYXNzZXMgPSAnJ30gPSBidXR0b247XHJcblxyXG4gICAgICAgICAgICAgICAgbGFiZWwgPSBsYWJlbEhUTUwgPyBsYWJlbEhUTUwgOiBsYWJlbDtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiBsYWJlbCxcclxuICAgICAgICAgICAgICAgICAgICBhdHRySFRNTDogYG5nLWNsaWNrPSd2bS5vbkNsaWNrKCRldmVudCwgJHtidXR0b25TdHJpbmd9KSdgLFxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzZXM6IGNsYXNzZXNcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgaW5wdXQgPSBwdWxsSW5UZW1wbGF0ZS5jb252ZXJ0TGFiZWwoJGZpbHRlcignc3RyaW5nUGFyc2VycycpKCdzdGFydENhc2UnLCBpZCksIGlucHV0LCAkc2NvcGUpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKCFhdHRyaWJ1dGVzLnJlcXVpcmVkKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQge2xhYmVsLCBsYWJlbEhUTUwsIHZhbHVlLCBjbGFzc2VzID0gJyd9ID0gc2tpcFNldHRpbmdzO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBsYWJlbCA9IGxhYmVsSFRNTCA/IGxhYmVsSFRNTCA6IGxhYmVsO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpbnB1dEJ1dHRvbkRhdGEucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IGxhYmVsLFxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzZXMgOiBjbGFzc2VzLFxyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJIVE1MIDogJydcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBsZXQgZGF0YVVJT2JqID0ge1xyXG4gICAgICAgICAgICAgICAgYnV0dG9ucyA6IGlucHV0QnV0dG9uRGF0YSxcclxuICAgICAgICAgICAgICAgIGlucHV0IDogaW5wdXQsXHJcbiAgICAgICAgICAgICAgICBlcnJvcnM6IG5ldyBFcnJvck1lc3NhZ2VzKG5hbWUsIGVycm9ycywgYXR0cmlidXRlcyksXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGxldCB0aGlzQnV0dG9uc0lucHV0ID0gbmV3IGlWWGpzVUlNb2R1bGUuYnV0dG9ucyhpbnB1dEJ1dHRvbkRhdGEsIGlucHV0KTtcclxuICAgICAgICAgICAgbGV0IGlucHV0Q29udGFpbmVyID0gaUVsbS5maW5kKCdkaXYnKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuaVZYanMgPSBpVlhqcztcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlFbG0uaHRtbCh0aGlzQnV0dG9uc0lucHV0Lmh0bWwpO1xyXG4gICAgICAgICAgICAkY29tcGlsZShpRWxtLmNvbnRlbnRzKCkpKCRzY29wZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCB0ZW1wbGF0ZUhUTUwoKSB7XHJcbiAgICAgICAgcmV0dXJuIGA8ZGl2PjwvZGl2PmBcclxuICAgIH1cclxufVxyXG5cclxuQnV0dG9uc0lucHV0LiRpbmplY3QgPSBbJyRjb21waWxlJywgJyRmaWx0ZXInLCAnaVZYanMnLCAnaXZ4anMubW9kdWxlcy51aScsICdwdWxsSW5UZW1wbGF0ZSddO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlRmFjdG9yeUZ1bmN0aW9uKEJ1dHRvbnNJbnB1dCk7IiwiaW1wb3J0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbiBmcm9tICcuLi91dGlsaXRpZXMvY3JlYXRlLWZhY3RvcnktZnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgQ2hlY2tib3hJbnB1dENvbnRyb2xsZXIgZnJvbSAnLi4vY29udHJvbGxlcnMvaW5wdXQuY2hlY2tib3guanMnO1xyXG5pbXBvcnQgeyBFcnJvck1lc3NhZ2VzIH0gZnJvbSAnLi4vdXRpbGl0aWVzL21lc3NhZ2VzLmVycm9yLmpzJztcclxuXHJcbmNsYXNzIENoZWNrYm94SW5wdXQge1xyXG4gICAgY29uc3RydWN0b3IoJGNvbXBpbGUsICRmaWx0ZXIsIGlWWGpzVUlNb2R1bGUsIHB1bGxJblRlbXBsYXRlKSB7XHJcbiAgICAgICAgdGhpcy50ZW1wbGF0ZSA9IHRoaXMudGVtcGxhdGVIVE1MO1xyXG4gICAgICAgIHRoaXMudHJhbnNjbHVkZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5yZXN0cmljdCA9ICdFJztcclxuICAgICAgICB0aGlzLnJlcXVpcmUgPSBcIl5pdnhqc0Zvcm1JbnB1dFwiO1xyXG4gICAgICAgIHRoaXMucmVwbGFjZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5zY29wZSA9IHtcclxuICAgICAgICAgICAgaW5wdXREYXRhOiAnPWlucHV0RGF0YSdcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVyID0gQ2hlY2tib3hJbnB1dENvbnRyb2xsZXI7XHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVyQXMgPSAndm0nO1xyXG4gICAgICAgIHRoaXMubGluayA9ICgkc2NvcGUsIGlFbG0sIGlBdHRycywgY29udHJvbGxlcikgPT4ge1xyXG4gICAgICAgICAgICBsZXQge2lucHV0RGF0YTogaW5wdXR9ID0gJHNjb3BlO1xyXG4gICAgICAgICAgICBsZXQge2lkLCBuYW1lLCBlcnJvcnMgPSB7fSwgbGFiZWxIVE1MLCBsYWJlbCwgYXR0cmlidXRlcyA9IHt9LCBzZXR0aW5ncyA9IHt9fSA9IGlucHV0O1xyXG4gICAgICAgICAgICBsZXQgdGFnSFRNTCA9IGBuZy1ibHVyPVwidm0ub25DaGFuZ2UoaW5wdXRWYWx1ZSlcIiBuZy1tb2RlbD1cImlucHV0VmFsdWVcImA7XHJcblxyXG4gICAgICAgICAgICBpbnB1dC5sYWJlbCA9IGxhYmVsID8gbGFiZWwgOiAkZmlsdGVyKCdzdHJpbmdQYXJzZXJzJykoJ3N0YXJ0Q2FzZScsIGlkKTtcclxuICAgICAgICAgICAgaW5wdXQgPSBwdWxsSW5UZW1wbGF0ZS5jb252ZXJ0TGFiZWwoJGZpbHRlcignc3RyaW5nUGFyc2VycycpKCdzdGFydENhc2UnLCBpZCksIGlucHV0LCAkc2NvcGUpO1xyXG5cclxuICAgICAgICAgICAgbGV0IGNoZWNrYm94VUlPYmogPSB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dCA6IGlucHV0LFxyXG4gICAgICAgICAgICAgICAgdGFncyA6IHRhZ0hUTUwsXHJcbiAgICAgICAgICAgICAgICBzZXR0aW5ncyA6IHNldHRpbmdzLFxyXG4gICAgICAgICAgICAgICAgZXJyb3JzIDogbmV3IEVycm9yTWVzc2FnZXMoaW5wdXQsIGVycm9ycywgYXR0cmlidXRlcylcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgbGV0IGNoZWNrQm94ID0gbmV3IGlWWGpzVUlNb2R1bGUuY2hlY2tib3goY2hlY2tib3hVSU9iaik7XHJcblxyXG4gICAgICAgICAgICBpRWxtLmh0bWwoY2hlY2tCb3guaHRtbCk7XHJcblxyXG4gICAgICAgICAgICAkY29tcGlsZShpRWxtLmNvbnRlbnRzKCkpKCRzY29wZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCB0ZW1wbGF0ZUhUTUwoKSB7XHJcbiAgICAgICAgcmV0dXJuIGA8ZGl2PjwvZGl2PmA7XHJcbiAgICB9XHJcbn1cclxuXHJcbkNoZWNrYm94SW5wdXQuJGluamVjdCA9IFsnJGNvbXBpbGUnLCAnJGZpbHRlcicsICdpdnhqcy5tb2R1bGVzLnVpJywgJ3B1bGxJblRlbXBsYXRlJ107XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVGYWN0b3J5RnVuY3Rpb24oQ2hlY2tib3hJbnB1dCk7XHJcbiIsImltcG9ydCBjcmVhdGVGYWN0b3J5RnVuY3Rpb24gZnJvbSAnLi4vdXRpbGl0aWVzL2NyZWF0ZS1mYWN0b3J5LWZ1bmN0aW9uLmpzJztcclxuaW1wb3J0IERhdGVJbnB1dENvbnRyb2xsZXIgZnJvbSAnLi4vY29udHJvbGxlcnMvaW5wdXQuZGF0ZS5qcyc7XHJcbmltcG9ydCB7IEVycm9yTWVzc2FnZXMgfSBmcm9tICcuLi91dGlsaXRpZXMvbWVzc2FnZXMuZXJyb3IuanMnO1xyXG5pbXBvcnQgeyBEYXRlUGFyc2VyIH0gZnJvbSAnLi4vdXRpbGl0aWVzL2RhdGUtcGFyc2VyLmpzJztcclxuXHJcbmNsYXNzIERhdGVJbnB1dCB7XHJcbiAgICBjb25zdHJ1Y3RvcigkY29tcGlsZSwgJGZpbHRlciwgaVZYanMsIGlWWGpzVUlNb2R1bGUsIHB1bGxJblRlbXBsYXRlKSB7XHJcbiAgICAgICAgdGhpcy50ZW1wbGF0ZSA9IHRoaXMudGVtcGxhdGVIVE1MO1xyXG4gICAgICAgIHRoaXMudHJhbnNjbHVkZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5yZXN0cmljdCA9ICdFJztcclxuICAgICAgICB0aGlzLnJlcXVpcmUgPSBcIl5pdnhqc0Zvcm1JbnB1dFwiO1xyXG4gICAgICAgIHRoaXMucmVwbGFjZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5zY29wZSA9IHtcclxuICAgICAgICAgICAgaW5wdXREYXRhOiAnPWlucHV0RGF0YSdcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVyID0gRGF0ZUlucHV0Q29udHJvbGxlcjtcclxuICAgICAgICB0aGlzLmNvbnRyb2xsZXJBcyA9ICd2bSc7XHJcbiAgICAgICAgdGhpcy5saW5rID0gKCRzY29wZSwgaUVsbSwgaUF0dHJzLCBjb250cm9sbGVyKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCB7IGlucHV0RGF0YTogaW5wdXQgfSA9ICRzY29wZTtcclxuICAgICAgICAgICAgbGV0IHtpZCxuYW1lLGVycm9ycyA9IHt9LGxhYmVsSFRNTCxsYWJlbCxhdHRyaWJ1dGVzID0ge30sc2V0dGluZ3MgPSB7fX0gPSBpbnB1dDtcclxuXHJcbiAgICAgICAgICAgIGlmIChhdHRyaWJ1dGVzLm1pbikge1xyXG4gICAgICAgICAgICAgICAgbGV0IGRhdGVNaW4gPSBuZXcgRGF0ZVBhcnNlcihhdHRyaWJ1dGVzLm1pbikuZm9ybWF0Rm9yRGF0ZUlucHV0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlcy5taW4gPSBgJHtkYXRlTWlufWA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChhdHRyaWJ1dGVzLm1heCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGRhdGVNYXggPSBuZXcgRGF0ZVBhcnNlcihhdHRyaWJ1dGVzLm1heCkuZm9ybWF0Rm9yRGF0ZUlucHV0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlcy5tYXggPSBgJHtkYXRlTWF4fWA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlucHV0LmxhYmVsID0gbGFiZWwgPyBsYWJlbCA6ICRmaWx0ZXIoJ3N0cmluZ1BhcnNlcnMnKSgnc3RhcnRDYXNlJywgaWQpO1xyXG5cclxuICAgICAgICAgICAgbGV0IGVycm9yTWVzc2FnZXMgPSBuZXcgRXJyb3JNZXNzYWdlcyhpbnB1dCwgZXJyb3JzLCBhdHRyaWJ1dGVzKTtcclxuXHJcbiAgICAgICAgICAgICRzY29wZS5pbnB1dFZhbHVlID0gaVZYanMuZXhwZXJpZW5jZS5kYXRhW25hbWVdID8gaVZYanMuZXhwZXJpZW5jZS5kYXRhW25hbWVdIDogJyc7XHJcblxyXG4gICAgICAgICAgICBpbnB1dCA9IHB1bGxJblRlbXBsYXRlLmNvbnZlcnRMYWJlbCgkZmlsdGVyKCdzdHJpbmdQYXJzZXJzJykoJ3N0YXJ0Q2FzZScsIGlkKSwgaW5wdXQsICRzY29wZSk7XHJcblxyXG5cclxuICAgICAgICAgICAgbGV0IHRhZ0hUTUwgPSBgbmctYmx1cj1cInZtLm9uQ2hhbmdlKGlucHV0VmFsdWUpXCIgbmctbW9kZWw9XCJpbnB1dFZhbHVlXCJgO1xyXG4gICAgICAgICAgICBsZXQgdWlEYXRlT2JqID0ge1xyXG4gICAgICAgICAgICAgICAgaW5wdXQ6IGlucHV0LFxyXG4gICAgICAgICAgICAgICAgc2V0dGluZ3M6IHNldHRpbmdzLFxyXG4gICAgICAgICAgICAgICAgdGFnczogdGFnSFRNTCxcclxuICAgICAgICAgICAgICAgIGVycm9yczogZXJyb3JNZXNzYWdlc1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCBkYXRlID0gbmV3IGlWWGpzVUlNb2R1bGUuZGF0ZSh1aURhdGVPYmopO1xyXG5cclxuICAgICAgICAgICAgaUVsbS5odG1sKGRhdGUuaHRtbCk7XHJcbiAgICAgICAgICAgICRjb21waWxlKGlFbG0uY29udGVudHMoKSkoJHNjb3BlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHRlbXBsYXRlSFRNTCgpIHtcclxuICAgICAgICByZXR1cm4gYDxkaXY+PC9kaXY+YFxyXG4gICAgfTtcclxufVxyXG5cclxuRGF0ZUlucHV0LiRpbmplY3QgPSBbJyRjb21waWxlJywgJyRmaWx0ZXInLCAnaVZYanMnLCAnaXZ4anMubW9kdWxlcy51aScsICdwdWxsSW5UZW1wbGF0ZSddO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlRmFjdG9yeUZ1bmN0aW9uKERhdGVJbnB1dCk7IiwiaW1wb3J0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbiBmcm9tICcuLi91dGlsaXRpZXMvY3JlYXRlLWZhY3RvcnktZnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgRGF0ZVRpbWVMb2NhbElucHV0Q29udHJvbGxlciBmcm9tICcuLi9jb250cm9sbGVycy9pbnB1dC5kYXRlLXRpbWUtbG9jYWwuanMnO1xyXG5pbXBvcnQgeyBFcnJvck1lc3NhZ2VzIH0gZnJvbSAnLi4vdXRpbGl0aWVzL21lc3NhZ2VzLmVycm9yLmpzJztcclxuaW1wb3J0IHsgRGF0ZVBhcnNlciB9IGZyb20gJy4uL3V0aWxpdGllcy9kYXRlLXBhcnNlci5qcyc7XHJcblxyXG5jbGFzcyBEYXRlVGltZUxvY2FsSW5wdXQge1xyXG4gICAgY29uc3RydWN0b3IoJGNvbXBpbGUsICRmaWx0ZXIsIGlWWGpzVUlNb2R1bGUsIHB1bGxJblRlbXBsYXRlKSB7XHJcbiAgICAgICAgdGhpcy50ZW1wbGF0ZSA9IHRoaXMudGVtcGxhdGVIVE1MO1xyXG4gICAgICAgIHRoaXMudHJhbnNjbHVkZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5yZXN0cmljdCA9ICdFJztcclxuICAgICAgICB0aGlzLnJlcXVpcmUgPSBcIl5pdnhqc0Zvcm1JbnB1dFwiO1xyXG4gICAgICAgIHRoaXMucmVwbGFjZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5zY29wZSA9IHtcclxuICAgICAgICAgICAgaW5wdXREYXRhOiAnPWlucHV0RGF0YSdcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVyID0gRGF0ZVRpbWVMb2NhbElucHV0Q29udHJvbGxlcjtcclxuICAgICAgICB0aGlzLmNvbnRyb2xsZXJBcyA9ICd2bSc7XHJcbiAgICAgICAgdGhpcy5saW5rID0gKCRzY29wZSwgaUVsbSwgaUF0dHJzLCBjb250cm9sbGVyKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCB7aW5wdXREYXRhOiBpbnB1dH0gPSAkc2NvcGU7XHJcbiAgICAgICAgICAgIGxldCB7aWQsIG5hbWUsIGVycm9ycyA9IHt9LCBsYWJlbEhUTUwsIGxhYmVsLCBhdHRyaWJ1dGVzID0ge30sIHNldHRpbmdzID0ge319ID0gaW5wdXQ7XHJcblxyXG4gICAgICAgICAgICBpbnB1dC5sYWJlbCA9IGxhYmVsID8gbGFiZWwgOiAkZmlsdGVyKCdzdHJpbmdQYXJzZXJzJykoJ3N0YXJ0Q2FzZScsIGlkKVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZXMubWluKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZGF0ZU1pbiA9IG5ldyBEYXRlUGFyc2VyKGF0dHJpYnV0ZXMubWluKS5mb3JtYXRGb3JEYXRlVGltZUxvY2FsSW5wdXQoKTtcclxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMubWluID0gYCR7ZGF0ZU1pbn1gO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoYXR0cmlidXRlcy5tYXgpIHtcclxuICAgICAgICAgICAgICAgIGxldCBkYXRlTWF4ID0gbmV3IERhdGVQYXJzZXIoYXR0cmlidXRlcy5tYXgpLmZvcm1hdEZvckRhdGVUaW1lTG9jYWxJbnB1dCgpO1xyXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlcy5tYXggPSBgJHtkYXRlTWF4fWA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBlcnJvck1lc3NhZ2VzID0gbmV3IEVycm9yTWVzc2FnZXMoaW5wdXQsIGVycm9ycywgYXR0cmlidXRlcyk7XHJcbiAgICAgICAgICAgIGxldCB0YWdIVE1MID0gYG5nLWJsdXI9XCJ2bS5vbkNoYW5nZShpbnB1dFZhbHVlKVwiIG5nLW1vZGVsPVwiaW5wdXRWYWx1ZVwiYDtcclxuXHJcbiAgICAgICAgICAgIGlucHV0ID0gcHVsbEluVGVtcGxhdGUuY29udmVydExhYmVsKCRmaWx0ZXIoJ3N0cmluZ1BhcnNlcnMnKSgnc3RhcnRDYXNlJywgaWQpLCBpbnB1dCwgJHNjb3BlKTtcclxuXHJcbiAgICAgICAgICAgIGxldCB1aURhdGV0aW1lTG9jYWxPYmogPSB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dDogaW5wdXQsXHJcbiAgICAgICAgICAgICAgICBzZXR0aW5nczogc2V0dGluZ3MsXHJcbiAgICAgICAgICAgICAgICB0YWdzOiB0YWdIVE1MLFxyXG4gICAgICAgICAgICAgICAgZXJyb3JzOiBlcnJvck1lc3NhZ2VzXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBkYXRldGltZUxvY2FsID0gbmV3IGlWWGpzVUlNb2R1bGUuZGF0ZXRpbWVMb2NhbCh1aURhdGV0aW1lTG9jYWxPYmopO1xyXG5cclxuICAgICAgICAgICAgaUVsbS5odG1sKGRhdGV0aW1lTG9jYWwuaHRtbCk7XHJcbiAgICAgICAgICAgICRjb21waWxlKGlFbG0uY29udGVudHMoKSkoJHNjb3BlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHRlbXBsYXRlSFRNTCgpIHtcclxuICAgICAgICByZXR1cm4gYDxkaXY+PC9kaXY+YFxyXG4gICAgfTtcclxufVxyXG5cclxuRGF0ZVRpbWVMb2NhbElucHV0LiRpbmplY3QgPSBbJyRjb21waWxlJywgJyRmaWx0ZXInLCAnaXZ4anMubW9kdWxlcy51aScsICdwdWxsSW5UZW1wbGF0ZSddO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlRmFjdG9yeUZ1bmN0aW9uKERhdGVUaW1lTG9jYWxJbnB1dCk7IiwiaW1wb3J0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbiBmcm9tICcuLi91dGlsaXRpZXMvY3JlYXRlLWZhY3RvcnktZnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgRW1haWxJbnB1dENvbnRyb2xsZXIgZnJvbSAnLi4vY29udHJvbGxlcnMvaW5wdXQuZW1haWwuanMnO1xyXG5pbXBvcnQgeyBFcnJvck1lc3NhZ2VzIH0gZnJvbSAnLi4vdXRpbGl0aWVzL21lc3NhZ2VzLmVycm9yLmpzJztcclxuXHJcbmNsYXNzIEVtYWlsSW5wdXQge1xyXG4gICAgY29uc3RydWN0b3IoJGNvbXBpbGUsICRmaWx0ZXIsIGlWWGpzVUlNb2R1bGUsIHB1bGxJblRlbXBsYXRlKSB7XHJcbiAgICAgICAgdGhpcy50ZW1wbGF0ZSA9IHRoaXMudGVtcGxhdGVIVE1MO1xyXG4gICAgICAgIHRoaXMudHJhbnNjbHVkZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5yZXN0cmljdCA9ICdFJztcclxuICAgICAgICB0aGlzLnJlcXVpcmUgPSBcIl5pdnhqc0Zvcm1JbnB1dFwiO1xyXG4gICAgICAgIHRoaXMucmVwbGFjZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5zY29wZSA9IHtcclxuICAgICAgICAgICAgaW5wdXREYXRhOiAnPWlucHV0RGF0YSdcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVyID0gRW1haWxJbnB1dENvbnRyb2xsZXI7XHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVyQXMgPSAndm0nO1xyXG4gICAgICAgIHRoaXMubGluayA9ICgkc2NvcGUsIGlFbG0sIGlBdHRycywgY29udHJvbGxlcikgPT4ge1xyXG4gICAgICAgICAgICBsZXQge2lucHV0RGF0YTogaW5wdXR9ID0gJHNjb3BlO1xyXG4gICAgICAgICAgICBsZXQge2lkLCBuYW1lLCBlcnJvcnMgPSB7fSwgbGFiZWxIVE1MLCBsYWJlbCwgYXR0cmlidXRlcyA9IHt9LCB0eXBlLCBzZXR0aW5ncyA9IHt9fSA9IGlucHV0O1xyXG4gICAgICAgICAgICBsZXQgZXJyb3JNZXNzYWdlcyA9IG5ldyBFcnJvck1lc3NhZ2VzKGlucHV0LCBlcnJvcnMsIGF0dHJpYnV0ZXMpO1xyXG4gICAgICAgICAgICBsZXQgdGFnSFRNTCA9IGBuZy1ibHVyPVwidm0ub25DaGFuZ2UoaW5wdXRWYWx1ZSlcIiBuZy1tb2RlbD1cImlucHV0VmFsdWVcImBcclxuXHJcbiAgICAgICAgICAgIGlucHV0LmxhYmVsID0gbGFiZWwgPyBsYWJlbCA6ICRmaWx0ZXIoJ3N0cmluZ1BhcnNlcnMnKSgnc3RhcnRDYXNlJywgaWQpO1xyXG4gICAgICAgICAgICBpbnB1dCA9IHB1bGxJblRlbXBsYXRlLmNvbnZlcnRMYWJlbCgkZmlsdGVyKCdzdHJpbmdQYXJzZXJzJykoJ3N0YXJ0Q2FzZScsIGlkKSwgaW5wdXQsICRzY29wZSk7XHJcblxyXG4gICAgICAgICAgICBsZXQgdWlFbWFpbE9iaiA9IHtcclxuICAgICAgICAgICAgICAgIGlucHV0OiBpbnB1dCxcclxuICAgICAgICAgICAgICAgIHNldHRpbmdzOiBzZXR0aW5ncyxcclxuICAgICAgICAgICAgICAgIHRhZ3M6IHRhZ0hUTUwsXHJcbiAgICAgICAgICAgICAgICBlcnJvcnM6IGVycm9yTWVzc2FnZXNcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgZW1haWwgPSBuZXcgaVZYanNVSU1vZHVsZS5lbWFpbCh1aUVtYWlsT2JqKTtcclxuXHJcblxyXG4gICAgICAgICAgICBpRWxtLmh0bWwoZW1haWwuaHRtbCk7XHJcbiAgICAgICAgICAgICRjb21waWxlKGlFbG0uY29udGVudHMoKSkoJHNjb3BlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHRlbXBsYXRlSFRNTCgpIHtcclxuICAgICAgICByZXR1cm4gYDxkaXY+PC9kaXY+YDtcclxuICAgIH07XHJcbn1cclxuXHJcbkVtYWlsSW5wdXQuJGluamVjdCA9IFsnJGNvbXBpbGUnLCAnJGZpbHRlcicsICdpdnhqcy5tb2R1bGVzLnVpJywgJ3B1bGxJblRlbXBsYXRlJ107XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVGYWN0b3J5RnVuY3Rpb24oRW1haWxJbnB1dCk7IiwiaW1wb3J0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbiBmcm9tICcuLi91dGlsaXRpZXMvY3JlYXRlLWZhY3RvcnktZnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgRm9ybUlucHV0Q29udHJvbGxlciBmcm9tICcuLi9jb250cm9sbGVycy9pbnB1dC5mb3JtLmpzJztcclxuXHJcbmNsYXNzIEZvcm1JbnB1dCB7XHJcbiAgICBjb25zdHJ1Y3RvcigkY29tcGlsZSwgJGZpbHRlciwgaVZYanNVSU1vZHVsZSwgcHVsbEluVGVtcGxhdGUpIHtcclxuICAgICAgICB0aGlzLnRlbXBsYXRlID0gdGhpcy50ZW1wbGF0ZUhUTUw7XHJcbiAgICAgICAgdGhpcy5yZXN0cmljdCA9ICdFJztcclxuICAgICAgICB0aGlzLnNjb3BlID0ge1xyXG4gICAgICAgICAgICBpbnB1dHM6ICc9aW5wdXRzJyxcclxuICAgICAgICAgICAgZm9ybUlkOiAnPWZvcm1JZCcsXHJcbiAgICAgICAgICAgIG9uU3VibWl0OiAnPW9uU3VibWl0JyxcclxuICAgICAgICAgICAgZm9ybVNldHRpbmdzOiAnPWZvcm1TZXR0aW5ncydcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuY29udHJvbGxlciA9IEZvcm1JbnB1dENvbnRyb2xsZXI7XHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVyQXMgPSAndm0nO1xyXG4gICAgICAgIHRoaXMuJGNvbXBpbGUgPSAkY29tcGlsZTtcclxuICAgICAgICB0aGlzLmxpbmsgPSAoJHNjb3BlLCBpRWxtLCBpQXR0cnMsIGNvbnRyb2xsZXIpID0+IHtcclxuICAgICAgICAgICAgbGV0IHNob3VsZEhpZGVTdWJtaXQgPSAoaW5wdXRzLCB0eXBlLCBhdHRyaWJ1dGVzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgaGlkZVN1Ym1pdE9uVHlwZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBidXR0b25zOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBoaWRlU3VibWl0T25UeXBlW3R5cGVdO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBsZXQgaGlkZVN1Ym1pdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBsZXQge2lucHV0cywgZm9ybVNldHRpbmdzID0ge30sIGZvcm1JZH0gPSAkc2NvcGU7XHJcbiAgICAgICAgICAgIGxldCBmb3JtSW5wdXRzID0gaW5wdXRzLm1hcCgoaW5wdXQpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCB7dHlwZSwgYXR0cmlidXRlcywgc2V0dGluZ3MgPSB7fSwgaWR9ID0gaW5wdXQ7XHJcbiAgICAgICAgICAgICAgICBsZXQgaW5wdXRTdHJpbmcgPSBKU09OLnN0cmluZ2lmeShpbnB1dCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaW5wdXRTdHJpbmcgPSBpbnB1dFN0cmluZy5yZXBsYWNlKC9cXCcvZywgYCYjMzk7YCk7XHJcbiAgICAgICAgICAgICAgICBoaWRlU3VibWl0ID0gc2hvdWxkSGlkZVN1Ym1pdChpbnB1dHMsIHR5cGUsIGF0dHJpYnV0ZXMpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGh0bWw6IGA8aXZ4anMtJHt0eXBlfS1pbnB1dCBjbGFzcz1cIml2eGpzLWdyaWQtMS0xXCIgaWQ9XCIke2lkfVwiIGlucHV0LWRhdGE9JyR7aW5wdXRTdHJpbmd9Jz48L2l2eGpzLSR7dHlwZX0taW5wdXQ+XFxuYCxcclxuICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncyA6IHNldHRpbmdzXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgZm9ybVNldHRpbmdzID0gcHVsbEluVGVtcGxhdGUuY29udmVydExhYmVsKCcnLCBmb3JtU2V0dGluZ3MsICRzY29wZSk7XHJcbiAgICAgICAgICAgIGZvcm1TZXR0aW5ncy5zdWJtaXQgPSBwdWxsSW5UZW1wbGF0ZS5jb252ZXJ0TGFiZWwoJ1N1Ym1pdCcsIGZvcm1TZXR0aW5ncy5zdWJtaXQsICRzY29wZSk7XHJcbiAgICAgICAgICAgIGZvcm1TZXR0aW5ncy5oaWRlU3VibWl0ID0gaGlkZVN1Ym1pdDtcclxuICAgICAgICAgICAgZm9ybVNldHRpbmdzLmlkID0gZm9ybUlkO1xyXG5cclxuICAgICAgICAgICAgbGV0IGFkZGl0aW9uYWxUYWdIVE1MID0gYG5nLXN1Ym1pdD1cInZtLm9uU3VibWl0KCRldmVudClcImBcclxuICAgICAgICAgICAgbGV0IHRoaXNGb3JtSW5wdXRzID0gbmV3IGlWWGpzVUlNb2R1bGUuZm9ybShcclxuICAgICAgICAgICAgICAgIGZvcm1JbnB1dHMsIFxyXG4gICAgICAgICAgICAgICAgJ2Zvcm1JbnB1dCcsIFxyXG4gICAgICAgICAgICAgICAgYWRkaXRpb25hbFRhZ0hUTUwsIFxyXG4gICAgICAgICAgICAgICAgZm9ybVNldHRpbmdzXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgIFxyXG4gICAgICAgICAgICBpRWxtLmh0bWwodGhpc0Zvcm1JbnB1dHMuaHRtbCk7XHJcblxyXG4gICAgICAgICAgICAkY29tcGlsZShpRWxtLmNvbnRlbnRzKCkpKCRzY29wZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCB0ZW1wbGF0ZUhUTUwoKSB7XHJcbiAgICAgICAgcmV0dXJuIGBgO1xyXG4gICAgfTtcclxufVxyXG5cclxuRm9ybUlucHV0LiRpbmplY3QgPSBbJyRjb21waWxlJywgJyRmaWx0ZXInLCAnaXZ4anMubW9kdWxlcy51aScsICdwdWxsSW5UZW1wbGF0ZSddO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlRmFjdG9yeUZ1bmN0aW9uKEZvcm1JbnB1dCk7IiwiaW1wb3J0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbiBmcm9tICcuLi91dGlsaXRpZXMvY3JlYXRlLWZhY3RvcnktZnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgTnVtYmVySW5wdXRDb250cm9sbGVyIGZyb20gJy4uL2NvbnRyb2xsZXJzL2lucHV0Lm51bWJlci5qcyc7XHJcbmltcG9ydCB7IEVycm9yTWVzc2FnZXMgfSBmcm9tICcuLi91dGlsaXRpZXMvbWVzc2FnZXMuZXJyb3IuanMnO1xyXG5cclxuY2xhc3MgTnVtYmVySW5wdXQge1xyXG4gICAgY29uc3RydWN0b3IoJGNvbXBpbGUsICRmaWx0ZXIsIGlWWGpzVUlNb2R1bGUsIHB1bGxJblRlbXBsYXRlKSB7XHJcbiAgICAgICAgdGhpcy50ZW1wbGF0ZSA9IHRoaXMudGVtcGxhdGVIVE1MO1xyXG4gICAgICAgIHRoaXMudHJhbnNjbHVkZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5yZXN0cmljdCA9ICdFJztcclxuICAgICAgICB0aGlzLnJlcXVpcmUgPSBcIl5pdnhqc0Zvcm1JbnB1dFwiO1xyXG4gICAgICAgIHRoaXMucmVwbGFjZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5zY29wZSA9IHtcclxuICAgICAgICAgICAgaW5wdXREYXRhOiAnPWlucHV0RGF0YSdcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVyID0gTnVtYmVySW5wdXRDb250cm9sbGVyO1xyXG4gICAgICAgIHRoaXMuY29udHJvbGxlckFzID0gJ3ZtJztcclxuICAgICAgICB0aGlzLmxpbmsgPSAoJHNjb3BlLCBpRWxtLCBpQXR0cnMsIGNvbnRyb2xsZXIpID0+IHtcclxuICAgICAgICAgICAgbGV0IHtpbnB1dERhdGE6IGlucHV0fSA9ICRzY29wZTtcclxuICAgICAgICAgICAgbGV0IHtpZCwgbmFtZSwgZXJyb3JzID0ge30sIGxhYmVsSFRNTCwgbGFiZWwsIGF0dHJpYnV0ZXMgPSB7fSwgdHlwZSwgc2V0dGluZ3MgPSB7fX0gPSBpbnB1dDtcclxuICAgICAgICAgICAgbGV0IGVycm9yTWVzc2FnZXMgPSBuZXcgRXJyb3JNZXNzYWdlcyhpbnB1dCwgZXJyb3JzLCBhdHRyaWJ1dGVzKTtcclxuICAgICAgICAgICAgbGV0IHRhZ0hUTUwgPSBgbmctYmx1cj1cInZtLm9uQ2hhbmdlKGlucHV0VmFsdWUpXCIgbmctbW9kZWw9XCJpbnB1dFZhbHVlXCJgO1xyXG5cclxuICAgICAgICAgICAgaW5wdXQubGFiZWwgPSBsYWJlbCA/IGxhYmVsIDogJGZpbHRlcignc3RyaW5nUGFyc2VycycpKCdzdGFydENhc2UnLCBpZCk7XHJcbiAgICAgICAgICAgIGlucHV0ID0gcHVsbEluVGVtcGxhdGUuY29udmVydExhYmVsKCRmaWx0ZXIoJ3N0cmluZ1BhcnNlcnMnKSgnc3RhcnRDYXNlJywgaWQpLCBpbnB1dCwgJHNjb3BlKTtcclxuXHJcbiAgICAgICAgICAgIGxldCB1aU51bWJlck9iaiA9IHtcclxuICAgICAgICAgICAgICAgIGlucHV0OiBpbnB1dCxcclxuICAgICAgICAgICAgICAgIHNldHRpbmdzOiBzZXR0aW5ncyxcclxuICAgICAgICAgICAgICAgIHRhZ3M6IHRhZ0hUTUwsXHJcbiAgICAgICAgICAgICAgICBlcnJvcnM6IGVycm9yTWVzc2FnZXNcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgbGV0IG51bWJlciA9IG5ldyBpVlhqc1VJTW9kdWxlLm51bWJlcih1aU51bWJlck9iaik7XHJcblxyXG4gICAgICAgICAgICBpRWxtLmh0bWwobnVtYmVyLmh0bWwpO1xyXG4gICAgICAgICAgICAkY29tcGlsZShpRWxtLmNvbnRlbnRzKCkpKCRzY29wZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCB0ZW1wbGF0ZUhUTUwoKSB7XHJcbiAgICAgICAgcmV0dXJuIGA8ZGl2PjwvZGl2PmA7XHJcbiAgICB9O1xyXG59XHJcblxyXG5OdW1iZXJJbnB1dC4kaW5qZWN0ID0gWyckY29tcGlsZScsICckZmlsdGVyJywgJ2l2eGpzLm1vZHVsZXMudWknLCAncHVsbEluVGVtcGxhdGUnXTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbihOdW1iZXJJbnB1dCk7IiwiaW1wb3J0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbiBmcm9tICcuLi91dGlsaXRpZXMvY3JlYXRlLWZhY3RvcnktZnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgT3B0aW9uc0lucHV0Q29udHJvbGxlciBmcm9tICcuLi9jb250cm9sbGVycy9pbnB1dC5vcHRpb25zLmpzJztcclxuaW1wb3J0IHsgRXJyb3JNZXNzYWdlcyB9IGZyb20gJy4uL3V0aWxpdGllcy9tZXNzYWdlcy5lcnJvci5qcyc7XHJcblxyXG5jbGFzcyBPcHRpb25zSW5wdXQge1xyXG4gICAgY29uc3RydWN0b3IoJGNvbXBpbGUsICRmaWx0ZXIsIGlWWGpzVUlNb2R1bGUsIGlWWGpzQnVzLCBwdWxsSW5UZW1wbGF0ZSkge1xyXG4gICAgICAgIHRoaXMudGVtcGxhdGUgPSB0aGlzLnRlbXBsYXRlSFRNTDtcclxuICAgICAgICB0aGlzLnRyYW5zY2x1ZGUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMucmVzdHJpY3QgPSAnRSc7XHJcbiAgICAgICAgdGhpcy5yZXF1aXJlID0gXCJeaXZ4anNGb3JtSW5wdXRcIjtcclxuICAgICAgICB0aGlzLnNjb3BlID0ge1xyXG4gICAgICAgICAgICBpbnB1dERhdGE6ICc9aW5wdXREYXRhJ1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICB0aGlzLmNvbnRyb2xsZXIgPSBPcHRpb25zSW5wdXRDb250cm9sbGVyO1xyXG4gICAgICAgIHRoaXMuY29udHJvbGxlckFzID0gJ3ZtJztcclxuICAgICAgICB0aGlzLnJlcGxhY2UgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMubGluayA9ICgkc2NvcGUsIGlFbG0sIGlBdHRycywgY29udHJvbGxlcikgPT4ge1xyXG4gICAgICAgICAgICBsZXQge2lucHV0RGF0YTogaW5wdXR9ID0gJHNjb3BlO1xyXG4gICAgICAgICAgICBsZXQge2lkLCBlcnJvcnMgPSB7fSwgbmFtZSwgbGFiZWxIVE1MLCBhdHRyaWJ1dGVzID0ge30sIG9wdGlvbnMsIGRlZmF1bHREaXNwbGF5LCBzZXR0aW5ncyA9IHt9fSA9IGlucHV0O1xyXG4gICAgICAgICAgICBsZXQge2RpcmVjdGl2ZXMgPSAnJ30gPSBzZXR0aW5ncztcclxuICAgICAgICAgICAgbGV0IGVycm9yTWVzc2FnZXMgPSBuZXcgRXJyb3JNZXNzYWdlcyhpbnB1dCwgZXJyb3JzLCBhdHRyaWJ1dGVzKTtcclxuICAgICAgICAgICAgbGV0IGRlZmF1bHRPcHRpb25UYWcgPSBgPG9wdGlvbiB2YWx1ZT1cIlwiPlNlbGVjdCBhbiBvcHRpb24uLi48L29wdGlvbj5gO1xyXG4gICAgICAgICAgICBsZXQgdGFnSFRNTCA9IGAke2RpcmVjdGl2ZXN9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIG5nLWNoYW5nZT0ndm0ub25DaGFuZ2Uodm0uc2VsZWN0ZWQudmFsdWUpJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBuZy1vcHRpb25zPVwib3B0aW9uLmRpc3BsYXkgZm9yIG9wdGlvbiBpbiBpbnB1dERhdGEub3B0aW9ucyB0cmFjayBieSBvcHRpb24udmFsdWVcIiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgbmctbW9kZWw9J3ZtLnNlbGVjdGVkJ2A7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpbnB1dC5sYWJlbCA9IGlucHV0LmxhYmVsID8gIGlucHV0LmxhYmVsIDogJGZpbHRlcignc3RyaW5nUGFyc2VycycpKCdzdGFydENhc2UnLCBpZCk7XHJcbiAgICAgICAgICAgIGlucHV0ID0gcHVsbEluVGVtcGxhdGUuY29udmVydExhYmVsKCRmaWx0ZXIoJ3N0cmluZ1BhcnNlcnMnKSgnc3RhcnRDYXNlJywgaWQpLCBpbnB1dCwgJHNjb3BlKTtcclxuICAgICAgICAgICAgaW5wdXQub3B0aW9ucyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZXMucmVxdWlyZWQgfHwgZGVmYXVsdERpc3BsYXkpIHtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHRPcHRpb25UYWcgPSBkZWZhdWx0RGlzcGxheSA/XHJcbiAgICAgICAgICAgICAgICAgICAgYDxvcHRpb24gdmFsdWU9XCJcIj4ke2RlZmF1bHREaXNwbGF5fTwvb3B0aW9uPmAgOlxyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRPcHRpb25UYWc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGxldCB1aU9wdGlvbnNPYmogPSB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dCA6IGlucHV0LFxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdERpc3BsYXkgOiBkZWZhdWx0RGlzcGxheSxcclxuICAgICAgICAgICAgICAgIHNldHRpbmdzIDogc2V0dGluZ3MsXHJcbiAgICAgICAgICAgICAgICB0YWdzIDogdGFnSFRNTCxcclxuICAgICAgICAgICAgICAgIGVycm9ycyA6IGVycm9yTWVzc2FnZXNcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgbGV0IG9wdGlvbnNDbGFzcyA9IG5ldyBpVlhqc1VJTW9kdWxlLm9wdGlvbnModWlPcHRpb25zT2JqKTtcclxuXHJcbiAgICAgICAgICAgIGlFbG0uaHRtbChvcHRpb25zQ2xhc3MuaHRtbCk7XHJcbiAgICAgICAgICAgICRjb21waWxlKGlFbG0uY29udGVudHMoKSkoJHNjb3BlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHRlbXBsYXRlSFRNTCgpIHtcclxuICAgICAgICByZXR1cm4gYDxkaXY+PC9kaXY+YDtcclxuICAgIH07XHJcbn1cclxuXHJcbk9wdGlvbnNJbnB1dC4kaW5qZWN0ID0gWyckY29tcGlsZScsICckZmlsdGVyJywgJ2l2eGpzLm1vZHVsZXMudWknLCAnaXZ4anMuYnVzJywgJ3B1bGxJblRlbXBsYXRlJ107XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVGYWN0b3J5RnVuY3Rpb24oT3B0aW9uc0lucHV0KTsiLCJpbXBvcnQgY3JlYXRlRmFjdG9yeUZ1bmN0aW9uIGZyb20gJy4uL3V0aWxpdGllcy9jcmVhdGUtZmFjdG9yeS1mdW5jdGlvbi5qcyc7XHJcbmltcG9ydCBSYWRpb0lucHV0Q29udHJvbGxlciBmcm9tICcuLi9jb250cm9sbGVycy9pbnB1dC5yYWRpby5qcyc7XHJcbmltcG9ydCB7IEVycm9yTWVzc2FnZXMgfSBmcm9tICcuLi91dGlsaXRpZXMvbWVzc2FnZXMuZXJyb3IuanMnO1xyXG5cclxuY2xhc3MgUmFkaW9JbnB1dCB7XHJcbiAgICBjb25zdHJ1Y3RvcigkY29tcGlsZSwgJGZpbHRlciwgaVZYanNVSU1vZHVsZSwgcHVsbEluVGVtcGxhdGUpIHtcclxuICAgICAgICB0aGlzLnRlbXBsYXRlID0gdGhpcy50ZW1wbGF0ZUhUTUw7XHJcbiAgICAgICAgdGhpcy50cmFuc2NsdWRlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnJlc3RyaWN0ID0gJ0UnO1xyXG4gICAgICAgIHRoaXMucmVxdWlyZSA9IFwiXml2eGpzRm9ybUlucHV0XCI7XHJcbiAgICAgICAgdGhpcy5yZXBsYWNlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnNjb3BlID0ge1xyXG4gICAgICAgICAgICBpbnB1dERhdGE6ICc9aW5wdXREYXRhJ1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNvbnRyb2xsZXIgPSBSYWRpb0lucHV0Q29udHJvbGxlcjtcclxuICAgICAgICB0aGlzLmNvbnRyb2xsZXJBcyA9ICd2bSc7XHJcbiAgICAgICAgdGhpcy5saW5rID0gKCRzY29wZSwgaUVsbSwgaUF0dHJzLCBjb250cm9sbGVyKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCB7aW5wdXREYXRhOiBpbnB1dH0gPSAkc2NvcGU7XHJcbiAgICAgICAgICAgIGxldCB7aWQsIGVycm9ycyA9IHt9LCBuYW1lLCBsYWJlbEhUTUwsIGxhYmVsLCBhdHRyaWJ1dGVzID0ge30sIHJhZGlvQnV0dG9ucyA9IFtdLCBzZXR0aW5ncyA9IHt9fSA9IGlucHV0O1xyXG4gICAgICAgICAgICBsZXQgcmFkaW9FcnJvclJlcXVpcmVkID0gJyc7XHJcblxyXG4gICAgICAgICAgICBpZiAoYXR0cmlidXRlcy5yZXF1aXJlZCkge1xyXG4gICAgICAgICAgICAgIHJhZGlvRXJyb3JSZXF1aXJlZCAgPSBgcmVxdWlyZWQ9XCIhcmFkaW9TZWxlY3RlZFwiYDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaW5wdXQubGFiZWwgPSBsYWJlbCA/IGxhYmVsIDogJGZpbHRlcignc3RyaW5nUGFyc2VycycpKCdzdGFydENhc2UnLCBpZCk7XHJcbiAgICAgICAgICAgIGlucHV0ID0gcHVsbEluVGVtcGxhdGUuY29udmVydExhYmVsKCRmaWx0ZXIoJ3N0cmluZ1BhcnNlcnMnKSgnc3RhcnRDYXNlJywgaWQpLCBpbnB1dCwgJHNjb3BlKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBlcnJvck1lc3NhZ2VzID0gbmV3IEVycm9yTWVzc2FnZXMobmFtZSwgZXJyb3JzLCBhdHRyaWJ1dGVzKTtcclxuICAgICAgICAgICAgbGV0IGlucHV0UmFkaW9CdXR0b25EYXRhID0gcmFkaW9CdXR0b25zLm1hcCgocmFkaW9CdXR0b24sIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICByYWRpb0J1dHRvbiA9IHB1bGxJblRlbXBsYXRlLmNvbnZlcnRMYWJlbCgnJywgcmFkaW9CdXR0b24sICRzY29wZSk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGxldCB7bGFiZWwsIGxhYmVsSFRNTCwgdmFsdWUsIGNsYXNzZXMgPSAnJ30gPSByYWRpb0J1dHRvbjtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYobGFiZWxIVE1MKSBsYWJlbCA9IGxhYmVsSFRNTDtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiBsYWJlbCxcclxuICAgICAgICAgICAgICAgICAgICBhdHRySFRNTDogYG5nLWNoYW5nZT0ndm0ub25DaGFuZ2UocmFkaW9TZWxlY3RlZCknIG5nLW1vZGVsPSdyYWRpb1NlbGVjdGVkJyB2YWx1ZT0nJHt2YWx1ZX0nICR7cmFkaW9FcnJvclJlcXVpcmVkfWAsXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NlczogY2xhc3Nlc1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBsZXQgdWlSYWRpb09iaiA9IHtcclxuICAgICAgICAgICAgICAgIGlucHV0IDogaW5wdXQsXHJcbiAgICAgICAgICAgICAgICByYWRpb3MgOiBpbnB1dFJhZGlvQnV0dG9uRGF0YSxcclxuICAgICAgICAgICAgICAgIGVycm9ycyA6IGVycm9yTWVzc2FnZXMsXHJcbiAgICAgICAgICAgICAgICBzZXR0aW5ncyA6IHNldHRpbmdzLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBsZXQgdGhpc1JhZGlvc0lucHV0ID0gbmV3IGlWWGpzVUlNb2R1bGUucmFkaW8odWlSYWRpb09iaik7XHJcblxyXG4gICAgICAgICAgICBpRWxtLmh0bWwodGhpc1JhZGlvc0lucHV0Lmh0bWwpXHJcbiAgICAgICAgICAgICRjb21waWxlKGlFbG0uY29udGVudHMoKSkoJHNjb3BlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHRlbXBsYXRlSFRNTCgpIHtcclxuICAgICAgICByZXR1cm4gYDxkaXY+PC9kaXY+YDtcclxuICAgIH07XHJcbn1cclxuXHJcblJhZGlvSW5wdXQuJGluamVjdCA9IFsnJGNvbXBpbGUnLCAnJGZpbHRlcicsICdpdnhqcy5tb2R1bGVzLnVpJywgJ3B1bGxJblRlbXBsYXRlJ107XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVGYWN0b3J5RnVuY3Rpb24oUmFkaW9JbnB1dCk7IiwiaW1wb3J0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbiBmcm9tICcuLi91dGlsaXRpZXMvY3JlYXRlLWZhY3RvcnktZnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgVGV4dElucHV0Q29udHJvbGxlciBmcm9tICcuLi9jb250cm9sbGVycy9pbnB1dC50ZXh0LmpzJztcclxuaW1wb3J0IHsgRXJyb3JNZXNzYWdlcyB9IGZyb20gJy4uL3V0aWxpdGllcy9tZXNzYWdlcy5lcnJvci5qcyc7XHJcblxyXG5jbGFzcyBUZXh0SW5wdXQge1xyXG4gICAgY29uc3RydWN0b3IoJGNvbXBpbGUsICRmaWx0ZXIsIGlWWGpzLCBpVlhqc1VJTW9kdWxlLCBwdWxsSW5UZW1wbGF0ZSkge1xyXG4gICAgICAgIHRoaXMudGVtcGxhdGUgPSB0aGlzLnRlbXBsYXRlSFRNTDtcclxuICAgICAgICB0aGlzLnRyYW5zY2x1ZGUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMucmVzdHJpY3QgPSAnRSc7XHJcbiAgICAgICAgdGhpcy5yZXF1aXJlID0gXCJeaXZ4anNGb3JtSW5wdXRcIjtcclxuICAgICAgICB0aGlzLnJlcGxhY2UgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuc2NvcGUgPSB7XHJcbiAgICAgICAgICAgIGlucHV0RGF0YTogJz1pbnB1dERhdGEnXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY29udHJvbGxlciA9IFRleHRJbnB1dENvbnRyb2xsZXI7XHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVyQXMgPSAndm0nO1xyXG4gICAgICAgIHRoaXMubGluayA9ICgkc2NvcGUsIGlFbG0sIGlBdHRycywgY29udHJvbGxlcikgPT4ge1xyXG4gICAgICAgICAgICBsZXQge2lucHV0RGF0YTogaW5wdXR9ID0gJHNjb3BlO1xyXG4gICAgICAgICAgICBsZXQge2lkLCBuYW1lLCBlcnJvcnMgPSB7fSwgbGFiZWxIVE1MLCBsYWJlbCA9ICRmaWx0ZXIoJ3N0cmluZ1BhcnNlcnMnKSgnc3RhcnRDYXNlJywgaWQpLCBhdHRyaWJ1dGVzID0ge30sIHR5cGUsIHNldHRpbmdzID0ge319ID0gaW5wdXQ7XHJcbiAgICAgICAgICAgIGxldCBlcnJvck1lc3NhZ2VzID0gbmV3IEVycm9yTWVzc2FnZXMoaW5wdXQsIGVycm9ycywgYXR0cmlidXRlcyk7XHJcbiAgICAgICAgICAgIGxldCB0YWdIVE1MID0gYG5nLWJsdXI9XCJ2bS5vbkNoYW5nZShpbnB1dFZhbHVlKVwiIG5nLW1vZGVsPVwiaW5wdXRWYWx1ZVwiYFxyXG5cclxuICAgICAgICAgICAgaW5wdXQubGFiZWwgPSBsYWJlbEhUTUwgPyBsYWJlbEhUTUwgOiBsYWJlbDtcclxuICAgICAgICAgICAgaW5wdXQgPSBwdWxsSW5UZW1wbGF0ZS5jb252ZXJ0TGFiZWwoJGZpbHRlcignc3RyaW5nUGFyc2VycycpKCdzdGFydENhc2UnLCBpZCksIGlucHV0LCAkc2NvcGUpO1xyXG5cclxuICAgICAgICAgICAgbGV0IHVpVGV4dE9iaiA9IHtcclxuICAgICAgICAgICAgICAgIGlucHV0OiBpbnB1dCxcclxuICAgICAgICAgICAgICAgIHNldHRpbmdzOiBzZXR0aW5ncyxcclxuICAgICAgICAgICAgICAgIHRhZ3M6IHRhZ0hUTUwsXHJcbiAgICAgICAgICAgICAgICBlcnJvcnM6IGVycm9yTWVzc2FnZXNcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgbGV0IHRleHQgPSBuZXcgaVZYanNVSU1vZHVsZS50ZXh0KHVpVGV4dE9iaik7XHJcblxyXG4gICAgICAgICAgICBpRWxtLmh0bWwodGV4dC5odG1sKTtcclxuXHJcbiAgICAgICAgICAgICRjb21waWxlKGlFbG0uY29udGVudHMoKSkoJHNjb3BlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHRlbXBsYXRlSFRNTCgpIHtcclxuICAgICAgICByZXR1cm4gYDxkaXY+PC9kaXY+YDtcclxuICAgIH07XHJcbn1cclxuXHJcblRleHRJbnB1dC4kaW5qZWN0ID0gWyckY29tcGlsZScsICckZmlsdGVyJywgJ2lWWGpzJywgJ2l2eGpzLm1vZHVsZXMudWknLCAncHVsbEluVGVtcGxhdGUnXTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbihUZXh0SW5wdXQpOyIsImltcG9ydCBjcmVhdGVGYWN0b3J5RnVuY3Rpb24gZnJvbSAnLi4vdXRpbGl0aWVzL2NyZWF0ZS1mYWN0b3J5LWZ1bmN0aW9uLmpzJztcclxuaW1wb3J0IFRleHRBcmVhSW5wdXRDb250cm9sbGVyIGZyb20gJy4uL2NvbnRyb2xsZXJzL2lucHV0LnRleHRhcmVhLmpzJztcclxuaW1wb3J0IHsgRXJyb3JNZXNzYWdlcyB9IGZyb20gJy4uL3V0aWxpdGllcy9tZXNzYWdlcy5lcnJvci5qcyc7XHJcblxyXG5jbGFzcyBUZXh0QXJlYUlucHV0IHtcclxuICAgIGNvbnN0cnVjdG9yKCRjb21waWxlLCAkZmlsdGVyLCBpVlhqc1VJTW9kdWxlLCBwdWxsSW5UZW1wbGF0ZSkge1xyXG4gICAgICAgIHRoaXMudGVtcGxhdGUgPSB0aGlzLnRlbXBsYXRlSFRNTDtcclxuICAgICAgICB0aGlzLnRyYW5zY2x1ZGUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMucmVzdHJpY3QgPSAnRSc7XHJcbiAgICAgICAgdGhpcy5yZXF1aXJlID0gXCJeaXZ4anNGb3JtSW5wdXRcIjtcclxuICAgICAgICB0aGlzLnJlcGxhY2UgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuc2NvcGUgPSB7XHJcbiAgICAgICAgICAgIGlucHV0RGF0YTogJz1pbnB1dERhdGEnXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY29udHJvbGxlciA9IFRleHRBcmVhSW5wdXRDb250cm9sbGVyO1xyXG4gICAgICAgIHRoaXMuY29udHJvbGxlckFzID0gJ3ZtJztcclxuICAgICAgICB0aGlzLmxpbmsgPSAoJHNjb3BlLCBpRWxtLCBpQXR0cnMsIGNvbnRyb2xsZXIpID0+IHtcclxuICAgICAgICAgICAgbGV0IHtpbnB1dERhdGE6IGlucHV0fSA9ICRzY29wZTtcclxuICAgICAgICAgICAgbGV0IHtpZCwgbmFtZSwgZXJyb3JzID0ge30sIGxhYmVsSFRNTCwgbGFiZWwsIGF0dHJpYnV0ZXMgPSB7fSwgdHlwZSwgc2V0dGluZ3MgPSB7fX0gPSBpbnB1dDtcclxuICAgICAgICAgICAgbGV0IGVycm9yTWVzc2FnZXMgPSBuZXcgRXJyb3JNZXNzYWdlcyhpbnB1dCwgZXJyb3JzLCBhdHRyaWJ1dGVzKTtcclxuICAgICAgICAgICAgbGV0IHRhZ0hUTUwgPSBgbmctYmx1cj1cInZtLm9uQ2hhbmdlKGlucHV0VmFsdWUpXCIgbmctbW9kZWw9XCJpbnB1dFZhbHVlXCJgO1xyXG5cclxuICAgICAgICAgICAgaW5wdXQubGFiZWwgPSBsYWJlbCA/IGxhYmVsIDogJGZpbHRlcignc3RyaW5nUGFyc2VycycpKCdzdGFydENhc2UnLCBpZCk7XHJcbiAgICAgICAgICAgIGlucHV0ID0gcHVsbEluVGVtcGxhdGUuY29udmVydExhYmVsKCRmaWx0ZXIoJ3N0cmluZ1BhcnNlcnMnKSgnc3RhcnRDYXNlJywgaWQpLCBpbnB1dCwgJHNjb3BlKTtcclxuXHJcbiAgICAgICAgICAgIGxldCB1aVRleHRhcmVhT2JqID0ge1xyXG4gICAgICAgICAgICAgICAgaW5wdXQ6IGlucHV0LFxyXG4gICAgICAgICAgICAgICAgc2V0dGluZ3M6IHNldHRpbmdzLFxyXG4gICAgICAgICAgICAgICAgdGFnczogdGFnSFRNTCxcclxuICAgICAgICAgICAgICAgIGVycm9yczogZXJyb3JNZXNzYWdlc1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBsZXQgdGV4dGFyZWEgPSBuZXcgaVZYanNVSU1vZHVsZS50ZXh0YXJlYSh1aVRleHRhcmVhT2JqKTtcclxuXHJcbiAgICAgICAgICAgIGlFbG0uaHRtbCh0ZXh0YXJlYS5odG1sKTtcclxuICAgICAgICAgICAgJGNvbXBpbGUoaUVsbS5jb250ZW50cygpKSgkc2NvcGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgdGVtcGxhdGVIVE1MKCkge1xyXG4gICAgICAgIHJldHVybiBgPGRpdj48L2Rpdj5gO1xyXG4gICAgfTtcclxufVxyXG5cclxuVGV4dEFyZWFJbnB1dC4kaW5qZWN0ID0gWyckY29tcGlsZScsICckZmlsdGVyJywgJ2l2eGpzLm1vZHVsZXMudWknLCAncHVsbEluVGVtcGxhdGUnXTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbihUZXh0QXJlYUlucHV0KTsiLCJpbXBvcnQgY3JlYXRlRmFjdG9yeUZ1bmN0aW9uIGZyb20gJy4uL3V0aWxpdGllcy9jcmVhdGUtZmFjdG9yeS1mdW5jdGlvbi5qcyc7XHJcbmltcG9ydCBVcmxJbnB1dENvbnRyb2xsZXIgZnJvbSAnLi4vY29udHJvbGxlcnMvaW5wdXQudXJsLmpzJztcclxuaW1wb3J0IHtFcnJvck1lc3NhZ2VzfSBmcm9tICcuLi91dGlsaXRpZXMvbWVzc2FnZXMuZXJyb3IuanMnO1xyXG5cclxuY2xhc3MgVXJsSW5wdXQge1xyXG4gICAgY29uc3RydWN0b3IoJGNvbXBpbGUsICRmaWx0ZXIsIGlWWGpzVUlNb2R1bGUsIHB1bGxJblRlbXBsYXRlKSB7XHJcbiAgICAgICAgdGhpcy50ZW1wbGF0ZSA9IHRoaXMudGVtcGxhdGVIVE1MO1xyXG4gICAgICAgIHRoaXMudHJhbnNjbHVkZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5yZXN0cmljdCA9ICdFJztcclxuICAgICAgICB0aGlzLnJlcXVpcmUgPSBcIl5pdnhqc0Zvcm1JbnB1dFwiO1xyXG4gICAgICAgIHRoaXMucmVwbGFjZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5zY29wZSA9IHtcclxuICAgICAgICAgICAgaW5wdXREYXRhOiAnPWlucHV0RGF0YSdcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVyID0gVXJsSW5wdXRDb250cm9sbGVyO1xyXG4gICAgICAgIHRoaXMuY29udHJvbGxlckFzID0gJ3ZtJztcclxuICAgICAgICB0aGlzLmxpbmsgPSAoJHNjb3BlLCBpRWxtLCBpQXR0cnMsIGNvbnRyb2xsZXIpID0+IHtcclxuICAgICAgICAgICAgbGV0IHtpbnB1dERhdGE6IGlucHV0fSA9ICRzY29wZTtcclxuICAgICAgICAgICAgbGV0IHtpZCwgbmFtZSwgZXJyb3JzID0ge30sIGxhYmVsSFRNTCwgbGFiZWwsIGF0dHJpYnV0ZXMgPSB7fSwgdHlwZSwgc2V0dGluZ3MgPSB7fX0gPSBpbnB1dDtcclxuICAgICAgICAgICAgbGV0IGVycm9yTWVzc2FnZXMgPSBuZXcgRXJyb3JNZXNzYWdlcyhpbnB1dCwgZXJyb3JzLCBhdHRyaWJ1dGVzKTtcclxuICAgICAgICAgICAgbGV0IHRhZ0hUTUwgPSBgbmctYmx1cj1cInZtLm9uQ2hhbmdlKGlucHV0VmFsdWUpXCIgbmctbW9kZWw9XCJpbnB1dFZhbHVlXCJgXHJcblxyXG4gICAgICAgICAgICBpbnB1dC5sYWJlbCA9IGxhYmVsID8gbGFiZWwgOiAkZmlsdGVyKCdzdHJpbmdQYXJzZXJzJykoJ3N0YXJ0Q2FzZScsIGlkKTtcclxuICAgICAgICAgICAgaW5wdXQgPSBwdWxsSW5UZW1wbGF0ZS5jb252ZXJ0TGFiZWwoJGZpbHRlcignc3RyaW5nUGFyc2VycycpKCdzdGFydENhc2UnLCBpZCksIGlucHV0LCAkc2NvcGUpO1xyXG5cclxuICAgICAgICAgICAgbGV0IHVpVXJsT2JqID0ge1xyXG4gICAgICAgICAgICAgICAgaW5wdXQ6IGlucHV0LFxyXG4gICAgICAgICAgICAgICAgc2V0dGluZ3M6IHNldHRpbmdzLFxyXG4gICAgICAgICAgICAgICAgdGFnczogdGFnSFRNTCxcclxuICAgICAgICAgICAgICAgIGVycm9yczogZXJyb3JNZXNzYWdlc1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBsZXQgdXJsID0gbmV3IGlWWGpzVUlNb2R1bGUudXJsKHVpVXJsT2JqKTtcclxuXHJcbiAgICAgICAgICAgIGlFbG0uaHRtbCh1cmwuaHRtbCk7XHJcbiAgICAgICAgICAgICRjb21waWxlKGlFbG0uY29udGVudHMoKSkoJHNjb3BlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHRlbXBsYXRlSFRNTCgpIHtcclxuICAgICAgICByZXR1cm4gYDxkaXY+PC9kaXY+YDtcclxuICAgIH07XHJcbn1cclxuXHJcblVybElucHV0LiRpbmplY3QgPSBbJyRjb21waWxlJywgJyRmaWx0ZXInLCAnaXZ4anMubW9kdWxlcy51aScsICdwdWxsSW5UZW1wbGF0ZSddO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlRmFjdG9yeUZ1bmN0aW9uKFVybElucHV0KTsiLCJpbXBvcnQgY3JlYXRlRmFjdG9yeUZ1bmN0aW9uIGZyb20gJy4uL3V0aWxpdGllcy9jcmVhdGUtZmFjdG9yeS1mdW5jdGlvbi5qcyc7XHJcbmltcG9ydCBIdG1sU3RhdGVDb250cm9sbGVyIGZyb20gJy4uL2NvbnRyb2xsZXJzL3N0YXRlLmh0bWwuanMnO1xyXG5pbXBvcnQgQXVkaW9FdmVudE5hbWVzIGZyb20gXCIuLi8uLi9jb25zdGFudHMvYXVkaW8uZXZlbnRzLmpzXCI7XHJcblxyXG5jbGFzcyBIdG1sU3RhdGUge1xyXG4gICAgY29uc3RydWN0b3IoJHN0YXRlLCAkaHR0cCwgJGNvbXBpbGUsICRzY2UsICR0aW1lb3V0LCBpVlhqcywgaVZYanNBY3Rpb25zLCBpVlhqc0F1ZGlvLCBpVlhqc0J1cykge1xyXG4gICAgICAgIHRoaXMudGVtcGxhdGUgPSB0aGlzLnRlbXBsYXRlSFRNTDtcclxuICAgICAgICB0aGlzLnJlc3RyaWN0ID0gJ0UnO1xyXG4gICAgICAgIHRoaXMucmVwbGFjZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5zY29wZSA9IHt9O1xyXG4gICAgICAgIHRoaXMuY29udHJvbGxlciA9IEh0bWxTdGF0ZUNvbnRyb2xsZXI7XHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVyQXMgPSAndm0nO1xyXG4gICAgICAgIHRoaXMubGluayA9IGZ1bmN0aW9uICgkc2NvcGUsIGlFbG0sIGlBdHRycywgY29udHJvbGxlcikge1xyXG4gICAgICAgICAgICBsZXQge2lkLCBodG1sLCB0ZW1wbGF0ZVVybCwgb25Db21waWxlID0gW10sIGF1ZGlvfSA9ICRzdGF0ZS5jdXJyZW50LmRhdGE7XHJcbiAgICAgICAgICAgIGxldCBhdWRpb0V2ZW50TmFtZXMgPSBuZXcgQXVkaW9FdmVudE5hbWVzKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGVtcGxhdGVVcmwpIHtcclxuICAgICAgICAgICAgICAgIGxldCBzYWZlVGVtcGxhdGVVcmwgPSAkc2NlLmdldFRydXN0ZWRSZXNvdXJjZVVybCh0ZW1wbGF0ZVVybCk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5zYWZlVGVtcGxhdGVVcmwgPSBzYWZlVGVtcGxhdGVVcmxcclxuXHJcbiAgICAgICAgICAgICAgICBpRWxtLmh0bWwoYDxkaXYgY2xhc3M9XCJodG1sLXN0YXRlLWNvbnRhaW5lclwiIG5nLWluY2x1ZGU9XCJ2bS5zYWZlVGVtcGxhdGVVcmxcIj48L2Rpdj5gKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlFbG0uaHRtbChodG1sKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgJHNjb3BlLmV4cGVyaWVuY2UgPSBpVlhqcy5leHBlcmllbmNlLmRhdGE7XHJcblxyXG4gICAgICAgICAgICAkdGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgaGFzVHJhbnNpdGlvbiA9IG9uQ29tcGlsZS5maW5kKChldmVudCwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnQuZXZlbnROYW1lID09PSBcImFuaW1hdGVFbGVtZW50XCIgJiYgZXZlbnQuYXJncy5lbGVtZW50ID09PSBcIi5odG1sLXN0YXRlLWNvbnRhaW5lclwiO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFoYXNUcmFuc2l0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb25Db21waWxlLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudE5hbWU6IFwiYW5pbWF0ZUVsZW1lbnRcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogXCIuaHRtbC1zdGF0ZS1jb250YWluZXJcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbkNsYXNzZXM6IFwic2hvd1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlWWGpzQWN0aW9ucy5yZXNvbHZlQWN0aW9ucyhvbkNvbXBpbGUsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXVkaW8gJiYgYXVkaW8uc3JjKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlWWGpzQnVzLmVtaXQoYXVkaW9FdmVudE5hbWVzLlBMQVkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9LCAxKTtcclxuICAgICAgICAgICAgJGNvbXBpbGUoaUVsbS5jb250ZW50cygpKSgkc2NvcGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgdGVtcGxhdGVIVE1MKCkge1xyXG4gICAgICAgIHJldHVybiBgPGRpdiBjbGFzcz1cImh0bWwtc3RhdGUtY29udGFpbmVyXCIgaWQ9XCJ7e3ZtLmlkfX1cIj48L2Rpdj5gO1xyXG4gICAgfTtcclxufVxyXG5cclxuSHRtbFN0YXRlLiRpbmplY3QgPSBbJyRzdGF0ZScsICckaHR0cCcsICckY29tcGlsZScsICckc2NlJywgJyR0aW1lb3V0JywgJ2lWWGpzJywgJ2l2eGpzLmFjdGlvbnMnLCAnaXZ4anMubW9kdWxlcy5hdWRpbycsICdpdnhqcy5idXMnXTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbihIdG1sU3RhdGUpOyIsImltcG9ydCBjcmVhdGVGYWN0b3J5RnVuY3Rpb24gZnJvbSAnLi4vdXRpbGl0aWVzL2NyZWF0ZS1mYWN0b3J5LWZ1bmN0aW9uLmpzJztcclxuaW1wb3J0IElucHV0U3RhdGVDb250cm9sbGVyIGZyb20gJy4uL2NvbnRyb2xsZXJzL3N0YXRlLmlucHV0LmpzJztcclxuXHJcbmNsYXNzIElucHV0U3RhdGUge1xyXG4gICAgY29uc3RydWN0b3IoJHN0YXRlLCAkY29tcGlsZSwgJHNjZSwgaVZYanMsIGlWWGpzQWN0aW9ucywgaVZYanNVSU1vZHVsZSwgcHVsbEluVGVtcGxhdGUpIHtcclxuICAgICAgICB0aGlzLnRlbXBsYXRlID0gdGhpcy50ZW1wbGF0ZUhUTUw7XHJcbiAgICAgICAgdGhpcy5yZXBsYWNlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnJlc3RyaWN0ID0gJ0UnO1xyXG4gICAgICAgIHRoaXMuc2NvcGUgPSB7fVxyXG4gICAgICAgIHRoaXMuY29udHJvbGxlciA9IElucHV0U3RhdGVDb250cm9sbGVyO1xyXG4gICAgICAgIHRoaXMuY29udHJvbGxlckFzID0gJ3ZtJztcclxuICAgICAgICB0aGlzLmxpbmsgPSBmdW5jdGlvbiAoJHNjb3BlLCBpRWxtLCBpQXR0cnMsIGNvbnRyb2xsZXIpIHtcclxuICAgICAgICAgICAgbGV0IHtkYXRhfSA9ICRzdGF0ZS5jdXJyZW50O1xyXG4gICAgICAgICAgICBsZXQge2hlYWRlckhUTUwsIGZvb3RlckhUTUwgPSAnJywgb25JbnB1dFJlYWR5ID0gW10sIGZvcm0gOiBmb3JtU2V0dGluZ3MgPSB7fSwgaGVhZGVyID0ge30sIGZvb3RlciA9IHt9fSA9IGRhdGE7XHJcbiAgICAgICAgICAgIGxldCBmb3JtU2VjdGlvbiA9IGA8aXZ4anMtZm9ybS1pbnB1dCBpbnB1dHM9J3ZtLmlucHV0cycgZm9ybS1pZD0ndm0uaWQnIG9uLXN1Ym1pdD0ndm0ub25TdWJtaXQnIGZvcm0tc2V0dGluZ3M9XCJ2bS5mb3JtU2V0dGluZ3NcIj48L2l2eGpzLWZvcm0taW5wdXQ+YDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGRhdGEgPSBwdWxsSW5UZW1wbGF0ZS5jb252ZXJ0SGVhZGVyRm9vdGVyKGhlYWRlciwgZm9vdGVyLCBkYXRhLCBjb250cm9sbGVyKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBpbnB1dFN0YXRlRnJhbWV3b3JrID0gbmV3IGlWWGpzVUlNb2R1bGUuc3RhdGVzLmlucHV0KGZvcm1TZWN0aW9uLCBkYXRhKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICRzY29wZS5leHBlcmllbmNlID0gaVZYanMuZXhwZXJpZW5jZS5kYXRhOyAgXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuZm9ybVNldHRpbmdzID0gZm9ybVNldHRpbmdzO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaUVsbS5odG1sKGlucHV0U3RhdGVGcmFtZXdvcmsuaHRtbCk7XHJcbiAgICAgICAgICAgICRjb21waWxlKGlFbG0uY29udGVudHMoKSkoJHNjb3BlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHRlbXBsYXRlSFRNTCgpIHtcclxuICAgICAgICByZXR1cm4gYDxkaXYgY2xhc3M9XCJpbnB1dC1zdGF0ZS1jb250YWluZXJcIj48L2Rpdj5gO1xyXG4gICAgfTtcclxufVxyXG5cclxuSW5wdXRTdGF0ZS4kaW5qZWN0ID0gWyckc3RhdGUnLCAnJGNvbXBpbGUnLCAnJHNjZScsICdpVlhqcycsICdpdnhqcy5hY3Rpb25zJywgJ2l2eGpzLm1vZHVsZXMudWknLCAncHVsbEluVGVtcGxhdGUnXTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbihJbnB1dFN0YXRlKTsiLCJpbXBvcnQgY3JlYXRlRmFjdG9yeUZ1bmN0aW9uIGZyb20gJy4uL3V0aWxpdGllcy9jcmVhdGUtZmFjdG9yeS1mdW5jdGlvbi5qcyc7XG5pbXBvcnQgQXVkaW9FdmVudE5hbWVzIGZyb20gXCIuLi8uLi9jb25zdGFudHMvYXVkaW8uZXZlbnRzLmpzXCI7XG5cblxuY2xhc3MgTmF2aWdhdGlvblN0YXRlIHtcblx0Y29uc3RydWN0b3IoJHN0YXRlLCAkcm9vdFNjb3BlLCAkY29tcGlsZSwgJHRpbWVvdXQsIGlWWGpzLCBpVlhqc01vZHVsZXMsIGlWWGpzQnVzLCBpVlhqc0F1ZGlvLCBpVlhqc0FjdGlvbnMsIHB1bGxJblRlbXBsYXRlKSB7XG5cdFx0dGhpcy50ZW1wbGF0ZSA9IHRoaXMudGVtcGxhdGVIVE1MO1xuXHRcdHRoaXMucmVzdHJpY3QgPSAnRSc7XG5cdFx0dGhpcy5yZXBsYWNlID0gdHJ1ZTtcblx0XHR0aGlzLnNjb3BlID0ge307XG5cdFx0dGhpcy5jb250cm9sbGVyID0gWyckc2NvcGUnLCAoJHNjb3BlKSA9PiB7IH1dO1xuXHRcdHRoaXMuY29udHJvbGxlckFzID0gJ3ZtJztcblx0XHR0aGlzLmxpbmsgPSBmdW5jdGlvbiAoJHNjb3BlLCBpRWxtLCBpQXR0cnMsIGNvbnRyb2xsZXIpIHtcblx0XHRcdGxldCB7IGRhdGEgfSA9ICRzdGF0ZS5jdXJyZW50O1xuXHRcdFx0bGV0IHsgbGlua3MgPSBbXSwgaGVhZGVyID0ge30sIGZvb3RlciA9IHt9LCBhdWRpbywgb25MaW5rc1JlYWR5ID0gW10gfSA9IGRhdGE7XG5cdFx0XHRsZXQgbGlua1NlY3Rpb24gPSBsaW5rcy5yZWR1Y2UoKGh0bWwsIGxpbmssIGluZGV4KSA9PiB7XG5cdFx0XHRcdGxldCBsaW5rU3RyaW5nID0gYW5ndWxhci50b0pzb24obGluayk7XG5cdFx0XHRcdHJldHVybiBgJHtodG1sfVxuICAgICAgICAgICAgICAgICAgICA8aXZ4anMtYW5jaG9yIGFuY2hvci1pbmZvPScke2xpbmtTdHJpbmd9Jz48L2l2eGpzLWFuY2hvcj5gO1xuXHRcdFx0fSwgJycpO1xuXHRcdFx0bGV0IGF1ZGlvRXZlbnROYW1lcyA9IG5ldyBBdWRpb0V2ZW50TmFtZXMoKTtcblxuXHRcdFx0ZGF0YSA9IHB1bGxJblRlbXBsYXRlLmNvbnZlcnRIZWFkZXJGb290ZXIoaGVhZGVyLCBmb290ZXIsIGRhdGEsIGNvbnRyb2xsZXIpO1xuXG5cdFx0XHRsZXQgdGhpc05hdmlnYXRpb25TdGF0ZSA9IG5ldyBpVlhqc01vZHVsZXMuc3RhdGVzLm5hdmlnYXRpb24oZGF0YSwgbGlua1NlY3Rpb24pO1xuXG5cdFx0XHQkc2NvcGUuZXhwZXJpZW5jZSA9IGlWWGpzLmV4cGVyaWVuY2UuZGF0YTtcblx0XHRcdCR0aW1lb3V0KCgpID0+IHtcblx0XHRcdFx0bGV0IHRyYW5zaXRpb25BbmltYXRpb24gPSBvbkxpbmtzUmVhZHkuZmluZCgoZXZlbnQsIGluZGV4KSA9PiB7XG5cdFx0XHRcdFx0cmV0dXJuIGV2ZW50LmV2ZW50TmFtZSA9PT0gXCJhbmltYXRlRWxlbWVudFwiICYmIGV2ZW50LmFyZ3MuZWxlbWVudCA9PT0gXCIubmF2aWdhdGlvbi1zdGF0ZS1jb250YWluZXJcIjtcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0aWYgKCF0cmFuc2l0aW9uQW5pbWF0aW9uKSB7XG5cdFx0XHRcdFx0b25MaW5rc1JlYWR5LnB1c2goe1xuXHRcdFx0XHRcdFx0ZXZlbnROYW1lOiBcImFuaW1hdGVFbGVtZW50XCIsXG5cdFx0XHRcdFx0XHRhcmdzOiB7XG5cdFx0XHRcdFx0XHRcdGVsZW1lbnQ6IFwiLm5hdmlnYXRpb24tc3RhdGUtY29udGFpbmVyXCIsXG5cdFx0XHRcdFx0XHRcdGFuaW1hdGlvbkNsYXNzZXM6IFwic2hvd1wiXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSlcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0aVZYanNBY3Rpb25zLnJlc29sdmVBY3Rpb25zKG9uTGlua3NSZWFkeSwgKCkgPT4ge1xuXHRcdFx0XHRcdGlmIChhdWRpbyAmJiBhdWRpby5zcmMpIHtcblx0XHRcdFx0XHRcdGlWWGpzQnVzLmVtaXQoYXVkaW9FdmVudE5hbWVzLlBMQVkpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9KVxuXHRcdFx0fSwgMSlcblxuXHRcdFx0aUVsbS5odG1sKHRoaXNOYXZpZ2F0aW9uU3RhdGUuaHRtbCk7XG5cdFx0XHQkY29tcGlsZShpRWxtLmNvbnRlbnRzKCkpKCRzY29wZSk7XG5cdFx0fVxuXHR9XG5cblx0Z2V0IHRlbXBsYXRlSFRNTCgpIHtcblx0XHRyZXR1cm4gYDxkaXYgY2xhc3M9XCJuYXZpZ2F0aW9uLXN0YXRlLWNvbnRhaW5lclwiPjwvZGl2PmA7XG5cdH07XG59XG5cbk5hdmlnYXRpb25TdGF0ZS4kaW5qZWN0ID0gWyckc3RhdGUnLCAnJHJvb3RTY29wZScsICckY29tcGlsZScsICckdGltZW91dCcsICdpVlhqcycsICdpdnhqcy5tb2R1bGVzLnVpJywgJ2l2eGpzLmJ1cycsICdpdnhqcy5tb2R1bGVzLmF1ZGlvJywgJ2l2eGpzLmFjdGlvbnMnLCAncHVsbEluVGVtcGxhdGUnXTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlRmFjdG9yeUZ1bmN0aW9uKE5hdmlnYXRpb25TdGF0ZSk7IiwiaW1wb3J0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbiBmcm9tICcuLi91dGlsaXRpZXMvY3JlYXRlLWZhY3RvcnktZnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgVmlkZW9TdGF0ZUNvbnRyb2xsZXIgZnJvbSAnLi4vY29udHJvbGxlcnMvc3RhdGUudmlkZW8uanMnO1xyXG5pbXBvcnQgVmlkZW9FdmVudENvbnN0YW50cyBmcm9tIFwiLi4vLi4vY29uc3RhbnRzL3ZpZGVvLmV2ZW50cy5qc1wiO1xyXG5cclxuXHJcbmNsYXNzIFZpZGVvU3RhdGUge1xyXG4gICAgY29uc3RydWN0b3IoJGNvbXBpbGUsICRzdGF0ZSwgJHNjZSwgJHRpbWVvdXQsIGlWWGpzLCBpVlhqc0J1cywgaVZYanNVSU1vZHVsZSwgY3JlYXRlSW5saW5lVmlkZW8sIHB1bGxJblRlbXBsYXRlKSB7XHJcbiAgICAgICAgdGhpcy50ZW1wbGF0ZSA9IHRoaXMudGVtcGxhdGVIVE1MO1xyXG4gICAgICAgIHRoaXMucmVzdHJpY3QgPSAnRSc7XHJcbiAgICAgICAgdGhpcy5yZXBsYWNlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnNjb3BlID0ge31cclxuICAgICAgICB0aGlzLmNvbnRyb2xsZXIgPSBWaWRlb1N0YXRlQ29udHJvbGxlclxyXG4gICAgICAgIHRoaXMuY29udHJvbGxlckFzID0gJ3ZtJztcclxuICAgICAgICB0aGlzLmxpbmsgPSAoJHNjb3BlLCBpRWxtLCBpQXR0cnMsIGNvbnRyb2xsZXIpID0+IHtcclxuICAgICAgICAgICAgbGV0IHtkYXRhfSA9IGFuZ3VsYXIuY29weSgkc3RhdGUuY3VycmVudCk7XHJcblxyXG4gICAgICAgICAgICBjb250cm9sbGVyLnN0YXRlRGF0YSA9IGRhdGE7XHJcblxyXG4gICAgICAgICAgICBsZXQge2lkLCBwbGF5ZXJUeXBlID0gXCJodG1sNVwiLCBwbGF5ZXJTZXR0aW5ncyA9IHt9LCBjdWVQb2ludHMgPSBbXSwgcGVyc29uYWxpemF0aW9ucyA9IFtdLCBoZWFkZXIgPSB7fSwgZm9vdGVyID0ge319ID0gZGF0YTtcclxuICAgICAgICAgICAgbGV0IHt2aW1lb0lkLCB5b3V0dWJlSWQsIGlubGluZVNyYywgaXBob25lSW5saW5lID0gZmFsc2V9ID0gcGxheWVyU2V0dGluZ3M7XHJcbiAgICAgICAgICAgIGxldCBjb250cm9sc0hUTUwgPSBgYDtcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcGxheWVyU2V0dGluZ3MuY29udHJvbHMgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICBjb250cm9sc0hUTUwgPSBgPGl2eGpzLSR7cGxheWVyU2V0dGluZ3MuY29udHJvbHN9LXZpZGVvLWNvbnRyb2xzPjwvaXZ4anMtJHtwbGF5ZXJTZXR0aW5ncy5jb250cm9sc30tdmlkZW8tY29udHJvbHM+YDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHZpbWVvSWQpIHBsYXllclR5cGUgPSAndmltZW8nO1xyXG4gICAgICAgICAgICBpZiAoeW91dHViZUlkKSBwbGF5ZXJUeXBlID0gJ3lvdXR1YmUnO1xyXG4gICAgICAgICAgICBpZiAoY3JlYXRlSW5saW5lVmlkZW8uaXNpT1MoKSAmJiBpcGhvbmVJbmxpbmUgJiYgaW5saW5lU3JjKSB7XHJcbiAgICAgICAgICAgICAgICBwbGF5ZXJUeXBlID0gJ2h0bWw1JztcclxuICAgICAgICAgICAgICAgIHBsYXllclNldHRpbmdzLnNyYyA9IGlubGluZVNyYztcclxuICAgICAgICAgICAgICAgIGRhdGEuaXNJcGhvbmUgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgbGV0IHBlcnNvbmFsaXphdGlvbnNIVE1MID0gcGVyc29uYWxpemF0aW9ucy5yZWR1Y2UoKHBlcnNvbmFsaXphdGlvbkhUTUwsIHRoaXNQZXJzb25hbGl6YXRpb24sIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzUGVyc29uYWxpemF0aW9uID0gcHVsbEluVGVtcGxhdGUuY29udmVydFRlbXBsYXRlVXJsVG9IdG1sKHRoaXNQZXJzb25hbGl6YXRpb24sICRzY29wZSk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGxldCB7IGRlZmF1bHRBbmltYXRpb25DbGFzcyA9ICdoaWRlJywgaHRtbCwgaWQgfSA9IHRoaXNQZXJzb25hbGl6YXRpb247XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke3BlcnNvbmFsaXphdGlvbkhUTUx9IDxkaXYgaWQ9XCIke2lkfVwiIGNsYXNzPVwiJHtkZWZhdWx0QW5pbWF0aW9uQ2xhc3N9XCI+JHtodG1sfTwvZGl2PiBgXHJcbiAgICAgICAgICAgIH0sIFwiXCIpO1xyXG5cclxuXHJcbiAgICAgICAgICAgIGxldCB2aWRlb1BsYXllckhUTUwgPSBgXHJcbiAgICAgICAgICAgICAgIDxpdnhqcy0ke3BsYXllclR5cGV9LXZpZGVvLXBsYXllciBzZXR0aW5ncz1cInZtLnN0YXRlRGF0YS5wbGF5ZXJTZXR0aW5nc1wiIHN0YXRlLWRhdGE9XCJ2bS5zdGF0ZURhdGFcIj48L2l2eGpzLSR7cGxheWVyVHlwZX0tdmlkZW8tcGxheWVyPlxyXG4gICAgICAgICAgICAgICAke2NvbnRyb2xzSFRNTH1cclxuICAgICAgICAgICAgICAgJHtwZXJzb25hbGl6YXRpb25zSFRNTH1gO1xyXG5cclxuICAgICAgICAgICAgZGF0YSA9IHB1bGxJblRlbXBsYXRlLmNvbnZlcnRIZWFkZXJGb290ZXIoaGVhZGVyLCBmb290ZXIsIGRhdGEsIGNvbnRyb2xsZXIpO1xyXG5cclxuICAgICAgICAgICAgbGV0IHZpZGVvRnJhbWV3b3JrID0gbmV3IGlWWGpzVUlNb2R1bGUuc3RhdGVzLnZpZGVvKHZpZGVvUGxheWVySFRNTCwgZGF0YSk7XHJcblxyXG4gICAgICAgICAgICAkc2NvcGUuZXhwZXJpZW5jZSA9IGlWWGpzLmV4cGVyaWVuY2UuZGF0YTtcclxuXHJcbiAgICAgICAgICAgIGlFbG0uaHRtbCh2aWRlb0ZyYW1ld29yay5odG1sKTtcclxuICAgICAgICAgICAgJGNvbXBpbGUoaUVsbS5jb250ZW50cygpKSgkc2NvcGUpO1xyXG5cclxuICAgICAgICAgICAgaWYoY3JlYXRlSW5saW5lVmlkZW8uaXNNb2JpbGUoKSB8fCBjcmVhdGVJbmxpbmVWaWRlby5pc2lPUygpKXtcclxuICAgICAgICAgICAgICAgIGxldCB2aWRlb0V2ZW50TmFtZXMgPSBuZXcgVmlkZW9FdmVudENvbnN0YW50cygpO1xyXG4gICAgICAgICAgICAgICAgJHRpbWVvdXQoKCk9PntcclxuICAgICAgICAgICAgICAgICAgICBpVlhqc0J1cy5lbWl0KHZpZGVvRXZlbnROYW1lcy5DQU5fUExBWSk7XHJcbiAgICAgICAgICAgICAgICB9LDUwMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHRlbXBsYXRlSFRNTCgpIHtcclxuICAgICAgICByZXR1cm4gYDxkaXYgY2xhc3M9XCJ2aWRlby1zdGF0ZS1jb250YWluZXJcIj48L2Rpdj5gO1xyXG4gICAgfVxyXG59XHJcblxyXG5WaWRlb1N0YXRlLiRpbmplY3QgPSBbJyRjb21waWxlJywgJyRzdGF0ZScsICckc2NlJywgJyR0aW1lb3V0JywgJ2lWWGpzJywgJ2l2eGpzLmJ1cycsICdpdnhqcy5tb2R1bGVzLnVpJywgJ2NyZWF0ZUlubGluZVZpZGVvJywgJ3B1bGxJblRlbXBsYXRlJ107XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVGYWN0b3J5RnVuY3Rpb24oVmlkZW9TdGF0ZSk7IiwiaW1wb3J0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbiBmcm9tICcuLi91dGlsaXRpZXMvY3JlYXRlLWZhY3RvcnktZnVuY3Rpb24uanMnO1xuLy8gQ09OVFJPTExFUlxuLy8gaW1wb3J0IHtbQ1RSTE5BTUVdfSBmcm9tICdbQ1RSTEZJTEVdJztcblxuXG5jbGFzcyBBbmltYXRlRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoaVZYanMpIHtcbiAgICAgICAgdGhpcy5yZXN0cmljdCA9ICdBJztcbiAgICAgICAgdGhpcy5jb250cm9sbGVyID0gW1wiaVZYanNcIiwgKGlWWGpzKT0+e1xuICAgICAgICAgICAgXG4gICAgICAgIH1dO1xuICAgICAgICB0aGlzLmxpbmsgPSAoJHNjb3BlLCBpRWxtLCBpQXR0cnMsIGNvbnRyb2xsZXIpID0+IHtcbiAgICAgICAgICAgIGlFbG1bMF0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+e1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgbGV0IHtpdnhBbmltYXRlIDogdmFsdWV9ID0gaUF0dHJzO1xuICAgICAgICAgICAgICAgIGxldCBrZXlWYWx1ZSA9IGV4dHJhY3RLZXlWYWx1ZSh2YWx1ZSk7XG5cbiAgICAgICAgICAgICAgICBpVlhqcy5leHBlcmllbmNlLmFuaW1hdGVFbGVtZW50KGtleVZhbHVlKTtcbiAgICAgICAgICAgIH0sIGZhbHNlKTtcblxuXG4gICAgICAgICAgICBmdW5jdGlvbiBleHRyYWN0S2V5VmFsdWUodmFsdWVTdHJpbmcpe1xuICAgICAgICAgICAgICAgIGxldCB1cGRhdGVkVmFsdWUgPSB2YWx1ZVN0cmluZy50cmltKCk7XG4gICAgICAgICAgICAgICAgbGV0IHBhcnRzID0gdXBkYXRlZFZhbHVlLnNwbGl0KCcsJyk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcGFydHMgPSBwYXJ0cy5tYXAoKHBhcnQsIGluZGV4KT0+e1xuICAgICAgICAgICAgICAgICAgICBsZXQgbmV3UGFydCA9IHBhcnQudHJpbSgpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBuZXdQYXJ0ID0gbmV3UGFydC5yZXBsYWNlKC9be31cXCdcXFwiXS9nLCBcIlwiKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ld1BhcnQ7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBsZXQgZWxlbWVudCA9IHBhcnRzWzBdO1xuICAgICAgICAgICAgICAgIGxldCBhbmltYXRpb25DbGFzc2VzID0gcGFydHNbMV0gPT09IFwidHJ1ZVwiIHx8IHBhcnRzWzFdID09PSBcImZhbHNlXCIgPyBwYXJ0c1sxXSA9PT0gXCJ0cnVlXCIgIDogcGFydHNbMV07IFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiB7ZWxlbWVudCwgYW5pbWF0aW9uQ2xhc3Nlc307XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gICAgICAgIFxuICAgIH1cblxufVxuXG5BbmltYXRlRWxlbWVudC4kaW5qZWN0ID0gWydpVlhqcyddO1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVGYWN0b3J5RnVuY3Rpb24oQW5pbWF0ZUVsZW1lbnQpO1xuIiwiaW1wb3J0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbiBmcm9tICcuLi91dGlsaXRpZXMvY3JlYXRlLWZhY3RvcnktZnVuY3Rpb24uanMnO1xuLy8gQ09OVFJPTExFUlxuLy8gaW1wb3J0IHtbQ1RSTE5BTUVdfSBmcm9tICdbQ1RSTEZJTEVdJztcblxuXG5jbGFzcyBHb1RvU3RhdGUge1xuICAgIGNvbnN0cnVjdG9yKGlWWGpzLCBpVlhqc0J1cykge1xuICAgICAgICB0aGlzLnJlc3RyaWN0ID0gJ0EnO1xuICAgICAgICB0aGlzLmNvbnRyb2xsZXIgPSBbXCJpVlhqc1wiLCAoaVZYanMpPT57XG4gICAgICAgICAgICBcbiAgICAgICAgfV07XG4gICAgICAgIHRoaXMubGluayA9ICgkc2NvcGUsIGlFbG0sIGlBdHRycywgY29udHJvbGxlcikgPT4ge1xuICAgICAgICAgICAgaUVsbVswXS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT57XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBsZXQge2l2eEdvVG9TdGF0ZSA6IHN0YXRlSWR9ID0gaUF0dHJzO1xuICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaVZYanMuZXhwZXJpZW5jZS5nb1RvU3RhdGUoe3N0YXRlSWR9LCBpVlhqc0J1cyk7XG4gICAgICAgICAgICB9LCBmYWxzZSk7XG4gICAgICAgIH0gICAgICAgIFxuICAgIH1cblxufVxuXG5Hb1RvU3RhdGUuJGluamVjdCA9IFsnaVZYanMnLCAnaXZ4anMuYnVzJ107XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbihHb1RvU3RhdGUpO1xuIiwiaW1wb3J0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbiBmcm9tICcuLi91dGlsaXRpZXMvY3JlYXRlLWZhY3RvcnktZnVuY3Rpb24uanMnO1xuLy8gQ09OVFJPTExFUlxuLy8gaW1wb3J0IHtbQ1RSTE5BTUVdfSBmcm9tICdbQ1RSTEZJTEVdJztcblxuY2xhc3MgUmFpc2VpVlhqc0V2ZW50IHtcbiAgICBjb25zdHJ1Y3RvcihpVlhqcywgaVZYanNCdXMpIHtcbiAgICAgICAgdGhpcy5yZXN0cmljdCA9ICdBJztcbiAgICAgICAgdGhpcy5jb250cm9sbGVyID0gW1wiaVZYanNcIiwgKGlWWGpzKT0+e1xuICAgICAgICAgICAgXG4gICAgICAgIH1dO1xuICAgICAgICB0aGlzLmxpbmsgPSAoJHNjb3BlLCBpRWxtLCBpQXR0cnMsIGNvbnRyb2xsZXIpID0+IHtcbiAgICAgICAgICAgIGlFbG1bMF0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+e1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbGV0IHtpdnhFdmVudCA6IGV2ZW50TmFtZX0gPSBpQXR0cnM7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaVZYanNCdXMuZW1pdChldmVudE5hbWUpO1xuICAgICAgICAgICAgfSwgZmFsc2UpO1xuICAgICAgICB9ICAgICAgICBcbiAgICB9XG5cbn1cblxuUmFpc2VpVlhqc0V2ZW50LiRpbmplY3QgPSBbJ2lWWGpzJywgJ2l2eGpzLmJ1cyddO1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVGYWN0b3J5RnVuY3Rpb24oUmFpc2VpVlhqc0V2ZW50KTtcbiIsImltcG9ydCBjcmVhdGVGYWN0b3J5RnVuY3Rpb24gZnJvbSAnLi4vdXRpbGl0aWVzL2NyZWF0ZS1mYWN0b3J5LWZ1bmN0aW9uLmpzJztcbi8vIENPTlRST0xMRVJcbi8vIGltcG9ydCB7W0NUUkxOQU1FXX0gZnJvbSAnW0NUUkxGSUxFXSc7XG5cblxuY2xhc3MgU2V0RGF0YSB7XG4gICAgY29uc3RydWN0b3IoaVZYanMpIHtcbiAgICAgICAgdGhpcy5yZXN0cmljdCA9ICdBJztcbiAgICAgICAgdGhpcy5jb250cm9sbGVyID0gW1wiaVZYanNcIiwgKGlWWGpzKT0+e1xuICAgICAgICAgICAgXG4gICAgICAgIH1dO1xuICAgICAgICB0aGlzLmxpbmsgPSAoJHNjb3BlLCBpRWxtLCBpQXR0cnMsIGNvbnRyb2xsZXIpID0+IHtcbiAgICAgICAgICAgIGlFbG1bMF0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+e1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgbGV0IHtpdnhTZXREYXRhIDogdmFsdWV9ID0gaUF0dHJzO1xuICAgICAgICAgICAgICAgIGxldCBrZXlWYWx1ZSA9IGV4dHJhY3RLZXlWYWx1ZSh2YWx1ZSk7XG5cbiAgICAgICAgICAgICAgICBpVlhqcy5leHBlcmllbmNlLnNldERhdGEoa2V5VmFsdWUpO1xuICAgICAgICAgICAgfSwgZmFsc2UpO1xuXG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGV4dHJhY3RLZXlWYWx1ZSh2YWx1ZVN0cmluZyl7XG4gICAgICAgICAgICAgICAgbGV0IHVwZGF0ZWRWYWx1ZSA9IHZhbHVlU3RyaW5nLnRyaW0oKTtcbiAgICAgICAgICAgICAgICBsZXQgcGFydHMgPSB1cGRhdGVkVmFsdWUuc3BsaXQoJywnKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBwYXJ0cyA9IHBhcnRzLm1hcCgocGFydCwgaW5kZXgpPT57XG4gICAgICAgICAgICAgICAgICAgIGxldCBuZXdQYXJ0ID0gcGFydC50cmltKCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIG5ld1BhcnQgPSBuZXdQYXJ0LnJlcGxhY2UoL1t7fV0vZywgXCJcIik7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGlmKGluZGV4ID09PSAwKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1BhcnQgPSBuZXdQYXJ0LnJlcGxhY2UoL1tcXCdcXFwiXS9nLCBcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ld1BhcnQ7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBsZXQga2V5ID0gcGFydHNbMF07XG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gcGFydHNbMV0gPT09IFwidHJ1ZVwiIHx8IHBhcnRzWzFdID09PSBcImZhbHNlXCIgPyBwYXJ0c1sxXSA9PT0gXCJ0cnVlXCIgIDogcGFydHNbMV07IFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiB7a2V5LCB2YWx1ZX07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gICAgICAgIFxuICAgIH1cblxufVxuXG5TZXREYXRhLiRpbmplY3QgPSBbJ2lWWGpzJ107XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbihTZXREYXRhKTtcbiIsImltcG9ydCBjcmVhdGVGYWN0b3J5RnVuY3Rpb24gZnJvbSAnLi4vdXRpbGl0aWVzL2NyZWF0ZS1mYWN0b3J5LWZ1bmN0aW9uLmpzJztcbmltcG9ydCBBbmNob3JDb250cm9sbGVyIGZyb20gJy4uL2NvbnRyb2xsZXJzL3VpLmFuY2hvci5qcyc7XG5cbmV4cG9ydCBjbGFzcyBBbmNob3Ige1xuXHRjb25zdHJ1Y3RvcigkY29tcGlsZSwgaVZYanMsIGlWWGpzVUlNb2R1bGUsIHB1bGxJblRlbXBsYXRlKSB7XG5cdFx0dGhpcy50ZW1wbGF0ZSA9IHRoaXMudGVtcGxhdGVIVE1MO1xuXHRcdHRoaXMucmVzdHJpY3QgPSAnRSc7XG5cdFx0dGhpcy5zY29wZSA9IHtcblx0XHRcdGFuY2hvckluZm86IFwiPWFuY2hvckluZm9cIlxuXHRcdH1cblx0XHR0aGlzLmNvbnRyb2xsZXIgPSBBbmNob3JDb250cm9sbGVyO1xuXHRcdHRoaXMuY29udHJvbGxlckFzID0gJ3ZtJztcblx0XHR0aGlzLnJlcGxhY2UgPSB0cnVlO1xuXHRcdHRoaXMubGluayA9IGZ1bmN0aW9uKCRzY29wZSwgaUVsbSwgaUF0dHJzLCBjb250cm9sbGVyKSB7XG5cdFx0XHRsZXQge2FuY2hvckluZm99ID0gJHNjb3BlO1xuXHRcdFx0bGV0IHthdHRyaWJ1dGVzID0ge319ID0gYW5jaG9ySW5mbztcblxuXHRcdFx0YXR0cmlidXRlc1snbmctY2xpY2snXSA9IGB2bS5vbkxpbmtDbGljaygkZXZlbnQpYDtcblx0XHRcdGFuY2hvckluZm8uYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXM7XG5cdFx0XHRjb250cm9sbGVyLmFuY2hvckluZm8gPSBhbmNob3JJbmZvO1xuXG5cdFx0XHRhbmNob3JJbmZvID0gcHVsbEluVGVtcGxhdGUuY29udmVydExhYmVsKGFuY2hvckluZm8uaHJlZiwgYW5jaG9ySW5mbywgJHNjb3BlKVxuXG5cdFx0XHRsZXQgdGhpc0FuY2hvciA9IG5ldyBpVlhqc1VJTW9kdWxlLmFuY2hvcihhbmNob3JJbmZvKTtcblx0XHRcdFxuXHRcdFx0JHNjb3BlLmV4cGVyaWVuY2UgPSBpVlhqcy5leHBlcmllbmNlLmRhdGE7XG5cblx0XHRcdGlFbG0uaHRtbCh0aGlzQW5jaG9yLmh0bWwpO1xuXHRcdFx0JGNvbXBpbGUoaUVsbS5jb250ZW50cygpKSgkc2NvcGUpO1xuXHRcdH1cblx0fVxuXG5cdGdldCB0ZW1wbGF0ZUhUTUwoKSB7XG5cdFx0cmV0dXJuIFwiPGRpdj48L2Rpdj5cIjtcblx0fVxufVxuXG5BbmNob3IuJGluamVjdCA9IFsnJGNvbXBpbGUnLCAnaVZYanMnLCAnaXZ4anMubW9kdWxlcy51aScsICdwdWxsSW5UZW1wbGF0ZSddO1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVGYWN0b3J5RnVuY3Rpb24oQW5jaG9yKTsiLCJpbXBvcnQgY3JlYXRlRmFjdG9yeUZ1bmN0aW9uIGZyb20gJy4uL3V0aWxpdGllcy9jcmVhdGUtZmFjdG9yeS1mdW5jdGlvbi5qcyc7XG5pbXBvcnQgQ2FzY2FkaW5nT3B0aW9uc0NvbnRyb2xsZXIgZnJvbSAnLi4vY29udHJvbGxlcnMvdWkuY2FzY2FkaW5nLW9wdGlvbnMuanMnO1xuaW1wb3J0IHsgRXJyb3JNZXNzYWdlcyB9IGZyb20gJy4uL3V0aWxpdGllcy9tZXNzYWdlcy5lcnJvci5qcyc7XG5cbmV4cG9ydCBjbGFzcyBDYXNjYWRpbmdPcHRpb25zIHtcbiAgICBjb25zdHJ1Y3RvcigkY29tcGlsZSwgJHRpbWVvdXQsIGlWWGpzLCBpVlhqc0J1cywgaVZYanNVSU1vZHVsZSkge1xuICAgICAgICB0aGlzLnRlbXBsYXRlID0gdGhpcy50ZW1wbGF0ZUhUTUw7XG4gICAgICAgIHRoaXMucmVzdHJpY3QgPSAnRSc7XG4gICAgICAgIHRoaXMuc2NvcGUgPSB7XG4gICAgICAgICAgICBpbnB1dERhdGE6IFwiPWlucHV0RGF0YVwiXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb250cm9sbGVyID0gQ2FzY2FkaW5nT3B0aW9uc0NvbnRyb2xsZXI7XG4gICAgICAgIHRoaXMuY29udHJvbGxlckFzID0gJ3ZtJztcbiAgICAgICAgdGhpcy5yZXBsYWNlID0gdHJ1ZTtcblxuICAgICAgICB0aGlzLmxpbmsgPSAoJHNjb3BlLCBpRWxtLCBpQXR0cnMsIGNvbnRyb2xsZXIpID0+IHtcbiAgICAgICAgICAgIGxldCB7IGlucHV0RGF0YTogaW5wdXQgfSA9ICRzY29wZTtcbiAgICAgICAgICAgIGxldCBkZWZhdWx0T3B0aW9uVGFnID0gYFNlbGVjdCBhbiBvcHRpb24uLi5gO1xuICAgICAgICAgICAgbGV0IHsgZXJyb3JzID0ge30sIGF0dHJpYnV0ZXMgPSB7fSwgc2V0dGluZ3MgPSB7fSB9ID0gaW5wdXQ7XG4gICAgICAgICAgICBsZXQgeyByZXF1aXJlZDogY2FzY2FkZVJlcXVpcmVkIH0gPSBhdHRyaWJ1dGVzO1xuICAgICAgICAgICAgbGV0IHsgaW5wdXQ6IGlucHV0U2V0dGluZ3MgPSB7fSB9ID0gc2V0dGluZ3M7XG4gICAgICAgICAgICBsZXQgeyBkaXNwbGF5TWFwID0ge30gfSA9IGlucHV0U2V0dGluZ3M7XG4gICAgICAgICAgICBsZXQgdHJpZXMgPSAwO1xuXG5cbiAgICAgICAgICAgIHVwZGF0ZVZpZXcoY29udHJvbGxlci52aWV3U2V0dGluZ3MpO1xuXG4gICAgICAgICAgICBpVlhqc0J1cy5vbigndXBkYXRlLXZpZXcnLCB1cGRhdGVUcmVlKTtcblxuICAgICAgICAgICAgJHNjb3BlLiRvbihcIiRkZXN0cm95XCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICBpVlhqc0J1cy5yZW1vdmVMaXN0ZW5lcigndXBkYXRlLXZpZXcnLCB1cGRhdGVUcmVlKTtcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHVwZGF0ZVRyZWUodHJlZSkge1xuICAgICAgICAgICAgICAgIHVwZGF0ZVZpZXcodHJlZSk7XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgZnVuY3Rpb24gdXBkYXRlVmlldyh0cmVlKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRyZWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCB7IG9wdGlvbnMsIGxhYmVscywgaXNTdGF0aWMgfSA9IHRyZWU7XG4gICAgICAgICAgICAgICAgbGV0IGh0bWwgPSBgYDtcblxuICAgICAgICAgICAgICAgIGxldCB2aWV3U2V0dGluZ3MgPSBvcHRpb25zLm1hcCgoc2VsZWN0YWJsZU9wdGlvbnMsIGRlcHRoLCBvcHRpb25zKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBsYWJlbCA9IGxhYmVsc1tkZXB0aF07XG4gICAgICAgICAgICAgICAgICAgIGxldCBkZWZhdWx0RGlzcGxheSA9IGRpc3BsYXlNYXBbbGFiZWxdID8gZGlzcGxheU1hcFtsYWJlbF0gOiBcIlNlbGVjdCBhbiBvcHRpb24uLi4uXCI7XG4gICAgICAgICAgICAgICAgICAgIGxldCB0aGlzSW5wdXQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogYCR7aW5wdXQuaWR9LSR7ZGVwdGh9YCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IHRyZWUub3B0aW9uc1tkZXB0aF0sXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogaW5wdXQud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBgJHtpbnB1dC5pZH0tJHtkZXB0aH1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHZhbGlkQ2xhc3MgPSBzZWxlY3RhYmxlT3B0aW9ucy5sZW5ndGggPj0gMSA/ICdjYXNjYWRlLWRyb3Bkb3duLXZhbGlkJyA6ICdjYXNjYWRlLWRyb3Bkb3duLWludmFsaWQnO1xuICAgICAgICAgICAgICAgICAgICBsZXQgT3B0aW9uRXJyb3JNZXNzYWdlcyA9IG5ldyBFcnJvck1lc3NhZ2VzKHRoaXNJbnB1dCwgZXJyb3JzLCBhdHRyaWJ1dGVzKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRhZ0hUTUwgPSBgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBuZy1jaGFuZ2U9J3ZtLm1vZGVsVXBkYXRlKHZtLmN1cnJlbnRTZWxlY3Rpb25bJHtkZXB0aH1dKSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIG5nLW9wdGlvbnM9XCJvcHRpb24ubmFtZSBmb3Igb3B0aW9uIGluIHZtLnZpZXdTZXR0aW5ncy5vcHRpb25zWyR7ZGVwdGh9XSB0cmFjayBieSBvcHRpb24ua2V5XCIgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBuZy1tb2RlbD0ndm0uY3VycmVudFNlbGVjdGlvblske2RlcHRofV0nYDtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgdWlPcHRpb25zT2JqID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IHRoaXNJbnB1dCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHREaXNwbGF5LFxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZ3M6IHRhZ0hUTUwsXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnM6IE9wdGlvbkVycm9yTWVzc2FnZXNcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgc2VsZWN0b3JIVE1MID0gbmV3IGlWWGpzVUlNb2R1bGUub3B0aW9ucyh1aU9wdGlvbnNPYmopLmh0bWw7XG4gICAgICAgICAgICAgICAgICAgIGxldCB7IHNldHRpbmdzID0ge30gfSA9IGlucHV0O1xuICAgICAgICAgICAgICAgICAgICBsZXQgeyBpbnB1dDogaW5wdXRTZXR0aW5ncyA9IHt9IH0gPSBzZXR0aW5ncztcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbDogYDxkaXYgY2xhc3M9JyR7dmFsaWRDbGFzc30gaXZ4anMtZ3JpZC0xLTEnPiR7c2VsZWN0b3JIVE1MfTwvZGl2PmAsXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nczogaW5wdXRTZXR0aW5ncyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0TmFtZTogYCR7aW5wdXQuaWR9LSR7ZGVwdGh9YFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBodG1sID0gYCR7aVZYanNVSU1vZHVsZS5zdHlsZS5hZGRXaWR0aENsYXNzZXModmlld1NldHRpbmdzKX1gO1xuICAgICAgICAgICAgICAgIGlFbG0uaHRtbChodG1sKTtcbiAgICAgICAgICAgICAgICAkY29tcGlsZShpRWxtLmNvbnRlbnRzKCkpKCRzY29wZSk7XG5cbiAgICAgICAgICAgICAgICAkdGltZW91dCgoKSA9PiB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlWWGpzVUlNb2R1bGUuaW5pdGlhbGl6ZUlucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpVlhqc1VJTW9kdWxlLmluaXRpYWxpemVJbnB1dCgpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIHRyaWVzICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpc1ZhbGlkID0gIWNhc2NhZGVSZXF1aXJlZDtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY2FzY2FkZVJlcXVpcmVkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdTZXR0aW5ncy5mb3JFYWNoKCh2aWV3U2V0dGluZywgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgeyBpbnB1dE5hbWUgfSA9IHZpZXdTZXR0aW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0aGlzU2VsZWN0aW9uID0gW10uY29uY2F0KGNvbnRyb2xsZXIuY3VycmVudFNlbGVjdGlvbilbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBoYXNTZWxlY3Rpb24gPSB0eXBlb2YgdGhpc1NlbGVjdGlvbiAhPT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGhhc0Zvcm1JbnB1dCA9ICRzY29wZS4kcGFyZW50ICYmICRzY29wZS4kcGFyZW50LmZvcm1JbnB1dCAmJiAkc2NvcGUuJHBhcmVudC5mb3JtSW5wdXRbaW5wdXROYW1lXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXNTZWxlY3Rpb24gJiYgdGhpc1NlbGVjdGlvbi5pdGVtcyAmJiBoYXNGb3JtSW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRwYXJlbnQuZm9ybUlucHV0W2lucHV0TmFtZV0uJHNldFZhbGlkaXR5KCdyZXF1aXJlZCcsIGhhc1NlbGVjdGlvbik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9LCAxKVxuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgdGVtcGxhdGVIVE1MKCkge1xuICAgICAgICByZXR1cm4gXCI8ZGl2PjwvZGl2PlwiO1xuICAgIH1cbn1cblxuQ2FzY2FkaW5nT3B0aW9ucy4kaW5qZWN0ID0gWyckY29tcGlsZScsICckdGltZW91dCcsICdpVlhqcycsICdpdnhqcy5idXMnLCAnaXZ4anMubW9kdWxlcy51aSddO1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVGYWN0b3J5RnVuY3Rpb24oQ2FzY2FkaW5nT3B0aW9ucyk7XG4iLCJpbXBvcnQgY3JlYXRlRmFjdG9yeUZ1bmN0aW9uIGZyb20gJy4uL3V0aWxpdGllcy9jcmVhdGUtZmFjdG9yeS1mdW5jdGlvbi5qcyc7XHJcbmltcG9ydCBTdGFuZGFyZENvbnRyb2xzQ29udHJvbGxlciBmcm9tICcuLi9jb250cm9sbGVycy92aWRlby5jb250cm9scy5zdGFuZGFyZC5qcyc7XHJcbmltcG9ydCBWaWRlb0V2ZW50TmFtZXMgZnJvbSAnLi4vLi4vY29uc3RhbnRzL3ZpZGVvLmV2ZW50cy5qcyc7XHJcblxyXG5sZXQgdmlkZW9FdmVudE5hbWVzID0gbmV3IFZpZGVvRXZlbnROYW1lcygpO1xyXG5cclxuXHJcbmNsYXNzIFN0YW5kYXJkQ29udHJvbHMge1xyXG4gICAgY29uc3RydWN0b3IoaVZYanNVSSwgaVZYanNCdXMpIHtcclxuICAgICAgICB0aGlzLnRlbXBsYXRlID0gdGhpcy50ZW1wbGF0ZUhUTUw7ICAgICAgICBcclxuICAgICAgICB0aGlzLnJlc3RyaWN0ID0gJ0UnO1xyXG4gICAgICAgIHRoaXMuc2NvcGUgPSB7fVxyXG4gICAgICAgIHRoaXMuY29udHJvbGxlciA9IFN0YW5kYXJkQ29udHJvbHNDb250cm9sbGVyXHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVyQXMgPSAndm0nXHJcbiAgICAgICAgdGhpcy5saW5rID0gKCRzY29wZSwgaUVsbSwgaUF0dHJzLCBjb250cm9sbGVyKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBzdGFuZGFyZENvbnRyb2xzID0gbmV3IGlWWGpzVUkudmlkZW9Db250cm9scyhpRWxtLmZpbmQoJ2RpdicpLCBpVlhqc0J1cyk7XHJcblxyXG4gICAgICAgICAgICBjb250cm9sbGVyLmNvbnRyb2xzID0gc3RhbmRhcmRDb250cm9scztcclxuXHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHN0YW5kYXJkQ29udHJvbHMuYWRkRXZlbnRMaXN0ZW5lcnMoaVZYanNCdXMpOyAgIFxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgdGVtcGxhdGVIVE1MKCkge1xyXG4gICAgICAgIHJldHVybiBgPGRpdiBjbGFzcz1cInZpZGVvLWNvbnRyb2wtY29udGFpbmVyXCI+PC9kaXY+YDtcclxuICAgIH1cclxufVxyXG5cclxuU3RhbmRhcmRDb250cm9scy4kaW5qZWN0ID0gWydpdnhqcy5tb2R1bGVzLnVpJywgJ2l2eGpzLmJ1cyddO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlRmFjdG9yeUZ1bmN0aW9uKFN0YW5kYXJkQ29udHJvbHMpOyIsImltcG9ydCBjcmVhdGVGYWN0b3J5RnVuY3Rpb24gZnJvbSAnLi4vdXRpbGl0aWVzL2NyZWF0ZS1mYWN0b3J5LWZ1bmN0aW9uLmpzJztcclxuaW1wb3J0IEhUTUw1VmlkZW9Db250cm9sbGVyIGZyb20gJy4uL2NvbnRyb2xsZXJzL3ZpZGVvLmh0bWw1LmpzJztcclxuaW1wb3J0IFZpZGVvRXZlbnRDb25zdGFudHMgZnJvbSBcIi4uLy4uL2NvbnN0YW50cy92aWRlby5ldmVudHMuanNcIjtcclxuXHJcbmNsYXNzIEhUTUw1VmlkZW9QbGF5ZXIge1xyXG4gICAgY29uc3RydWN0b3IoJGNvbXBpbGUsICR0aW1lb3V0LCBpVlhqc1ZpZGVvTW9kdWxlLCBpVlhqc0J1cywgaVZYanNMb2csIGNyZWF0ZUlubGluZVZpZGVvKSB7XHJcbiAgICAgICAgdGhpcy50ZW1wbGF0ZSA9IHRoaXMudGVtcGxhdGVIVE1MO1xyXG4gICAgICAgIHRoaXMucmVzdHJpY3QgPSAnRSc7XHJcbiAgICAgICAgdGhpcy5zY29wZSA9IHtcclxuICAgICAgICAgICAgc2V0dGluZ3M6IFwiPXNldHRpbmdzXCIsXHJcbiAgICAgICAgICAgIHN0YXRlRGF0YTogXCI9c3RhdGVEYXRhXCJcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuY29udHJvbGxlciA9IEhUTUw1VmlkZW9Db250cm9sbGVyO1xyXG4gICAgICAgIHRoaXMuY29udHJvbGxlckFzID0gJ3ZtJztcclxuICAgICAgICB0aGlzLmxpbmsgPSAoJHNjb3BlLCBpRWxtLCBpQXR0cnMsIGNvbnRyb2xsZXIpID0+IHtcclxuICAgICAgICAgICAgbGV0IHtzZXR0aW5ncywgc3RhdGVEYXRhfSA9ICRzY29wZTtcclxuICAgICAgICAgICAgbGV0IHtwbGF5ZXJTZXR0aW5ncyA9IHt9fSA9IHN0YXRlRGF0YTtcclxuICAgICAgICAgICAgbGV0IHtpcGhvbmVJbmxpbmUgPSBmYWxzZX0gPSBwbGF5ZXJTZXR0aW5ncztcclxuICAgICAgICAgICAgbGV0IHZpZGVvRXZlbnROYW1lcyA9IG5ldyBWaWRlb0V2ZW50Q29uc3RhbnRzKCk7XHJcblxyXG4gICAgICAgICAgICBzdGF0ZURhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICBpZDogc3RhdGVEYXRhLmlkLFxyXG4gICAgICAgICAgICAgICAgbmFtZTogc3RhdGVEYXRhLm5hbWUsXHJcbiAgICAgICAgICAgICAgICB1cmw6IHN0YXRlRGF0YS51cmwsXHJcbiAgICAgICAgICAgICAgICBpc2lPUzogY3JlYXRlSW5saW5lVmlkZW8uaXNpT1MoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgdGhpc1ZpZGVvUGxheWVyID0gbmV3IGlWWGpzVmlkZW9Nb2R1bGUuaHRtbDUoaUVsbS5maW5kKCdkaXYnKSwgc2V0dGluZ3MsIHN0YXRlRGF0YSwgaVZYanNMb2cpO1xyXG5cclxuICAgICAgICAgICAgdGhpc1ZpZGVvUGxheWVyLmFkZEV2ZW50TGlzdGVuZXJzKGlWWGpzQnVzKTtcclxuICAgICAgICAgICAgJHRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNyZWF0ZUlubGluZVZpZGVvLmlzaU9TKCkgJiYgaXBob25lSW5saW5lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlSW5saW5lVmlkZW8ubWFrZUlubGluZVZpZGVvKGlFbG0uZmluZCgndmlkZW8nKVswXSwgaUVsbS5maW5kKCdkaXYnKVswXSwgJHNjb3BlKTtcclxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVJbmxpbmVWaWRlby5lbWl0Q2FuUGxheShpRWxtLmZpbmQoJ3ZpZGVvJylbMF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCAxKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXIucGxheWVyID0gdGhpc1ZpZGVvUGxheWVyO1xyXG5cclxuICAgICAgICAgICAgJGNvbXBpbGUoaUVsbS5jb250ZW50cygpKSgkc2NvcGUpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHRlbXBsYXRlSFRNTCgpIHtcclxuICAgICAgICByZXR1cm4gYDxkaXYgY2xhc3M9XCJ2aWRlby1wbGF5ZXItY29udGFpbmVyXCI+PC9kaXY+YDtcclxuICAgIH1cclxufVxyXG5cclxuSFRNTDVWaWRlb1BsYXllci4kaW5qZWN0ID0gWyckY29tcGlsZScsICckdGltZW91dCcsICdpdnhqcy5tb2R1bGVzLnZpZGVvJywgJ2l2eGpzLmJ1cycsICdpdnhqcy5sb2cnLCAnY3JlYXRlSW5saW5lVmlkZW8nXTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbihIVE1MNVZpZGVvUGxheWVyKTsiLCJpbXBvcnQgY3JlYXRlRmFjdG9yeUZ1bmN0aW9uIGZyb20gJy4uL3V0aWxpdGllcy9jcmVhdGUtZmFjdG9yeS1mdW5jdGlvbi5qcyc7XHJcbmltcG9ydCBWaW1lb1ZpZGVvUGxheWVyQ29udHJvbGxlciBmcm9tICcuLi9jb250cm9sbGVycy92aWRlby52aW1lby5qcyc7XHJcblxyXG5jbGFzcyBWaW1lb1ZpZGVvUGxheWVyIHtcclxuICAgIGNvbnN0cnVjdG9yKCRyb290U2NvcGUsICRjb21waWxlLCAkd2luZG93LCAkdGltZW91dCwgaVZYanNCdXMsIGlWWGpzTG9nLCBpVlhqc1ZpZGVvTW9kdWxlLCBjcmVhdGVJbmxpbmVWaWRlbykge1xyXG4gICAgICAgIHRoaXMudGVtcGxhdGUgPSB0aGlzLnRlbXBsYXRlSFRNTDtcclxuICAgICAgICB0aGlzLnJlc3RyaWN0ID0gJ0UnO1xyXG4gICAgICAgIHRoaXMucmVwbGFjZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5zY29wZSA9IHtcclxuICAgICAgICAgICAgc2V0dGluZ3M6IFwiPXNldHRpbmdzXCIsXHJcbiAgICAgICAgICAgIHN0YXRlRGF0YTogXCI9c3RhdGVEYXRhXCJcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVyID0gVmltZW9WaWRlb1BsYXllckNvbnRyb2xsZXJcclxuICAgICAgICB0aGlzLmNvbnRyb2xsZXJBcyA9ICd2bSc7XHJcbiAgICAgICAgdGhpcy5saW5rID0gKCRzY29wZSwgaUVsbSwgaUF0dHJzLCBjb250cm9sbGVyKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghaVZYanNWaWRlb01vZHVsZS52aW1lbykgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgbGV0IHtzZXR0aW5ncyxzdGF0ZURhdGF9ID0gJHNjb3BlO1xyXG5cclxuICAgICAgICAgICAgc3RhdGVEYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgaWQ6IHN0YXRlRGF0YS5pZCxcclxuICAgICAgICAgICAgICAgIHVybDogc3RhdGVEYXRhLnVybCxcclxuICAgICAgICAgICAgICAgIG5hbWU6IHN0YXRlRGF0YS5uYW1lXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHNldHRpbmdzLmlkID0gc2V0dGluZ3MudmltZW9JZDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGxldCBWaW1lb1BsYXllciA9IG5ldyBpVlhqc1ZpZGVvTW9kdWxlLnZpbWVvKGlFbG0uZmluZCgnZGl2JyksIHNldHRpbmdzLCBzdGF0ZURhdGEsIGlWWGpzTG9nKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIFZpbWVvUGxheWVyLmFkZEV2ZW50TGlzdGVuZXJzKGlWWGpzQnVzKTtcclxuICAgIFxyXG4gICAgICAgICAgICBjb250cm9sbGVyLnBsYXllciA9IFZpbWVvUGxheWVyO1xyXG4gICAgXHJcbiAgICAgICAgICAgICRjb21waWxlKGlFbG0uY29udGVudHMoKSkoJHNjb3BlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHRlbXBsYXRlSFRNTCgpIHtcclxuICAgICAgICByZXR1cm4gYFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidmltZW8tcGxheWVyLWNvbnRhaW5lclwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdj48L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+YDtcclxuICAgIH1cclxufVxyXG5cclxuVmltZW9WaWRlb1BsYXllci4kaW5qZWN0ID0gWyckcm9vdFNjb3BlJywgJyRjb21waWxlJywgJyR3aW5kb3cnLCAnJHRpbWVvdXQnLCAnaXZ4anMuYnVzJywgJ2l2eGpzLmxvZycsICdpdnhqcy5tb2R1bGVzLnZpZGVvJywgJ2NyZWF0ZUlubGluZVZpZGVvJ107XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVGYWN0b3J5RnVuY3Rpb24oVmltZW9WaWRlb1BsYXllcik7IiwiaW1wb3J0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbiBmcm9tICcuLi91dGlsaXRpZXMvY3JlYXRlLWZhY3RvcnktZnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgWW91dHViZVZpZGVvUGxheWVyQ29udHJvbGxlciBmcm9tICcuLi9jb250cm9sbGVycy92aWRlby55b3V0dWJlLmpzJztcclxuXHJcbmNsYXNzIFlvdXR1YmVWaWRlb1BsYXllciB7XHJcbiAgICBjb25zdHJ1Y3Rvcigkcm9vdFNjb3BlLCAkY29tcGlsZSwgJHdpbmRvdywgaVZYanNCdXMsIGlWWGpzTG9nLCBpVlhqc1ZpZGVvTW9kdWxlKSB7XHJcbiAgICAgICAgdGhpcy50ZW1wbGF0ZSA9IHRoaXMudGVtcGxhdGVIVE1MO1xyXG4gICAgICAgIHRoaXMucmVzdHJpY3QgPSAnRSc7XHJcbiAgICAgICAgdGhpcy5zY29wZSA9IHtcclxuICAgICAgICAgICAgc2V0dGluZ3M6IFwiPXNldHRpbmdzXCIsXHJcbiAgICAgICAgICAgIHN0YXRlRGF0YTogXCI9c3RhdGVEYXRhXCJcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVyID0gWW91dHViZVZpZGVvUGxheWVyQ29udHJvbGxlclxyXG4gICAgICAgIHRoaXMuY29udHJvbGxlckFzID0gJ3ZtJztcclxuICAgICAgICB0aGlzLmxpbmsgPSAoJHNjb3BlLCBpRWxtLCBpQXR0cnMsIGNvbnRyb2xsZXIpID0+IHtcclxuICAgICAgICAgICAgaWYgKCFpVlhqc1ZpZGVvTW9kdWxlLnlvdXR1YmUpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGxldCB7c2V0dGluZ3MsIHN0YXRlRGF0YX0gPSAkc2NvcGU7XHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHNldHRpbmdzLmlkID0gc2V0dGluZ3MueW91dHViZUlkO1xyXG4gICAgICAgICAgICBzdGF0ZURhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICBpZDogc3RhdGVEYXRhLmlkLFxyXG4gICAgICAgICAgICAgICAgdXJsOiBzdGF0ZURhdGEudXJsLFxyXG4gICAgICAgICAgICAgICAgbmFtZTogc3RhdGVEYXRhLm5hbWVcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGxldCBZb3VUdWJlUGxheWVyID0gbmV3IGlWWGpzVmlkZW9Nb2R1bGUueW91dHViZShpRWxtLmZpbmQoJ2RpdicpLCBzZXR0aW5ncywgc3RhdGVEYXRhLCBpVlhqc0xvZyk7XHJcblxyXG4gICAgICAgICAgICBjb250cm9sbGVyLnBsYXllciA9IFlvdVR1YmVQbGF5ZXI7XHJcblxyXG4gICAgICAgICAgICAkY29tcGlsZShpRWxtLmNvbnRlbnRzKCkpKCRzY29wZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIFlUID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgJHdpbmRvdy5vbllvdVR1YmVJZnJhbWVBUElSZWFkeSA9IGluaXQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBZVC5yZWFkeShpbml0KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gaW5pdCgpIHtcclxuICAgICAgICAgICAgICAgIFlvdVR1YmVQbGF5ZXIuY3JlYXRlUGxheWVyKCk7XHJcbiAgICAgICAgICAgICAgICBZb3VUdWJlUGxheWVyLmFkZEV2ZW50TGlzdGVuZXJzKGlWWGpzQnVzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgdGVtcGxhdGVIVE1MKCkge1xyXG4gICAgICAgIHJldHVybiBgXHJcbiAgICAgICAgICAgPGRpdiBjbGFzcz1cInlvdXR1YmUtcGxheWVyLWNvbnRhaW5lclwiPlxyXG4gICAgICAgICAgICAgICA8ZGl2IGlkPVwieW91dHViZS1wbGF5ZXJcIj48L2Rpdj5cclxuICAgICAgICAgICA8L2Rpdj5gO1xyXG4gICAgfVxyXG59XHJcblxyXG5Zb3V0dWJlVmlkZW9QbGF5ZXIuJGluamVjdCA9IFsnJHJvb3RTY29wZScsICckY29tcGlsZScsICckd2luZG93JywgJ2l2eGpzLmJ1cycsICdpdnhqcy5sb2cnLCAnaXZ4anMubW9kdWxlcy52aWRlbyddO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlRmFjdG9yeUZ1bmN0aW9uKFlvdXR1YmVWaWRlb1BsYXllcik7IiwiZXhwb3J0IGNsYXNzIFN0cmluZ1BhcnNlcnMge1xyXG4gICAgY29uc3RydWN0b3IoaWQpIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgY2FtZWxDYXNlKGlkKSB7XHJcbiAgICAgICAgbGV0IGlucHV0UGFydHMgPSBpZC5zcGxpdCgnLScpO1xyXG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgICAgICBsZXQgaW5wdXROYW1lID0gaW5wdXRQYXJ0cyAmJiBpbnB1dFBhcnRzLmxlbmd0aCA+IDAgPyBpbnB1dFBhcnRzLnJlZHVjZSgoaW5wdXROYW1lLCBpbnB1dFBhcnQpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIGAke2lucHV0TmFtZX0ke3NlbGYuY2FwaXRhbGl6ZShpbnB1dFBhcnQpfWA7XHJcbiAgICAgICAgfSkgOiBgJHtpbnB1dFBhcnRzWzBdfWA7XHJcblxyXG4gICAgICAgIHJldHVybiBpbnB1dE5hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhcnRDYXNlKGlkKSB7XHJcbiAgICAgICAgbGV0IGlucHV0UGFydHMgPSBpZC5zcGxpdCgnLScpO1xyXG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgICAgICBsZXQgaW5wdXROYW1lID0gaW5wdXRQYXJ0cyAmJiBpbnB1dFBhcnRzLmxlbmd0aCA+IDAgPyBpbnB1dFBhcnRzLnJlZHVjZSgoaW5wdXROYW1lLCBpbnB1dFBhcnQpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIGAke2lucHV0TmFtZX0ke3NlbGYuY2FwaXRhbGl6ZShpbnB1dFBhcnQpfSBgO1xyXG4gICAgICAgIH0sICcnKSA6IGAke2lucHV0UGFydHNbMF19YDtcclxuXHJcbiAgICAgICAgcmV0dXJuIGlucHV0TmFtZTtcclxuICAgIH1cclxuXHJcbiAgICBjYXBpdGFsaXplKHRlbXBTdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gdGVtcFN0cmluZ1swXS50b1VwcGVyQ2FzZSgpICsgdGVtcFN0cmluZy5zdWJzdHJpbmcoMSk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgY3JlYXRlRmFjdG9yeUZ1bmN0aW9uIGZyb20gJy4uL3V0aWxpdGllcy9jcmVhdGUtZmFjdG9yeS1mdW5jdGlvbi5qcyc7XHJcblxyXG5jbGFzcyBpVlhqc1NldHVwIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAkZ2V0KCl7IFxyXG5cclxuICAgIH1cclxuXHJcbiAgICBzZXREZWZhdWx0VXJsKCR1cmxSb3V0ZXJQcm92aWRlciwgZGVmYXVsdFN0YXRlLCBpVlhqcykge1xyXG4gICAgICAgIGxldCBkZWZhdWx0U3RhdGVJRCA9IGlWWGpzLnJ1bGVzKGRlZmF1bHRTdGF0ZSk7XHJcbiAgICAgICAgbGV0IHt1cmx9ID0gaVZYanMuY29uZmlnLnN0YXRlcy5maW5kKChzdGF0ZSkgPT4geyByZXR1cm4gc3RhdGUuaWQgPT09IGRlZmF1bHRTdGF0ZUlEIH0pO1xyXG5cclxuICAgICAgICAkdXJsUm91dGVyUHJvdmlkZXJcclxuICAgICAgICAgICAgLm90aGVyd2lzZSh1cmwpO1xyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZVN0YXRlcygkc3RhdGVQcm92aWRlciwgc3RhdGVzKSB7XHJcbiAgICAgICAgc3RhdGVzLmZvckVhY2goKHN0YXRlLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICBsZXQge3R5cGUsIGlkLCB1cmwsIG9uRW50ZXIgPSBbXSwgb25FeGl0ID0gW119ID0gc3RhdGU7XHJcblxyXG4gICAgICAgICAgICAkc3RhdGVQcm92aWRlci5zdGF0ZShpZCwge1xyXG4gICAgICAgICAgICAgICAgdXJsOiB1cmwsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBzdGF0ZSxcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlOiBgPGl2eGpzLSR7dHlwZX0tc3RhdGU+PC9pdnhqcy0ke3R5cGV9LXN0YXRlPmAsXHJcbiAgICAgICAgICAgICAgICBvbkVudGVyOiBbJyRyb290U2NvcGUnLCAnaXZ4anMuYWN0aW9ucycsICdpdnhqcy5idXMnLCAoJHJvb3RTY29wZSwgaVZYanNBY3Rpb25zLCBpVlhqc0J1cykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlWWGpzQWN0aW9ucy5yZXNvbHZlQWN0aW9ucyhvbkVudGVyLCAoKSA9PiB7fSk7XHJcbiAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgIG9uRXhpdDogWyckcm9vdFNjb3BlJywgJ2l2eGpzLmFjdGlvbnMnLCAnaXZ4anMuYnVzJywgKCRyb290U2NvcGUsIGlWWGpzQWN0aW9ucywgaVZYanNCdXMpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpVlhqc0J1cy5lbWl0KCdpVlg6dmlkZW86ZGlzcG9zZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlWWGpzQWN0aW9ucy5yZXNvbHZlQWN0aW9ucyhvbkV4aXQsICgpID0+IHt9KTtcclxuICAgICAgICAgICAgICAgIH1dXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5pVlhqc1NldHVwLiRpbmplY3QgPSBbXTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbihpVlhqc1NldHVwKSIsImltcG9ydCB7IFR5cGVWYWxpZGF0b3IgfSBmcm9tICcuLi8uLi91dGlsaXRpZXMvdHlwZS1wYXJzZXJzLmpzJztcclxuaW1wb3J0IHsgQWN0aW9uUHJvY2Vzc29yIH0gZnJvbSAnLi4vLi4vY29yZS9wcm9jZXNzb3IuanMnO1xyXG5pbXBvcnQgY3JlYXRlRmFjdG9yeUZ1bmN0aW9uIGZyb20gJy4uL3V0aWxpdGllcy9jcmVhdGUtZmFjdG9yeS1mdW5jdGlvbi5qcyc7XHJcblxyXG5sZXQgdHlwZVZhbGlkYXRvciA9IG5ldyBUeXBlVmFsaWRhdG9yKCk7XHJcblxyXG5leHBvcnQgY2xhc3MgQWN0aW9ucyBleHRlbmRzIEFjdGlvblByb2Nlc3NvciB7XHJcbiAgICBjb25zdHJ1Y3Rvcigkcm9vdFNjb3BlLCAkc3RhdGUsICR3aW5kb3csIGlWWGpzLCBpVlhqc0J1cykge1xyXG4gICAgICAgIHN1cGVyKGlWWGpzKTtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLiRyb290U2NvcGUgPSAkcm9vdFNjb3BlO1xyXG4gICAgICAgIHRoaXMuJHN0YXRlID0gJHN0YXRlO1xyXG4gICAgICAgIHRoaXMuJHdpbmRvdyA9ICR3aW5kb3c7XHJcbiAgICAgICAgdGhpcy5pVlhqc0J1cyA9IGlWWGpzQnVzO1xyXG4gICAgICAgIHRoaXMuaVZYanMgPSBpVlhqcztcclxuICAgIH1cclxuXHJcbiAgICBuYXZpZ2F0ZVRvTmV4dFN0YXRlKG5leHRBcnJheSkge1xyXG4gICAgICAgIGlmICh0eXBlVmFsaWRhdG9yLmlzRW1wdHkobmV4dEFycmF5KSkgcmV0dXJuO1xyXG5cclxuICAgICAgICB0aGlzLiRzdGF0ZS5nbyh0aGlzLmlWWGpzLnJ1bGVzKG5leHRBcnJheSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlc29sdmVUaGVuTmF2aWdhdGUoYWN0aW9uQXJyYXksIG5leHRBcnJheSkge1xyXG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgaWYgKHR5cGVWYWxpZGF0b3IuaXNFbXB0eShhY3Rpb25BcnJheSkpIHtcclxuICAgICAgICAgICAgdGhpcy5uYXZpZ2F0ZVRvTmV4dFN0YXRlKG5leHRBcnJheSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucmVzb2x2ZUFjdGlvbnMoYWN0aW9uQXJyYXksICgpID0+IHtcclxuICAgICAgICAgICAgc2VsZi5uYXZpZ2F0ZVRvTmV4dFN0YXRlKG5leHRBcnJheSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbkFjdGlvbnMuJGluamVjdCA9IFsnJHJvb3RTY29wZScsICckc3RhdGUnLCAnJHdpbmRvdycsICdpVlhqcycsICdpdnhqcy5idXMnXTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbihBY3Rpb25zKTsiLCJpbXBvcnQgeyBUeXBlVmFsaWRhdG9yIH0gZnJvbSAnLi4vLi4vdXRpbGl0aWVzL3R5cGUtcGFyc2Vycy5qcyc7XHJcbmltcG9ydCBjcmVhdGVGYWN0b3J5RnVuY3Rpb24gZnJvbSAnLi4vdXRpbGl0aWVzL2NyZWF0ZS1mYWN0b3J5LWZ1bmN0aW9uLmpzJztcclxuXHJcbmxldCB0eXBlVmFsaWRhdG9yID0gbmV3IFR5cGVWYWxpZGF0b3IoKTtcclxuXHJcbmV4cG9ydCBjbGFzcyBCdXMge1xyXG4gICAgY29uc3RydWN0b3IoJHJvb3RTY29wZSwgaVZYanMpIHtcclxuICAgICAgICB0aGlzLiRyb290U2NvcGUgPSAkcm9vdFNjb3BlO1xyXG4gICAgICAgIHRoaXMuaVZYanMgPSBpVlhqcztcclxuICAgIH1cclxuXHJcbiAgICBldmVudE5hbWVzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmlWWGpzLkJ1cztcclxuICAgIH1cclxuXHJcbiAgICBvbmNlKGV2ZW50TmFtZSwgY2FsbGJhY2spIHtcclxuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgIHRoaXMuaVZYanMuQnVzLm9uY2UoZXZlbnROYW1lLCAoYXJncykgPT4ge1xyXG4gICAgICAgICAgICBjYWxsYmFjay5hcHBseSh0aGlzLCBhcmdzKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghc2VsZi4kcm9vdFNjb3BlLiQkcGhhc2UpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuJHJvb3RTY29wZS4kYXBwbHkoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBvbihldmVudE5hbWUsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIGxldCB7IG5hbWU6IGZuTmFtZSA9IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZyg3KSB9ID0gY2FsbGJhY2s7XHJcbiAgICAgICAgbGV0IGVuaGFuY2VkQ2FsbGJhY2tTdHJpbmcgPSBgXHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAke2ZuTmFtZX0oYXJncyl7XHJcbiAgICAgICAgICAgICAgIHZhciBjdXN0b21BcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KHRoaXMsIGN1c3RvbUFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpZighJHJvb3RTY29wZS4kJHBoYXNlKXtcclxuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRhcHBseSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgYDtcclxuICAgICAgICBsZXQgZW5oYW5jZWRDYWxsYmFjayA9IG5ldyBGdW5jdGlvbignY2FsbGJhY2snLCAnJHJvb3RTY29wZScsIGVuaGFuY2VkQ2FsbGJhY2tTdHJpbmcpKGNhbGxiYWNrLCB0aGlzLiRyb290U2NvcGUpO1xyXG5cclxuICAgICAgICB0aGlzLmlWWGpzLkJ1cy5vbihldmVudE5hbWUsIGVuaGFuY2VkQ2FsbGJhY2spO1xyXG5cclxuICAgICAgICByZXR1cm4gZW5oYW5jZWRDYWxsYmFjaztcclxuICAgIH1cclxuXHJcbiAgICBlbWl0KGV2ZW50TmFtZSwgLi4ucmVzdCkge1xyXG4gICAgICAgIHRoaXMuaVZYanMuQnVzLmVtaXQoZXZlbnROYW1lLCByZXN0KTtcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVMaXN0ZW5lcihldmVudE5hbWUsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy5pVlhqcy5CdXMucmVtb3ZlTGlzdGVuZXIoZXZlbnROYW1lLCBjYWxsYmFjayk7XHJcbiAgICB9XHJcbn1cclxuXHJcbkJ1cy4kaW5qZWN0ID0gWyckcm9vdFNjb3BlJywgJ2lWWGpzJ107XHJcblxyXG5sZXQgQnVzU2VydmljZSA9IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbihCdXMpO1xyXG5cclxuZXhwb3J0IHsgQnVzU2VydmljZSB9IiwiaW1wb3J0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbiBmcm9tICcuLi91dGlsaXRpZXMvY3JlYXRlLWZhY3RvcnktZnVuY3Rpb24uanMnO1xuaW1wb3J0IEh0dHBFdmVudE5hbWVzIGZyb20gJy4uLy4uL2NvbnN0YW50cy9odHRwLmV2ZW50cy5qcyc7XG5cbmxldCBodHRwRXZlbnROYW1lcyA9IG5ldyBIdHRwRXZlbnROYW1lcygpO1xuXG5leHBvcnQgY2xhc3MgSHR0cEludGVyY2VwdG9ycyB7XG4gICAgY29uc3RydWN0b3IoJHEsIGlWWGpzLCBpVlhqc0xvZykge1xuICAgICAgICB0aGlzLnJlcXVlc3QgPSAoY29uZmlnKSA9PiB7XG4gICAgICAgICAgICBpVlhqc0xvZy5sb2coYFJlcXVlc3RlZCBUZW1wbGF0ZTogJHtjb25maWcudXJsfWApO1xuICAgICAgICAgICAgaVZYanMuQnVzLmVtaXQoaHR0cEV2ZW50TmFtZXMuUkVRVUVTVF9TVUNDRVNTLCBjb25maWcpO1xuICAgICAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlcXVlc3RFcnJvciA9IChyZWplY3Rpb24pID0+IHtcbiAgICAgICAgICAgIGlWWGpzLkJ1cy5lbWl0KGh0dHBFdmVudE5hbWVzLlJFUVVFU1RfRVJST1IsIHJlamVjdGlvbik7XG4gICAgICAgICAgICBpVlhqc0xvZy5lcnJvcih7IG1lc3NhZ2U6IHJlamVjdGlvbi5kYXRhIH0sIFwiSFRUUFwiKTtcblxuICAgICAgICAgICAgcmV0dXJuICRxLnJlamVjdChyZWplY3Rpb24pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVzcG9uc2UgPSAocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgIGlWWGpzTG9nLmxvZyhgTG9hZGVkIFRlbXBsYXRlOiAke3Jlc3BvbnNlLmNvbmZpZy51cmx9YCk7XG4gICAgICAgICAgICBpVlhqcy5CdXMuZW1pdChodHRwRXZlbnROYW1lcy5SRVNQT05TRV9TVUNDRVNTLCByZXNwb25zZSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXNwb25zZUVycm9yID0gKHJlamVjdGlvbikgPT4ge1xuICAgICAgICAgICAgaVZYanNMb2cuZXJyb3IoeyBtZXNzYWdlOiByZWplY3Rpb24uZGF0YSwgaW5mbzogcmVqZWN0aW9uIH0sIFwiSFRUUFwiKTtcbiAgICAgICAgICAgIGlWWGpzLkJ1cy5lbWl0KGh0dHBFdmVudE5hbWVzLlJFU1BPTlNFX0VSUk9SLCByZWplY3Rpb24pO1xuXG4gICAgICAgICAgICByZXR1cm4gJHEucmVqZWN0KHJlamVjdGlvbik7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbkh0dHBJbnRlcmNlcHRvcnMuJGluamVjdCA9IFtcIiRxXCIsIFwiaVZYanNcIiwgXCJpdnhqcy5sb2dcIl07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbihIdHRwSW50ZXJjZXB0b3JzKTsiLCJpbXBvcnQgY3JlYXRlRmFjdG9yeUZ1bmN0aW9uIGZyb20gJy4uL3V0aWxpdGllcy9jcmVhdGUtZmFjdG9yeS1mdW5jdGlvbi5qcyc7XG5pbXBvcnQgVmlkZW9FdmVudE5hbWVzIGZyb20gJy4uLy4uL2NvbnN0YW50cy92aWRlby5ldmVudHMuanMnO1xuXG5sZXQgdmlkZW9FdmVudE5hbWVzID0gbmV3IFZpZGVvRXZlbnROYW1lcygpO1xuXG5jbGFzcyBDcmVhdGVJbmxpbmVWaWRlbyB7XG5cdGNvbnN0cnVjdG9yKCR3aW5kb3csICR0aW1lb3V0LCBpVlhqc0J1cykge1xuXHRcdHRoaXMuJHdpbmRvdyA9ICR3aW5kb3c7XG5cdFx0dGhpcy4kdGltZW91dCA9ICR0aW1lb3V0O1xuXHRcdHRoaXMuaVZYanNCdXMgPSBpVlhqc0J1cztcblx0fVxuXG5cdGVtaXRDYW5QbGF5KHZpZGVvKSB7XG5cdFx0bGV0IHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goJ0NyaU9TJykpIHtcblxuXHRcdFx0c2VsZi5pVlhqc0J1cy5vbmNlKHZpZGVvRXZlbnROYW1lcy5QTEFZLCAoKSA9PiB7XG5cblx0XHRcdFx0c2VsZi5pVlhqc0J1cy5lbWl0KHZpZGVvRXZlbnROYW1lcy5SRUFEWV9QTEFZRVIsIHZpZGVvKTtcblx0XHRcdH0pXG5cdFx0XHRzZWxmLmlWWGpzQnVzLmVtaXQodmlkZW9FdmVudE5hbWVzLkNBTl9QTEFZLCB2aWRlbylcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0aGlzLiR0aW1lb3V0KCgpID0+IHtcblx0XHRcdGlmICh2aWRlby5yZWFkeVN0YXRlIDwgMSkge1xuXHRcdFx0XHRzZWxmLmVtaXRDYW5QbGF5KHZpZGVvKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0c2VsZi5pVlhqc0J1cy5lbWl0KHZpZGVvRXZlbnROYW1lcy5DQU5fUExBWSwgdmlkZW8pXG5cdFx0fSwgMTAwKTtcblx0fVxuXG5cdG1ha2VJbmxpbmVWaWRlbyh2aWRlbywgY29udGFpbmVyLCAkc2NvcGUpIHtcblx0XHRpZiAodHlwZW9mIG1ha2VWaWRlb1BsYXlhYmxlSW5saW5lID09PSAndW5kZWZpbmVkJykgcmV0dXJuO1xuXG5cdFx0bGV0IHNlbGYgPSB0aGlzO1xuXHRcdGxldCBwbGF5ID0gZmFsc2U7XG5cblx0XHR2aWRlby5zZXRBdHRyaWJ1dGUoJ3dlYmtpdC1wbGF5c2lubGluZScsICcnKTtcblx0XHRtYWtlVmlkZW9QbGF5YWJsZUlubGluZSh2aWRlbyk7XG5cblx0XHR0aGlzLmlWWGpzQnVzLm9uKHZpZGVvRXZlbnROYW1lcy5BRERfUExBWUlOR19DTEFTUywgKCkgPT4ge1xuXHRcdFx0Y29udGFpbmVyLmNsYXNzTmFtZSA9IGAke3ZpZGVvLmNsYXNzTmFtZX0gaXMtcGxheWluZ2A7XG5cdFx0XHRwbGF5ID0gIXBsYXk7XG5cdFx0fSk7XG5cblx0XHR2aWRlby5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRpZiAoIXBsYXkpIHtcblx0XHRcdFx0dmlkZW8ucGxheSgpO1xuXHRcdFx0XHRjb250YWluZXIuY2xhc3NOYW1lID0gYCR7dmlkZW8uY2xhc3NOYW1lfSBpcy1wbGF5aW5nYDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZpZGVvLnBhdXNlKCk7XG5cdFx0XHRcdCRzY29wZS5pc1BsYXlpbmcgPSBmYWxzZTtcblx0XHRcdFx0Y29udGFpbmVyLmNsYXNzTmFtZSA9IHZpZGVvLmNsYXNzTmFtZS5yZXBsYWNlKCdpcy1wbGF5aW5nJywgJycpO1xuXHRcdFx0fVxuXG5cdFx0XHRwbGF5ID0gIXBsYXk7XG5cdFx0XHQkc2NvcGUuJGFwcGx5KCk7XG5cdFx0fSk7XG5cblx0XHR0aGlzLmlWWGpzQnVzLm9uY2UodmlkZW9FdmVudE5hbWVzLkRJU1BPU0UsICgpID0+IHtcblx0XHRcdHZpZGVvLnBhdXNlKCk7XG5cdFx0fSk7XG5cdH1cblxuXHRpc2lPUygpIHtcblx0XHR2YXIgdXNlckFnZW50ID0gbmF2aWdhdG9yLnVzZXJBZ2VudCB8fCBuYXZpZ2F0b3IudmVuZG9yIHx8IHdpbmRvdy5vcGVyYTtcblx0XHRyZXR1cm4gdXNlckFnZW50Lm1hdGNoKC9pUGhvbmUvaSkgfHwgdXNlckFnZW50Lm1hdGNoKC9pUGFkL2kpO1xuXHR9XG5cblx0aXNNb2JpbGUoKSB7XG5cdFx0bGV0IGNoZWNrID0gZmFsc2U7XG5cdFx0KGZ1bmN0aW9uIChhKSB7IGlmICgvKGFuZHJvaWR8YmJcXGQrfG1lZWdvKS4rbW9iaWxlfGF2YW50Z298YmFkYVxcL3xibGFja2JlcnJ5fGJsYXplcnxjb21wYWx8ZWxhaW5lfGZlbm5lY3xoaXB0b3B8aWVtb2JpbGV8aXAoaG9uZXxvZCl8aXJpc3xraW5kbGV8bGdlIHxtYWVtb3xtaWRwfG1tcHxtb2JpbGUuK2ZpcmVmb3h8bmV0ZnJvbnR8b3BlcmEgbShvYnxpbilpfHBhbG0oIG9zKT98cGhvbmV8cChpeGl8cmUpXFwvfHBsdWNrZXJ8cG9ja2V0fHBzcHxzZXJpZXMoNHw2KTB8c3ltYmlhbnx0cmVvfHVwXFwuKGJyb3dzZXJ8bGluayl8dm9kYWZvbmV8d2FwfHdpbmRvd3MgY2V8eGRhfHhpaW5vL2kudGVzdChhKSB8fCAvMTIwN3w2MzEwfDY1OTB8M2dzb3w0dGhwfDUwWzEtNl1pfDc3MHN8ODAyc3xhIHdhfGFiYWN8YWMoZXJ8b298c1xcLSl8YWkoa298cm4pfGFsKGF2fGNhfGNvKXxhbW9pfGFuKGV4fG55fHl3KXxhcHR1fGFyKGNofGdvKXxhcyh0ZXx1cyl8YXR0d3xhdShkaXxcXC1tfHIgfHMgKXxhdmFufGJlKGNrfGxsfG5xKXxiaShsYnxyZCl8YmwoYWN8YXopfGJyKGV8dil3fGJ1bWJ8YndcXC0obnx1KXxjNTVcXC98Y2FwaXxjY3dhfGNkbVxcLXxjZWxsfGNodG18Y2xkY3xjbWRcXC18Y28obXB8bmQpfGNyYXd8ZGEoaXR8bGx8bmcpfGRidGV8ZGNcXC1zfGRldml8ZGljYXxkbW9ifGRvKGN8cClvfGRzKDEyfFxcLWQpfGVsKDQ5fGFpKXxlbShsMnx1bCl8ZXIoaWN8azApfGVzbDh8ZXooWzQtN10wfG9zfHdhfHplKXxmZXRjfGZseShcXC18Xyl8ZzEgdXxnNTYwfGdlbmV8Z2ZcXC01fGdcXC1tb3xnbyhcXC53fG9kKXxncihhZHx1bil8aGFpZXxoY2l0fGhkXFwtKG18cHx0KXxoZWlcXC18aGkocHR8dGEpfGhwKCBpfGlwKXxoc1xcLWN8aHQoYyhcXC18IHxffGF8Z3xwfHN8dCl8dHApfGh1KGF3fHRjKXxpXFwtKDIwfGdvfG1hKXxpMjMwfGlhYyggfFxcLXxcXC8pfGlicm98aWRlYXxpZzAxfGlrb218aW0xa3xpbm5vfGlwYXF8aXJpc3xqYSh0fHYpYXxqYnJvfGplbXV8amlnc3xrZGRpfGtlaml8a2d0KCB8XFwvKXxrbG9ufGtwdCB8a3djXFwtfGt5byhjfGspfGxlKG5vfHhpKXxsZyggZ3xcXC8oa3xsfHUpfDUwfDU0fFxcLVthLXddKXxsaWJ3fGx5bnh8bTFcXC13fG0zZ2F8bTUwXFwvfG1hKHRlfHVpfHhvKXxtYygwMXwyMXxjYSl8bVxcLWNyfG1lKHJjfHJpKXxtaShvOHxvYXx0cyl8bW1lZnxtbygwMXwwMnxiaXxkZXxkb3x0KFxcLXwgfG98dil8enopfG10KDUwfHAxfHYgKXxtd2JwfG15d2F8bjEwWzAtMl18bjIwWzItM118bjMwKDB8Mil8bjUwKDB8Mnw1KXxuNygwKDB8MSl8MTApfG5lKChjfG0pXFwtfG9ufHRmfHdmfHdnfHd0KXxub2soNnxpKXxuenBofG8yaW18b3AodGl8d3YpfG9yYW58b3dnMXxwODAwfHBhbihhfGR8dCl8cGR4Z3xwZygxM3xcXC0oWzEtOF18YykpfHBoaWx8cGlyZXxwbChheXx1Yyl8cG5cXC0yfHBvKGNrfHJ0fHNlKXxwcm94fHBzaW98cHRcXC1nfHFhXFwtYXxxYygwN3wxMnwyMXwzMnw2MHxcXC1bMi03XXxpXFwtKXxxdGVrfHIzODB8cjYwMHxyYWtzfHJpbTl8cm8odmV8em8pfHM1NVxcL3xzYShnZXxtYXxtbXxtc3xueXx2YSl8c2MoMDF8aFxcLXxvb3xwXFwtKXxzZGtcXC98c2UoYyhcXC18MHwxKXw0N3xtY3xuZHxyaSl8c2doXFwtfHNoYXJ8c2llKFxcLXxtKXxza1xcLTB8c2woNDV8aWQpfHNtKGFsfGFyfGIzfGl0fHQ1KXxzbyhmdHxueSl8c3AoMDF8aFxcLXx2XFwtfHYgKXxzeSgwMXxtYil8dDIoMTh8NTApfHQ2KDAwfDEwfDE4KXx0YShndHxsayl8dGNsXFwtfHRkZ1xcLXx0ZWwoaXxtKXx0aW1cXC18dFxcLW1vfHRvKHBsfHNoKXx0cyg3MHxtXFwtfG0zfG01KXx0eFxcLTl8dXAoXFwuYnxnMXxzaSl8dXRzdHx2NDAwfHY3NTB8dmVyaXx2aShyZ3x0ZSl8dmsoNDB8NVswLTNdfFxcLXYpfHZtNDB8dm9kYXx2dWxjfHZ4KDUyfDUzfDYwfDYxfDcwfDgwfDgxfDgzfDg1fDk4KXx3M2MoXFwtfCApfHdlYmN8d2hpdHx3aShnIHxuY3xudyl8d21sYnx3b251fHg3MDB8eWFzXFwtfHlvdXJ8emV0b3x6dGVcXC0vaS50ZXN0KGEuc3Vic3RyKDAsIDQpKSkgY2hlY2sgPSB0cnVlOyB9KShuYXZpZ2F0b3IudXNlckFnZW50IHx8IG5hdmlnYXRvci52ZW5kb3IgfHwgd2luZG93Lm9wZXJhKTtcblx0XHRyZXR1cm4gY2hlY2s7XG5cdH1cbn1cblxuQ3JlYXRlSW5saW5lVmlkZW8uJGluamVjdCA9IFsnJHdpbmRvdycsICckdGltZW91dCcsICdpdnhqcy5idXMnXVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVGYWN0b3J5RnVuY3Rpb24oQ3JlYXRlSW5saW5lVmlkZW8pOyIsImltcG9ydCBjcmVhdGVGYWN0b3J5RnVuY3Rpb24gZnJvbSAnLi4vdXRpbGl0aWVzL2NyZWF0ZS1mYWN0b3J5LWZ1bmN0aW9uLmpzJztcblxuZXhwb3J0IGNsYXNzIFB1bGxJblRlbXBsYXRlIHtcblx0Y29uc3RydWN0b3IoJHNjZSkge1xuXHRcdHRoaXMuJHNjZSA9ICRzY2U7XG5cdH1cblxuXHRjb252ZXJ0VGVtcGxhdGVVcmxUb0h0bWwoZGF0YSwgJHNjb3BlKSB7XG5cdFx0aWYgKGRhdGEudGVtcGxhdGVVcmwpIHtcblx0XHRcdGxldCB0ZW1wbGF0ZVVybCA9IGRhdGEudGVtcGxhdGVVcmw7XG5cdFx0XHRsZXQgc2FmZVRlbXBsYXRlVXJsID0gdGhpcy4kc2NlLmdldFRydXN0ZWRSZXNvdXJjZVVybCh0ZW1wbGF0ZVVybCk7XG5cdFx0XHRsZXQgdGVtcGxhdGVLZXkgPSBgdGVtcGxhdGUke01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZyg3KX1gO1xuXG5cdFx0XHQkc2NvcGVbdGVtcGxhdGVLZXldID0gc2FmZVRlbXBsYXRlVXJsO1xuXHRcdFx0ZGF0YS5odG1sID0gYDxkaXYgbmctaW5jbHVkZT1cIiR7dGVtcGxhdGVLZXl9XCI+PC9kaXY+YDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YTtcblx0fVxuXG5cdGNvbnZlcnRIZWFkZXJGb290ZXIoaGVhZGVyLCBmb290ZXIsIGRhdGEsIGNvbnRyb2xsZXIpIHtcblx0XHRsZXQgeyB0ZW1wbGF0ZVVybDogaGVhZGVyVGVtcGxhdGVVcmwsIGh0bWwgfSA9IGhlYWRlcjtcblx0XHRsZXQgeyB0ZW1wbGF0ZVVybDogZm9vdGVyVGVtcGxhdGVVcmwgfSA9IGZvb3RlcjtcblxuXHRcdGlmIChoZWFkZXJUZW1wbGF0ZVVybCkge1xuXHRcdFx0bGV0IHNhZmVIZWFkZXJUZW1wbGF0ZVVybCA9IHRoaXMuJHNjZS5nZXRUcnVzdGVkUmVzb3VyY2VVcmwoaGVhZGVyVGVtcGxhdGVVcmwpO1xuXG5cdFx0XHRjb250cm9sbGVyLnNhZmVIZWFkZXJUZW1wbGF0ZVVybCA9IHNhZmVIZWFkZXJUZW1wbGF0ZVVybFxuXHRcdFx0aGVhZGVyLmh0bWwgPSBgPGRpdiBuZy1pbmNsdWRlPVwidm0uc2FmZUhlYWRlclRlbXBsYXRlVXJsXCI+PC9kaXY+YDtcblx0XHRcdGRhdGEuaGVhZGVyID0gaGVhZGVyO1xuXHRcdH1cblxuXHRcdGlmIChmb290ZXJUZW1wbGF0ZVVybCkge1xuXHRcdFx0bGV0IHNhZmVGb290ZXJUZW1wbGF0ZVVybCA9IHRoaXMuJHNjZS5nZXRUcnVzdGVkUmVzb3VyY2VVcmwoZm9vdGVyVGVtcGxhdGVVcmwpO1xuXG5cdFx0XHRjb250cm9sbGVyLnNhZmVGb290ZXJUZW1wbGF0ZVVybCA9IHNhZmVGb290ZXJUZW1wbGF0ZVVybFxuXHRcdFx0Zm9vdGVyLmh0bWwgPSBgPGRpdiBuZy1pbmNsdWRlPVwidm0uc2FmZUZvb3RlclRlbXBsYXRlVXJsXCI+PC9kaXY+YDtcblx0XHRcdGRhdGEuZm9vdGVyID0gZm9vdGVyO1xuXHRcdH1cblxuXHRcdGlmKCFoZWFkZXIuaHRtbCl7XG5cdFx0XHRoZWFkZXIuaHRtbCA9IGA8aDE+JHtkYXRhLm5hbWV9PC9oMT5gO1xuXHRcdFx0ZGF0YS5oZWFkZXIgPSBoZWFkZXI7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGE7XG5cdH1cblxuXHRnZXRUZW1wbGF0ZUtleShsYWJlbFRlbXBsYXRlVXJsKSB7XG5cdFx0bGV0IG5ld1RlbXBsYXRlVXJsID0gbGFiZWxUZW1wbGF0ZVVybC5yZXBsYWNlKCcvJywgJy0nKS5yZXBsYWNlKCcuJywgJy0nKS5zcGxpdCgnLScpO1xuXHRcdGxldCBuZXdLZXkgPSBuZXdUZW1wbGF0ZVVybC5yZWR1Y2UoKGtleSwgd29yZCwgaW5kZXgpID0+IHtcblx0XHRcdGlmIChpbmRleCA9PT0gMCkgcmV0dXJuIHdvcmQ7XG5cblx0XHRcdGxldCBjYXBpdGFsaXplV29yZCA9IHdvcmRbMF0udG9VcHBlckNhc2UoKTtcblx0XHRcdGNhcGl0YWxpemVXb3JkID0gY2FwaXRhbGl6ZVdvcmQgKyB3b3JkLnN1YnN0cmluZygxKTtcblxuXHRcdFx0cmV0dXJuIGAke2tleX0ke2NhcGl0YWxpemVXb3JkfWBcblx0XHR9LCAnJyk7XG5cblx0XHRyZXR1cm4gYCR7bmV3S2V5fWA7XG5cdH1cblxuXHRjb252ZXJ0TGFiZWwoZGVmYXVsdExhYmVsID0gJycsIGRhdGEgPSB7fSwgJHNjb3BlKSB7XG5cdFx0bGV0IHsgbGFiZWxIVE1MLCBsYWJlbCA9IGRlZmF1bHRMYWJlbCwgbGFiZWxUZW1wbGF0ZVVybCwgaWQsIGNsYXNzZXM9XCJcIiB9ID0gZGF0YTtcblxuXHRcdGlmIChsYWJlbFRlbXBsYXRlVXJsKSB7XG5cdFx0XHRsZXQgc2FmZUxhYmVsVGVtcGxhdGVVcmwgPSB0aGlzLiRzY2UuZ2V0VHJ1c3RlZFJlc291cmNlVXJsKGxhYmVsVGVtcGxhdGVVcmwpO1xuXHRcdFx0bGV0IHRlbXBsYXRlS2V5ID0gYGxhYmVsJHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMiwgNykudG9VcHBlckNhc2UoKX1gO1xuXG5cdFx0XHQkc2NvcGVbdGVtcGxhdGVLZXldID0gc2FmZUxhYmVsVGVtcGxhdGVVcmxcblx0XHRcdGRhdGEubGFiZWxIVE1MID0gYDxkaXYgbmctaW5jbHVkZT1cIiR7dGVtcGxhdGVLZXl9XCI+PC9kaXY+YDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YTtcblx0fVxufVxuXG5QdWxsSW5UZW1wbGF0ZS4kaW5qZWN0ID0gWyckc2NlJ107XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUZhY3RvcnlGdW5jdGlvbihQdWxsSW5UZW1wbGF0ZSk7IiwiaW1wb3J0IHsgVHlwZVZhbGlkYXRvciB9IGZyb20gXCIuLi8uLi91dGlsaXRpZXMvdHlwZS1wYXJzZXJzLmpzXCI7XHJcblxyXG5sZXQgdGhpc1R5cGVWYWxpZGF0b3IgPSBuZXcgVHlwZVZhbGlkYXRvcigpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3Mge1xyXG4gICAgY29uc3RydWN0b3Ioc2VsZWN0b3IsIHRlbXBsYXRlLCBhdWRpb0NsYXNzKSB7XHJcbiAgICAgICAgbGV0IHRoaXNTZWxlY3RvciA9ICF0aGlzVHlwZVZhbGlkYXRvci5pc0VtcHR5KHNlbGVjdG9yKSA/IHNlbGVjdG9yIDogJyNpdngnO1xyXG4gICAgICAgIGxldCBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzU2VsZWN0b3IpO1xyXG5cclxuICAgICAgICBpZiAoZWxlbWVudCkge1xyXG4gICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgndWktdmlldycsICcnKTtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3RvciA9IGVsZW1lbnQ7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaVZYLmpzIHJlcXVpcmVzIGFuIGVsZW1lbnQgdG8gYWRkIHRvLiBQbGVhc2UgYWRkIGEgc2VsZWN0b3IgdG8gdGhlIGluaXQgZnVudGlvbiBvciBcIjxkaXYgaWQ9XFxcIml2eFxcXCI+PC9kaXY+XCIgdG8geW91ciBib2R5JylcclxuICAgIH1cclxufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUZhY3RvcnlGdW5jdGlvbihjb25zdHJ1Y3Rvcikge1xyXG5cdGxldCBjb25zdHJ1Y3RvckZuID0gY29uc3RydWN0b3I7XHJcblx0bGV0IGFyZ3MgPSBjb25zdHJ1Y3RvckZuLiRpbmplY3Q7XHJcblx0bGV0IGZhY3RvcnlGdW5jdGlvbiA9ICguLi5hcmdzKSA9PiB7XHJcbiAgICBcdHJldHVybiBuZXcgY29uc3RydWN0b3JGbiguLi5hcmdzKTtcclxuXHR9XHJcblx0XHJcblx0YXJncy5wdXNoKGZhY3RvcnlGdW5jdGlvbik7XHJcblxyXG5cdHJldHVybiBhcmdzO1xyXG59IiwiZXhwb3J0IGNsYXNzIERhdGVQYXJzZXIge1xyXG4gICAgY29uc3RydWN0b3IoZGF0ZSl7XHJcbiAgICAgICAgaWYoIShkYXRlIGluc3RhbmNlb2YgRGF0ZSkpe1xyXG4gICAgICAgICAgICB0aGlzLnJhd0RhdGUgPSBuZXcgRGF0ZShkYXRlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgdGhpcy5yYXdEYXRlID0gZGF0ZTtcclxuICAgICAgICB9ICAgXHJcbiAgICB9XHJcbiAgICBcclxuICAgIGZvcm1hdEZvckRhdGVUaW1lTG9jYWxJbnB1dCgpe1xyXG4gICAgICAgIGxldCBkYXRlID0gdGhpcy5mb3JtYXRGb3JEYXRlSW5wdXQoKTtcclxuICAgICAgICBsZXQgdGltZSA9IHRoaXMuZ2V0VGltZSgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiBgJHtkYXRlfVQke3RpbWV9YDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgZ2V0VGltZSgpe1xyXG4gICAgICAgIHJldHVybiBgJHt0aGlzLmdldEhvdXJzKCl9OiR7dGhpcy5nZXRNaW51dGVzKCl9OiR7dGhpcy5nZXRTZWNvbmRzKCl9YFxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBnZXRIb3Vycygpe1xyXG4gICAgICAgIGxldCByYXdIb3VycyA9IHRoaXMucmF3RGF0ZS5nZXRIb3VycygpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiBgJHtyYXdIb3VycyA8IDEwID8gXCIwXCIgKyByYXdIb3VycyA6IHJhd0hvdXJzfWA7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGdldE1pbnV0ZXMoKXtcclxuICAgICAgICAgbGV0IHJhd01pbnV0ZXMgPSB0aGlzLnJhd0RhdGUuZ2V0TWludXRlcygpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiBgJHtyYXdNaW51dGVzIDwgMTAgPyBcIjBcIiArIHJhd01pbnV0ZXMgOiByYXdNaW51dGVzfWA7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGdldFNlY29uZHMoKXtcclxuICAgICAgICBsZXQgcmF3U2Vjb25kcyA9IHRoaXMucmF3RGF0ZS5nZXRTZWNvbmRzKCk7XHJcblxyXG4gICAgICAgIHJldHVybiBgJHtyYXdTZWNvbmRzIDwgMTAgPyBcIjBcIiArIHJhd1NlY29uZHMgOiByYXdTZWNvbmRzIH1gXHJcbiAgICB9XHJcbiAgICBcclxuICAgIGZvcm1hdEZvckRhdGVJbnB1dCgpe1xyXG4gICAgICAgIGxldCBtb250aCA9IHRoaXMuZm9ybWF0TW9udGgoKTtcclxuICAgICAgICBsZXQgeWVhciA9IHRoaXMucmF3RGF0ZS5nZXRGdWxsWWVhcigpO1xyXG4gICAgICAgIGxldCBkYXkgPSB0aGlzLmZvcm1hdERheSgpO1xyXG4gICAgXHJcbiAgICAgICAgcmV0dXJuIGAke3llYXJ9LSR7bW9udGh9LSR7ZGF5fWA7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGZvcm1hdERheSgpe1xyXG4gICAgICAgIGxldCBkYXlOdW0gPSB0aGlzLnJhd0RhdGUuZ2V0RGF0ZSgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiBgJHtkYXlOdW0gPCAxMCA/ICcwJyArIGRheU51bSA6IGRheU51bX1gXHJcbiAgICB9XHJcbiAgICBcclxuICAgIGZvcm1hdE1vbnRoKCl7XHJcbiAgICAgICAgbGV0IG1vbnRoTnVtID0gdGhpcy5yYXdEYXRlLmdldE1vbnRoKCkgKyAxO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiBgJHttb250aE51bSA8IDEwID8gJzAnICsgbW9udGhOdW0gIDogbW9udGhOdW19YDtcclxuICAgIH1cclxufSIsImltcG9ydCB7VHlwZVZhbGlkYXRvcn0gZnJvbSAnLi4vLi4vdXRpbGl0aWVzL3R5cGUtcGFyc2Vycy5qcyc7XHJcbmxldCBteVR5cGVWYWxpZGF0b3IgPSBuZXcgVHlwZVZhbGlkYXRvcjtcclxuXHJcbmV4cG9ydCBjbGFzcyBJbnB1dENvbnRyb2xsZXJIZWxwZXIge1xyXG4gICAgY29uc3RydWN0b3IoJHNjb3BlLCBpVlhqcywgaVZYanNBY3Rpb25zKSB7XHJcbiAgICAgICAgbGV0IHtpbnB1dERhdGE6IGlucHV0fSA9ICRzY29wZTtcclxuICAgICAgICBsZXQgY3VycmVudEV4cGVyaWVuY2VWYWx1ZSA9IGlWWGpzLmV4cGVyaWVuY2UuZGF0YVtpbnB1dC5uYW1lXTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAoaW5wdXQudHlwZSA9PT0gJ2NoZWNrYm94Jykge1xyXG4gICAgICAgICAgICAkc2NvcGUuaW5wdXRWYWx1ZSA9IGN1cnJlbnRFeHBlcmllbmNlVmFsdWU7XHJcbiAgICAgICAgfSBlbHNlIGlmKGN1cnJlbnRFeHBlcmllbmNlVmFsdWUpe1xyXG4gICAgICAgICAgICAkc2NvcGUuaW5wdXRWYWx1ZSA9IGN1cnJlbnRFeHBlcmllbmNlVmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgICRzY29wZS4kb24oJ2NoYW5nZWQnLCBmdW5jdGlvbihpbnB1dCwgdmFsdWUpe1xyXG4gICAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgIHRoaXMub25DaGFuZ2UgPSAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgaWYgKGlucHV0LnR5cGUgPT09ICdjaGVja2JveCcpIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgPyAndHJ1ZScgOiAnZmFsc2UnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmICghbXlUeXBlVmFsaWRhdG9yLmlzRW1wdHkodmFsdWUpIHx8IHZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSAndHJ1ZScgfHwgdmFsdWUgPT09ICdmYWxzZScpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlID09PSAndHJ1ZSc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGxldCB7bmFtZSwgb25DaGFuZ2UgPSBbXX0gPSBpbnB1dDtcclxuXHJcbiAgICAgICAgICAgICAgICBvbkNoYW5nZS51bnNoaWZ0KHsgXHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnROYW1lOiAnc2V0RGF0YScsIFxyXG4gICAgICAgICAgICAgICAgICAgIGFyZ3M6IHsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogbmFtZSwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSBcclxuICAgICAgICAgICAgICAgICAgICB9IFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlWWGpzQWN0aW9ucy5yZXNvbHZlQWN0aW9ucyhvbkNoYW5nZSwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsImltcG9ydCB7T2JqZWN0UGFyc2Vyc30gZnJvbSAnLi4vLi4vdXRpbGl0aWVzL3R5cGUtcGFyc2Vycy5qcyc7XHJcblxyXG5sZXQgdGhpc09iamVjdFBhcnNlciA9IG5ldyBPYmplY3RQYXJzZXJzKCk7XHJcblxyXG5leHBvcnQgY2xhc3MgRXJyb3JNZXNzYWdlcyB7XHJcbiAgICBjb25zdHJ1Y3RvcihpbnB1dCwgZXJyb3JzLCBhdHRyaWJ1dGVzID0ge30pIHtcclxuICAgICAgICBsZXQge25hbWU6IGlucHV0TmFtZSwgdHlwZTogaW5wdXRUeXBlfSA9IGlucHV0O1xyXG4gICAgICAgIHRoaXMuaW5wdXROYW1lID0gaW5wdXROYW1lO1xyXG4gICAgICAgIHRoaXMuaW5wdXRUeXBlID0gaW5wdXRUeXBlO1xyXG4gICAgICAgIHRoaXMuZXJyb3JzID0gZXJyb3JzO1xyXG4gICAgICAgIHRoaXMuYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHRhZ3MoKSB7XHJcbiAgICAgICAgbGV0IHthdHRyaWJ1dGVzfSA9IHRoaXM7XHJcbiAgICAgICAgbGV0IGFuZ3VsYXJFcnJvck1hcCA9IHRoaXMuYW5ndWxhckVycm9yTWFwO1xyXG4gICAgICAgIGxldCBub25Bbmd1bGFyID0gdGhpcy5ub25Bbmd1bGFyO1xyXG4gICAgICAgIGxldCBub25WYWxpZGF0ZSA9IHRoaXMubm9uVmFsaWRhdGU7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzT2JqZWN0UGFyc2VyLnJlZHVjZShhdHRyaWJ1dGVzLCAodGFncywgYXR0cmlidXRlVmFsdWUsIGF0dHJpYnV0ZUtleSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAobm9uVmFsaWRhdGUuaW5kZXhPZihhdHRyaWJ1dGVLZXkpID49IDApIHJldHVybiB0YWdzO1xyXG4gICAgICAgICAgICBsZXQgdGFnID0gbm9uQW5ndWxhci5pbmRleE9mKGF0dHJpYnV0ZUtleSkgPj0gMCA/XHJcbiAgICAgICAgICAgICAgICBgJHthdHRyaWJ1dGVLZXl9PVwiJHthdHRyaWJ1dGVWYWx1ZX1cImAgOlxyXG4gICAgICAgICAgICAgICAgYG5nLSR7YW5ndWxhckVycm9yTWFwW2F0dHJpYnV0ZUtleV19ID0gXCIke2F0dHJpYnV0ZVZhbHVlfVwiIGA7XHJcbiAgICAgICAgICAgIHJldHVybiBgJHt0YWdzfSAke3RhZ31gO1xyXG4gICAgICAgIH0sICcnKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgbWVzc2FnZXMoKSB7XHJcbiAgICAgICAgbGV0IHtpbnB1dE5hbWUsIGlucHV0VHlwZSwgZXJyb3JzLCBhdHRyaWJ1dGVzfSA9IHRoaXM7XHJcbiAgICAgICAgbGV0IGFuZ3VsYXJFcnJvck1hcCA9IHRoaXMuYW5ndWxhckVycm9yTWFwO1xyXG4gICAgICAgIGxldCBkZWZhdWx0TWVzc2FnZXMgPSB0aGlzLmRlZmF1bHRFcnJvck1lc3NhZ2VzO1xyXG4gICAgICAgIGxldCBlcnJvck1lc3NhZ2VzID0gT2JqZWN0LmtleXMoYXR0cmlidXRlcykubWFwKChhdHRyaWJ1dGVLZXksIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBtZXNzYWdlID0gZXJyb3JzICYmIGVycm9yc1thdHRyaWJ1dGVLZXldID8gZXJyb3JzW2F0dHJpYnV0ZUtleV0gOiBkZWZhdWx0TWVzc2FnZXNbYXR0cmlidXRlS2V5XTtcclxuICAgICAgICAgICAgbGV0IGF0dHJIVE1MID0gYG5nLXNob3c9XCIoJHBhcmVudC5mb3JtSW5wdXRbJyR7aW5wdXROYW1lfSddLiRkaXJ0eSB8fCAkcGFyZW50LmZvcm1JbnB1dC4kc3VibWl0dGVkKSAmJiAkcGFyZW50LmZvcm1JbnB1dFsnJHtpbnB1dE5hbWV9J10uJGVycm9yLiR7YW5ndWxhckVycm9yTWFwW2F0dHJpYnV0ZUtleV19XCJgO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXHJcbiAgICAgICAgICAgICAgICBhdHRySFRNTDogYXR0ckhUTUxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChpbnB1dFR5cGUgJiYgaW5wdXRUeXBlICE9PSAndGV4dCcgJiYgaW5wdXRUeXBlICE9IFwib3B0aW9uc1wiKSB7XHJcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZXMucHVzaCh0aGlzLmlucHV0VHlwZUVycm9yKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBlcnJvck1lc3NhZ2VzO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBpbnB1dFR5cGVFcnJvcigpIHtcclxuICAgICAgICBsZXQge2lucHV0TmFtZSwgaW5wdXRUeXBlLCBlcnJvcnN9ID0gdGhpcztcclxuICAgICAgICBsZXQgZXJyb3JNZXNzYWdlID0gZXJyb3JzW2lucHV0VHlwZV07XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yTWVzc2FnZSA/IGVycm9yTWVzc2FnZSA6IFwiSW52YWxpZCBcIiArIGlucHV0VHlwZSxcclxuICAgICAgICAgICAgYXR0ckhUTUw6IGBuZy1zaG93PVwiKCRwYXJlbnQuZm9ybUlucHV0Wycke2lucHV0TmFtZX0nXS4kZGlydHkgfHwgJHBhcmVudC5mb3JtSW5wdXQuJHN1Ym1pdHRlZCkgJiYgJHBhcmVudC5mb3JtSW5wdXRbJyR7aW5wdXROYW1lfSddLiRlcnJvci4ke2lucHV0VHlwZX1cImBcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IG5vbkFuZ3VsYXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIFsnbWluJywgJ21heCcsICdyZWFkb25seScsICdwbGFjZWhvbGRlcicsICdzdGVwJywgJ3JlYWRvbmx5JywgJ3N0eWxlJ11cclxuICAgIH1cclxuXHJcbiAgICBnZXQgbm9uVmFsaWRhdGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIFsnc3RlcCcsICdwbGFjZWhvbGRlcicsICdyZWFkb25seSddO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBhbmd1bGFyRXJyb3JNYXAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbWlubGVuZ3RoOiAnbWlubGVuZ3RoJyxcclxuICAgICAgICAgICAgbWluOiBcIm1pblwiLFxyXG4gICAgICAgICAgICBtYXg6IFwibWF4XCIsXHJcbiAgICAgICAgICAgIHJlcXVpcmVkOiAncmVxdWlyZWQnLFxyXG4gICAgICAgICAgICBtYXhsZW5ndGg6ICdtYXhsZW5ndGgnXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZGVmYXVsdEVycm9yTWVzc2FnZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbWlubGVuZ3RoOiAnVG9vIFNob3J0JyxcclxuICAgICAgICAgICAgbWluOiBcIlRvbyBMb3dcIixcclxuICAgICAgICAgICAgbWF4OiBcIlRvbyBIaWdoXCIsXHJcbiAgICAgICAgICAgIHJlcXVpcmVkOiAnUmVxdWlyZWQnLFxyXG4gICAgICAgICAgICBtYXhsZW5ndGg6ICdUb28gTG9uZydcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgeyBcclxuICAgIGNvbnN0cnVjdG9yKCRzdGF0ZSl7XHJcbiAgICAgICAgbGV0IHN0YXRlRGF0YSA9ICRzdGF0ZS5jdXJyZW50LmRhdGE7XHJcbiAgICAgICAgdGhpcy5zdGF0ZURhdGEgPSBzdGF0ZURhdGE7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgQW5ndWxhckNvbnN0YW50cyBmcm9tIFwiLi9hbmd1bGFyLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIGV4dGVuZHMgQW5ndWxhckNvbnN0YW50c3tcbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIGxldCBldmVudE5hbWVzID0ge1xuICAgICAgICAgICAgVEVNUExBVEVfTk9UX0ZPVU5EIDogXCJ0ZW1wbGF0ZS1ub3QtZm91bmRcIixcbiAgICAgICAgICAgIEJPT1RTVFJBUFBFRCA6IFwiYm9vdHN0cmFwcGVkXCJcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmFkZE5hbWVzKGV2ZW50TmFtZXMpO1xuICAgIH1cblxuICAgIGNvbnZlbnRpb24oZXZlbnROYW1lKSB7XG4gICAgICAgIGxldCB7REVMSU1FVEVSfSA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIGAke3N1cGVyLmNvbnZlbnRpb24oKX0ke0RFTElNRVRFUn0ke2V2ZW50TmFtZX1gO1xuICAgIH1cbn0iLCJpbXBvcnQgaVZYanNDb25zdGFudHMgZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgZXh0ZW5kcyBpVlhqc0NvbnN0YW50c3tcbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuQU5HVUxBUiA9IFwiYW5ndWxhclwiO1xuICAgIH1cblxuICAgIGNvbnZlbnRpb24oKXtcbiAgICAgICAgIGxldCB7REVMSU1FVEVSLCBBTkdVTEFSfSA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuICBgJHtzdXBlci5jb252ZW50aW9uKCl9JHtERUxJTUVURVJ9JHtBTkdVTEFSfWA7ICAgXG4gICAgfVxufSIsImltcG9ydCBBdWRpb0NvbnN0YW50cyBmcm9tIFwiLi9hdWRpby5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBleHRlbmRzIEF1ZGlvQ29uc3RhbnRzIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICBsZXQgZXZlbnROYW1lcyA9IHtcbiAgICAgICAgICAgIEFERF9QTEFZSU5HX0NMQVNTOiAnYWRkLXBsYXlpbmctY2xhc3MnLFxuICAgICAgICAgICAgQlVGRkVSSU5HIDogXCJidWZmZXJpbmdcIixcbiAgICAgICAgICAgIENBTl9QTEFZOiBcImNhbi1wbGF5XCIsXG4gICAgICAgICAgICBESVNQT1NFIDogXCJkaXNwb3NlXCIsXG4gICAgICAgICAgICBFTkRFRCA6IFwiZW5kZWRcIixcbiAgICAgICAgICAgIEdFVF9EVVJBVElPTjogXCJnZXQtZHVyYXRpb25cIixcbiAgICAgICAgICAgIE1VVEU6IFwibXV0ZVwiLFxuICAgICAgICAgICAgUEFVU0U6IFwicGF1c2VcIixcbiAgICAgICAgICAgIFBBVVNFRDogXCJwYXVzZWRcIixcbiAgICAgICAgICAgIFBMQVk6IFwicGxheVwiLFxuICAgICAgICAgICAgUExBWUlORzogXCJwbGF5aW5nXCIsXG4gICAgICAgICAgICBTRUVLOiBcInNlZWtcIixcbiAgICAgICAgICAgIFNFVF9VUCA6IFwic2V0LXVwXCIsXG4gICAgICAgICAgICBTRVRfRFVSQVRJT046IFwic2V0LWR1cmF0aW9uXCIsXG4gICAgICAgICAgICBTRVRfVk9MVU1FOiBcInNldC12b2x1bWVcIixcbiAgICAgICAgICAgIFRJTUVfVVBEQVRFOiBcInRpbWUtdXBkYXRlXCIsXG4gICAgICAgICAgICBVTk1VVEU6IFwidW5tdXRlXCJcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmFkZE5hbWVzKGV2ZW50TmFtZXMpO1xuICAgIH1cblxuICAgIGNvbnZlbnRpb24oZXZlbnROYW1lKSB7XG4gICAgICAgIGxldCB7REVMSU1FVEVSfSA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIGAke3N1cGVyLmNvbnZlbnRpb24oKX0ke0RFTElNRVRFUn0ke2V2ZW50TmFtZX1gO1xuICAgIH1cbn0iLCJpbXBvcnQgaVZYanNDb25zdGFudHMgZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgZXh0ZW5kcyBpVlhqc0NvbnN0YW50c3tcbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuQVVESU8gPSBcImF1ZGlvXCI7XG4gICAgfVxuXG4gICAgY29udmVudGlvbigpe1xuICAgICAgICAgbGV0IHtERUxJTUVURVIsIEFVRElPfSA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuICBgJHtzdXBlci5jb252ZW50aW9uKCl9JHtERUxJTUVURVJ9JHtBVURJT31gOyAgIFxuICAgIH1cbn0iLCJpbXBvcnQgaVZYanNDb25zdGFudHMgZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCBWaWRlb0NvbnN0YW50cyBmcm9tIFwiLi92aWRlby5qc1wiO1xuaW1wb3J0IEh0dHBDb25zdGFudHMgZnJvbSBcIi4vaHR0cC5qc1wiO1xuaW1wb3J0IGlWWGlvQ29uc3RhbnRzIGZyb20gXCIuL2lWWGlvLmpzXCI7XG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgZXh0ZW5kcyBpVlhqc0NvbnN0YW50cyB7XG4gICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5FUlJPUiA9IFwiZXJyb3JcIjtcblxuICAgICAgICBsZXQgZXZlbnROYW1lcyA9IHtcbiAgICAgICAgICAgIFZJREVPOiBuZXcgVmlkZW9Db25zdGFudHMoKS5WSURFTyxcbiAgICAgICAgICAgIEhUVFAgOiBuZXcgSHR0cENvbnN0YW50cygpLkhUVFAsXG4gICAgICAgICAgICBWQUxJREFUSU9OIDogXCJ2YWxpZGF0aW9uXCIsXG4gICAgICAgICAgICBTRVRfVVAgOiBcInNldC11cFwiLFxuICAgICAgICAgICAgSVZYX0lPIDogbmV3IGlWWGlvQ29uc3RhbnRzKCkuSVZYX0lPLFxuICAgICAgICAgICAgREVGQVVMVCA6IFwiZGVmYXVsdFwiLFxuICAgICAgICAgICAgQVNTRVJUIDogXCJhc3NlcnRcIixcbiAgICAgICAgICAgIEVYUEVSSUVOQ0U6IFwiZXhwZXJpZW5jZVwiXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5hZGROYW1lcyhldmVudE5hbWVzKTtcbiAgICB9XG5cbiAgICBjb252ZW50aW9uKGV2ZW50TmFtZSkge1xuICAgICAgICBsZXQge0VSUk9SLCBERUxJTUVURVJ9ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIGAke3N1cGVyLmNvbnZlbnRpb24oKX0ke0RFTElNRVRFUn0ke0VSUk9SfSR7REVMSU1FVEVSfSR7ZXZlbnROYW1lfWA7XG4gICAgfVxuXG59IiwiaW1wb3J0IEhUVFBDb25zdGFudHMgZnJvbSBcIi4vaHR0cC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBleHRlbmRzIEhUVFBDb25zdGFudHN7XG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICBsZXQgZXJyb3JUeXBlcyA9IHtcbiAgICAgICAgICAgIFJFUVVFU1RfRVJST1IgOiBgcmVxdWVzdCR7dGhpcy5ERUxJTUVURVJ9ZXJyb3JgLFxuICAgICAgICAgICAgUkVRVUVTVF9TVUNDRVNTIDogYHJlcXVlc3Qke3RoaXMuREVMSU1FVEVSfXN1Y2Nlc3NgLFxuICAgICAgICAgICAgUkVTUE9OU0VfRVJST1IgOiBgcmVzcG9uc2Uke3RoaXMuREVMSU1FVEVSfWVycm9yYCxcbiAgICAgICAgICAgIFJFU1BPTlNFX1NVQ0NFU1MgOiBgcmVzcG9uc2Uke3RoaXMuREVMSU1FVEVSfXN1Y2Nlc3NgXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmFkZE5hbWVzKGVycm9yVHlwZXMpO1xuICAgIH1cblxuICAgIGNvbnZlbnRpb24oZXJyb3JOYW1lKXtcbiAgICAgICAgbGV0IHtERUxJTUVURVJ9ID0gdGhpcztcbiAgICAgICAgcmV0dXJuICBgJHtzdXBlci5jb252ZW50aW9uKCl9JHtERUxJTUVURVJ9JHtlcnJvck5hbWV9YDsgICBcbiAgICB9XG59IiwiaW1wb3J0IGlWWGpzQ29uc3RhbnRzIGZyb20gXCIuL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIGV4dGVuZHMgaVZYanNDb25zdGFudHN7XG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLkhUVFAgPSBcImh0dHBcIjtcbiAgICB9XG5cbiAgICBjb252ZW50aW9uKCl7XG4gICAgICAgIGxldCB7REVMSU1FVEVSLCBIVFRQfSA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuICBgJHtzdXBlci5jb252ZW50aW9uKCl9JHtERUxJTUVURVJ9JHtIVFRQfWA7ICAgXG4gICAgfVxufSIsImltcG9ydCBpVlhpb0NvbnN0YW50cyBmcm9tIFwiLi9pVlhpby5qc1wiO1xuaW1wb3J0IEVycm9yQ29uc3RhbnRzIGZyb20gXCIuL2Vycm9ycy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBleHRlbmRzIGlWWGlvQ29uc3RhbnRze1xuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5FUlJPUiA9IG5ldyBFcnJvckNvbnN0YW50cygpLkVSUk9SO1xuXG4gICAgICAgIGxldCBlcnJvclR5cGVzID0ge1xuICAgICAgICAgICAgRVhQRVJJRU5DRSA6IFwiZXhwZXJpZW5jZVwiLFxuICAgICAgICAgICAgUExBVEZPUk1fVU5BVkFJTEFCTEUgOiBcInBsYXRmb3JtLXVuYXZhaWxhYmxlXCIsXG4gICAgICAgICAgICBFVkVOVF9OT1RfRklSRUQgOiBcImV2ZW50LW5vdC1maXJlZFwiXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmFkZE5hbWVzKGVycm9yVHlwZXMpO1xuICAgIH1cblxuICAgIGNvbnZlbnRpb24oZXJyb3JOYW1lKXtcbiAgICAgICAgbGV0IHtFUlJPUiwgREVMSU1FVEVSfSA9IHRoaXM7XG4gICAgICAgIHJldHVybiAgYCR7c3VwZXIuY29udmVudGlvbigpfSR7REVMSU1FVEVSfSR7RVJST1J9JHtERUxJTUVURVJ9JHtlcnJvck5hbWV9YDsgICBcbiAgICB9XG59IiwiaW1wb3J0IGlWWGpzQ29uc3RhbnRzIGZyb20gXCIuL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIGV4dGVuZHMgIGlWWGpzQ29uc3RhbnRze1xuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5JVlhfSU8gPSBcImlWWGlvXCI7XG4gICAgfVxuXG4gICAgY29udmVudGlvbigpe1xuICAgICAgICBsZXQge0RFTElNRVRFUiwgSVZYX0lPfSA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuICBgJHtzdXBlci5jb252ZW50aW9uKCl9JHtERUxJTUVURVJ9JHtJVlhfSU99YDsgICBcbiAgICB9XG59IiwiaW1wb3J0IGlWWGpzQ29uZmlnQ29uc3RhbnRzIGZyb20gXCIuL2lWWGpzLmNvbmZpZy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBleHRlbmRzICBpVlhqc0NvbmZpZ0NvbnN0YW50c3tcbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIGxldCBldmVudE5hbWVzID0ge1xuICAgICAgICAgICAgVkFMSURBVEVEIDogXCJ2YWxpZGF0ZWRcIixcbiAgICAgICAgICAgIE5PVF9WQUxJRCA6IFwibm90LXZhbGlkXCIsXG4gICAgICAgICAgICBBTkFMWVRJQ1NfU0VUIDogXCJhbmFseXRpY3Mtc2V0XCIsXG4gICAgICAgICAgICBBTkFMWVRJQ1NfRklOSVNIRUQgOiBcImFuYWx5dGljcy1maW5pc2hlZFwiXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5hZGROYW1lcyhldmVudE5hbWVzKTtcbiAgICB9XG5cbiAgICBjb252ZW50aW9uKGV2ZW50TmFtZSkge1xuICAgICAgICBsZXQge0RFTElNRVRFUn0gPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiBgJHtzdXBlci5jb252ZW50aW9uKCl9JHtERUxJTUVURVJ9JHtldmVudE5hbWV9YDtcbiAgICB9XG59IiwiaW1wb3J0IGlWWGpzQ29uc3RhbnRzIGZyb20gXCIuL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIGV4dGVuZHMgIGlWWGpzQ29uc3RhbnRze1xuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5DT05GSUcgPSBcImNvbmZpZ1wiO1xuICAgIH1cblxuICAgIGNvbnZlbnRpb24oKXtcbiAgICAgICAgbGV0IHtERUxJTUVURVIsIENPTkZJR30gPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiAgYCR7c3VwZXIuY29udmVudGlvbigpfSR7REVMSU1FVEVSfSR7Q09ORklHfWA7ICAgXG4gICAgfVxufSIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIHtcbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICB0aGlzLkxJQlJBUlkgPSBcImlWWGpzXCI7XG4gICAgICAgIHRoaXMuREVMSU1FVEVSID0gXCI6XCI7XG4gICAgfVxuXG4gICAgY29udmVudGlvbigpe1xuICAgICAgICByZXR1cm4gdGhpcy5MSUJSQVJZO1xuICAgIH1cblxuICAgIGFkZE5hbWVzKG5hbWVDb2xsZWN0aW9uKXtcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgICAgICBsZXQgbmFtZXMgPSBPYmplY3Qua2V5cyhuYW1lQ29sbGVjdGlvbik7XG4gICAgICAgIFxuICAgICAgICBuYW1lcy5mb3JFYWNoKChuYW1lLCBpbmRleCkgPT57XG4gICAgICAgICAgICBzZWxmW25hbWVdID0gc2VsZi5jb252ZW50aW9uKG5hbWVDb2xsZWN0aW9uW25hbWVdKTtcbiAgICAgICAgfSlcbiAgICB9XG59IiwiaW1wb3J0IGlWWGpzQ29uc3RhbnRzIGZyb20gXCIuL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIGV4dGVuZHMgaVZYanNDb25zdGFudHN7XG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5MT0dHSU5HID0gXCJsb2dcIjtcblxuICAgICAgICBsZXQgbG9nVHlwZXMgPSB7XG4gICAgICAgICAgICBFUlJPUiA6IFwiZXJyb3JcIixcbiAgICAgICAgICAgIFdBUk4gOiBcIndhcm5cIixcbiAgICAgICAgICAgIFRSQUNFIDogXCJ0cmFjZVwiLFxuICAgICAgICAgICAgTE9HIDpcIlwiLFxuICAgICAgICAgICAgREVCVUc6IFwiZGVidWdcIlxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5hZGROYW1lcyhsb2dUeXBlcyk7XG4gICAgfVxuXG4gICAgY29udmVudGlvbihsZXZlbCl7XG4gICAgICAgIGxldCB7REVMSU1FVEVSLCBMT0dHSU5HfSA9IHRoaXM7XG4gICAgICAgIGlmKGxldmVsLmxlbmd0aCA8PSAwKXtcbiAgICAgICAgICAgcmV0dXJuICBgJHtzdXBlci5jb252ZW50aW9uKCl9JHtERUxJTUVURVJ9JHtMT0dHSU5HfWBcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBgJHtzdXBlci5jb252ZW50aW9uKCl9JHtERUxJTUVURVJ9JHtMT0dHSU5HfSR7REVMSU1FVEVSfSR7bGV2ZWx9YDtcbiAgICB9XG59IiwiaW1wb3J0IEFuZ3VsYXJFdmVudHMgZnJvbSAnLi9hbmd1bGFyLmV2ZW50cy5qcyc7XG5pbXBvcnQgQXVkaW9FdmVudHMgZnJvbSAnLi9hdWRpby5ldmVudHMuanMnO1xuaW1wb3J0IEVycm9ycyBmcm9tICcuL2Vycm9ycy5qcyc7XG5pbXBvcnQgSHR0cEV2ZW50cyBmcm9tICcuL2h0dHAuZXZlbnRzLmpzJztcbmltcG9ydCBpVlhpb0Vycm9ycyBmcm9tICcuL2lWWGlvLmVycm9ycy5qcyc7XG5pbXBvcnQgaVZYanNDb25maWdFdmVudHMgZnJvbSAnLi9pVlhqcy5jb25maWcuZXZlbnRzLmpzJztcbmltcG9ydCBMb2dnaW5nRXZlbnROYW1lcyBmcm9tICcuL2xvZ2dpbmcuanMnO1xuaW1wb3J0IFN0YXRlRXZlbnRzIGZyb20gJy4vc3RhdGUuZXZlbnRzLmpzJztcbmltcG9ydCBWaWRlb0V2ZW50cyBmcm9tIFwiLi92aWRlby5ldmVudHMuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvLyBBbmd1bGFyXG4gICAgICAgIHRoaXMuQU5HVUxBUiA9IHtcbiAgICAgICAgICAgIEVWRU5UUzogbmV3IEFuZ3VsYXJFdmVudHMoKVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gQXVkaW9cbiAgICAgICAgdGhpcy5BVURJTyA9IHtcbiAgICAgICAgICAgIEVWRU5UUzogbmV3IEF1ZGlvRXZlbnRzXG4gICAgICAgIH1cblxuICAgICAgICAvLyBFcnJvcnMgXG4gICAgICAgIHRoaXMuRVJST1JTID0ge1xuICAgICAgICAgICAgRVZFTlRTOiBuZXcgRXJyb3JzKClcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBIdHRwXG4gICAgICAgIHRoaXMuSFRUUCA9IHtcbiAgICAgICAgICAgIEVWRU5UUzogbmV3IEh0dHBFdmVudHMoKVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gaVZYanNcbiAgICAgICAgdGhpcy5DT05GSUcgPSB7XG4gICAgICAgICAgICBFVkVOVFM6IG5ldyBpVlhqc0NvbmZpZ0V2ZW50cygpXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gaVZYaW9cbiAgICAgICAgdGhpcy5pVlhpbyA9IHtcbiAgICAgICAgICAgIEVSUk9SUzogbmV3IGlWWGlvRXJyb3JzKClcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBMb2dnaW5nXG4gICAgICAgIHRoaXMuTE9HR0lORyA9IHtcbiAgICAgICAgICAgIEVWRU5UUzogbmV3IExvZ2dpbmdFdmVudE5hbWVzKClcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBTdGF0ZVxuICAgICAgICB0aGlzLlNUQVRFID0ge1xuICAgICAgICAgICAgRVZFTlRTOiBuZXcgU3RhdGVFdmVudHMoKVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFZpZGVvIFxuICAgICAgICB0aGlzLlZJREVPID0ge1xuICAgICAgICAgICAgRVZFTlRTOiBuZXcgVmlkZW9FdmVudHMoKVxuICAgICAgICB9XG4gICAgfVxufSIsImltcG9ydCBpVlhqc1N0YXRlQ29uc3RhbnRzIGZyb20gXCIuL3N0YXRlLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIGV4dGVuZHMgIGlWWGpzU3RhdGVDb25zdGFudHN7XG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICBsZXQgZXZlbnROYW1lcyA9IHtcbiAgICAgICAgICAgIENIQU5HRSA6IFwiY2hhbmdlXCIsXG4gICAgICAgICAgICBTVUNDRVNTIDogXCJzdWNjZXNzXCIsXG4gICAgICAgICAgICBFUlJPUiA6IFwiZXJyb3JcIixcbiAgICAgICAgICAgIEdPIDogXCJnb1wiLFxuICAgICAgICAgICAgTk9UX0ZPVU5EIDogXCJub3QtZm91bmRcIixcbiAgICAgICAgICAgIEdFVF9TVEFURSA6IFwiZ2V0LXN0YXRlXCIsXG4gICAgICAgICAgICBSRVFVRVNUX1NUQVRFIDogXCJyZXF1ZXN0LXN0YXRlXCJcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmFkZE5hbWVzKGV2ZW50TmFtZXMpO1xuICAgIH1cblxuICAgIGNvbnZlbnRpb24oZXZlbnROYW1lKSB7XG4gICAgICAgIGxldCB7REVMSU1FVEVSfSA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIGAke3N1cGVyLmNvbnZlbnRpb24oKX0ke0RFTElNRVRFUn0ke2V2ZW50TmFtZX1gO1xuICAgIH1cbn0iLCJpbXBvcnQgaVZYanNDb25zdGFudHMgZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgZXh0ZW5kcyAgaVZYanNDb25zdGFudHN7XG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLlNUQVRFID0gXCJzdGF0ZVwiO1xuICAgIH1cblxuICAgIGNvbnZlbnRpb24oKXtcbiAgICAgICAgbGV0IHtERUxJTUVURVIsIFNUQVRFfSA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuICBgJHtzdXBlci5jb252ZW50aW9uKCl9JHtERUxJTUVURVJ9JHtTVEFURX1gOyAgIFxuICAgIH1cbn0iLCJpbXBvcnQgVmlkZW9Db25zdGFudHMgZnJvbSBcIi4vdmlkZW8uanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgZXh0ZW5kcyBWaWRlb0NvbnN0YW50cyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgbGV0IGV2ZW50TmFtZXMgPSB7XG4gICAgICAgICAgICBBRERfUExBWUlOR19DTEFTUzogJ2FkZC1wbGF5aW5nLWNsYXNzJyxcbiAgICAgICAgICAgIEJVRkZFUklORyA6IFwiYnVmZmVyaW5nXCIsXG4gICAgICAgICAgICBDQU5fUExBWTogXCJjYW4tcGxheVwiLFxuICAgICAgICAgICAgRElTUE9TRSA6IFwiZGlzcG9zZVwiLFxuICAgICAgICAgICAgRU5ERUQgOiBcImVuZGVkXCIsXG4gICAgICAgICAgICBHRVRfRFVSQVRJT046IFwiZ2V0LWR1cmF0aW9uXCIsXG4gICAgICAgICAgICBNVVRFOiBcIm11dGVcIixcbiAgICAgICAgICAgIFBBVVNFOiBcInBhdXNlXCIsXG4gICAgICAgICAgICBQQVVTRUQ6IFwicGF1c2VkXCIsXG4gICAgICAgICAgICBQTEFZOiBcInBsYXlcIixcbiAgICAgICAgICAgIFBMQVlJTkc6IFwicGxheWluZ1wiLFxuICAgICAgICAgICAgUkVBRFlfUExBWUVSIDogXCJyZWFkeS1wbGF5ZXJcIixcbiAgICAgICAgICAgIFNFRUs6IFwic2Vla1wiLFxuICAgICAgICAgICAgU0VUX0RVUkFUSU9OOiBcInNldC1kdXJhdGlvblwiLFxuICAgICAgICAgICAgU0VUX1ZPTFVNRTogXCJzZXQtdm9sdW1lXCIsXG4gICAgICAgICAgICBUSU1FX1VQREFURTogXCJ0aW1lLXVwZGF0ZVwiLFxuICAgICAgICAgICAgVU5NVVRFOiBcInVubXV0ZVwiXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5hZGROYW1lcyhldmVudE5hbWVzKTtcbiAgICB9XG5cbiAgICBjb252ZW50aW9uKGV2ZW50TmFtZSkge1xuICAgICAgICBsZXQge0RFTElNRVRFUn0gPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiBgJHtzdXBlci5jb252ZW50aW9uKCl9JHtERUxJTUVURVJ9JHtldmVudE5hbWV9YDtcbiAgICB9XG59IiwiaW1wb3J0IGlWWGpzQ29uc3RhbnRzIGZyb20gXCIuL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIGV4dGVuZHMgIGlWWGpzQ29uc3RhbnRze1xuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5WSURFTyA9IFwidmlkZW9cIjtcbiAgICB9XG5cbiAgICBjb252ZW50aW9uKCl7XG4gICAgICAgIGxldCB7REVMSU1FVEVSLCBWSURFT30gPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiAgYCR7c3VwZXIuY29udmVudGlvbigpfSR7REVMSU1FVEVSfSR7VklERU99YDsgICBcbiAgICB9XG59IiwicmVxdWlyZShcImJhYmVsLXBvbHlmaWxsXCIpO1xyXG5sZXQgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJyk7XHJcblxyXG5pbXBvcnQge1NldHVwfSBmcm9tICcuLi9tb2R1bGVzL3NldHVwLmpzJztcclxuaW1wb3J0IExvZ2dpbmcgZnJvbSBcIi4uL3V0aWxpdGllcy9sb2dnaW5nLmpzXCI7XHJcbmltcG9ydCBpVlhqc0NvbmZpZ0V2ZW50TmFtZXMgZnJvbSBcIi4uL2NvbnN0YW50cy9pVlhqcy5jb25maWcuZXZlbnRzLmpzXCI7XHJcbmltcG9ydCB7QWN0aW9uUHJvY2Vzc29yfSBmcm9tICcuL3Byb2Nlc3Nvci5qcyc7XHJcblxyXG5sZXQgaVZYanNDb25maWdFdmVudHMgPSBuZXcgaVZYanNDb25maWdFdmVudE5hbWVzKCk7XHJcblxyXG4vKipcclxuICogQWxsb3dzIHZhcmlvdXMgZGF0YSBhbmQgZnVuY3Rpb25zIGZvciBsaWJyYXJpZXMgdG8gY3JlYXRlXHJcbiAqIGFuZCBidWlsZCBzdGF0ZWZ1bCBpbnRlcmFjdGl2ZSBleHBlcmllbmNlcy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBpVlhqcyB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIFVwIGlWWGpzIGFuZCBhZGRzIGEgQnVzIHNpbmNlIGl0IHdpbGwgYmUgdXNlZFxyXG4gICAgICogZm9yIHNldHRpbmcgdXAgdGhpcyBjbGFzcyBhc3luY3Jvbm91c2x5XHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBbiBpbnN0YW5jZSBvZiBub2RlanMncyBFdmVudEVtaXR0ZXIgY2xhc3MgdGhhdCBcclxuICAgICAgICAgKiBhbGxvd3MgaVZYanMgdG8gZW1pdCBhbmQgbGlzdGVuIHRvIHZhcmlvdXMgZXZlbnRzLlxyXG4gICAgICAgICAqIEB0eXBlIHtFdmVudEVtaXR0ZXJ9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5CdXMgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB1cCBhbmQgYXR0YWNoZXMgY29tcG9uZW50cyB0byB0aGlzIGlWWGpzIG9iamVjdCBhZnRlciB0aGUgXHJcbiAgICAgKiBzZXQgdXAgaXMgcmFuIGFuZCBhbGwgbW9kdWxlIGRlcGVuZGVuY2llcyBoYXZlIGJlZW4gbG9hZGVkLiBUaGlzXHJcbiAgICAgKiBuZWVkcyB0byBydW4gd2l0aCBhIHZhbGlkYXRlZCBleHBlcmllbmNlIGFuZCBhZnRlciBhbGwgZGVwZW5kZW5jaWVzXHJcbiAgICAgKiBhcmUgbG9hZGVkLCBvdGhlcndpc2UgaXQgd2lsbCBicmVhayBhbiBleHBlcmllbmNlLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcHJvY2Vzc2VkRGF0YSAtIGEgZGF0YSBvYmplY3Qgd2l0aCByZWZlcmVuY2VzXHJcbiAgICAgKiB0byBtb2R1bGVzIGFuZCBmdW5jdGlvbnMgXHJcbiAgICAgKiBAZW1pdHMge3ZhbGlkYXRlZH0gZW1pdHMgYSB2ZXJpZmllZCBpbnN0YW5jZSBvZiBpVlhqcyBmb3Igb3RoZXIgY29tcG9uZW50c1xyXG4gICAgICogdG8gdXNlLlxyXG4gICAgICovXHJcbiAgICBzZXRVcGlWWGpzKHByb2Nlc3NlZERhdGEpIHtcclxuXHJcbiAgICAgICAgLypcclxuICAgICAgICAgKiBEZXBlbmRpbmcgb24gdGhlIGlWWGpzIGV4cGVyaWVuY2UsIHNvbWUgbmF0aXZlIGZ1bmN0aW9uc1xyXG4gICAgICAgICAqIG1heSBuZWVkIHRvIGJlIHVwZGF0ZWQgdG8gd29yayB3aXRoIHRoZSBBY3Rpb24vQnVzIHN5c3RlbS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBpZiAocHJvY2Vzc2VkRGF0YS5hY3Rpb25zKSB7XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQW4gb2JqZWN0IG9mIGZ1bmN0aW9ucyB0aGF0IGFyZSBtb2RpZmllZCB0byB3b3JrIHdpdGggdGhlXHJcbiAgICAgICAgICAgICAqIGlWWGpzIEFjdGlvbiBzeXN0ZW0uXHJcbiAgICAgICAgICAgICAqIEB0eXBlIHtvYmplY3R9XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICB0aGlzLmFjdGlvbnMgPSBwcm9jZXNzZWREYXRhLmFjdGlvbnM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKiogXHJcbiAgICAgICAgICogSG9sZHMgYWxsIHN0YXRlIGNvbmZpZ3VyYXRpb25zIHRvIHNldCB1cCB0aGlzIFxyXG4gICAgICAgICAqIGlWWGpzIGV4cGVyaWVuY2VcclxuICAgICAgICAgKiBAdHlwZSB7b2JqZWN0fSBcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmNvbmZpZyA9IHByb2Nlc3NlZERhdGEuY29uZmlnO1xyXG4gICAgICAgXHJcblxyXG4gICAgICAgIGlmKHRoaXMuc2VsZWN0b3Ipe1xyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5zZWxlY3RvciA9IHRoaXMuc2VsZWN0b3I7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDb250YWlucyBhbGwgZGF0YSBhbmQgZnVuY3Rpb25zIGZvciBhbiBleHBlcmllbmNlIHRvIHJ1blxyXG4gICAgICAgICAqIEB0eXBlIHtvYmplY3R9IFxyXG4gICAgICAgICAqL1xyXG5cclxuICAgICAgICB0aGlzLmV4cGVyaWVuY2UgPSBwcm9jZXNzZWREYXRhLmV4cGVyaWVuY2U7XHJcbiAgICAgICAgdGhpcy5leHBlcmllbmNlLnJ1bGVzID0gcHJvY2Vzc2VkRGF0YS5ydWxlcztcclxuICAgICAgICB0aGlzLmV4cGVyaWVuY2UuQnVzID0gdGhpcy5CdXM7XHJcbiAgICAgICAgdGhpcy5leHBlcmllbmNlLnByb2Nlc3NvciA9IG5ldyBBY3Rpb25Qcm9jZXNzb3IodGhpcyk7XHJcbiAgICAgICAgdGhpcy5leHBlcmllbmNlLmNvbmZpZyA9IHRoaXMuY29uZmlnO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBFdmFsdWF0ZXMgYW4gYXJyYXkgb2YgZXhwcmVzc2lvbnMgdG8gYWxsb3cgc3RhdCBuYXZpZ2F0aW9uIGJyYW5jaGluZ1xyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEB0eXBlIHtmdW5jdGlvbn1cclxuICAgICAgICAgKiBAcGFyYW0ge2FycmF5fSBuYXZBcnJheSAtIGFuIGFycmF5IG9mIGV4cHJlc3Npb25zIGFuZCBzdGF0ZUlkcyB0aGF0IG5hdmlnYXRlXHJcbiAgICAgICAgICogdGhlIHN0YXRlc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMucnVsZXMgPSBwcm9jZXNzZWREYXRhLnJ1bGVzO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBIb2xkcyBpbnN0YW5jZXMgb2YgY2xhc3NlcyBmb3IgbW9kdWxlcyB0aGF0IHdpbGwgYmUgdXNlZCBieSByZW5kZXJlcnNcclxuICAgICAgICAgKiB0byBtYWtlIHZhcmlvdXMgZGF0YSBvYmplY3RzLlxyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEB0eXBlIHtvYmplY3R9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy51aSA9IHByb2Nlc3NlZERhdGEudWk7XHJcbiAgICAgICAgdGhpcy52aWRlbyA9IHByb2Nlc3NlZERhdGEudmlkZW87XHJcbiAgICAgICAgdGhpcy5hdWRpbyA9IHByb2Nlc3NlZERhdGEuYXVkaW87XHJcblxyXG4gICAgICAgIC8qKiBcclxuICAgICAgICAgKiBPbmNlIGFsbCB2YXJpb3VzIGNvbXBvbmVudHMgYXJlIGFkZGVkLCBlbWl0cyBvbiB0aGVcclxuICAgICAgICAgKiBidXMgdGhhdCBpdCBpcyB2YWxpZGF0ZWQgYW5kIHNlbmRzIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3NcclxuICAgICAgICAgKiB0byBzZXQgdXAuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5CdXMuZW1pdChpVlhqc0NvbmZpZ0V2ZW50cy5WQUxJREFURUQsIHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSW5pdGlhbGl6ZXMgaVZYanMgYnkgdGFraW5nIGluIGFuIG9iamVjdCBvZiBzZXR0aW5ncyBzb1xyXG4gICAgICogaXQgY2FuIHJ1biB0aGUgdmFyaW91cyBlbmhhbmNlbWVudCwgdmFsaWRhdGlvbiBhbmQgbW9kdWxlXHJcbiAgICAgKiBsb2FkaW5nLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gc2V0dGluZ3MgLSBhbGwgdXNlciBzZXR0aW5ncyB0aGF0IHdpbGwgY3JlYXRlXHJcbiAgICAgKiB0aGlzIGlWWGpzIGV4cGVyaWVuY2UuXHJcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIFByb21pc2UgdGhhdCB3aWxsIHJlc292bGUgd2hlbiBzZXQgdXAgc3VjY2VlZHMvZmFpbHNcclxuICAgICAqL1xyXG4gICAgaW5pdChzZXR0aW5ncykge1xyXG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgICAgICBsZXQge2RlYnVnID0gdHJ1ZX0gPSBzZXR0aW5ncztcclxuICAgICBcclxuICAgICAgICBpZihzZXR0aW5ncy5zZWxlY3Rvcil7ICAgICBcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3RvciA9IHNldHRpbmdzLnNlbGVjdG9yO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYoc2V0dGluZ3Mucm91dGVGdW5jdGlvbil7XHJcbiAgICAgICAgICAgIHRoaXMucm91dGVGdW5jdGlvbiA9IHNldHRpbmdzLnJvdXRlRnVuY3Rpb247XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmxvZyA9IG5ldyBMb2dnaW5nKGRlYnVnLCB0aGlzLkJ1cyk7XHJcblxyXG4gICAgICAgIGxldCB0aGlzU2V0dXAgPSBuZXcgU2V0dXAoc2V0dGluZ3MsIHRoaXMuQnVzLCB0aGlzLmxvZyk7XHJcbiAgICAgICAgbGV0IGluaXRQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzU2V0dXBcclxuICAgICAgICAgICAgICAgIC5ydW5TZXR1cCgpXHJcbiAgICAgICAgICAgICAgICAudGhlbigoZXhwZXJpZW5jZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc2V0VXBpVlhqcyhleHBlcmllbmNlKVxyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoc2VsZik7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gaW5pdFByb21pc2U7XHJcbiAgICB9XHJcblxyXG59OyIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5hbmltYXRpb25zID0gW107XG4gICAgICAgIHRoaXMudGltZURhdGEgPSB7fVxuXG4gICAgfVxuXG4gICAgcmVnaXN0ZXIoYW5pbWF0aW9uRm4pIHtcbiAgICAgICAgbGV0IHsgdGltZURhdGEgfSA9IHRoaXM7XG4gICAgICAgIGxldCByZWdpc3RlcmVkID0gdGltZURhdGEudGltZXN0YW1wO1xuXG4gICAgICAgIHRoaXMuYW5pbWF0aW9ucy5wdXNoKHtcbiAgICAgICAgICAgIGFuaW1hdGlvbkZuLFxuICAgICAgICAgICAgcmVnaXN0ZXJlZFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB1cGRhdGUodGltZU9ianMpIHtcbiAgICAgICAgbGV0IGlzUmVnaXN0ZXJlZCA9IGZhbHNlO1xuICAgICAgICBsZXQgc3RhcnRSZWdpc3RlcmVkO1xuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy5hbmltYXRpb25zLmZvckVhY2goYW5pbWF0aW9uID0+IHtcbiAgICAgICAgICAgIGxldCB7IGFuaW1hdGlvbkZuLCByZWdpc3RlcmVkIH0gPSBhbmltYXRpb247XG4gICAgICAgICAgICBsZXQgY3VycmVudFRpbWVkYXRhID0gT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgICAgICBzZWxmLnRpbWVEYXRhLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcmVnaXN0ZXJlZCxcbiAgICAgICAgICAgICAgICAgICAgcmVnaXN0ZXJlZFRpbWVsYXBzZTogc2VsZi50aW1lRGF0YS50aW1lc3RhbXAgLSByZWdpc3RlcmVkXG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApXG5cbiAgICAgICAgICAgIGFuaW1hdGlvbkZuKGN1cnJlbnRUaW1lZGF0YSlcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBydW4oKSB7XG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgICAgbGV0IHN0YXJ0VGltZSA9IDA7XG4gICAgICAgIGxldCBnZXRTdGFydFRpbWUgPSB0cnVlO1xuXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShydW5XcmFwcGVyKTtcblxuICAgICAgICBmdW5jdGlvbiBydW5XcmFwcGVyKHRpbWVzdGFtcCkge1xuICAgICAgICAgICAgaWYgKGdldFN0YXJ0VGltZSkge1xuICAgICAgICAgICAgICAgIHN0YXJ0VGltZSA9IHRpbWVzdGFtcDtcbiAgICAgICAgICAgICAgICBnZXRTdGFydFRpbWUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2VsZi50aW1lRGF0YSA9IHtcbiAgICAgICAgICAgICAgICBzdGFydFRpbWUsXG4gICAgICAgICAgICAgICAgdGltZXN0YW1wLFxuICAgICAgICAgICAgICAgIHByb2dyZXNzOiB0aW1lc3RhbXAgLSBzdGFydFRpbWVcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2VsZi51cGRhdGUoKTtcbiAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShydW5XcmFwcGVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbW92ZShhbmltYXRpb25Gbikge1xuICAgICAgICB0aGlzLmFuaW1hdGlvbnMgPSB0aGlzLmFuaW1hdGlvbnMuZmlsdGVyKGFuaW1hdGlvbiA9PiB7XG4gICAgICAgICAgICByZXR1cm4gYW5pbWF0aW9uLmFuaW1hdGlvbkZuICE9PSBhbmltYXRpb25GbjtcbiAgICAgICAgfSlcbiAgICB9XG59IiwiaW1wb3J0IHsgVHlwZVZhbGlkYXRvciB9IGZyb20gJy4uL3V0aWxpdGllcy90eXBlLXBhcnNlcnMuanMnO1xuXG5sZXQgdHlwZVZhbGlkYXRvciA9IG5ldyBUeXBlVmFsaWRhdG9yKCk7XG5cbmV4cG9ydCBjbGFzcyBBY3Rpb25Qcm9jZXNzb3Ige1xuICAgIGNvbnN0cnVjdG9yKGlWWGpzKSB7XG5cbiAgICAgICAgdGhpcy5pVlhqcyA9IGlWWGpzO1xuXG4gICAgfVxuXG4gICAgcmVzb2x2ZUFjdGlvbnMoYWN0aW9uQXJyYXksIGNhbGxiYWNrKSB7XG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgICAgbGV0IHsgbG9nIH0gPSB0aGlzLmlWWGpzO1xuXG4gICAgICAgIGlmICh0eXBlVmFsaWRhdG9yLmlzRW1wdHkoYWN0aW9uQXJyYXkpKSB7XG5cbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBwcm9taXNlcyA9IGFjdGlvbkFycmF5Lm1hcCgoYWN0aW9uT2JqKSA9PiB7XG4gICAgICAgICAgICBzZWxmLmlWWGpzLkJ1cy5lbWl0KGFjdGlvbk9iai5ldmVudE5hbWUsIGFjdGlvbk9iai5hcmdzKTtcblxuICAgICAgICAgICAgaWYgKCF0eXBlVmFsaWRhdG9yLmlzRW1wdHkoYWN0aW9uT2JqLmFyZ3MpKSB7XG4gICAgICAgICAgICAgICAgbG9nLmRlYnVnKGBFdmVudCAke2FjdGlvbk9iai5ldmVudE5hbWV9IHdhcyBmaXJlZC5gLCB7XG4gICAgICAgICAgICAgICAgICAgIGdyb3VwOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlczogT2JqZWN0LmtleXMoYWN0aW9uT2JqLmFyZ3MpLm1hcCgoa2V5LCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgJHtrZXl9OiR7YWN0aW9uT2JqLmFyZ3Nba2V5XX1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGFjdGlvbk9iai5hcmdzW2tleV1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbG9nLmRlYnVnKGBFdmVudCAke2FjdGlvbk9iai5ldmVudE5hbWV9YCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzZWxmLmlWWGpzLmFjdGlvbnMgJiYgc2VsZi5pVlhqcy5hY3Rpb25zW2FjdGlvbk9iai5ldmVudE5hbWVdKSB7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5pVlhqcy5hY3Rpb25zW2FjdGlvbk9iai5ldmVudE5hbWVdKGFjdGlvbk9iai5hcmdzKTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc2VsZi5pVlhqcy5leHBlcmllbmNlW2FjdGlvbk9iai5ldmVudE5hbWVdKSB7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5pVlhqcy5leHBlcmllbmNlW2FjdGlvbk9iai5ldmVudE5hbWVdKGFjdGlvbk9iai5hcmdzKTtcblxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBQcm9taXNlLmFsbChwcm9taXNlcylcbiAgICAgICAgICAgIC50aGVuKChleHBlcmllbmNlKSA9PiB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2lWWGpzOiBOT1QgQUxMIEFDVElPTlMgUkVTT0xWRUQnKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmRpcihlcnIpO1xuICAgICAgICAgICAgICAgIHNlbGYuaVZYanMuQnVzLmVtaXQoJ2lWWGpzOmlWWGlvOmVycm9yOmV2ZW50LW5vdC1maXJlZCcsIGVycik7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbn0iLCJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5jYW5BbmltYXRlID0gYW5pbWUgPyB0cnVlIDogZmFsc2U7XG5cbiAgICB9XG5cbiAgICBydW5Ud2VlbnModHdlZW5zID0gW10sIEFjdGlvbnMpIHtcbiAgICAgICAgbGV0IHsgRWFzaW5nRnVuY3Rpb25zIH0gPSB0aGlzO1xuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgYW5pbWUoe1xuICAgICAgICAgICAgdGFyZ2V0czogZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnI2NlbGVzdGUtY29sb3VyLXN0b3J5ID4gZGl2ID4gZGl2ID4gZGl2LmFuaW1hdGUtMScpLFxuICAgICAgICAgICAgdHJhbnNsYXRlWDoge1xuICAgICAgICAgICAgICAgIHZhbHVlOiAyNTAsXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDgwMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJvdGF0ZToge1xuICAgICAgICAgICAgICAgIHZhbHVlOiAzNjAsXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDE4MDAsXG4gICAgICAgICAgICAgICAgZWFzaW5nOiAnZWFzZUluT3V0U2luZSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzY2FsZToge1xuICAgICAgICAgICAgICAgIHZhbHVlOiAyLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAxNjAwLFxuICAgICAgICAgICAgICAgIGRlbGF5OiA4MDAsXG4gICAgICAgICAgICAgICAgZWFzaW5nOiAnZWFzZUluT3V0UXVhcnQnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVsYXk6IDI1MCAvLyBBbGwgcHJvcGVydGllcyBleGNlcHQgJ3NjYWxlJyBpbmhlcml0IDI1MG1zIGRlbGF5XG4gICAgICAgIH0pO1xuICAgIH1cbn0iLCIvLyBUeXBlc1xuaW1wb3J0IHsgSHRtbDUgfSBmcm9tICcuL3R5cGVzL2h0bWw1LmpzJztcblxuZXhwb3J0IGNsYXNzIFJlZ2lzdGVyZWRBdWRpb01vZHVsZXMgIHtcbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICB0aGlzLmh0bWw1ID0gSHRtbDU7XG4gICAgfSAgXG59OyIsImltcG9ydCB7IE9iamVjdFBhcnNlcnMgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbGl0aWVzL3R5cGUtcGFyc2Vycy5qc1wiO1xuaW1wb3J0IEF1ZGlvRXZlbnROYW1lcyBmcm9tIFwiLi4vLi4vLi4vY29uc3RhbnRzL2F1ZGlvLmV2ZW50cy5qc1wiO1xuXG5leHBvcnQgY2xhc3MgSHRtbDUge1xuICAgIGNvbnN0cnVjdG9yKHNlbGVjdG9yLCBpZCA9ICd2b2ljZW92ZXInKSB7XG4gICAgICAgIGxldCBhdWRpb0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdBVURJTycpO1xuXG4gICAgICAgIHRoaXMuY3VycmVudFZvbHVtZSA9IDAuNTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLmF1ZGlvRWxlbWVudCA9IGF1ZGlvRWxlbWVudDtcbiAgICAgICAgdGhpcy5hdWRpb0VsZW1lbnQuc2V0QXR0cmlidXRlKCdpZCcsIGlkKTtcblxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKS5hcHBlbmRDaGlsZChhdWRpb0VsZW1lbnQpO1xuICAgIH1cblxuICAgIHBsYXkoKSB7XG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgICAgbGV0IGF1ZGlvRXZlbnROYW1lcyA9IG5ldyBBdWRpb0V2ZW50TmFtZXMoKTtcblxuICAgICAgICB0aGlzLmF1ZGlvRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjYW5wbGF5dGhyb3VnaCcsICgpID0+IHtcbiAgICAgICAgICAgIHNlbGYuaVZYanNCdXMuZW1pdChhdWRpb0V2ZW50TmFtZXMuQ0FOX1BMQVkpO1xuICAgICAgICAgICAgdGhpcy5hdWRpb0VsZW1lbnQucGxheSgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwYXVzZSgpIHtcbiAgICAgICAgdGhpcy5hdWRpb0VsZW1lbnQucGF1c2UoKTtcbiAgICB9XG5cbiAgICBtdXRlKCkge1xuICAgICAgICB0aGlzLmF1ZGlvRWxlbWVudC52b2x1bWUgPSAwO1xuICAgIH1cblxuICAgIHVubXV0ZSgpIHtcbiAgICAgICAgdGhpcy5hdWRpb0VsZW1lbnQudm9sdW1lID0gdGhpcy5jdXJyZW50Vm9sdW1lO1xuICAgIH1cblxuICAgIHNldFZvbHVtZSh2b2x1bWUpIHtcbiAgICAgICAgaWYoIXZvbHVtZSkgcmV0dXJuO1xuICAgICAgICB0aGlzLmF1ZGlvRWxlbWVudC52b2x1bWUgPSB2b2x1bWU7XG4gICAgICAgIHRoaXMuY3VycmVudFZvbHVtZSA9IHZvbHVtZTtcbiAgICB9XG5cbiAgICBzZWVrKHRpbWUpIHtcbiAgICAgICAgdGhpcy5hdWRpb0VsZW1lbnQuY3VycmVudFRpbWUgPSB0aW1lO1xuICAgIH1cblxuICAgIGdldER1cmF0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hdWRpb0VsZW1lbnQuY3VycmVudFRpbWU7XG4gICAgfVxuXG4gICAgc2V0U3JjKHNyYykge1xuICAgICAgICB0aGlzLmF1ZGlvRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3NyYycsIHNyYyk7XG4gICAgfVxuXG4gICAgc2V0VGltZVVwZGF0ZSgpIHtcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgICAgICBsZXQgYXVkaW9FdmVudE5hbWVzID0gbmV3IEF1ZGlvRXZlbnROYW1lcygpO1xuXG4gICAgICAgIHRoaXMuYXVkaW9FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RpbWV1cGRhdGUnLCAoKSA9PiB7XG4gICAgICAgICAgICBzZWxmLmlWWGpzQnVzLmVtaXQoYXVkaW9FdmVudE5hbWVzLlRJTUVfVVBEQVRFLCBzZWxmKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2V0T25FbmQoKSB7XG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgICAgbGV0IGF1ZGlvRXZlbnROYW1lcyA9IG5ldyBBdWRpb0V2ZW50TmFtZXMoKTtcblxuICAgICAgICB0aGlzLmF1ZGlvRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiZW5kZWRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgc2VsZi5pVlhqc0J1cy5lbWl0KGF1ZGlvRXZlbnROYW1lcy5FTkRFRCwgc2VsZik7XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG5cbiAgICBydW5DdWVQb2ludHMocHJvY2Vzc29yKSB7XG4gICAgICAgIGxldCB7YXVkaW9FbGVtZW50ID0ge30sIGN1ZVBvaW50cyA9IFtdfSA9IHRoaXM7XG4gICAgICAgIGxldCB7Y3VycmVudFRpbWV9ID0gYXVkaW9FbGVtZW50O1xuXG4gICAgICAgIGlmIChjdWVQb2ludHMubGVuZ3RoIDw9IDApIHJldHVybjtcblxuICAgICAgICBjdWVQb2ludHMuZm9yRWFjaCgoY3VlUG9pbnQsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBsZXQge3RpbWVBdCwgZmlyZWQgPSBmYWxzZSwgb25jZSA9IGZhbHNlfSA9IGN1ZVBvaW50O1xuICAgICAgICAgICAgbGV0IHRpbWVVbnRpbCA9IE1hdGguYWJzKGN1ZVBvaW50LnRpbWVBdCAtIGN1cnJlbnRUaW1lKTtcblxuICAgICAgICAgICAgaWYgKHRpbWVBdCA8PSBjdXJyZW50VGltZSAmJiAhZmlyZWQpIHtcbiAgICAgICAgICAgICAgICBwcm9jZXNzb3IucmVzb2x2ZUFjdGlvbnMoW2N1ZVBvaW50XSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAob25jZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VlUG9pbnQuZmlyZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFkZEV2ZW50TGlzdGVuZXJzKGlWWGpzQnVzKSB7XG4gICAgICAgIGxldCBhdWRpb0V2ZW50TmFtZXMgPSBuZXcgQXVkaW9FdmVudE5hbWVzKCk7XG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcblxuICAgICAgICB0aGlzLmlWWGpzQnVzID0gaVZYanNCdXM7XG5cbiAgICAgICAgLy8gTG9va3MgZm9yIGEgY3VzdG9tIGlWWGpzQnVzIEZ1bmN0aW9uIGZvciBzcGVjaWZpYyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIGlWWGpzQnVzXG4gICAgICAgIHRoaXMucGxheU9uRXZlbnQgPSBpVlhqc0J1cy5vbihhdWRpb0V2ZW50TmFtZXMuUExBWSwgcGxheU9uRXZlbnQpO1xuICAgICAgICB0aGlzLnBhdXNlT25FdmVudCA9IGlWWGpzQnVzLm9uKGF1ZGlvRXZlbnROYW1lcy5QQVVTRSwgcGF1c2VPbkV2ZW50KTtcbiAgICAgICAgdGhpcy5tdXRlT25FdmVudCA9IGlWWGpzQnVzLm9uKGF1ZGlvRXZlbnROYW1lcy5NVVRFLCBtdXRlT25FdmVudCk7XG4gICAgICAgIHRoaXMudW5tdXRlT25FdmVudCA9IGlWWGpzQnVzLm9uKGF1ZGlvRXZlbnROYW1lcy5VTk1VVEUsIHVubXV0ZU9uRXZlbnQpO1xuICAgICAgICB0aGlzLnZvbHVtZU9uRXZlbnQgPSBpVlhqc0J1cy5vbihhdWRpb0V2ZW50TmFtZXMuVk9MVU1FLCB2b2x1bWVPbkV2ZW50KTtcbiAgICAgICAgdGhpcy5kdXJhdGlvbk9uRXZlbnQgPSBpVlhqc0J1cy5vbihhdWRpb0V2ZW50TmFtZXMuR0VUX0RVUkFUSU9OLCBkdXJhdGlvbk9uRXZlbnQpO1xuICAgICAgICB0aGlzLnNlZWtPbkV2ZW50ID0gaVZYanNCdXMub24oYXVkaW9FdmVudE5hbWVzLlNFRUssIHNlZWtPbkV2ZW50KTtcbiAgICAgICAgdGhpcy5zZXRVcCA9IGlWWGpzQnVzLm9uKGF1ZGlvRXZlbnROYW1lcy5TRVRfVVAsIHNldFVwKTtcblxuICAgICAgICAvLyBTZXRzIGl0IHRvIHRoZSBjdXN0b20gaVZYanNCdXMgRnVuY3Rpb24gKGlmIGl0IGhhcyBvbmUpIG9yIGp1c3Qgc2V0cyB0aGUgZGVmYXVsdCBvbmVcbiAgICAgICAgdGhpcy5wbGF5T25FdmVudCA9IHRoaXMucGxheU9uRXZlbnQgPyB0aGlzLnBsYXlPbkV2ZW50IDogcGxheU9uRXZlbnQ7XG4gICAgICAgIHRoaXMucGF1c2VPbkV2ZW50ID0gdGhpcy5wYXVzZU9uRXZlbnQgPyB0aGlzLnBhdXNlT25FdmVudCA6IHBhdXNlT25FdmVudDtcbiAgICAgICAgdGhpcy5zZWVrT25FdmVudCA9IHRoaXMuc2Vla09uRXZlbnQgPyB0aGlzLnNlZWtPbkV2ZW50IDogc2Vla09uRXZlbnQ7XG4gICAgICAgIHRoaXMuZHVyYXRpb25PbkV2ZW50ID0gdGhpcy5kdXJhdGlvbk9uRXZlbnQgPyB0aGlzLmR1cmF0aW9uT25FdmVudCA6IGR1cmF0aW9uT25FdmVudDtcbiAgICAgICAgdGhpcy52b2x1bWVPbkV2ZW50ID0gdGhpcy52b2x1bWVPbkV2ZW50ID8gdGhpcy52b2x1bWVPbkV2ZW50IDogdm9sdW1lT25FdmVudDtcbiAgICAgICAgdGhpcy5zZXRVcCA9IHRoaXMuc2V0VXAgPyB0aGlzLnNldFVwIDogc2V0VXA7XG5cbiAgICAgICAgLy8gU2V0cyB1cCBjdXN0b20gZnVuY3Rpb25zIG9uIHRoZSBhdWRpbyBvYmplY3RcbiAgICAgICAgdGhpcy5zZXRUaW1lVXBkYXRlKCk7XG4gICAgICAgIHRoaXMuc2V0T25FbmQoKTtcblxuICAgICAgICBmdW5jdGlvbiBzZXRVcChhdWRpb0luZm8pIHtcbiAgICAgICAgICAgIGxldCB7Y3VlUG9pbnRzID0gW10sIG9uRW5kID0gW119ID0gYXVkaW9JbmZvO1xuXG4gICAgICAgICAgICBpZiAoYXVkaW9JbmZvLmlkID09PSBzZWxmLmlkKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5hdWRpb0VsZW1lbnQuc2V0QXR0cmlidXRlKCdzcmMnLCBhdWRpb0luZm8uc3JjKTtcbiAgICAgICAgICAgICAgICBzZWxmLmN1ZVBvaW50cyA9IGN1ZVBvaW50cztcbiAgICAgICAgICAgICAgICBzZWxmLm9uRW5kID0gb25FbmQ7XG5cbiAgICAgICAgICAgICAgICBpZiAoYXVkaW9JbmZvLmxvb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5hdWRpb0VsZW1lbnQuc2V0QXR0cmlidXRlKCdsb29wJywgJycpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuYXVkaW9FbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnbG9vcCcpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBwbGF5T25FdmVudCgpIHtcbiAgICAgICAgICAgIHNlbGYucGxheSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcGF1c2VPbkV2ZW50KCkge1xuICAgICAgICAgICAgc2VsZi5wYXVzZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbXV0ZU9uRXZlbnQoKSB7XG4gICAgICAgICAgICBzZWxmLm11dGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHVubXV0ZU9uRXZlbnQoKSB7XG4gICAgICAgICAgICBzZWxmLnVubXV0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc2Vla09uRXZlbnQoY3VycmVudFRpbWUpIHtcbiAgICAgICAgICAgIHNlbGYuc2VlayhjdXJyZW50VGltZSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBkdXJhdGlvbk9uRXZlbnQoKSB7XG4gICAgICAgICAgICBzZWxmLmdldER1cmF0aW9uKClcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHZvbHVtZU9uRXZlbnQodm9sdW1lKSB7XG4gICAgICAgICAgICBzZWxmLnNldFZvbHVtZSh2b2x1bWUpO1xuICAgICAgICB9XG4gICAgfVxufSIsImltcG9ydCBBdWRpb0V2ZW50TmFtZXMgZnJvbSBcIi4uLy4uLy4uL2NvbnN0YW50cy9hdWRpby5ldmVudHMuanNcIjtcclxuaW1wb3J0IFN0YXRlRXZlbnROYW1lcyBmcm9tIFwiLi4vLi4vLi4vY29uc3RhbnRzL3N0YXRlLmV2ZW50cy5qc1wiO1xyXG5pbXBvcnQgQW5pbWF0aW9uQ2xhc3NlcyBmcm9tIFwiLi4vLi4vYW5pbWF0aW9uL3ZhbmlsbGEvaW5kZXguanNcIjtcclxuaW1wb3J0IEV2ZW50U3RvcmUgZnJvbSBcIi4uLy4uLy4uL2NvcmUvZXZlbnQtc3RvcmUuanNcIjtcclxuXHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhbmQgcnVucyBhbGwgYWN0aW9ucyBmb3IgdGhpcyBleHBlcmllbmNlLiBBbiBhY3Rpb25cclxuICogaXMgYW55IHByb2Nlc3MgdGhhdCBuZWVkcyB0byByZXR1cm4gYSBwcm9taXNlIGluZGljYXRpbmcgdGhhdCBcclxuICogaXQgZmluaXNoZWQuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQWN0aW9ucyB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgZGVmYXVsdCBkYXRhIG9iamVjdCB0byBiZSB1c2VkIGJ5IHZhcmlvdXNcclxuICAgICAqIFxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQW4gZW1wdHkgZGF0YSBvYmplY3QgdGhhdCB3aWxsIGJlIHVzZWQgdG8gc2V0IGFuZCBcclxuICAgICAgICAgKiByZWNvcmQgZGF0YSB1c2luZyB0aGlzIHNldERhdGEgZnVuY3Rpb24uXHJcbiAgICAgICAgICogQHR5cGUge09iamVjdH1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmRhdGEgPSB7fTtcclxuICAgICAgICB0aGlzLmF1ZGlvRXZlbnROYW1lcyA9IG5ldyBBdWRpb0V2ZW50TmFtZXMoKTtcclxuICAgICAgICB0aGlzLnN0YXRlRXZlbnROYW1lcyA9IG5ldyBTdGF0ZUV2ZW50TmFtZXMoKTtcclxuICAgICAgICB0aGlzLmFuaW1hdGlvbiA9IG5ldyBBbmltYXRpb25DbGFzc2VzKCk7XHJcbiAgICAgICAgdGhpcy5FdmVudFN0b3JlID0gbmV3IEV2ZW50U3RvcmUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHMgY2xhc3NlcyBvbiBhbiBlbGVtZW50IHRoYXQgd2lsbCBjYXVzZSB0aGUgZWxlbWVudCB0byBhbmltYXRlLlxyXG4gICAgICogQHBhcmFtIHtIVE1MTm9kZX0gZWxlbWVudCAtIGVsZW1lbnQgZm9yIHRoZSBjbGFzcyB0byBiZSBzZXRcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudE9iaiAtIGFuaW1hdGlvbiBldmVudCBkYXRhLlxyXG4gICAgICogQHJldHVybiB7SFRNTE5vZGV9IHRoZSBlbGVtZW50IHdpdGggdGhlIGNsYXNzZXMgcmVwbGFjZWQuICBcclxuICAgICAqL1xyXG4gICAgc2V0RWxlbWVudENsYXNzZXMoZWxlbWVudCwgZXZlbnRPYmopIHtcclxuICAgICAgICBsZXQgeyBhbmltYXRpb25DbGFzc2VzID0gXCJcIiB9ID0gZXZlbnRPYmo7XHJcbiAgICAgICAgbGV0IHsgYW5pbWF0aW9uQ2xhc3M6IG9sZEFuaW1hdGlvbkNsYXNzIH0gPSBlbGVtZW50O1xyXG5cclxuICAgICAgICBpZiAoZWxlbWVudC5jbGFzc05hbWUuaW5kZXhPZihhbmltYXRpb25DbGFzc2VzKSA+PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChlbGVtZW50LmNsYXNzTmFtZS5pbmRleE9mKCdoaWRlJykgPj0gMCkge1xyXG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IGVsZW1lbnQuY2xhc3NOYW1lLnJlcGxhY2UoJ2hpZGUnLCBhbmltYXRpb25DbGFzc2VzKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9sZEFuaW1hdGlvbkNsYXNzKSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gZWxlbWVudC5jbGFzc05hbWUucmVwbGFjZShvbGRBbmltYXRpb25DbGFzcywgJycpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZWxlbWVudC5hbmltYXRpb25DbGFzcyA9IGFuaW1hdGlvbkNsYXNzZXM7XHJcbiAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSBgJHtlbGVtZW50LmNsYXNzTmFtZX0gJHthbmltYXRpb25DbGFzc2VzfWA7XHJcblxyXG4gICAgICAgIHJldHVybiBlbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIGdvVG9OZXh0U3RhdGUoZXZlbnRPYmopIHtcclxuICAgICAgICBsZXQgeyBuZXh0OiBuYXZBcnJheSB9ID0gZXZlbnRPYmo7XHJcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIGxldCBuZXh0U3RhdGUgPSB0aGlzLnJ1bGVzKG5hdkFycmF5KTtcclxuICAgICAgICBsZXQgZGVmZXJyZWQgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChuZXh0U3RhdGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuQnVzLmVtaXQoc2VsZi5zdGF0ZUV2ZW50TmFtZXMuR08sIHsgc3RhdGVJZDogbmV4dFN0YXRlIH0pO1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBkZWZlcnJlZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFxyXG4gICAgICovXHJcbiAgICBhbmltYXRlRWxlbWVudChldmVudE9iaikge1xyXG4gICAgICAgIGxldCB7IGVsZW1lbnQsIHR5cGUgfSA9IGV2ZW50T2JqO1xyXG4gICAgICAgIGxldCBhbmltYXRpb25FbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZWxlbWVudCk7XHJcblxyXG4gICAgICAgIGlmICh0eXBlID09PSAndHdlZW4nKSB7XHJcbiAgICAgICAgICAgIGxldCB7IHR3ZWVucyB9ID0gZXZlbnRPYmo7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbi5ydW5Ud2VlbnModHdlZW5zLCB0aGlzKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghYW5pbWF0aW9uRWxlbWVudHMgfHwgYW5pbWF0aW9uRWxlbWVudHMubGVuZ3RoIDw9IDApIHJldHVybjtcclxuXHJcbiAgICAgICAgYW5pbWF0aW9uRWxlbWVudHMgPSBBcnJheS5mcm9tKGFuaW1hdGlvbkVsZW1lbnRzKTtcclxuXHJcblxyXG5cclxuICAgICAgICBhbmltYXRpb25FbGVtZW50cy5mb3JFYWNoKChhbmltYXRpb25FbGVtZW50LCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICBhbmltYXRpb25FbGVtZW50ID0gdGhpcy5zZXRFbGVtZW50Q2xhc3NlcyhhbmltYXRpb25FbGVtZW50LCBldmVudE9iaik7XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgbGV0IGFuaW1hdGVFbGVtZW50UHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgbGV0IGFuaW1hdGlvbkVuZHMgPSBbXHJcbiAgICAgICAgICAgICAgICAnd2Via2l0QW5pbWF0aW9uRW5kJyxcclxuICAgICAgICAgICAgICAgICdtb3pBbmltYXRpb25FbmQnLFxyXG4gICAgICAgICAgICAgICAgJ01TQW5pbWF0aW9uRW5kJyxcclxuICAgICAgICAgICAgICAgICdvc2FuaW1hdGlvbmVuZCcsXHJcbiAgICAgICAgICAgICAgICAnYW5pbWF0aW9uZW5kJ1xyXG4gICAgICAgICAgICBdO1xyXG5cclxuICAgICAgICAgICAgYW5pbWF0aW9uRW5kcy5mb3JFYWNoKChhbmltYXRpb25FbmROYW1lKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBhbmltYXRpb25FbGVtZW50cy5mb3JFYWNoKChhbmltYXRpb25FbGVtZW50LCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbkVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihhbmltYXRpb25FbmROYW1lLCBlbmRBbmltYXRpb24pO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gZW5kQW5pbWF0aW9uKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBhbmltYXRpb25FbGVtZW50cy5mb3JFYWNoKChhbmltYXRpb25FbGVtZW50LCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbkVuZHMuZm9yRWFjaCgoYW5pbWF0aW9uRW5kTmFtZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25FbGVtZW50LmFuaW1hdGlvbkNsYXNzID0gZXZlbnRPYmouYW5pbWF0aW9uQ2xhc3NlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGFuaW1hdGlvbkVuZE5hbWUsIGVuZEFuaW1hdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gYW5pbWF0ZUVsZW1lbnRQcm9taXNlO1xyXG4gICAgfVxyXG5cclxuICAgIGdvVG9TdGF0ZShldmVudE9iaiwgaVZYanNCdXMpIHtcclxuICAgICAgICBsZXQgeyBzdGF0ZSB9ID0gZXZlbnRPYmo7XHJcblxyXG4gICAgICAgIGlmIChpVlhqc0J1cykge1xyXG4gICAgICAgICAgICBpVlhqc0J1cy5lbWl0KHRoaXMuc3RhdGVFdmVudE5hbWVzLkdPLCBldmVudE9iaik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHBsYXlBdWRpb0NsaXAoZXZlbnRPYmopIHtcclxuICAgICAgICBsZXQgeyBhdWRpb0V2ZW50TmFtZXMgfSA9IHRoaXM7XHJcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgICBpZiAoZXZlbnRPYmopIHtcclxuICAgICAgICAgICAgdGhpcy5CdXMuZW1pdChhdWRpb0V2ZW50TmFtZXMuU0VUX1VQLCBldmVudE9iaik7XHJcbiAgICAgICAgICAgIHRoaXMuQnVzLmVtaXQoYXVkaW9FdmVudE5hbWVzLlBMQVkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5CdXMub24oYXVkaW9FdmVudE5hbWVzLlRJTUVfVVBEQVRFLCAoY3VycmVudEF1ZGlvKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50QXVkaW8uaWQgPT09IGV2ZW50T2JqLmlkKSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50QXVkaW8ucnVuQ3VlUG9pbnRzKHNlbGYucHJvY2Vzc29yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBsZXQgYXVkaW9DbGlwUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgc2VsZi5CdXMub25jZShhdWRpb0V2ZW50TmFtZXMuRU5ERUQsIChjdXJyZW50QXVkaW8pID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50QXVkaW8uaWQgPT09IGV2ZW50T2JqLmlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5wcm9jZXNzb3IucmVzb2x2ZUFjdGlvbnMoZXZlbnRPYmoub25FbmQsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGF1ZGlvQ2xpcFByb21pc2U7XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXJEYXRhKGV2ZW50T2JqKSB7XHJcbiAgICAgICAgbGV0IHsga2V5cyB9ID0gZXZlbnRPYmo7XHJcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIGtleXMuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICAgICAgICBzZWxmLmRhdGFba2V5XSA9IHVuZGVmaW5lZDtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIHNldERhdGEoZXZlbnRPYmopIHtcclxuICAgICAgICBsZXQgeyBrZXksIHZhbHVlIH0gPSBldmVudE9iajtcclxuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgbGV0IHNldERhdGFQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBzZWxmLmRhdGFba2V5XSA9IHZhbHVlO1xyXG4gICAgICAgICAgICByZXNvbHZlKHNlbGYpO1xyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIHJldHVybiBzZXREYXRhUHJvbWlzZTtcclxuICAgIH1cclxufTsiLCJpbXBvcnQgeyBUeXBlVmFsaWRhdG9yLCBPYmplY3RQYXJzZXJzIH0gZnJvbSAnLi4vLi4vLi4vdXRpbGl0aWVzL3R5cGUtcGFyc2Vycy5qcyc7XHJcblxyXG5sZXQgdHlwZVZhbGlkYXRvciA9IG5ldyBUeXBlVmFsaWRhdG9yKCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyB7XHJcbiAgICBjb25zdHJ1Y3RvcihleHBlcmllbmNlLCBjdXN0b21FdmFsdWF0b3Ipe1xyXG4gICAgICAgICB0aGlzLmV4cGVyaWVuY2UgPSBleHBlcmllbmNlO1xyXG4gICAgICAgICB0aGlzLmN1c3RvbUV2YWx1YXRvciA9IGN1c3RvbUV2YWx1YXRvcjtcclxuICAgIH1cclxuXHJcbiAgICBldmFsdWF0ZShydWxlKXtcclxuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgbGV0IHtjb25kaXRpb25PcGVyYXRvciA9IFwiYW5kXCIsIGNvbmRpdGlvbnN9ID0gcnVsZTtcclxuICAgICAgICBsZXQgZXZhbHVhdGVDb25kaXRpb25zID0gY29uZGl0aW9ucy5tYXAoKGNvbmRpdGlvbiwgaW5kZXgpID0+e1xyXG4gICAgICAgICAgICBsZXQge2tleSA6IGxocywgaXMsIHZhbHVlIDogcmhzLCB0eXBlID0gXCJpbnB1dFwifSA9IGNvbmRpdGlvbjtcclxuXHJcbiAgICAgICAgICAgIGlmKHNlbGYuY3VzdG9tRXZhbHVhdG9yICYmIHR5cGVWYWxpZGF0b3IuaXNGdW5jdGlvbihzZWxmLmN1c3RvbUV2YWx1YXRvcikgJiYgc2VsZi5jdXN0b21FdmFsdWF0b3IoY29uZGl0aW9uKSl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5jdXN0b21FdmFsdWF0b3IoY29uZGl0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gU2luY2Ugb2xkZXIgdmVyc2lvbnMgb2YgdGhlIGlWWGpzIEpTT04gdXNlZCBcclxuICAgICAgICAgICAgLy8gdGhlIGtleSBmb3IgXCJrZXl3b3JkXCIgdGhpcyB3aWxsIG1ha2UgaXQgYmFja3dhcmRzXHJcbiAgICAgICAgICAgIC8vIGNvbXBhdGFibGVcclxuICAgICAgICAgICAgaWYoc2VsZltsaHNdKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzZWxmW2xoc10obGhzLCBpcywgcmhzKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHNlbGZbdHlwZV0obGhzLCBpcywgcmhzKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXNbY29uZGl0aW9uT3BlcmF0b3JdKGV2YWx1YXRlQ29uZGl0aW9ucyk7XHJcbiAgICB9XHJcblxyXG4gICAgaW5wdXQobGhzLCBpcywgcmhzKXtcclxuICAgICAgICBsZXQge2V4cGVyaWVuY2V9ID0gdGhpcztcclxuICAgICAgICBsZXQgbGhzVmFsdWUgPSBleHBlcmllbmNlLmRhdGFbbGhzXTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXNbaXNdKGxoc1ZhbHVlLCByaHMpO1xyXG4gICAgfVxyXG5cclxuICAgIGFuZChwcmVkaWNhdGVzID0gW10pe1xyXG4gICAgICAgIHJldHVybiBwcmVkaWNhdGVzLnJlZHVjZSgoZXZhbHVhdGUsIHByZWRpY2F0ZSwgaW5kZXgpPT57XHJcbiAgICAgICAgICAgIHJldHVybiBldmFsdWF0ZSAmJiBwcmVkaWNhdGU7XHJcbiAgICAgICAgfSx0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICBvcihwcmVkaWNhdGVzID0gW10pe1xyXG4gICAgICAgIHJldHVybiBwcmVkaWNhdGVzLnJlZHVjZSgoZXZhbHVhdGUsIHByZWRpY2F0ZSwgaW5kZXgpPT57XHJcbiAgICAgICAgICAgIHJldHVybiBldmFsdWF0ZSB8fCBwcmVkaWNhdGU7XHJcbiAgICAgICAgfSxmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgbm90KHByZWRpY2F0ZXMgPSBbXSl7XHJcbiAgICAgICAgcmV0dXJuIHByZWRpY2F0ZXMucmVkdWNlKChldmFsdWF0ZSwgcHJlZGljYXRlLCBpbmRleCk9PntcclxuICAgICAgICAgICAgcmV0dXJuIGV2YWx1YXRlICYmICFwcmVkaWNhdGU7XHJcbiAgICAgICAgfSx0cnVlKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgbHRlKGxocywgcmhzKXtcclxuICAgICAgICBpZihpc05hTihsaHMpIHx8IGlzTmFOKHJocykpIHJldHVybiBmYWxzZTtcclxuICAgICAgICByZXR1cm4gbmV3IE51bWJlcihsaHMpIDw9IG5ldyBOdW1iZXIocmhzKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgbHQobGhzLCByaHMpe1xyXG4gICAgICAgIGlmKGlzTmFOKGxocykgfHwgaXNOYU4ocmhzKSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIHJldHVybiBuZXcgTnVtYmVyKGxocykgPCBuZXcgTnVtYmVyKHJocyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIFxyXG4gICAgZ3RlKGxocywgcmhzKXtcclxuICAgICAgICBpZihpc05hTihsaHMpIHx8IGlzTmFOKHJocykpIHJldHVybiBmYWxzZTtcclxuICAgICAgICByZXR1cm4gbmV3IE51bWJlcihsaHMpID49IG5ldyBOdW1iZXIocmhzKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgZ3QobGhzLCByaHMpe1xyXG4gICAgICAgIGlmKGlzTmFOKGxocykgfHwgaXNOYU4ocmhzKSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIHJldHVybiBuZXcgTnVtYmVyKGxocykgPiBuZXcgTnVtYmVyKHJocyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGVxdWFscyhsaHMsIHJocyl7XHJcbiAgICAgICAgcmV0dXJuIGxocyA9PT0gcmhzO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBub3RFcXVhbHMobGhzLHJocyl7XHJcbiAgICAgICAgcmV0dXJuIGxocyAhPT0gcmhzO1xyXG4gICAgfVxyXG5cclxuICAgIGluKGxocyxyaHMpe1xyXG4gICAgICAgIHJldHVybiByaHMuaW5kZXhPZihsaHMpID49IDA7XHJcbiAgICB9ICAgICAgICBcclxufSIsImltcG9ydCB7IE9iamVjdFBhcnNlcnMgfSBmcm9tICcuLi8uLi8uLi91dGlsaXRpZXMvdHlwZS1wYXJzZXJzLmpzJztcclxuaW1wb3J0IHsgQWN0aW9ucyB9IGZyb20gJy4vYWN0aW9ucy5qcyc7XHJcbmltcG9ydCB7IFJ1bGVzIH0gZnJvbSAnLi9ydWxlcy5qcyc7XHJcblxyXG5sZXQgZGVmYXVsdEFjdGlvbnMgPSBuZXcgQWN0aW9ucygpO1xyXG5sZXQgbXlPYmplY3RQYXJzZXIgPSBuZXcgT2JqZWN0UGFyc2VycygpO1xyXG5cclxuZXhwb3J0IGNsYXNzIGlWWGpzRGF0YSB7XHJcbiAgICBjb25zdHJ1Y3Rvcihtb2R1bGVTZXR0aW5ncyA9IHt9LCBpVlhqc1NldHRpbmdzID0ge30sIEJ1cywgaVZYanNMb2cpIHtcclxuICAgICAgICB0aGlzLm1vZHVsZVNldHRpbmdzID0gbW9kdWxlU2V0dGluZ3M7XHJcbiAgICAgICAgdGhpcy5pVlhqc1NldHRpbmdzID0gaVZYanNTZXR0aW5ncztcclxuICAgICAgICB0aGlzLkJ1cyA9IEJ1cztcclxuICAgICAgICB0aGlzLmlWWGpzTG9nID0gaVZYanNMb2c7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0VXBFeHBlcmllbmNlKGNvbmZpZ0RhdGEsIGVuaGFuY2VSZXNvbHZlKSB7XHJcbiAgICAgICAgbGV0IHtjb25maWcsIGRhdGEgPSB7fSwgZXhwZXJpZW5jZTogbW9kaWZpZWRFeHBlcmllbmNlLCBydWxlczogY3VzdG9tUnVsZXMsIHVpID0gJ2RlZmF1bHQnLCB2YWxpZGF0aW9uID0gJ2lWWGpzVmFsaWRhdGlvbid9ID0gdGhpcy5pVlhqc1NldHRpbmdzO1xyXG4gICAgICAgIGxldCBleHBlcmllbmNlID0gZGVmYXVsdEFjdGlvbnM7XHJcbiAgICAgICAgbGV0IHttb2R1bGVzOiBjb25maWdNb2R1bGVzID0ge319ID0gY29uZmlnRGF0YTtcclxuICAgICAgICBsZXQge3VpOiBjb25maWdVSSA9IHVpLCB2YWxpZGF0aW9uOiBjb25maWdWYWxpZGF0aW9uID0gdmFsaWRhdGlvbn0gPSBjb25maWdNb2R1bGVzO1xyXG5cclxuICAgICAgICBpZiAobW9kaWZpZWRFeHBlcmllbmNlKSB7XHJcbiAgICAgICAgICAgIGV4cGVyaWVuY2UgPSBteU9iamVjdFBhcnNlci5tZXJnZShleHBlcmllbmNlLCBtb2RpZmllZEV4cGVyaWVuY2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGVuaGFuY2VkID0ge1xyXG4gICAgICAgICAgICBleHBlcmllbmNlOiBleHBlcmllbmNlLFxyXG4gICAgICAgICAgICBydWxlczogbmV3IFJ1bGVzKGV4cGVyaWVuY2UsIGN1c3RvbVJ1bGVzKS5ydWxlcyxcclxuICAgICAgICAgICAgY29uZmlnOiBjb25maWdEYXRhXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZW5oYW5jZVJlc29sdmUoZW5oYW5jZWQpO1xyXG4gICAgfVxyXG5cclxuICAgIGVuaGFuY2UoKSB7XHJcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIGxldCB7Y29uZmlnfSA9IHRoaXMuaVZYanNTZXR0aW5ncztcclxuICAgICAgICBsZXQgZW5oYW5jZVByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRDb25maWdKU09OKGNvbmZpZylcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihcclxuICAgICAgICAgICAgICAgICAgICAoY29uZmlnRGF0YSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNldFVwRXhwZXJpZW5jZShjb25maWdEYXRhLCByZXNvbHZlKVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLnNldFVwRXhwZXJpZW5jZShjb25maWcsIHJlc29sdmUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBlbmhhbmNlUHJvbWlzZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRDb25maWdKU09OKHVybCkge1xyXG4gICAgICAgIGxldCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgbGV0IGRlZmVycmVkID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gKCkgPT4geyBcclxuICAgICAgICAgICAgICAgIHNlbGYuaXNWYWxpZEpTT05SZXF1ZXN0KHJlc29sdmUsIHJlamVjdCwgeGhyKTsgXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHhoci5vcGVuKCdHRVQnLCB1cmwpO1xyXG4gICAgICAgICAgICB4aHIuc2VuZCgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gZGVmZXJyZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgaXNWYWxpZEpTT05SZXF1ZXN0KHJlc29sdmUsIHJlamVjdCwgeGhyKSB7XHJcbiAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XHJcbiAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09PSAyMDApIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlc3BvbnNlSlNPTiA9IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZUpTT04pXHJcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5CdXMuZW1pdCgnaVZYOmVycm9yOmpzb24nLCBlKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KHsgZXJyb3I6ICdDb25maWcgSlNPTiBOb3QgT2J0YWluZWQnIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IEV2YWx1YXRvciBmcm9tICcuL2V2YWx1YXRvci5qcyc7XHJcbmltcG9ydCB7IFR5cGVWYWxpZGF0b3IsIE9iamVjdFBhcnNlcnMgfSBmcm9tICcuLi8uLi8uLi91dGlsaXRpZXMvdHlwZS1wYXJzZXJzLmpzJztcclxuXHJcblxyXG5sZXQgdHlwZVZhbGlkYXRvciA9IG5ldyBUeXBlVmFsaWRhdG9yKCk7XHJcblxyXG4vKipcclxuICogQSBkZWZhdWx0IHJ1bGUgc3lzdGVtIGluIHdoaWNoIGlWWGpzIGNob29zZXMgd2hpY2ggc3RhdGUgXHJcbiAqIHRvIGdvIHRvIGJhc2VkIG9mIHRoZSBjdXJyZW50IGlWWGpzIEV4cGVyaWVuY2UgZGF0YS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBSdWxlcyB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIHRoZSBleHBlcmllbmNlIGluIHdoaWNoIHRoaXMgZGF0YSBcclxuICAgICAqIHdpbGwgYmUgZXZhbHVhdGVkIHRvLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gZXhwZXJpZW5jZSAtIGlWWGpzRXhwZXJpZW5jZSBcclxuICAgICAqIG9iamVjdCBpbiB3aGljaCBkYXRhIHdpbGwgYmUgdXNlZCB0byBldmFsdWF0ZSB2YXJpb3VzIHJ1bGVzLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihleHBlcmllbmNlID0geyBkYXRhOiB7fSB9LCBjdXN0b21FdmFsdWF0b3IpIHtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ3VycmVudCBpVlhqcyBFeHBlcmVpbmNlIFxyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEB0eXBlIHtvYmplY3R9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5leHBlcmllbmNlID0gZXhwZXJpZW5jZTtcclxuICAgICAgICB0aGlzLmV2YWx1YXRvciA9IG5ldyBFdmFsdWF0b3IoZXhwZXJpZW5jZSwgY3VzdG9tRXZhbHVhdG9yKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBkZWZhdWx0IHJ1bGVzIGZ1bmN0aW9uIHRoYXQgd2lsbCBwcm9jZXNzIGFuIFxyXG4gICAgICogYXJyYXkgb2YgbmF2aWdhdGlvbiBvYmplY3RzIGFuZCBldmFsdWF0ZSB0aGVtIHVzaW5nIFxyXG4gICAgICogdGhlIHByb2Nlc3NSdWxlcyBmdW5jdGlvbi5cclxuICAgICAqIFxyXG4gICAgICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gICAgICovXHJcbiAgICBnZXQgcnVsZXMoKSB7XHJcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgICByZXR1cm4gKG5hdkFycmF5ID0gW10pID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHNlbGYucHJvY2Vzc1J1bGVzKG5hdkFycmF5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQcm9jZXNzZXMgdGhyb3VnaCBhbmQgcmV0dXJucyB0aGUgZmlyc3QgbmF2IG9iamVjdCB3aG9zZSBcclxuICAgICAqIHJ1bGUgaXMgZXZhbHVhdGVkIHRvIHRydWUgb3IgcnVsZXMgYXJlIGVtcHR5LlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0ge2FycmF5fSBuYXZBcnJheSAtIEFuIGFycmF5IG9mIG5hdmlnYXRpb24gb2JqZWN0cyBcclxuICAgICAqIHdpdGggcnVsZXMgYW5kIHN0YXRlcyB0byBiZSBldmFsdWF0ZWQuXHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IC0gdGhlIHN0YXRlSWQgb2YgdGhlIHJ1bGUgdGhhdCB3YXMgZXZhbHVhdGVkIFxyXG4gICAgICogdHJ1ZSBmaXJzdC4gSWYgbm8gc3RhdGUgaXMgcmV0dXJuLCByZXR1cm5zIGFuIGVtcHR5IHN0cmluZy5cclxuICAgICAqL1xyXG4gICAgcHJvY2Vzc1J1bGVzKG5hdkFycmF5ID0gW10pIHtcclxuXHJcbiAgICAgICAgaWYoIUFycmF5LmlzQXJyYXkobmF2QXJyYXkpKXtcclxuICAgICAgICAgICAgbmF2QXJyYXkgPSBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIGxldCBzdGF0ZVNlbGVjdCA9IG5hdkFycmF5LmZpbmQoKG5hdk9iaikgPT4ge1xyXG4gICAgICAgICAgICBsZXQge3J1bGV9ID0gbmF2T2JqO1xyXG5cclxuICAgICAgICAgICAgaWYodHlwZVZhbGlkYXRvci5pc0VtcHR5KHJ1bGUpKSByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIGxldCB7Y29uZGl0aW9ucywgY29uZGl0aW9uT3BlcmF0b3IgPSBcImFuZFwifSA9IHJ1bGU7XHJcblxyXG4gICAgICAgICAgICBpZiAoIWNvbmRpdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgIHJ1bGUuY29uZGl0aW9uT3BlcmF0b3IgPSBjb25kaXRpb25PcGVyYXRvcjtcclxuICAgICAgICAgICAgICAgIHJ1bGUuY29uZGl0aW9ucyA9IFtydWxlXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHNlbGYuZXZhbHVhdG9yLmV2YWx1YXRlKHJ1bGUpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gc3RhdGVTZWxlY3QgPyBzdGF0ZVNlbGVjdC5zdGF0ZUlkIDogJyc7XHJcbiAgICB9XHJcbn0iLCIvKipcbiAqIEVuaGFuY2VzIHRoZSBkYXRhIHRvIHJ1biBhbiBleHBlcmllbmNlIGFzIGRlZmluZWQgaW4gdGhlIGRhdGEgbW9kdWxlJ3MgXG4gKiBzZXR0aW5ncy5cbiAqL1xuZXhwb3J0IGNsYXNzIERhdGFQcm9jZXNzb3Ige1xuXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXJzIGFsbCB0aGUgZGF0YSB0aGF0IHdpbGwgYmUgdXNlZCB0byBlbmhhbmNlIHRoZVxuICAgICAqIGRhdGEuXG4gICAgICogXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGRhdGFNb2R1bGVPYmogLSB1c2VyIGRlZmluZWQgc2V0dGluZ3MgZm9yIHRoaXMgZGF0YSBtb2R1bGVcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gc2V0dGluZ3MgLSBhbGwgdXNlciBzZXR0aW5ncyB0aGF0IHdpbGwgYmUgZW5oYW5jZWQuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZGF0YU1vZHVsZSwgc2V0dGluZ3MsIEJ1cywgaVZYanNMb2cpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVXNlciBkZWZpbmVkIGRhdGEgbW9kdWxlIGRhdGEgdGhhdCB3aWxsIGJlIHVzZWQgdG9cbiAgICAgICAgICogcHJvY2VzcyBhbmQgZW5oYW5jZSB0aGUgZXhwZXJpZW5jZSBkYXRhLlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHR5cGUge29iamVjdH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZGF0YU1vZHVsZSA9IGRhdGFNb2R1bGU7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFsbCB1c2VyIHNldHRpbmdzIGluY2x1ZGluZyBkZWZhdWx0IGRhdGEgdGhhdCB3aWxsIFxuICAgICAgICAgKiBiZSBhZGRlZCB0byB0aGlzIGRhdGEgbW9kdWxlLiBcbiAgICAgICAgICogXG4gICAgICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNldHRpbmdzID0gc2V0dGluZ3M7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFsbCBhdmFpbGFibGUgZGF0YSBtb2R1bGVzIHRoYXQgY2FuIGJlIHNldCBmb3IgdGhpc1xuICAgICAgICAgKiBleHBlcmllbmNlLlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHR5cGUge29iamVjdH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuQnVzID0gQnVzO1xuICAgICAgICB0aGlzLmlWWGpzTG9nID0gaVZYanNMb2dcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMb2FkcyBkZXBlbmRlbmNpZXMgbmVlZGVkIHRvIHJ1biB0aGUgZW5oYW5jZW1lbnRzIG9uIHRoZSBkYXRhIFxuICAgICAqIGFuZCByZXNvbHZlcyBieSBzZW5kaW5nIG91dCBhbGwgZW5oYW5jZWQgZGF0YS5cbiAgICAgKiBcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIGluZGljYXRlcyB0aGF0IHRoZSBkYXRhIGlzIGVuaGFuY2VkLlxuICAgICAqL1xuICAgIGdldERhdGEoKSB7XG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgICAgbGV0IHtkYXRhTW9kdWxlLCBzZXR0aW5nc30gPSB0aGlzO1xuICAgICAgICBsZXQge2RhdGEgOiBkYXRhU2V0dGluZ3N9ID0gc2V0dGluZ3M7XG4gICAgICAgIGxldCBkYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHNlbGYucnVuRW5oYW5jZW1lbnRzKHJlc29sdmUsIHJlamVjdCwgZGF0YU1vZHVsZSwgZGF0YVNldHRpbmdzLCBzZWxmLnNldHRpbmdzKTsgICAgICAgIFxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gZGF0YVByb21pc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXRpbGl6aW5nIHRoZSBhcHByb3ByaWF0ZSBtb2R1bGUgZGVmaW5lZCBpbiB0aGUgZGF0YSBtb2R1bGUgc2V0dGluZ3NcbiAgICAgKiB0aGlzIHdpbGwgZW5oYW5jZSB0aGUgY3VycmVudCBkYXRhIGFuZCBhY3Rpb25zIGRlZmluZWQgaW4gdGhhdCBcbiAgICAgKiBjbGFzcydzIGVuaGFuY2UgbWV0aG9kLlxuICAgICAqL1xuICAgIHJ1bkVuaGFuY2VtZW50cyhyZXNvbHZlLCByZWplY3QsIERhdGFNb2R1bGVDbGFzcywgZGF0YU1vZHVsZVNldHRpbmdzLCBpVlhqc1NldHRpbmdzKSB7XG4gICAgICAgIGxldCBkYXRhTW9kdWxlID0gbmV3IERhdGFNb2R1bGVDbGFzcyhkYXRhTW9kdWxlU2V0dGluZ3MsIGlWWGpzU2V0dGluZ3MsIHRoaXMuQnVzLCB0aGlzLmlWWGpzTG9nKTtcbiAgICAgICAgXG4gICAgICAgIGRhdGFNb2R1bGVcbiAgICAgICAgICAgIC5lbmhhbmNlKClcbiAgICAgICAgICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICB9KVxuICAgIH1cbn07IiwiaW1wb3J0IHsgRGF0YVByb2Nlc3NvciB9IGZyb20gXCIuL2RhdGEvcHJvY2Vzc29yLmpzXCI7XG5pbXBvcnQgeyBSZWdpc3RlcmVkVmlkZW9Nb2R1bGVzIH0gZnJvbSBcIi4vdmlkZW8vcmVnaXN0ZXJlZC1tb2R1bGVzLmpzXCI7XG5pbXBvcnQgeyBSZWdpc3RlcmVkQXVkaW9Nb2R1bGVzIH0gZnJvbSBcIi4vYXVkaW8vcmVnaXN0ZXJlZC1tb2R1bGVzLmpzXCI7XG5pbXBvcnQgeyBhc3NlcnQgfSBmcm9tICcuLi91dGlsaXRpZXMvYXNzZXJ0cy5qcyc7XG5pbXBvcnQgRXJyb3JFdmVudE5hbWVzIGZyb20gJy4uL2NvbnN0YW50cy9lcnJvcnMuanMnO1xuaW1wb3J0IENvbmZpZ0V2ZW50TmFtZXMgZnJvbSAnLi4vY29uc3RhbnRzL2lWWGpzLmNvbmZpZy5ldmVudHMuanMnO1xuaW1wb3J0IHsgaVZYanNEYXRhIH0gZnJvbSBcIi4vZGF0YS9pdngtanMvaW5kZXguanNcIjtcbmltcG9ydCB7IERlZmF1bHRVSSB9IGZyb20gXCIuL3VpL2RlZmF1bHQvaW5kZXguanNcIjtcbmltcG9ydCB7IGlWWGpzVmFsaWRhdGlvbiB9IGZyb20gXCIuL3ZhbGlkYXRpb24vaXZ4LWpzLXZhbGlkYXRpb24vaW5kZXguanNcIjtcblxubGV0IGVycm9yRXZlbnRzID0gbmV3IEVycm9yRXZlbnROYW1lcygpO1xubGV0IGNvbmZpZ0V2ZW50TmFtZXMgPSBuZXcgQ29uZmlnRXZlbnROYW1lcygpO1xuXG5cbi8qKlxuICogUnVucyBhbGwgcHJvY2VlZHVyZXMgdG8gc2V0IHVwIGEgdmFsaWQgaVZYanMgZXhwZXJpZW5jZS4gXG4gKi9cbmV4cG9ydCBjbGFzcyBTZXR1cCB7XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGFsbCBpbmZvcm1hdGlvbiB0byBzZXR0aW5ncyBmb3IgdGhlIG1vZHVsZXMgYW5kIFxuICAgICAqIGFkZHMgdGhlIHZhcmlvdXMgcHJvY2Vzc29ycyB0aGF0IHdpbGwgY3JlYXRlIHZhbGlkIFxuICAgICAqIGNvbXBvbmVudHMgZm9yIGEgdmFsaWQgaVZYanMgZXhwZXJpZW5jZS5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gc2V0dGluZ3MgLSB0aGlzIGV4cGVyaWVuY2UncyBzZXR0aW5ncy5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzZXR0aW5ncyA9IHt9LCBCdXMsIGlWWGpzTG9nKSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVzZXIgZGVmaW5lZCBzZXR0aW5ncyBmb3IgdGhpcyBleHBlcmllbmNlLlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHR5cGUge29iamVjdH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBzZXR0aW5ncztcblxuICAgICAgICAvKipcbiAgICAgICAgICogRW5oYW5jZXMgZXhpc3RpbmcgZGF0YSBmb3Igc2V0dXAuXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAdHlwZSB7RGF0YVByb2Nlc3Nvcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuRGF0YVByb2Nlc3NvciA9IERhdGFQcm9jZXNzb3I7XG4gICAgICAgIHRoaXMuQnVzID0gQnVzO1xuICAgICAgICB0aGlzLmlWWGpzTG9nID0gaVZYanNMb2c7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUnVucyBhIHF1aWNrIHNldCB1cCB0aGF0IHdpbGwgcHJvZHVjZSBhbiBpVlhqcyBleHBlcmllbmNlLiBcbiAgICAgKiBJdCBwZXJmb3JtcyBhbGwgc2V0IHVwIHRhc2tzIGF2YWlsYWJsZSBpbiB0aGlzIG9yZGVyOlxuICAgICAqIDEuIEdldCBkYXRhIGZyb20gYSBkYXRhIHByb2Nlc3Nvci5cbiAgICAgKiAyLiBWYWxpZGF0ZSB0aGUgZGF0YS5cbiAgICAgKiAzLiBBZGQgYW55IG90aGVyIHBsdWdpbnMgZm9yIHRoaXMgZXhwZXJpZW5jZS5cbiAgICAgKiBcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHJlc29sdmVzIHdoZW4gdGhlIHNldCB1cCBpcyBkb25lLlxuICAgICAqL1xuICAgIHJ1blNldHVwKCkge1xuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgICAgIGxldCBzZXRVcFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBzZWxmLnJlc29sdmVTZXR1cFByb2Nlc3NlcyhyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gc2V0VXBQcm9taXNlO1xuICAgIH1cblxuICAgIHJlc29sdmVTZXR1cFByb2Nlc3NlcyhyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgICAgICBsZXQge2lWWGpzTG9nLCBzZXR0aW5nc30gPSB0aGlzO1xuICAgICAgICBsZXQge2RhdGEgPSB7fSwgYW5hbHl0aWNzfSA9IHNldHRpbmdzO1xuICAgICAgICBsZXQge21vZHVsZTogZGF0YU1vZHVsZSA9IGlWWGpzRGF0YX0gPSBkYXRhO1xuXG4gICAgICAgIHRoaXMuc2V0dXBEYXRhKGRhdGFNb2R1bGUpXG4gICAgICAgICAgICAudGhlbihcbiAgICAgICAgICAgIGZ1bmN0aW9uIHZhbGlkYXRlRXhwZXJpZW5jZShleHBlcmllbmNlRGF0YSkge1xuICAgICAgICAgICAgICAgIGxldCB2YWxpZGF0aW9uID0gc2VsZi5ydW5WYWxpZGF0aW9uKGV4cGVyaWVuY2VEYXRhKTtcblxuICAgICAgICAgICAgICAgIGlmICghdmFsaWRhdGlvbi52YWxpZCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQge2Vycm9yfSA9IHZhbGlkYXRpb247XG5cbiAgICAgICAgICAgICAgICAgICAgc2VsZi5CdXMuZW1pdChjb25maWdFdmVudE5hbWVzLk5PVF9WQUxJRCwgdmFsaWRhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIGlWWGpzTG9nLmVycm9yKGVycm9yLCBcIlZBTElEQVRJT05cIik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHVwZGF0ZWRFeHBlcmllbmNlRGF0YSA9IHNlbGYuc2V0dXBNb2R1bGVzKGV4cGVyaWVuY2VEYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgaVZYanNMb2cubG9nKFwiTU9EVUxFIFNVQ0NFU1NcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGFuYWx5dGljcykgeyBcblxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5CdXMub25jZShjb25maWdFdmVudE5hbWVzLkFOQUxZVElDU19GSU5JU0hFRCwgKGFuYWx5dGljRXhwZXJpZW5jZSk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShhbmFseXRpY0V4cGVyaWVuY2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLkJ1cy5lbWl0KGNvbmZpZ0V2ZW50TmFtZXMuQU5BTFlUSUNTX1NFVCwgZXhwZXJpZW5jZURhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh1cGRhdGVkRXhwZXJpZW5jZURhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWFrZXMgc3VyZSB0aGUgZGF0YSBwcm92aWRlZCBpcyB2YWxpZCB0byBjcmVhdGUgYW4gaVZYanMgRXhwZXJpZW5jZVxuICAgICAqIFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBleHBlcmllbmNlRGF0YSAtIGRhdGEgdG8gcnVuIGFuIGV4cGVyaWVuY2VcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIHJlc29sdmVzIG9uY2UgYWxsIHZhbGlkYXRpb24gb2YgdGhpcyBkYXRhIGlzIGZpbmlzaGVkLlxuICAgICAqL1xuICAgIHJ1blZhbGlkYXRpb24oZXhwZXJpZW5jZURhdGEpIHtcbiAgICAgICAgbGV0IHt2YWxpZGF0aW9uOiBWYWxpZGF0aW9uTW9kdWxlID0gaVZYanNWYWxpZGF0aW9ufSA9IGV4cGVyaWVuY2VEYXRhO1xuXG4gICAgICAgIHJldHVybiBuZXcgVmFsaWRhdGlvbk1vZHVsZShleHBlcmllbmNlRGF0YSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW5oYW5jZXMgdXNlciBjb25maWd1cmF0aW9ucyBhbmQgcHJvdmlkZSBkYXRhLlxuICAgICAqIFxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gaW5kaWNhdGVzIGRhdGEgZW5oYW5jZW1lbnQgZmluaXNoZXMgYW5kIHdhcyBzdWNjZXNzZnVsXG4gICAgICovXG4gICAgc2V0dXBEYXRhKGRhdGFNb2R1bGUpIHtcblxuICAgICAgICBsZXQgc2V0dGluZ3MgPSB0aGlzLnNldHRpbmdzO1xuXG4gICAgICAgIHJldHVybiBuZXcgdGhpcy5EYXRhUHJvY2Vzc29yKGRhdGFNb2R1bGUsIHNldHRpbmdzLCB0aGlzLkJ1cywgdGhpcy5pVlhqc0xvZykuZ2V0RGF0YSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJ1bnMgYWxsIHByb2Nlc3NlcyB0aGF0IHJlcXVpcmUgdmFsaWRhdGVkIGRhdGEgaWYgdXNpbmdcbiAgICAgKiB0aGUgcnVuU2V0dXAgZnVuY3Rpb24uXG4gICAgICogXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGV4cGVyaWVuY2VEYXRhIC0gZW5oYW5jZWQgYW5kIHZhbGlkYXRlZCBkYXRhLlxuICAgICAqIEBwYXJhbSB7UHJvbWlzZX0gLSBpbmRpY2F0ZXMgYWxsIHBsdWdpbnMvb3B0aW9uYWwgbW9kdWxlcyBoYXZlIGxvYWRlZFxuICAgICAqIHRoZWlyIGRlcGVuZGVuY2llcyBjb3JyZWN0bHkuXG4gICAgICovXG4gICAgc2V0dXBNb2R1bGVzKGV4cGVyaWVuY2VEYXRhKSB7XG4gICAgICAgIGxldCB7c2V0dGluZ3N9ID0gdGhpcztcbiAgICAgICAgbGV0IHt1aTogVUkgPSBEZWZhdWx0VUl9ID0gc2V0dGluZ3M7XG5cbiAgICAgICAgZXhwZXJpZW5jZURhdGEudmlkZW8gPSBuZXcgUmVnaXN0ZXJlZFZpZGVvTW9kdWxlcygpO1xuICAgICAgICBleHBlcmllbmNlRGF0YS51aSA9IG5ldyBVSSgpO1xuICAgICAgICBleHBlcmllbmNlRGF0YS5hdWRpbyA9IG5ldyBSZWdpc3RlcmVkQXVkaW9Nb2R1bGVzKCkuaHRtbDU7XG5cbiAgICAgICAgcmV0dXJuIGV4cGVyaWVuY2VEYXRhO1xuICAgIH1cblxufTsiLCJpbXBvcnQgeyBBdHRyaWJ1dGVUYWdzIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9hdHRyaWJ1dGVzLmpzXCI7XG5pbXBvcnQgeyBUeXBlVmFsaWRhdG9yIH0gZnJvbSAnLi4vLi4vLi4vdXRpbGl0aWVzL3R5cGUtcGFyc2Vycy5qcyc7XG5pbXBvcnQgeyBhc3NlcnQgfSBmcm9tICcuLi8uLi8uLi91dGlsaXRpZXMvYXNzZXJ0cy5qcyc7XG5cbmxldCB0eXBlQ2hlY2sgPSBuZXcgVHlwZVZhbGlkYXRvcigpO1xuXG5leHBvcnQgY2xhc3MgQW5jaG9yIHtcbiAgICBjb25zdHJ1Y3RvcihhbmNob3JJbmZvKSB7ICAgXG4gICAgICAgdGhpcy5hbmNob3JJbmZvID0gYW5jaG9ySW5mbztcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIGdldCBhbmNob3JDbGFzc2VzKCl7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgXG4gICAgZ2V0IGh0bWwoKSB7XG4gICAgICAgIGxldCB7YW5jaG9yQ2xhc3Nlc30gPSB0aGlzO1xuICAgICAgICBsZXQge2hyZWYgPSAnJywgY2xhc3NlcyA9ICcnLCBhdHRyaWJ1dGVzID0ge30sIGxhYmVsID0gbGFiZWxIVE1MLCBsYWJlbEhUTUwsIGlkPScnfSA9IHRoaXMuYW5jaG9ySW5mbzsgXG4gICAgICAgIGxldCBhdHRyaWJ1dGVIVE1MID0gbmV3IEF0dHJpYnV0ZVRhZ3MoYXR0cmlidXRlcywgT2JqZWN0LmtleXMoYXR0cmlidXRlcykpLmh0bWw7XG5cbiAgICAgICAgaWYoIWxhYmVsSFRNTCAmJiAhbGFiZWwpe1xuICAgICAgICAgICAgbGFiZWwgPSBocmVmO1xuICAgICAgICB9IFxuXG4gICAgICAgIHJldHVybiBgXG4gICAgICAgICAgICAgPGEgaWQ9JyR7aWR9JyBjbGFzcz1cIiR7Y2xhc3Nlc30gJHthbmNob3JDbGFzc2VzfVwiICBocmVmPVwiJHtocmVmfVwiICR7YXR0cmlidXRlSFRNTH0gPiR7bGFiZWxIVE1MID8gbGFiZWxIVE1MIDogbGFiZWx9PC9hPiAgICAgICAgICAgXG4gICAgICAgIGBcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBTdHlsZSB9IGZyb20gXCIuL3N0eWxlXCI7XHJcbmltcG9ydCB7IEVycm9yTWVzc2FnZXMgfSBmcm9tIFwiLi9tZXNzYWdlcy5qc1wiO1xyXG5pbXBvcnQgeyBBdHRyaWJ1dGVUYWdzIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9hdHRyaWJ1dGVzLmpzXCI7XHJcbmltcG9ydCB7IFR5cGVWYWxpZGF0b3IgfSBmcm9tICcuLi8uLi8uLi91dGlsaXRpZXMvdHlwZS1wYXJzZXJzLmpzJztcclxuaW1wb3J0IHsgYXNzZXJ0IH0gZnJvbSAnLi4vLi4vLi4vdXRpbGl0aWVzL2Fzc2VydHMuanMnO1xyXG5cclxubGV0IHN0eWxlID0gbmV3IFN0eWxlKCk7XHJcbmxldCB0eXBlQ2hlY2sgPSBuZXcgVHlwZVZhbGlkYXRvcigpO1xyXG5cclxuLyoqXHJcbiAqIFJlbmRlcnMgYSBjb2xsZWN0aW9uIG9mIGJ1dHRvbnMgZm9yIG9uZSBjbGljayByZWNvcmRpbmcgb2YgXHJcbiAqIGFuIGlucHV0IHRoYXQgaGFzIG11bHRpcGxlIG9wdGlvbnMgZm9yIGRhdGEgcmVjb3JkaW5nLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEJ1dHRvbnMge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGFrZXMgdGhlIHNldHRpbmdzIGZvciB0aGUgYnV0dG9ucywgYSBjbGFzcyB0aGF0IHJlbmRlcnMgdGhlIFxyXG4gICAgICogZXJyb3IgbWVzc2FnZXMgYW5kIGEgY2xhc3MgdGhhdCByZW5kZXJzIGF0dHJpYnV0ZXMuIFxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYnV0dG9uc0luZm8gLSBJbmZvcm1hdGlvbiB0byBjcmVhdGUgdGhpcyBidXR0b24gaW5wdXQgXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBidXR0b25zSW5mby5idXR0b25zIC0gZWFjaCBpbmRpdmlkdWFsIGJ1dHRvbiBkYXRhIGFuZCBzZXR0aW5ncy5cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBidXR0b25zSW5mby5zZXR0aW5ncyAtIHNldHRpbmdzIGZvciBhbGwgYnV0dG9ucyBcclxuICAgICAqIEBwYXJhbSB7Q2xhc3N9IGJ1dHRvbnNJbmZvLmVycm9ycyAtIGFuIGVycm9yIGNsYXNzIHRoYXQgd2FzIGNyZWF0ZWQgYnkgdGhlIFxyXG4gICAgICogcmVuZGVyaW5nIGxpYnJhcnkgc28gdGhlIGVycm9ycyBvcGVuIGFuZCBkaXNwbGF5IGFsb25nc2lkZSB0aGUgbGlicmFyeS4gXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGJ1dHRvbnMgPSBbXSwgaW5wdXQsIGVycm9yTWVzc2FnZXMgPSBFcnJvck1lc3NhZ2VzKSB7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEJ1dHRvbnMgdG8gYmUgcmVuZGVyZWRcclxuICAgICAgICAgKiBAdHlwZSB7QXJyYXl9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5idXR0b25zID0gYnV0dG9ucztcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU2V0dGluZ3MgZm9yIGFsbCBidXR0b25zIGluIHRoaXMgZ3JvdXAgXHJcbiAgICAgICAgICogQHR5cGUge09iamVjdH1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmlucHV0ID0gaW5wdXQ7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEVycm9yIG1lc3NhZ2UgY2xhc3MgdGhhdCB3aWxsIHRha2UgdGhlIGVycm9ycyBmcm9tIFxyXG4gICAgICAgICAqIHRoZSByZW5kZXJpbmcgbGlicmFyeSBhbmQgYWRkcyB0aGVtIHRvIHRoaXMgaW5wdXQgXHJcbiAgICAgICAgICogQHR5cGUge0NsYXNzfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuZXJyb3JNZXNzYWdlcyA9IGVycm9yTWVzc2FnZXM7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENyZWF0ZXMgYXR0cmlidXRlIHRhZ3MgaHRtbCB0byBiZSBhZGRlZCB0byB0aGlzIGJ1dHRvbiBcclxuICAgICAgICAgKiBpbnB1dHMuXHJcbiAgICAgICAgICogQHR5cGUge0NsYXNzfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuYXR0cmlidXRlVGFncyA9IEF0dHJpYnV0ZVRhZ3M7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBMZXRzIHVzZXJzIGFkZCB0aGUgc2FtZSBjbGFzc2VzIHRvIGFsbCBidXR0b25zIGp1c3QgaW4gXHJcbiAgICAgKiBjYXNlIGJ1dHRvbnMgc2hhcmUgYSBzcGVjaWZpYyBjbGFzcy5cclxuICAgICAqIFxyXG4gICAgICogQHR5cGUge1N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0IGJ1dHRvbkNsYXNzZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyB0aGUgSFRNTCBmb3IgZXZlcnkgYnV0dG9ucyBkZWZpbmVkIGluIHRoZSBidXR0b25zIGFycmF5IGFuZCBcclxuICAgICAqIGF0dGFjaGVzIHRoZSBlcnJvciBtZXNzYWdlcyBhdHRhY2hlZCB0byB0aGlzIGlucHV0LiBcclxuICAgICAqIFxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIGJ1dHRvbkNsYXNzZXMgPSAnYnV0dG9uLWNsYXNzJztcclxuICAgICAqIGJ1dHRvbnMgPSBbe1xyXG4gICAgICogICAgbGFiZWwgOiBcIkJ1dHRvbiAxXCIsXHJcbiAgICAgKiAgICBhdHRySFRNTCA6IFwiZGlzYWJsZWRcIixcclxuICAgICAqICAgIGNsYXNzZXMgOiBcImNsYXNzLTFcIlxyXG4gICAgICogfSx7XHJcbiAgICAgKiAgICBsYWJlbCA6IFwiPGgxPkJ1dHRvbiAyPC9oMT5cIixcclxuICAgICAqICAgIGNsYXNzZXMgXCIgY2xhc3MtMlwiXHJcbiAgICAgKiB9XTtcclxuICAgICAqIFxyXG4gICAgICogLy8gV2lsbCByZW5kZXI6XHJcbiAgICAgKiBcclxuICAgICAqIDxidXR0b24gY2xhc3M9XCJidXR0b24tY2xhc3MgY2xhc3MtMVwiIGRpc2FibGVkPkJ1dHRvbiAxPC9idXR0b24+XHJcbiAgICAgKiA8YnV0dG9uIGNsYXNzPVwiYnV0dG9uIGNsYXNzIGNsYXNzLTJcIj48aDE+QnV0dG9uIDI8L2gxPjwvYnV0dG9uPlxyXG4gICAgICogXHJcbiAgICAgKiBAdHlwZSB7U3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBnZXQgaHRtbCgpIHtcclxuICAgICAgICBsZXQge2Vycm9yczogZXJyb3JDbGFzcyA9IHt9LCBidXR0b25zID0gW10sIGlucHV0ID0ge30sIGJ1dHRvbkNsYXNzZXN9ID0gdGhpcztcclxuICAgICAgICBsZXQgeyBhdHRyaWJ1dGVzID0ge30sIGVycm9ycyA9IHt9LCBtZXNzYWdlcyA9IHt9IH0gPSBlcnJvckNsYXNzO1xyXG4gICAgICAgIGxldCBidXR0b25FcnJvck1lc3NhZ2VzID0gT2JqZWN0LmtleXMoYXR0cmlidXRlcykubWFwKChrZXksIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBgJHtlcnJvcnNba2V5XX1gLFxyXG4gICAgICAgICAgICAgICAgYXR0ckhUTUw6ICcnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBsZXQgZXJyb3JNZXNzYWdlcyA9IG5ldyB0aGlzLmVycm9yTWVzc2FnZXMoYnV0dG9uRXJyb3JNZXNzYWdlcykuaHRtbDtcclxuICAgICAgICBsZXQge2xhYmVsID0gJycsIGxhYmVsSFRNTCA9ICcnLCBzaG93TGFiZWwgPSBmYWxzZSwgaWR9ID0gaW5wdXQ7XHJcbiAgICAgICAgbGV0IGJ1dHRvbnNIVE1MID0gYnV0dG9ucy5yZWR1Y2UoKGh0bWwsIGJ1dHRvbiwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgbGV0IHsgbGFiZWwsIGF0dHJIVE1MID0gJycsIGNsYXNzZXMgPSBcIlwiIH0gPSBidXR0b247XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gYCR7aHRtbH0gXHJcbiAgICAgICAgICAgICAgICAgICA8YnV0dG9uICR7YXR0ckhUTUx9IGNsYXNzPVwiJHtjbGFzc2VzfSAke2J1dHRvbkNsYXNzZXN9XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgJHtsYWJlbH1cclxuICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPmA7XHJcbiAgICAgICAgfSwgJycpO1xyXG5cclxuICAgICAgICBpZiAoKGxhYmVsSFRNTC5sZW5ndGggPiAwIHx8IGxhYmVsLmxlbmd0aCA+IDApICYmIHNob3dMYWJlbCkge1xyXG4gICAgICAgICAgICBsYWJlbEhUTUwgPSBsYWJlbEhUTUwgPyBsYWJlbEhUTUwgOiBsYWJlbDtcclxuICAgICAgICAgICAgbGFiZWxIVE1MID0gYDxsYWJlbCBmb3I9XCIke2lkfVwiPiR7bGFiZWxIVE1MfTwvbGFiZWw+YFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGBcclxuICAgICAgICAgICAgICR7bGFiZWxIVE1MfVxyXG4gICAgICAgICAgICAgJHtidXR0b25zSFRNTH1cclxuICAgICAgICAgICAgICR7ZXJyb3JNZXNzYWdlc30gICAgICAgICAgICAgXHJcbiAgICAgICAgYDtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBTdHlsZSB9IGZyb20gXCIuL3N0eWxlXCI7XHJcbmltcG9ydCB7IEVycm9yTWVzc2FnZXMgfSBmcm9tIFwiLi9tZXNzYWdlcy5qc1wiO1xyXG5pbXBvcnQgeyBBdHRyaWJ1dGVUYWdzIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9hdHRyaWJ1dGVzLmpzXCI7XHJcblxyXG5sZXQgc3R5bGUgPSBuZXcgU3R5bGUoKTtcclxuXHJcbi8qKlxyXG4gKiBQcm9kdWNlcyBodG1sIHRvIGJ1aWxkIGEgY2hlY2tib3ggaW5wdXQgZm9yIHRoZSAgXHJcbiAqIHZhcmlvdXMgcmVuZGVyaW5nIGxpYnJhcmllcy4gXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ2hlY2tib3gge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB1cCB0aGUgY2hlY2tib3gncyBzZXR0aW5ncyBmcm9tIGEgc3RhbmRhcmQgaW5wdXQgZGF0YSBcclxuICAgICAqIG9iamVjdCBhbmQgc2V0cyB0aGUgdHlwZSBvZiBlcnJvciBtZXNzYWdlcyB0aGlzIGNsYXNzIFxyXG4gICAgICogd2lsbCByZW5kZXIgaWYgdGhlIGNoZWNrYm94IGlzbid0IHZhbGlkLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5wdXRPYmogLSBjb250YWlucyBhbGwgdGhlIGNvbmZpZ3VyYXRpb25zIFxyXG4gICAgICogdG8gcmVuZGVyIHRoaXMgaW5wdXQuXHJcbiAgICAgKiBAcGFyYW0ge2NsYXNzfSBlcnJvck1lc3NhZ2VzIC0gYSBjbGFzcyB0aGF0IHdpbGwgcmVuZGVyIHRoZSBcclxuICAgICAqIHNwZWNpZmljIHR5cGUgb2YgZXJyb3IgbWVzc2FnZXMgYmFzZWQgb24gdGhpcyBVSSdzIHNldHRpbmdzLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihpbnB1dE9iaiA9IHt9LCBlcnJvck1lc3NhZ2VzID0gRXJyb3JNZXNzYWdlcykge1xyXG4gICAgICAgIGxldCB7aW5wdXQsIHRhZ3MgPSAnJywgc2V0dGluZ3MgPSB7fSwgZXJyb3JzID0ge319ID0gaW5wdXRPYmo7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoaXMgY2hlY2tib3gncyBpbnB1dCBjb25maWd1cmF0aW9uIFxyXG4gICAgICAgICAqIEB0eXBlIHtPYmplY3R9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5pbnB1dCA9IGlucHV0O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBbnkgY3VzdG9tIHRhZ3MgcGFzc2VkIGRvd24gZnJvbSB0aGUgcmVuZGVyaW5nIGxpYnJhcnkuIFxyXG4gICAgICAgICAqIEB0eXBlIHtTdHJpbmd9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy50YWdzID0gdGFncztcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU2V0dGluZ3MgZm9yIHRoaXMgd2hvbGUgaW5wdXQgaW5jbHVkaW5nIHRoZSBjb250YWluZXJcclxuICAgICAgICAgKiBAdHlwZSB7T2JqZWN0fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBzZXR0aW5ncztcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBjbGFzcyBvZiBlcnJvcnMgY3JlYXRlZCBieSB0aGUgcmVuZGVyaW5nIGxpYnJhcnkgdG8gXHJcbiAgICAgICAgICogaGlkZSBhbmQgc2hvdyB2YXJpb3VzIGVycm9ycy5cclxuICAgICAgICAgKiBAdHlwZSB7Y2xhc3N9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5lcnJvcnMgPSBlcnJvcnM7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoaXMgVUkncyByZW5kZXJpbmcgb2YgdGhpcyBlcnJvciBtZXNzYWdlcy5cclxuICAgICAgICAgKiBAdHlwZSB7Y2xhc3N9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5lcnJvck1lc3NhZ2VzID0gZXJyb3JNZXNzYWdlcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgYSBkZWZhdWx0IGNsYXNzIHRvIHRoaXMgY2hlY2tib3ggaW5wdXQgXHJcbiAgICAgKiBAdHlwZSB7U3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBnZXQgdWlDbGFzc2VzKCkge1xyXG4gICAgICAgIHJldHVybiAnJ1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQW55IFVJIHNwZWNpZmljIGF0dHJpYnV0ZXNcclxuICAgICAqIEB0eXBlIHtTdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGdldCB1aUF0dHJpYnV0ZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuICcnXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBdHRyaWJ1dGVzIHRoYXQgcmVxdWlyZWQgZm9yIHRoaXMgY2hlY2tib3ggaW5wdXQgXHJcbiAgICAgKiB0byBiZSB1c2VkIGFuZCByZW5kZXJlZCBwcm9wZXJseS5cclxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gLSBBIHN0cmluZyBvZiBhbGwgYXR0cmlidXRlcyB0byBsb2FkIFxyXG4gICAgICogdGhpcyBpbnB1dCBpbmNsdWRpbmcgaXRzIGlkLCBuYW1lIGFuZCB0eXBlLlxyXG4gICAgICovXHJcbiAgICBnZXQgcmVxdWlyZWRBdHRyaWJ1dGVzKCkge1xyXG4gICAgICAgIGxldCB7aW5wdXR9ID0gdGhpcztcclxuICAgICAgICBsZXQge2lkLCBuYW1lfSA9IGlucHV0O1xyXG5cclxuICAgICAgICByZXR1cm4gYGlkPVwiJHtpZH1cIiBuYW1lPVwiJHtuYW1lfVwiIHR5cGU9XCJjaGVja2JveFwiYDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbmRlcnMgdGhlIEhUTUwgZm9yIHRoaXMgY2hlY2tib3ggZnJvbSB0aGUgZ2l2ZW4gYXR0cmlidXRlcyBcclxuICAgICAqIGFuZCBjbGFzc2VzLlxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIHVpQ2xhc3NlcyA9IFwiY2xhc3MtMVwiO1xyXG4gICAgICogaW5wdXQuY2xhc3NlcyA9IFwiY2xhc3MtMlwiO1xyXG4gICAgICogcmVxdWlyZWRBdHRyaWJ1dGVzID0gXCJpZD0naWQtMScgbmFtZT0nY2hlY2tib3gtbmFtZScgdHlwZT0nY2hlY2tib3gnXCJcclxuICAgICAqIC8vIFJlbmRlcnMgVG86XHJcbiAgICAgKiA8bGFiZWwgY2xhc3M9XCJjbGFzcy0xIGNsYXNzLTJcIj5cclxuICAgICAqICAgICA8aW5wdXQgaWQ9J2lkLTEnIG5hbWU9J2NoZWNrYm94LW5hbWUnIHR5cGU9J2NoZWNrYm94Jz5cclxuICAgICAqIDwvbGFiZWw+XHJcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IC0gaHRtbCBvZiB0aGUgZnVsbHkgY3JlYXRlZCBjaGVja2JveFxyXG4gICAgICovXHJcbiAgICByZW5kZXJDaGVja2JveENvbnRhaW5lcihjbGFzc2VzLCBhdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgbGV0IHtpbnB1dCwgc2V0dGluZ3N9ID0gdGhpcztcclxuICAgICAgICBsZXQge2xhYmVsID0gJycsIGxhYmVsSFRNTCwgbmFtZSA9ICcnLCBpZCA9ICcnfSA9IGlucHV0O1xyXG4gICAgICAgIGxldCB7c2hvd0xhYmVsID0gdHJ1ZX0gPSBzZXR0aW5ncztcclxuXHJcbiAgICAgICAgaWYgKGxhYmVsSFRNTCkgbGFiZWwgPSBsYWJlbEhUTUw7XHJcblxyXG4gICAgICAgIHJldHVybiBgXHJcbiAgICAgICAgICAgIDxsYWJlbCBmb3I9XCIke2lkfVwiIGNsYXNzPVwiJHtjbGFzc2VzfVwiPlxyXG4gICAgICAgICAgICAgICA8aW5wdXQgJHthdHRyaWJ1dGVzfT5cclxuICAgICAgICAgICAgICAgJHtsYWJlbH1cclxuICAgICAgICAgICAgPC9sYWJlbD5cclxuICAgICAgICBgO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB1cCBhbmQgcmVuZGVycyBhbGwgdGhlIEhUTUwgZm9yIHRoaXMgY2hlY2tib3ggYmFzZWQgb24gdGhlIHNldHRpbmdzLlxyXG4gICAgICogXHJcbiAgICAgKiBAdHlwZSB7U3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBnZXQgaHRtbCgpIHtcclxuICAgICAgICBsZXQge3RhZ3MsIHNldHRpbmdzID0ge30sIGVycm9ycywgaW5wdXQsIHVpQ2xhc3NlcywgdWlBdHRyaWJ1dGVzLCByZXF1aXJlZEF0dHJpYnV0ZXN9ID0gdGhpcztcclxuICAgICAgICBsZXQge2lucHV0OiBpbnB1dFNldHRpbmdzID0ge319ID0gc2V0dGluZ3M7XHJcbiAgICAgICAgbGV0IHtjbGFzc2VzID0gJyd9ID0gaW5wdXRTZXR0aW5ncztcclxuICAgICAgICBsZXQgeyBpZCwgbmFtZSwgbGFiZWwgPSAnJyB9ID0gaW5wdXQ7XHJcbiAgICAgICAgbGV0IHsgbWVzc2FnZXMgPSBbXSwgYXR0cmlidXRlcyA9IHt9LCB0YWdzOiBlcnJvclRhZ3MgPSAnJ30gPSB0aGlzLmVycm9ycztcclxuICAgICAgICBsZXQgZXJyb3JBdHRyaWJ1dGVzID0gYXR0cmlidXRlcztcclxuICAgICAgICBsZXQgZXJyb3JIVE1MID0gbmV3IHRoaXMuZXJyb3JNZXNzYWdlcyhtZXNzYWdlcykuaHRtbDtcclxuICAgICAgICBsZXQgYWxsQ2xhc3NlcyA9IGAke2NsYXNzZXN9ICR7dWlDbGFzc2VzfWA7XHJcbiAgICAgICAgbGV0IGFsbEF0dHJpYnV0ZXMgPSBgJHtyZXF1aXJlZEF0dHJpYnV0ZXN9ICR7dWlBdHRyaWJ1dGVzfSAke3RhZ3N9ICR7ZXJyb3JUYWdzfWBcclxuICAgICAgICBsZXQgY2hlY2tib3hIVE1MID0gdGhpcy5yZW5kZXJDaGVja2JveENvbnRhaW5lcihhbGxDbGFzc2VzLCBhbGxBdHRyaWJ1dGVzKTtcclxuICAgICAgICBsZXQgaW5wdXRIVE1MID0gYCBcclxuICAgICAgICAgICAgJHtjaGVja2JveEhUTUx9XHJcbiAgICAgICAgICAgICR7ZXJyb3JIVE1MfVxyXG4gICAgICAgYDtcclxuXHJcbiAgICAgICAgcmV0dXJuIGAke2lucHV0SFRNTH1gO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHtTdHlsZX0gZnJvbSBcIi4vc3R5bGVcIjtcclxuaW1wb3J0IHtFcnJvck1lc3NhZ2VzfSBmcm9tIFwiLi9tZXNzYWdlcy5qc1wiO1xyXG5pbXBvcnQge0F0dHJpYnV0ZVRhZ3N9IGZyb20gXCIuLi91dGlsaXRpZXMvYXR0cmlidXRlcy5qc1wiO1xyXG5cclxubGV0IHN0eWxlID0gbmV3IFN0eWxlKCk7XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIGRhdGUgaW5wdXQgdGhhdCB3aWxsIHJlY29yZCBkYXRlIHNwZWNpZmljIGRhdGEgXHJcbiAqIGZvciBpVlhqcy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBEYXRlIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFjY2VwdHMgYW4gaW5wdXQgb2JqZWN0IHdpdGggdmFyaW91cyBpbnB1dCBzZXR0aW5ncyBhbmQgVUkgc3BlY2lmaWMgZXJyb3IgXHJcbiAgICAgKiBtZXNzYWdlc1xyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGlucHV0T2JqIC0gdmFyaW91cyBpbnB1dCBzZXR0aW5ncyB0byByZW5kZXIgdGhpcyBkYXRlIGlucHV0IGJveFxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGlucHV0T2JqLmlucHV0IC0gaW5wdXQgc3BlY2lmaWMgc2V0dGluZ3MgZm9yIHRoaXMgZGF0ZSBpbnB1dCBcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBpbnB1dE9iai5zZXR0aW5ncyAtIGdsb2JhbCBzZXR0aW5ncyBmb3IgdGhpcyBkYXRlIGlucHV0IFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlucHV0T2JqLnRhZ3MgLSBpbnB1dCBzcGVjaWZpYyBhdHRyaWJ1dGUgdGFncyBcclxuICAgICAqIEBwYXJhbSB7Y2xhc3N9IGlucHV0T2JqLmVycm9ycyAtIGVycm9ycyBmcm9tIGEgcmVuZGVyaW5nIGZvciB2YWxpZGF0aW9uIGFuZCBcclxuICAgICAqIGVycm9yIG1lc3NhZ2luZyBhcHBlYXJhbmNlLlxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGVycm9yTWVzc2FnZXMgLSBVSSBzcGVjaWZpYyBFcnJvciBtZXNzYWdlcyBcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoaW5wdXRPYmogPSB7fSwgZXJyb3JNZXNzYWdlcyA9IEVycm9yTWVzc2FnZXMpIHtcclxuICAgICAgICBsZXQge2lucHV0ID0ge30sIHNldHRpbmdzID0ge30sIHRhZ3MgPSB7fSwgZXJyb3JzID0ge319ID0gaW5wdXRPYmo7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIElucHV0IHNwZWNpZmljIHNldHRpbmdzIGZvciB0aGlzIGRhdGUgaW5wdXRcclxuICAgICAgICAgKiBAdHlwZSB7b2JqZWN0fSAgXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5pbnB1dCA9IGlucHV0O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBHbG9iYWwgaW5wdXQgc2V0dGluZ3MgZm9yIHRoaXMgZGF0ZSBpbnB1dCBcclxuICAgICAgICAgKiBAdHlwZSB7b2JqZWN0fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBzZXR0aW5ncztcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGFncyB0byBiZSBhZGRlZCB0byB0aGlzIGRhdGUgaW5wdXRcclxuICAgICAgICAgKiBAdHlwZSB7U3RyaW5nfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMudGFncyA9IHRhZ3M7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEhvbGRzIGFsbCB2YWxpZGF0aW9uIGVycm9yIGNvcnJlY3RpbmcuXHJcbiAgICAgICAgICogQHR5cGUge0NsYXNzfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuZXJyb3JzID0gZXJyb3JzO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZW5kZXJzIFVJIHNwZWNpZmljIGVycm9yIG1lc3NhZ2VzIGJ5IHV0aWxpemluZyB0aGUgXHJcbiAgICAgICAgICogZXJyb3IgY2xhc3MgcGFzc2VkIGRvd24gdG8ga2VlcCBpdCBjb25zaXN0ZW50IHdpdGggdGhlIFxyXG4gICAgICAgICAqIGN1cnJlbnQgVUkgZnJhbWV3b3JrLlxyXG4gICAgICAgICAqIEB0eXBlIHtDbGFzc31cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmVycm9yTWVzc2FnZXMgPSBlcnJvck1lc3NhZ2VzO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDb252ZXJ0cyBhdHRyaWJ1dGUgZGF0YSBpbnRvIGF0dHJpYnV0ZSBIVE1MIGZvciBcclxuICAgICAgICAgKiBhdHRyaWJ1dGVzIG5vdCBjb3ZlcmVkIGJ5IHRoZSBlcnJvcnMgY2xhc3MuXHJcbiAgICAgICAgICogQHR5cGUge0NsYXNzfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuYXR0cmlidXRlVGFncyA9IEF0dHJpYnV0ZVRhZ3M7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZWZhdWx0IHVpIGNsYXNzZXMgdG8gYWRkIHRvIGFsbCBkYXRlIGlucHV0cyBcclxuICAgICAqIEB0eXBlIHtTdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGdldCB1aUNsYXNzZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuICcnXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZWZhdWx0IHVpIGF0dHJpYnV0ZXMgdG8gYWRkIHRvIHRoaXMgZGF0ZSBpbnB1dCBcclxuICAgICAqIHRoYXQgYXJlbid0IGNvdmVyZWQgYnkgdGhlIHRhZ3Mgb3IgZXJyb3JzIGFib3ZlLlxyXG4gICAgICogQHR5cGUge1N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0IHVpQXR0cmlidXRlcygpIHtcclxuICAgICAgICByZXR1cm4gJydcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBIVE1MIHRvIHJlbmRlciBhIGRhdGUgaW5wdXQgYmFzZWQgb24gdGhlIHNldHRpbmdzIGZyb20gdGhlIFxyXG4gICAgICogY29uc3RydWN0b3IuIFxyXG4gICAgICogXHJcbiAgICAgKiBAZXhhbXBsZSBcclxuICAgICAqIC8vRGF0YSBcclxuICAgICAqIGlucHV0LmxhYmVsID0gXCI8aDE+TGFiZWw8L2gxPlwiO1xyXG4gICAgICogc2V0dGluZ3MuY2xhc3NlcyA9IFwiY2xhc3MtMVwiO1xyXG4gICAgICogZXJyb3JzLnRhZ3MgPSBcInJlcXVpcmVkPSd0cnVlJ1wiO1xyXG4gICAgICogRGF0ZS51aUNsYXNzZXMgPSAndWktY2xhc3Nlcy0xJztcclxuICAgICAqIC8vIFJlbmRlcnMgXHJcbiAgICAgKiA8bGFiZWw+XHJcbiAgICAgKiAgICAgIDxoMT5MYWJlbDwvaDE+XHJcbiAgICAgKiA8L2xhYmVsPlxyXG4gICAgICogPGlucHV0IGNsYXNzPVwiY2xhc3MtMSB1aS1jbGFzc2VzLTFcIiB0eXBlPVwiZGF0ZVwiIHJlcXVpcmVkPVwidHJ1ZVwiPlxyXG4gICAgICogQHR5cGUge1N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0IGh0bWwoKSB7XHJcbiAgICAgICAgbGV0IHtpbnB1dCwgc2V0dGluZ3MsIHRhZ3MsIGVycm9ycywgdWlDbGFzc2VzLCB1aUF0dHJpYnV0ZXN9ID0gdGhpcztcclxuICAgICAgICBsZXQge2xhYmVsLCBsYWJlbEhUTUwsIG5hbWUgPSAnJywgaWQgPSAnJ30gPSBpbnB1dDtcclxuICAgICAgICBsZXQge2lucHV0OiBpbnB1dFNldHRpbmdzID0ge30sIHNob3dMYWJlbCA9IHRydWV9ID0gc2V0dGluZ3M7ICAgICAgICBcclxuICAgICAgICBsZXQge2NsYXNzZXMgPSAnJ30gPSBpbnB1dFNldHRpbmdzO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNsYXNzZXMgPSBgJHtjbGFzc2VzfSAke3VpQ2xhc3Nlc31gO1xyXG5cclxuICAgICAgICBsZXQge21lc3NhZ2VzOiBlcnJvck1lc3NhZ2VzID0gW10sIGF0dHJpYnV0ZXM6IGVycm9yQXR0cmlidXRlcyA9ICcnLCBub25WYWxpZGF0ZSA9IFtdLCB0YWdzOiBlcnJvclRhZ3MgPSAnJ30gPSBlcnJvcnM7XHJcbiAgICAgICAgbGV0IGVycm9ySFRNTCA9IG5ldyB0aGlzLmVycm9yTWVzc2FnZXMoZXJyb3JNZXNzYWdlcykuaHRtbDtcclxuICAgICAgICBsZXQgbm9uVmFsaWRhdGVBdHRyaWJ1dGVzSFRNTCA9IG5ldyBBdHRyaWJ1dGVUYWdzKGVycm9yQXR0cmlidXRlcywgbm9uVmFsaWRhdGUpLmh0bWw7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbm9uVmFsaWRhdGVBdHRyaWJ1dGVzSFRNTCA9IGAke25vblZhbGlkYXRlQXR0cmlidXRlc0hUTUx9ICR7dWlBdHRyaWJ1dGVzfWA7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IGlucHV0SFRNTCA9IGAgXHJcbiAgICAgICAgICAgIDxsYWJlbCBmb3I9XCIke2lkfVwiPiAke2xhYmVsfSA8L2xhYmVsPlxyXG4gICAgICAgICAgICA8aW5wdXQgY2xhc3M9XCIke2NsYXNzZXN9XCIgIGlkPVwiJHtpZH1cIiBuYW1lPVwiJHtuYW1lfVwiICB0eXBlPVwiZGF0ZVwiICR7bm9uVmFsaWRhdGVBdHRyaWJ1dGVzSFRNTH0gICAke2Vycm9yVGFnc30gJHt0YWdzfT5cclxuICAgICAgICAgICAgJHtlcnJvckhUTUx9XHJcbiAgICAgICBgO1xyXG5cclxuICAgICAgICBpZiAobGFiZWxIVE1MKSBsYWJlbCA9IGxhYmVsSFRNTDtcclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gYCR7aW5wdXRIVE1MfWA7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBTdHlsZSB9IGZyb20gXCIuL3N0eWxlXCI7XHJcbmltcG9ydCB7IEVycm9yTWVzc2FnZXMgfSBmcm9tIFwiLi9tZXNzYWdlcy5qc1wiO1xyXG5pbXBvcnQgeyBBdHRyaWJ1dGVUYWdzIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9hdHRyaWJ1dGVzLmpzXCI7XHJcblxyXG5sZXQgc3R5bGUgPSBuZXcgU3R5bGUoKTtcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgZGF0ZXRpbWUgbG9jYWwgaW5wdXQgdGhhdCB3aWxsIHJlY29yZCBkYXRlIHdpdGggdGltZXN0YW1wIHNwZWNpZmljIGRhdGEgXHJcbiAqIGZvciBpVlhqcy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBEYXRldGltZUxvY2FsIHtcclxuXHJcbiAgICAvKipcclxuICAgICogQWNjZXB0cyBhbiBpbnB1dCBvYmplY3Qgd2l0aCB2YXJpb3VzIGlucHV0IHNldHRpbmdzIGFuZCBVSSBzcGVjaWZpYyBlcnJvciBcclxuICAgICogbWVzc2FnZXNcclxuICAgICogQHBhcmFtIHtvYmplY3R9IGlucHV0T2JqIC0gdmFyaW91cyBpbnB1dCBzZXR0aW5ncyB0byByZW5kZXIgYSBkYXRldGltZS1sb2NhbCBpbnB1dCBib3hcclxuICAgICogQHBhcmFtIHtvYmplY3R9IGlucHV0T2JqLmlucHV0IC0gaW5wdXQgc3BlY2lmaWMgc2V0dGluZ3MgZm9yIHRoaXMgZGF0ZXRpbWUtbG9jYWwgaW5wdXQgXHJcbiAgICAqIEBwYXJhbSB7b2JqZWN0fSBpbnB1dE9iai5zZXR0aW5ncyAtIGdsb2JhbCBzZXR0aW5ncyBmb3IgdGhpcyBkYXRldGltZS1sb2NhbCBpbnB1dCBcclxuICAgICogQHBhcmFtIHtzdHJpbmd9IGlucHV0T2JqLnRhZ3MgLSBpbnB1dCBzcGVjaWZpYyBhdHRyaWJ1dGUgdGFncyBcclxuICAgICogQHBhcmFtIHtjbGFzc30gaW5wdXRPYmouZXJyb3JzIC0gZXJyb3JzIGZyb20gYSByZW5kZXJpbmcgZm9yIHZhbGlkYXRpb24gYW5kIFxyXG4gICAgKiBlcnJvciBtZXNzYWdpbmcgYXBwZWFyYW5jZS5cclxuICAgICogQHBhcmFtIHtvYmplY3R9IGVycm9yTWVzc2FnZXMgLSBVSSBzcGVjaWZpYyBFcnJvciBtZXNzYWdlc1xyXG4gICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGlucHV0T2JqID0ge30sIGVycm9yTWVzc2FnZXMgPSBFcnJvck1lc3NhZ2VzKSB7XHJcbiAgICAgICAgbGV0IHtpbnB1dCA9IHt9LCBzZXR0aW5ncyA9IHt9LCB0YWdzID0ge30sIGVycm9ycyA9IHt9fSA9IGlucHV0T2JqO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBJbnB1dCBzcGVjaWZpYyBzZXR0aW5ncyBmb3IgdGhpcyBkYXRldGltZS1sb2NhbCBpbnB1dFxyXG4gICAgICAgICAqIEB0eXBlIHtvYmplY3R9ICBcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmlucHV0ID0gaW5wdXQ7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEdsb2JhbCBpbnB1dCBzZXR0aW5ncyBmb3IgdGhpcyBkYXRldGltZS1sb2NhbCBpbnB1dCBcclxuICAgICAgICAgKiBAdHlwZSB7b2JqZWN0fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBzZXR0aW5ncztcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGFncyB0byBiZSBhZGRlZCB0byB0aGlzIGRhdGV0aW1lLWxvY2FsIGlucHV0XHJcbiAgICAgICAgICogQHR5cGUge1N0cmluZ31cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnRhZ3MgPSB0YWdzO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAqIEhvbGRzIGFsbCB2YWxpZGF0aW9uIGVycm9yIGNvcnJlY3RpbmcuXHJcbiAgICAgICAgKiBAdHlwZSB7Q2xhc3N9XHJcbiAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmVycm9ycyA9IGVycm9ycztcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmVuZGVycyBVSSBzcGVjaWZpYyBlcnJvciBtZXNzYWdlcyBieSB1dGlsaXppbmcgdGhlIFxyXG4gICAgICAgICAqIGVycm9yIGNsYXNzIHBhc3NlZCBkb3duIHRvIGtlZXAgaXQgY29uc2lzdGVudCB3aXRoIHRoZSBcclxuICAgICAgICAgKiBjdXJyZW50IFVJIGZyYW1ld29yay5cclxuICAgICAgICAgKiBAdHlwZSB7Q2xhc3N9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5lcnJvck1lc3NhZ2VzID0gZXJyb3JNZXNzYWdlcztcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ29udmVydHMgYXR0cmlidXRlIGRhdGEgaW50byBhdHRyaWJ1dGUgSFRNTCBmb3IgXHJcbiAgICAgICAgICogYXR0cmlidXRlcyBub3QgY292ZXJlZCBieSB0aGUgZXJyb3JzIGNsYXNzLlxyXG4gICAgICAgICAqIEB0eXBlIHtDbGFzc31cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmF0dHJpYnV0ZVRhZ3MgPSBBdHRyaWJ1dGVUYWdzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBEZWZhdWx0IHVpIGNsYXNzZXMgdG8gYWRkIHRvIGFsbCBkYXRldGltZS1sb2NhbCBpbnB1dHMgXHJcbiAgICAqIEB0eXBlIHtTdHJpbmd9XHJcbiAgICAqL1xyXG4gICAgZ2V0IHVpQ2xhc3NlcygpIHtcclxuICAgICAgICByZXR1cm4gYGBcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIERlZmF1bHQgdWkgYXR0cmlidXRlcyB0byBhZGQgdG8gdGhpcyBkYXRldGltZS1sb2NhbCBpbnB1dCBcclxuICAgICAqIHRoYXQgYXJlbid0IGNvdmVyZWQgYnkgdGhlIHRhZ3Mgb3IgZXJyb3JzIGFib3ZlLlxyXG4gICAgICogQHR5cGUge1N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0IHVpQXR0cmlidXRlcygpIHtcclxuICAgICAgICByZXR1cm4gYGBcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogVGhlIEhUTUwgdG8gcmVuZGVyIGEgZGF0ZXRpbWUtbG9jYWwgaW5wdXQgYmFzZWQgb24gdGhlIHNldHRpbmdzIGZyb20gdGhlIFxyXG4gICAgKiBjb25zdHJ1Y3Rvci4gXHJcbiAgICAqIFxyXG4gICAgKiBAZXhhbXBsZSBcclxuICAgICogLy9EYXRhIFxyXG4gICAgKiBpbnB1dC5sYWJlbCA9IFwiPGgxPkxhYmVsPC9oMT5cIjtcclxuICAgICogc2V0dGluZ3MuY2xhc3NlcyA9IFwiY2xhc3MtMVwiO1xyXG4gICAgKiBlcnJvcnMudGFncyA9IFwicmVxdWlyZWQ9J3RydWUnXCI7XHJcbiAgICAqIERhdGV0aW1lTG9jYWwudWlDbGFzc2VzID0gJ3VpLWNsYXNzZXMtMSc7XHJcbiAgICAqIC8vIFJlbmRlcnMgXHJcbiAgICAqIDxsYWJlbD5cclxuICAgICogICAgICA8aDE+TGFiZWw8L2gxPlxyXG4gICAgKiA8L2xhYmVsPlxyXG4gICAgKiA8aW5wdXQgY2xhc3M9XCJjbGFzcy0xIHVpLWNsYXNzZXMtMVwiIHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIHJlcXVpcmVkPVwidHJ1ZVwiPlxyXG4gICAgKiBAdHlwZSB7U3RyaW5nfVxyXG4gICAgKi9cclxuICAgIGdldCBodG1sKCkge1xyXG4gICAgICAgIGxldCB7aW5wdXQsIHNldHRpbmdzLCB0YWdzLCBlcnJvcnMsIHVpQ2xhc3NlcywgdWlBdHRyaWJ1dGVzfSA9IHRoaXM7XHJcbiAgICAgICAgbGV0IHtsYWJlbCwgbGFiZWxIVE1MLCBuYW1lID0gJycsIGlkID0gJyd9ID0gaW5wdXQ7XHJcbiAgICAgICAgbGV0IHtpbnB1dDogaW5wdXRTZXR0aW5ncyA9IHt9LCBzaG93TGFiZWwgPSB0cnVlfSA9IHNldHRpbmdzO1xyXG4gICAgICAgIGxldCB7Y2xhc3NlcyA9ICcnfSA9IGlucHV0U2V0dGluZ3M7XHJcblxyXG4gICAgICAgIGNsYXNzZXMgPSBgJHtjbGFzc2VzfSAke3VpQ2xhc3Nlc31gO1xyXG5cclxuICAgICAgICBsZXQge21lc3NhZ2VzOiBlcnJvck1lc3NhZ2VzID0gW10sIGF0dHJpYnV0ZXM6IGVycm9yQXR0cmlidXRlcyA9ICcnLCBub25WYWxpZGF0ZSA9IFtdLCB0YWdzOiBlcnJvclRhZ3MgPSAnJ30gPSBlcnJvcnM7XHJcbiAgICAgICAgbGV0IGVycm9ySFRNTCA9IG5ldyB0aGlzLmVycm9yTWVzc2FnZXMoZXJyb3JNZXNzYWdlcykuaHRtbDtcclxuICAgICAgICBsZXQgbm9uVmFsaWRhdGVBdHRyaWJ1dGVzSFRNTCA9IG5ldyB0aGlzLmF0dHJpYnV0ZVRhZ3MoZXJyb3JBdHRyaWJ1dGVzLCBub25WYWxpZGF0ZSkuaHRtbDtcclxuXHJcbiAgICAgICAgbm9uVmFsaWRhdGVBdHRyaWJ1dGVzSFRNTCA9IGAke25vblZhbGlkYXRlQXR0cmlidXRlc0hUTUx9ICR7dWlBdHRyaWJ1dGVzfWA7XHJcblxyXG4gICAgICAgIGlmIChsYWJlbEhUTUwpIGxhYmVsID0gbGFiZWxIVE1MO1xyXG5cclxuICAgICAgICBsZXQgaW5wdXRIVE1MID0gYCBcclxuICAgICAgICAgICAgPGxhYmVsIGZvcj1cIiR7aWR9XCI+ICR7bGFiZWx9IDwvbGFiZWw+XHJcbiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cIiR7Y2xhc3Nlc31cIiAgaWQ9XCIke2lkfVwiIG5hbWU9XCIke25hbWV9XCIgIHR5cGU9XCJkYXRldGltZS1sb2NhbFwiICR7bm9uVmFsaWRhdGVBdHRyaWJ1dGVzSFRNTH0gICAke2Vycm9yVGFnc30gJHt0YWdzfT5cclxuICAgICAgICAgICAgJHtlcnJvckhUTUx9XHJcbiAgICAgICBgO1xyXG5cclxuICAgICAgICByZXR1cm4gYCR7aW5wdXRIVE1MfWA7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBTdHlsZSB9IGZyb20gXCIuL3N0eWxlXCI7XHJcbmltcG9ydCB7IEVycm9yTWVzc2FnZXMgfSBmcm9tIFwiLi9tZXNzYWdlcy5qc1wiO1xyXG5pbXBvcnQgeyBBdHRyaWJ1dGVUYWdzIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9hdHRyaWJ1dGVzLmpzXCI7XHJcblxyXG5sZXQgc3R5bGUgPSBuZXcgU3R5bGUoKTtcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGFuIGVtYWlsIGlucHV0IHRoYXQgd2lsbCByZWNvcmQgZW1haWxzICBcclxuICogZm9yIGlWWGpzLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEVtYWlsIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFjY2VwdHMgYW4gaW5wdXQgb2JqZWN0IHdpdGggdmFyaW91cyBpbnB1dCBzZXR0aW5ncyBhbmQgVUkgc3BlY2lmaWMgZXJyb3IgXHJcbiAgICAgKiBtZXNzYWdlc1xyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGlucHV0T2JqIC0gdmFyaW91cyBpbnB1dCBzZXR0aW5ncyB0byByZW5kZXIgdGhpcyBlbWFpbCBpbnB1dCBib3hcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBpbnB1dE9iai5pbnB1dCAtIGlucHV0IHNwZWNpZmljIHNldHRpbmdzIGZvciB0aGlzIGVtYWlsIGlucHV0IFxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGlucHV0T2JqLnNldHRpbmdzIC0gZ2xvYmFsIHNldHRpbmdzIGZvciB0aGlzIGVtYWlsIGlucHV0IFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlucHV0T2JqLnRhZ3MgLSBpbnB1dCBzcGVjaWZpYyBhdHRyaWJ1dGUgdGFncyBcclxuICAgICAqIEBwYXJhbSB7Y2xhc3N9IGlucHV0T2JqLmVycm9ycyAtIGVycm9ycyBmcm9tIGEgcmVuZGVyaW5nIGZvciB2YWxpZGF0aW9uIGFuZCBcclxuICAgICAqIGVycm9yIG1lc3NhZ2luZyBhcHBlYXJhbmNlLlxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGVycm9yTWVzc2FnZXMgLSBVSSBzcGVjaWZpYyBFcnJvciBtZXNzYWdlcyBcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoaW5wdXRPYmogPSB7fSwgZXJyb3JNZXNzYWdlcyA9IEVycm9yTWVzc2FnZXMpIHtcclxuICAgICAgICBsZXQge2lucHV0ID0ge30sIHNldHRpbmdzID0ge30sIHRhZ3MgPSB7fSwgZXJyb3JzID0ge319ID0gaW5wdXRPYmo7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIElucHV0IHNwZWNpZmljIHNldHRpbmdzIGZvciB0aGlzIGVtYWlsIGlucHV0XHJcbiAgICAgICAgICogQHR5cGUge29iamVjdH0gIFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuaW5wdXQgPSBpbnB1dDtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBJbnB1dCBzcGVjaWZpYyBzZXR0aW5ncyBmb3IgdGhpcyBlbWFpbCBpbnB1dFxyXG4gICAgICAgICogQHR5cGUge29iamVjdH0gIFxyXG4gICAgICAgICovXHJcbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9IHNldHRpbmdzO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUYWdzIHRvIGJlIGFkZGVkIHRvIHRoaXMgZW1haWwgaW5wdXRcclxuICAgICAgICAgKiBAdHlwZSB7U3RyaW5nfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMudGFncyA9IHRhZ3M7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEhvbGRzIGFsbCB2YWxpZGF0aW9uIGVycm9yIGNvcnJlY3RpbmcuXHJcbiAgICAgICAgICogQHR5cGUge0NsYXNzfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuZXJyb3JzID0gZXJyb3JzO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZW5kZXJzIFVJIHNwZWNpZmljIGVycm9yIG1lc3NhZ2VzIGJ5IHV0aWxpemluZyB0aGUgXHJcbiAgICAgICAgICogZXJyb3IgY2xhc3MgcGFzc2VkIGRvd24gdG8ga2VlcCBpdCBjb25zaXN0ZW50IHdpdGggdGhlIFxyXG4gICAgICAgICAqIGN1cnJlbnQgVUkgZnJhbWV3b3JrLlxyXG4gICAgICAgICAqIEB0eXBlIHtDbGFzc31cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmVycm9yTWVzc2FnZXMgPSBlcnJvck1lc3NhZ2VzO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDb252ZXJ0cyBhdHRyaWJ1dGUgZGF0YSBpbnRvIGF0dHJpYnV0ZSBIVE1MIGZvciBcclxuICAgICAgICAgKiBhdHRyaWJ1dGVzIG5vdCBjb3ZlcmVkIGJ5IHRoZSBlcnJvcnMgY2xhc3MuXHJcbiAgICAgICAgICogQHR5cGUge0NsYXNzfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuYXR0cmlidXRlVGFncyA9IEF0dHJpYnV0ZVRhZ3M7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIERlZmF1bHQgdWkgY2xhc3NlcyB0byBhZGQgdG8gYWxsIGVtYWlsIGlucHV0cyBcclxuICAgICogQHR5cGUge1N0cmluZ31cclxuICAgICovXHJcbiAgICBnZXQgdWlDbGFzc2VzKCkge1xyXG4gICAgICAgIHJldHVybiAnJ1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBEZWZhdWx0IHVpIGF0dHJpYnV0ZXMgdG8gYWRkIHRvIHRoaXMgZW1haWwgaW5wdXQgXHJcbiAgICAqIHRoYXQgYXJlbid0IGNvdmVyZWQgYnkgdGhlIHRhZ3Mgb3IgZXJyb3JzIGFib3ZlLlxyXG4gICAgKiBAdHlwZSB7U3RyaW5nfVxyXG4gICAgKi9cclxuICAgIGdldCB1aUF0dHJpYnV0ZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuICcnXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgSFRNTCB0byByZW5kZXIgYW4gZW1haWwgaW5wdXQgYmFzZWQgb24gdGhlIHNldHRpbmdzIGZyb20gdGhlIFxyXG4gICAgICogY29uc3RydWN0b3IuIFxyXG4gICAgICogXHJcbiAgICAgKiBAZXhhbXBsZSBcclxuICAgICAqIC8vRGF0YSBcclxuICAgICAqIGlucHV0LmxhYmVsID0gXCI8aDE+TGFiZWw8L2gxPlwiO1xyXG4gICAgICogc2V0dGluZ3MuY2xhc3NlcyA9IFwiY2xhc3MtMVwiO1xyXG4gICAgICogZXJyb3JzLnRhZ3MgPSBcInJlcXVpcmVkPSd0cnVlJ1wiO1xyXG4gICAgICogRW1haWwudWlDbGFzc2VzID0gJ3VpLWNsYXNzZXMtMSc7XHJcbiAgICAgKiAvLyBSZW5kZXJzIFxyXG4gICAgICogPGxhYmVsPlxyXG4gICAgICogICAgICA8aDE+TGFiZWw8L2gxPlxyXG4gICAgICogPC9sYWJlbD5cclxuICAgICAqIDxpbnB1dCBjbGFzcz1cImNsYXNzLTEgdWktY2xhc3Nlcy0xXCIgdHlwZT1cImVtYWlsXCIgcmVxdWlyZWQ9XCJ0cnVlXCI+XHJcbiAgICAgKiBAdHlwZSB7U3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBnZXQgaHRtbCgpIHtcclxuICAgICAgICBsZXQge2lucHV0LCBzZXR0aW5ncywgdGFncywgZXJyb3JzLCB1aUNsYXNzZXMsIHVpQXR0cmlidXRlc30gPSB0aGlzO1xyXG4gICAgICAgIGxldCB7bGFiZWwgPSAnJywgbGFiZWxIVE1MLCBuYW1lID0gJycsIGlkID0gJyd9ID0gaW5wdXQ7XHJcbiAgICAgICAgbGV0IHtpbnB1dDogaW5wdXRTZXR0aW5ncyA9IHt9LCBzaG93TGFiZWwgPSB0cnVlfSA9IHNldHRpbmdzO1xyXG4gICAgICAgIGxldCB7Y2xhc3NlcyA9ICcnfSA9IGlucHV0U2V0dGluZ3M7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY2xhc3NlcyA9IGAke2NsYXNzZXN9ICR7dWlDbGFzc2VzfWA7XHJcblxyXG4gICAgICAgIGxldCB7bWVzc2FnZXM6IGVycm9yTWVzc2FnZXMgPSBbXSwgYXR0cmlidXRlczogZXJyb3JBdHRyaWJ1dGVzID0gJycsIG5vblZhbGlkYXRlID0gW10sIHRhZ3M6IGVycm9yVGFncyA9ICcnfSA9IGVycm9ycztcclxuICAgICAgICBsZXQgZXJyb3JIVE1MID0gbmV3IHRoaXMuZXJyb3JNZXNzYWdlcyhlcnJvck1lc3NhZ2VzKS5odG1sO1xyXG4gICAgICAgIGxldCBub25WYWxpZGF0ZUF0dHJpYnV0ZXNIVE1MID0gbmV3IHRoaXMuYXR0cmlidXRlVGFncyhlcnJvckF0dHJpYnV0ZXMsIG5vblZhbGlkYXRlKS5odG1sO1xyXG4gICAgICAgIFxyXG4gICAgICAgIG5vblZhbGlkYXRlQXR0cmlidXRlc0hUTUwgPSBgJHtub25WYWxpZGF0ZUF0dHJpYnV0ZXNIVE1MfSAke3VpQXR0cmlidXRlc31gO1xyXG5cclxuICAgICAgICBpZiAobGFiZWxIVE1MKSBsYWJlbCA9IGxhYmVsSFRNTDtcclxuXHJcbiAgICAgICAgbGV0IGlucHV0SFRNTCA9IGAgXHJcbiAgICAgICAgICAgIDxsYWJlbCBmb3I9XCIke2lkfVwiPiAke2xhYmVsfSA8L2xhYmVsPlxyXG4gICAgICAgICAgICA8aW5wdXQgY2xhc3M9XCIke2NsYXNzZXN9XCIgIGlkPVwiJHtpZH1cIiBuYW1lPVwiJHtuYW1lfVwiICB0eXBlPVwiZW1haWxcIiAke25vblZhbGlkYXRlQXR0cmlidXRlc0hUTUx9ICAgJHtlcnJvclRhZ3N9ICR7dGFnc30+XHJcbiAgICAgICAgICAgICR7ZXJyb3JIVE1MfVxyXG4gICAgICAgYDtcclxuXHJcbiAgICAgICAgcmV0dXJuIGAke2lucHV0SFRNTH1gO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHtTdHlsZX0gZnJvbSAnLi9zdHlsZSc7XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIGZvcm0gd3JhcHBlciBhcm91bmQgdGhlc2UgaW5wdXRzIGFuZCBhIFxyXG4gKiBzdWJtaXQgYnV0dG9uIHRvIHN1Ym1pdCB0aGUgZm9ybS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBGb3JtIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHMgdXAgdGhlIHZhcmlvdXMgZGF0YSB0byByZW5kZXIgdGhpcyBmb3JtLlxyXG4gICAgICogQHBhcmFtIHthcnJheX0gaW5wdXRIVE1MIC0gQWxsIGlucHV0IGRhdGEgdG8gYmUgYWRkZWQgdG8gdGhpcyBmb3JtIFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBuYW1lIG9mIHRoaXMgZm9ybSBcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhZGRpdGlvbmFsQXR0ckhUTUwgLSBBdHRyaWJ1dGVzIHRoYXQgbmVlZCB0byBiZSBcclxuICAgICAqIGFkZGVkIHRvIHRoZSBmb3JtIHByaW1hcmlseSB1c2VkIGZvciB2YWxpZGF0aW9uIGFuZCBzdWJtaXQgZnVuY3Rpb25zLlxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHNldHRpbmdzIC0gR2xvYmFsIHNldHRpbmdzIGZvciB0aGlzIGZvcm0uXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGlucHV0SFRNTCwgbmFtZSwgYWRkaXRpb25hbEF0dHJIVE1MLCBzZXR0aW5ncywgc3R5bGUgPSBTdHlsZSkge1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBbGwgaW5wdXQgaHRtbCBpbmZvcm1hdGlvbiBmb3IgdGhpcyBcclxuICAgICAgICAgKiBmb3JtXHJcbiAgICAgICAgICogQHR5cGUge1N0cmluZ31cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmlucHV0SFRNTCA9IGlucHV0SFRNTDtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogTmFtZSBmb3IgdGhpcyBmb3JtIFxyXG4gICAgICAgICAqIEB0eXBlIHtTdHJpbmd9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQWRkaXRpb25hbCB0YWdzIHRvIGFkZCB0byB0aGlzIGZvcm0gXHJcbiAgICAgICAgICogQHR5cGUge1N0cmluZ31cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmFkZGl0aW9uYWxBdHRySFRNTCA9IGFkZGl0aW9uYWxBdHRySFRNTDtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU2V0dGluZ3MgZm9yIHRoaXMgZW50aXJlIGZvcm0gXHJcbiAgICAgICAgICogQHR5cGUge09iamVjdH1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnNldHRpbmdzID0gc2V0dGluZ3M7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNldHRpbmdzIGZvciB0aGlzIHN1Ym1pdCBidXR0b24gXHJcbiAgICAgICAgICogQHR5cGUge09iamVjdH1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnN1Ym1pdCA9IHNldHRpbmdzLnN1Ym1pdDtcclxuICAgICAgICB0aGlzLnN0eWxlID0gbmV3IHN0eWxlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbnkgZGVmYXVsdCBVSSBjbGFzc2VzIHRvIGFkZCB0byB0aGlzIGZvcm0gXHJcbiAgICAgKiBAdHlwZSB7U3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBnZXQgZm9ybUNsYXNzZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuICdyb3cnXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW5kZXJzIHRoZSBIVE1MIHRvIHJlbmRlciB0aGUgXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogRm9ybS5zZXR0aW5ncyA9IHtcclxuICAgICAqICAgICBzdWJtaXQgOiB7XHJcbiAgICAgKiAgICAgICAgIGxhYmVsIDogXCJNeSBuZXcgc3VibWl0IGxhYmVsXCIsXHJcbiAgICAgKiAgICAgICAgIGlucHV0IDoge1xyXG4gICAgICogICAgICAgICAgICBjbGFzc2VzIDogXCJteS1zdWJtaXQtaW5wdXRcIlxyXG4gICAgICogICAgICAgICB9LFxyXG4gICAgICogICAgICAgICBjb250YWluZXIgOiB7XHJcbiAgICAgKiAgICAgICAgICAgICBjbGFzc2VzIDogXCJteS1zdWJtaXQtY29udGFpbmVyXCJcclxuICAgICAqICAgICAgICAgfVxyXG4gICAgICogICAgIH1cclxuICAgICAqIH07XHJcbiAgICAgKiBcclxuICAgICAqIC8vV2lsbCBSZW5kZXIgXHJcbiAgICAgKiBcclxuICAgICAqIDxkaXYgY2xhc3M9XCJpdnhqcy1ncmlkLTEtMSBteS1zdWJtaXQtY29udGFpbmVyXCI+XHJcbiAgICAgKiAgICAgPGJ1dHRvbiBjbGFzcz1cIm15LXN1Ym1pdC1pbnB1dFwiIHR5cGU9XCJzdWJtaXRcIj5cclxuICAgICAqICAgICAgICAgIE15IG5ldyBzdWJtaXQgbGFiZWwgXHJcbiAgICAgKiAgICAgPC9idXR0b24+XHJcbiAgICAgKiA8L2Rpdj5cclxuICAgICAqIFxyXG4gICAgICogQHR5cGUge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0IHN1Ym1pdEJ1dHRvbkhUTUwoKSB7XHJcbiAgICAgICAgbGV0IHtzdWJtaXQgPSB7fX0gPSB0aGlzO1xyXG4gICAgICAgIGxldCB7bGFiZWw6IHN1Ym1pdExhYmVsID0gXCJTdWJtaXRcIiwgbGFiZWxIVE1MOiBzdWJtaXRMYWJlbEhUTUwsIGlucHV0OiBzdWJtaXRJbnB1dCA9IHt9LCBjb250YWluZXI6IHN1Ym1pdENvbnRhaW5lciA9IHt9LCBhdHRyaWJ1dGVzID0gJyd9ID0gc3VibWl0O1xyXG4gICAgICAgIGxldCB7Y2xhc3Nlczogc3VibWl0SW5wdXRDbGFzc2VzID0gXCJcIn0gPSBzdWJtaXRJbnB1dDtcclxuICAgICAgICBsZXQge2NsYXNzZXM6IHN1Ym1pdENvbnRhaW5lckNsYXNzZXMgPSBcIlwifSA9IHN1Ym1pdENvbnRhaW5lcjtcclxuXHJcbiAgICAgICAgc3VibWl0TGFiZWwgPSBzdWJtaXRMYWJlbEhUTUwgPyBzdWJtaXRMYWJlbEhUTUwgOiBzdWJtaXRMYWJlbDtcclxuXHJcbiAgICAgICAgbGV0IHN1Ym1pdEhUTUwgPSBzdWJtaXRMYWJlbC5sZW5ndGggPj0gMCA/XHJcbiAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIml2eGpzLWdyaWQtMS0xICR7c3VibWl0Q29udGFpbmVyQ2xhc3Nlc31cIj5cclxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cIiR7c3VibWl0SW5wdXRDbGFzc2VzfVwiIHR5cGU9J3N1Ym1pdCcgJHthdHRyaWJ1dGVzfT5cclxuICAgICAgICAgICAgICAgICAgICAke3N1Ym1pdExhYmVsfVxyXG4gICAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIGAgOiAnJztcclxuXHJcbiAgICAgICAgcmV0dXJuIHN1Ym1pdEhUTUw7XHJcbiAgICB9XHJcblxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIFdyYXBzIGVhY2ggaW5wdXQncyBodG1sIGludG8gYSBjb250YWluZXIgc28gdGhleSBjYW4gYmUgZm9ybWF0dGVkIGNvcnJlY3RseVxyXG4gICAgICogdXRpbGl6aW5nIHRoZSBpdnhqcy5jc3MncyBncmlkIHN5c3RlbS5cclxuICAgICAqIEB0eXBle1N0cmluZ30gXHJcbiAgICAgKi9cclxuICAgIGdldCBodG1sKCkge1xyXG4gICAgICAgIGxldCB7aW5wdXRIVE1MLCBuYW1lLCBhZGRpdGlvbmFsQXR0ckhUTUwsIHNldHRpbmdzLCBmb3JtQ2xhc3Nlc30gPSB0aGlzO1xyXG4gICAgICAgIGxldCB7c3VibWl0ID0ge30sIGNsYXNzZXM6IGNvbmZpZ0Zvcm1DbGFzc2VzID0gJycsIGlkIDogZm9ybUlkLCBsYWJlbCA9ICcnLCBsYWJlbEhUTUx9ID0gc2V0dGluZ3M7XHJcblxyXG4gICAgICAgIGlmKGxhYmVsSFRNTCkgbGFiZWwgPSBsYWJlbEhUTUw7XHJcbiAgICAgICBcclxuICAgICAgICBpZiAoIXNldHRpbmdzLmhpZGVTdWJtaXQpIHtcclxuICAgICAgICAgICAgaW5wdXRIVE1MLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgc2V0dGluZ3M6IHN1Ym1pdCxcclxuICAgICAgICAgICAgICAgIGh0bWw6IHRoaXMuc3VibWl0QnV0dG9uSFRNTFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBjb250ZW50cyA9IHRoaXMuc3R5bGUuYWRkV2lkdGhDbGFzc2VzKGlucHV0SFRNTCk7XHJcblxyXG4gICAgICAgIHJldHVybiBgXHJcbiAgICAgICAgICAgICR7bGFiZWx9XHJcbiAgICAgICAgICAgIDxmb3JtIGlkPVwiJHtmb3JtSWR9LWZvcm1cIiBjbGFzcz1cIiR7Zm9ybUNsYXNzZXN9ICR7Y29uZmlnRm9ybUNsYXNzZXN9XCIgbm92YWxpZGF0ZSBuYW1lPVwiJHtuYW1lfVwiICR7YWRkaXRpb25hbEF0dHJIVE1MfT4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAke2NvbnRlbnRzfVxyXG4gICAgICAgICAgICA8L2Zvcm0+XHJcbiAgICAgICAgYDtcclxuICAgIH1cclxufSIsIi8vIEZvcm0vSW5wdXQgSFRNTFxyXG5pbXBvcnQgeyBGb3JtIH0gZnJvbSAnLi9mb3JtLmpzJztcclxuaW1wb3J0IHsgQW5jaG9yIH0gZnJvbSAnLi9hbmNob3IuanMnO1xyXG5pbXBvcnQgeyBCdXR0b25zIH0gZnJvbSAnLi9idXR0b25zLmpzJztcclxuaW1wb3J0IHsgQ2hlY2tib3ggfSBmcm9tICcuL2NoZWNrYm94LmpzJztcclxuaW1wb3J0IHsgRGF0ZSB9IGZyb20gJy4vZGF0ZS5qcyc7XHJcbmltcG9ydCB7IERhdGV0aW1lTG9jYWwgfSBmcm9tICcuL2RhdGV0aW1lLWxvY2FsLmpzJztcclxuaW1wb3J0IHsgRW1haWwgfSBmcm9tICcuL2VtYWlsLmpzJztcclxuaW1wb3J0IHsgTnVtYmVyIH0gZnJvbSAnLi9udW1iZXIuanMnO1xyXG5pbXBvcnQgeyBPcHRpb25zIH0gZnJvbSBcIi4vb3B0aW9ucy5qc1wiO1xyXG5pbXBvcnQgeyBSYWRpbyB9IGZyb20gXCIuL3JhZGlvLmpzXCI7XHJcbmltcG9ydCB7IFN0eWxlIH0gZnJvbSBcIi4vc3R5bGUuanNcIjtcclxuaW1wb3J0IHsgVGV4dCB9IGZyb20gJy4vdGV4dC5qcyc7XHJcbmltcG9ydCB7IFRleHRhcmVhIH0gZnJvbSAnLi90ZXh0YXJlYS5qcyc7XHJcbmltcG9ydCB7IFVybCB9IGZyb20gJy4vdXJsLmpzJztcclxuXHJcbi8vU3RhdGVzXHJcbmltcG9ydCB7IElucHV0U3RhdGUgfSBmcm9tICcuL3N0YXRlLmlucHV0LmpzJztcclxuaW1wb3J0IHsgVmlkZW9TdGF0ZSB9IGZyb20gJy4vc3RhdGUudmlkZW8uanMnO1xyXG5pbXBvcnQgeyBOYXZpZ2F0aW9uU3RhdGUgfSBmcm9tICcuL3N0YXRlLm5hdmlnYXRpb24uanMnO1xyXG5cclxuLy9Db250cm9scyBcclxuaW1wb3J0IFZpZGVvQ29udHJvbHMgZnJvbSAnLi92aWRlby5jb250cm9scy5qcyc7XHJcblxyXG4vKipcclxuICogUmVnaXN0ZXJzIGFsbCB0aGUgdmFyaW91cyBkZWZhdWx0IFVJIGNsYXNzZXMgdG8gXHJcbiAqIHRoaXMgY2xhc3MgdG8gYmUgdXNlZCBieSB2YXJpb3VzIHJlbmRlcnMuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRGVmYXVsdFVJIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEJ5IGRlZmF1bHQsIHRoaXMgVUkgZnJhbWV3b3JrIHNob3VsZCBzdXBwb3J0IHRoZSBmb2xsb3dpbmcgaW5wdXRzOlxyXG4gICAgICogXHJcbiAgICAgKiAqIGZvcm1cclxuICAgICAqICogYnV0dG9uIFxyXG4gICAgICogKiBjaGVja2JveFxyXG4gICAgICogKiBkYXRlXHJcbiAgICAgKiAqIGRhdGV0aW1lLWxvY2FsIFxyXG4gICAgICogKiBlbWFpbCBcclxuICAgICAqICogbnVtYmVyIFxyXG4gICAgICogKiBzZWxlY3Qvb3B0aW9ucyBcclxuICAgICAqICogcmFkaW8gYnV0dG9ucyBcclxuICAgICAqICogdGV4dCBcclxuICAgICAqICogdGV4dGFyZWEgXHJcbiAgICAgKiAqIHVybCBcclxuICAgICAqICogdmlkZW8uY29udHJvbHNcclxuICAgICAqIFxyXG4gICAgICogUHJvdmlkZSB0aGUgaHRtbCBmb3IgdGhlIGZvbGxvd2luZyBzdGF0ZSB0eXBlczpcclxuICAgICAqIFxyXG4gICAgICogKiBpbnB1dCBcclxuICAgICAqICogdmlkZW9cclxuICAgICAqIFxyXG4gICAgICogXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuZm9ybSA9IEZvcm07XHJcbiAgICAgICAgdGhpcy5hbmNob3IgPSBBbmNob3I7XHJcbiAgICAgICAgdGhpcy5idXR0b25zID0gQnV0dG9ucztcclxuICAgICAgICB0aGlzLmNoZWNrYm94ID0gQ2hlY2tib3g7XHJcbiAgICAgICAgdGhpcy5kYXRlID0gRGF0ZTtcclxuICAgICAgICB0aGlzLmRhdGV0aW1lTG9jYWwgPSBEYXRldGltZUxvY2FsO1xyXG4gICAgICAgIHRoaXMuZW1haWwgPSBFbWFpbDtcclxuICAgICAgICB0aGlzLm51bWJlciA9IE51bWJlcjtcclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBPcHRpb25zO1xyXG4gICAgICAgIHRoaXMucmFkaW8gPSBSYWRpbzsgICAgXHJcbiAgICAgICAgdGhpcy5zdHlsZSA9IG5ldyBTdHlsZSgpO1xyXG4gICAgICAgIHRoaXMudGV4dCA9IFRleHQ7XHJcbiAgICAgICAgdGhpcy50ZXh0YXJlYSA9IFRleHRhcmVhO1xyXG4gICAgICAgIHRoaXMudXJsID0gVXJsO1xyXG4gICAgICAgIHRoaXMudmlkZW9Db250cm9scyA9IFZpZGVvQ29udHJvbHM7XHJcbiAgICAgICAgdGhpcy5zdGF0ZXMgPSB7XHJcbiAgICAgICAgICAgIGlucHV0IDogSW5wdXRTdGF0ZSxcclxuICAgICAgICAgICAgdmlkZW8gOiBWaWRlb1N0YXRlLFxyXG4gICAgICAgICAgICBuYXZpZ2F0aW9uOiBOYXZpZ2F0aW9uU3RhdGVcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCIvKipcclxuICogSW5kaWNhdGVzIGVycm9ycyBmb3IgZWFjaCBpbnB1dCBiYXNlZCBvbiB0aGUgXHJcbiAqIGF0dHJpYnV0ZXMgY3JlYXRlZCBmcm9tIHRoZSB2YXJpb3VzIHJlbmRlcmluZyBsaWJyYXJpZXNcclxuICogaVZYanMgdXNlcy4gXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRXJyb3JNZXNzYWdlcyB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBCcmluZ3MgaW4gYWxsIHRoZSBwb3NzaWJsZSBlcnJvciBtZXNzYWdlcyBcclxuICAgICAqIHRoaXMgaW5wdXQgY2FuIHByb2R1Y2UuXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGVycm9yTWVzc2FnZXMgLSBsaXN0IG9mIGFsbCBwb3NzaWJsZSBcclxuICAgICAqIGVycm9yIG1lc3NhZ2VzIHdpdGggYXR0cmlidXRlcyBpbmRpY2F0aW5nIHRoZSBtZXNzYWdlIFxyXG4gICAgICogYW5kIHRoZSBjb25kaXRpb25zIGluIHdoaWNoIHRvIHNob3cgdGhlbS5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoZXJyb3JNZXNzYWdlcyA9IFtdKSB7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIExpc3Qgb2YgYWxsIHBvc3NpYmxlIGVycm9yIG1lc3NhZ2VzLlxyXG4gICAgICAgICAqIEB0eXBlIHtBcnJheX1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmVycm9yTWVzc2FnZXMgPSBlcnJvck1lc3NhZ2VzO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHMgdGhlIGNsYXNzZXMgZm9yIHRoZSBlcnJvciBtZXNzYWdlIGRpdi5cclxuICAgICAqIEB0eXBlIHtTdHJpbmd9IFxyXG4gICAgICovXHJcbiAgICBnZXQgbWVzc2FnZUNsYXNzZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuICdlcnJvci1tZXNzYWdlJztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgY2xhc3NlcyBmb3IgdGhlIGNvbnRhaW5lciBvZiBhbGwgZXJyb3IgbWVzc2FnZXMuXHJcbiAgICAgKiBAdHlwZSB7U3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBnZXQgY29udGFpbmVyQ2xhc3NlcygpIHtcclxuICAgICAgICByZXR1cm4gJ2Vycm9yLW1lc3NhZ2VzJztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbmRlcnMgdGhlIEhUTUwgZm9yIGFsbCBlcnJvciBtZXNzYWdlcyBhbmQgdGhlIGNvbnRhaW5lciB3aXRoIFxyXG4gICAgICogdGhlbS4gUmVzdWx0czpcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiA8ZGl2IGNsYXNzPVwiZXJyb3ItbWVzc2FnZXNcIj5cclxuICAgICAqICAgIDxzcGFuIGNsYXNzPVwiZXJyb3ItbWVzc2FnZVwiPk1FU1NBR0U8L3NwYW4+XHJcbiAgICAgKiA8L2Rpdj5cclxuICAgICAqIEB0eXBlIHtTdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGdldCBodG1sKCkge1xyXG4gICAgICAgIGxldCB7ZXJyb3JNZXNzYWdlcywgbWVzc2FnZUNsYXNzZXMsIGNvbnRhaW5lckNsYXNzZXN9ID0gdGhpcztcclxuICAgICAgICBsZXQgZXJyb3JNZXNzYWdlSFRNTCA9IGVycm9yTWVzc2FnZXMucmVkdWNlKChlcnJvck1lc3NhZ2VIVE1MLCBlcnJvck1lc3NhZ2UsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBgJHtlcnJvck1lc3NhZ2VIVE1MfTxzcGFuIGNsYXNzPVwiJHttZXNzYWdlQ2xhc3Nlc31cIiAke2Vycm9yTWVzc2FnZS5hdHRySFRNTH0+XHJcbiAgICAgICAgICAgICAgICAgICAgJHtlcnJvck1lc3NhZ2UubWVzc2FnZX1cclxuICAgICAgICAgICAgICAgIDwvc3Bhbj5gXHJcbiAgICAgICAgfSwgJycpO1xyXG5cclxuICAgICAgICBpZiAoZXJyb3JNZXNzYWdlSFRNTC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBgPGRpdiBjbGFzcz0nJHtjb250YWluZXJDbGFzc2VzfSc+XHJcbiAgICAgICAgICAgICAgICAke2Vycm9yTWVzc2FnZUhUTUx9XHJcbiAgICAgICAgICAgIDwvZGl2PmBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxufSIsImltcG9ydCB7RXJyb3JNZXNzYWdlc30gZnJvbSBcIi4vbWVzc2FnZXMuanNcIjtcclxuaW1wb3J0IHtBdHRyaWJ1dGVUYWdzfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2F0dHJpYnV0ZXMuanNcIjtcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgbnVtYmVyIGlucHV0IHRoYXQgd2lsbCByZWNvcmQgbnVtYmVycyAgXHJcbiAqIGZvciBpVlhqcy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBOdW1iZXIge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWNjZXB0cyBhbiBpbnB1dCBvYmplY3Qgd2l0aCB2YXJpb3VzIGlucHV0IHNldHRpbmdzIGFuZCBVSSBzcGVjaWZpYyBlcnJvciBcclxuICAgICAqIG1lc3NhZ2VzXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gaW5wdXRPYmogLSB2YXJpb3VzIGlucHV0IHNldHRpbmdzIHRvIHJlbmRlciB0aGlzIG51bWJlciBpbnB1dCBib3hcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBpbnB1dE9iai5pbnB1dCAtIGlucHV0IHNwZWNpZmljIHNldHRpbmdzIGZvciB0aGlzIG51bWJlciBpbnB1dCBcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBpbnB1dE9iai5zZXR0aW5ncyAtIGdsb2JhbCBzZXR0aW5ncyBmb3IgdGhpcyBudW1iZXIgaW5wdXQgXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaW5wdXRPYmoudGFncyAtIGlucHV0IHNwZWNpZmljIGF0dHJpYnV0ZSB0YWdzIFxyXG4gICAgICogQHBhcmFtIHtjbGFzc30gaW5wdXRPYmouZXJyb3JzIC0gZXJyb3JzIGZyb20gYSByZW5kZXJpbmcgZm9yIHZhbGlkYXRpb24gYW5kIFxyXG4gICAgICogZXJyb3IgbWVzc2FnaW5nIGFwcGVhcmFuY2UuXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gZXJyb3JNZXNzYWdlcyAtIFVJIHNwZWNpZmljIEVycm9yIG1lc3NhZ2VzIFxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihpbnB1dE9iaiA9IHt9LCBlcnJvck1lc3NhZ2VzID0gRXJyb3JNZXNzYWdlcykge1xyXG4gICAgICAgIGxldCB7aW5wdXQgPSB7fSwgc2V0dGluZ3MgPSB7fSwgdGFncyA9IHt9LCBlcnJvcnMgPSB7fX0gPSBpbnB1dE9iajtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSW5wdXQgc3BlY2lmaWMgc2V0dGluZ3MgZm9yIHRoaXMgbnVtYmVyIGlucHV0XHJcbiAgICAgICAgICogQHR5cGUge29iamVjdH0gIFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuaW5wdXQgPSBpbnB1dDtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBJbnB1dCBzcGVjaWZpYyBzZXR0aW5ncyBmb3IgdGhpcyBudW1iZXIgaW5wdXRcclxuICAgICAgICAqIEB0eXBlIHtvYmplY3R9ICBcclxuICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBzZXR0aW5ncztcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBUYWdzIHRvIGJlIGFkZGVkIHRvIHRoaXMgbnVtYmVyIGlucHV0XHJcbiAgICAgICAgKiBAdHlwZSB7U3RyaW5nfVxyXG4gICAgICAgICovXHJcbiAgICAgICAgdGhpcy50YWdzID0gdGFncztcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBIb2xkcyBhbGwgdmFsaWRhdGlvbiBlcnJvciBjb3JyZWN0aW5nLlxyXG4gICAgICAgICogQHR5cGUge0NsYXNzfVxyXG4gICAgICAgICovXHJcbiAgICAgICAgdGhpcy5lcnJvcnMgPSBlcnJvcnM7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogUmVuZGVycyBVSSBzcGVjaWZpYyBlcnJvciBtZXNzYWdlcyBieSB1dGlsaXppbmcgdGhlIFxyXG4gICAgICAgICogZXJyb3IgY2xhc3MgcGFzc2VkIGRvd24gdG8ga2VlcCBpdCBjb25zaXN0ZW50IHdpdGggdGhlIFxyXG4gICAgICAgICogY3VycmVudCBVSSBmcmFtZXdvcmsuXHJcbiAgICAgICAgKiBAdHlwZSB7Q2xhc3N9XHJcbiAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmVycm9yTWVzc2FnZXMgPSBlcnJvck1lc3NhZ2VzO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAqIENvbnZlcnRzIGF0dHJpYnV0ZSBkYXRhIGludG8gYXR0cmlidXRlIEhUTUwgZm9yIFxyXG4gICAgICAgICogYXR0cmlidXRlcyBub3QgY292ZXJlZCBieSB0aGUgZXJyb3JzIGNsYXNzLlxyXG4gICAgICAgICogQHR5cGUge0NsYXNzfVxyXG4gICAgICAgICovXHJcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVUYWdzID0gQXR0cmlidXRlVGFncztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIERlZmF1bHQgdWkgY2xhc3NlcyB0byBhZGQgdG8gYWxsIG51bWJlciBpbnB1dHMgXHJcbiAgICAgKiBAdHlwZSB7U3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBnZXQgdWlDbGFzc2VzKCkge1xyXG4gICAgICAgIHJldHVybiAnJ1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBEZWZhdWx0IHVpIGF0dHJpYnV0ZXMgdG8gYWRkIHRvIHRoaXMgZW1haWwgaW5wdXQgXHJcbiAgICAqIHRoYXQgYXJlbid0IGNvdmVyZWQgYnkgdGhlIHRhZ3Mgb3IgZXJyb3JzIGFib3ZlLlxyXG4gICAgKiBAdHlwZSB7U3RyaW5nfVxyXG4gICAgKi9cclxuICAgIGdldCB1aUF0dHJpYnV0ZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuICcnXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgSFRNTCB0byByZW5kZXIgYSBudW1iZXIgaW5wdXQgYmFzZWQgb24gdGhlIHNldHRpbmdzIGZyb20gdGhlIFxyXG4gICAgICogY29uc3RydWN0b3IuIFxyXG4gICAgICogXHJcbiAgICAgKiBAZXhhbXBsZSBcclxuICAgICAqIC8vRGF0YSBcclxuICAgICAqIGlucHV0LmxhYmVsID0gXCI8aDE+TGFiZWw8L2gxPlwiO1xyXG4gICAgICogc2V0dGluZ3MuY2xhc3NlcyA9IFwiY2xhc3MtMVwiO1xyXG4gICAgICogZXJyb3JzLnRhZ3MgPSBcInJlcXVpcmVkPSd0cnVlJ1wiO1xyXG4gICAgICogTnVtYmVyLnVpQ2xhc3NlcyA9ICd1aS1jbGFzc2VzLTEnO1xyXG4gICAgICogaW5wdXQuYXR0cmlidXRlcyA9IHtcclxuICAgICAqICAgICBcInN0ZXBcIiA6IFwiMC4xXCJcclxuICAgICAqIH1cclxuICAgICAqIC8vIFJlbmRlcnMgXHJcbiAgICAgKiA8bGFiZWw+XHJcbiAgICAgKiAgICAgIDxoMT5MYWJlbDwvaDE+XHJcbiAgICAgKiA8L2xhYmVsPlxyXG4gICAgICogPGlucHV0IHN0ZXA9XCIwLjFcIiBjbGFzcz1cImNsYXNzLTEgdWktY2xhc3Nlcy0xXCIgdHlwZT1cIm51bWJlclwiIHJlcXVpcmVkPVwidHJ1ZVwiPlxyXG4gICAgICogQHR5cGUge1N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0IGh0bWwoKSB7XHJcbiAgICAgICAgbGV0IHtpbnB1dCwgc2V0dGluZ3MsIHRhZ3MsIGVycm9ycywgdWlDbGFzc2VzLCB1aUF0dHJpYnV0ZXN9ID0gdGhpcztcclxuICAgICAgICBsZXQge2xhYmVsID0gJycsIG5hbWUgPSAnJywgaWQgPSAnJywgbGFiZWxIVE1MfSA9IGlucHV0O1xyXG4gICAgICAgIGxldCB7aW5wdXQ6IGlucHV0U2V0dGluZ3MgPSB7fSwgc2hvd0xhYmVsID0gdHJ1ZX0gPSBzZXR0aW5ncztcclxuICAgICAgICBsZXQge2NsYXNzZXMgPSAnJ30gPSBpbnB1dFNldHRpbmdzO1xyXG5cclxuICAgICAgICBjbGFzc2VzID0gYCR7Y2xhc3Nlc30gJHt1aUNsYXNzZXN9YDtcclxuICAgICAgICBcclxuICAgICAgICBsZXQge21lc3NhZ2VzOiBlcnJvck1lc3NhZ2VzID0gW10sIGF0dHJpYnV0ZXM6IGVycm9yQXR0cmlidXRlcyA9ICcnLCBub25WYWxpZGF0ZSA9IFtdLCB0YWdzOiBlcnJvclRhZ3MgPSAnJ30gPSBlcnJvcnM7XHJcbiAgICAgICAgbGV0IGVycm9ySFRNTCA9IG5ldyB0aGlzLmVycm9yTWVzc2FnZXMoZXJyb3JNZXNzYWdlcykuaHRtbDtcclxuICAgICAgICBsZXQgbm9uVmFsaWRhdGVBdHRyaWJ1dGVzSFRNTCA9IG5ldyB0aGlzLmF0dHJpYnV0ZVRhZ3MoZXJyb3JBdHRyaWJ1dGVzLCBub25WYWxpZGF0ZSkuaHRtbDtcclxuXHJcbiAgICAgICAgbm9uVmFsaWRhdGVBdHRyaWJ1dGVzSFRNTCA9IGAke25vblZhbGlkYXRlQXR0cmlidXRlc0hUTUx9ICR7dWlBdHRyaWJ1dGVzfWA7XHJcblxyXG4gICAgICAgIGlmIChsYWJlbEhUTUwpIGxhYmVsID0gbGFiZWxIVE1MO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCBpbnB1dEhUTUwgPSBgIFxyXG4gICAgICAgICAgICA8bGFiZWwgZm9yPVwiJHtpZH1cIj4gJHtsYWJlbH0gPC9sYWJlbD5cclxuICAgICAgICAgICAgPGlucHV0IGNsYXNzPVwiJHtjbGFzc2VzfVwiICBuYW1lPVwiJHtuYW1lfVwiICB0eXBlPVwibnVtYmVyXCIgJHtub25WYWxpZGF0ZUF0dHJpYnV0ZXNIVE1MfSAgICR7ZXJyb3JUYWdzfSAke3RhZ3N9PlxyXG4gICAgICAgICAgICAke2Vycm9ySFRNTH1cclxuICAgICAgIGA7XHJcblxyXG4gICAgICAgIHJldHVybiBgJHtpbnB1dEhUTUx9YDtcclxuICAgIH1cclxufSIsImltcG9ydCB7IFN0eWxlIH0gZnJvbSBcIi4vc3R5bGVcIjtcclxuaW1wb3J0IHsgRXJyb3JNZXNzYWdlcyB9IGZyb20gXCIuL21lc3NhZ2VzLmpzXCI7XHJcbmltcG9ydCB7IEF0dHJpYnV0ZVRhZ3MgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2F0dHJpYnV0ZXMuanNcIjtcclxuXHJcbmxldCBzdHlsZSA9IG5ldyBTdHlsZSgpO1xyXG5cclxuZXhwb3J0IGNsYXNzIE9wdGlvbnMge1xyXG4gICAgY29uc3RydWN0b3IoaW5wdXRPYmosIGVycm9yTWVzc2FnZXMgPSBFcnJvck1lc3NhZ2VzKSB7XHJcbiAgICAgICAgbGV0IHtpbnB1dCwgZGVmYXVsdERpc3BsYXkgPSAnJywgc2V0dGluZ3MgPSB7fSwgdGFncyA9ICcnLCBlcnJvcnMgPSB7fX0gPSBpbnB1dE9iajtcclxuXHJcbiAgICAgICAgdGhpcy50YWdzID0gdGFncztcclxuICAgICAgICB0aGlzLmlucHV0ID0gaW5wdXQ7XHJcbiAgICAgICAgdGhpcy5kZWZhdWx0RGlzcGxheSA9IGRlZmF1bHREaXNwbGF5O1xyXG4gICAgICAgIHRoaXMuZXJyb3JzID0gZXJyb3JzO1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBzZXR0aW5ncztcclxuICAgICAgICB0aGlzLmVycm9yTWVzc2FnZXMgPSBlcnJvck1lc3NhZ2VzO1xyXG4gICAgICAgIHRoaXMuYXR0cmlidXRlVGFncyA9IEF0dHJpYnV0ZVRhZ3M7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHVpQ2xhc3NlcygpIHtcclxuICAgICAgICByZXR1cm4gJydcclxuICAgIH1cclxuXHJcbiAgICBnZXQgdWlBdHRyaWJ1dGVzKCkge1xyXG4gICAgICAgIHJldHVybiAnJ1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBodG1sKCkge1xyXG4gICAgICAgIGxldCB7dGFncywgaW5wdXQsIGRlZmF1bHREaXNwbGF5LCBlcnJvcnMsIHNldHRpbmdzLCB1aUNsYXNzZXMsIHVpQXR0cmlidXRlc30gPSB0aGlzO1xyXG4gICAgICAgIGxldCB7aWQsIG5hbWUsIG9wdGlvbnMsIGxhYmVsID0gJycsIGxhYmVsSFRNTH0gPSBpbnB1dDtcclxuICAgICAgICBsZXQge2lucHV0OiBpbnB1dFNldHRpbmdzID0ge30sIHNob3dMYWJlbCA9IHRydWV9ID0gc2V0dGluZ3M7XHJcbiAgICAgICAgbGV0IHtjbGFzc2VzID0gJyd9ID0gaW5wdXRTZXR0aW5ncztcclxuXHJcbiAgICAgICAgY2xhc3NlcyA9IGAke2NsYXNzZXN9ICR7dWlDbGFzc2VzfWA7XHJcblxyXG4gICAgICAgIGxldCB7bWVzc2FnZXM6IGVycm9yTWVzc2FnZXMgPSBbXSwgYXR0cmlidXRlczogZXJyb3JBdHRyaWJ1dGVzID0gJycsIG5vblZhbGlkYXRlID0gW10sIHRhZ3M6IGVycm9yVGFncyA9ICcnfSA9IGVycm9ycztcclxuICAgICAgICBsZXQgZGVmYXVsdE9wdGlvblRhZyA9IGA8b3B0aW9uIHZhbHVlPVwiXCI+U2VsZWN0IGFuIG9wdGlvbi4uLjwvb3B0aW9uPmA7XHJcbiAgICAgICAgbGV0IGVycm9ySFRNTCA9IG5ldyB0aGlzLmVycm9yTWVzc2FnZXMoZXJyb3JNZXNzYWdlcykuaHRtbDtcclxuICAgICAgICBsZXQgbm9uVmFsaWRhdGVBdHRyaWJ1dGVzSFRNTCA9IG5ldyB0aGlzLmF0dHJpYnV0ZVRhZ3MoZXJyb3JBdHRyaWJ1dGVzLCBub25WYWxpZGF0ZSkuaHRtbDtcclxuXHJcbiAgICAgICAgbm9uVmFsaWRhdGVBdHRyaWJ1dGVzSFRNTCA9IGAke25vblZhbGlkYXRlQXR0cmlidXRlc0hUTUx9ICR7dWlBdHRyaWJ1dGVzfWA7XHJcblxyXG4gICAgICAgIGlmIChlcnJvckF0dHJpYnV0ZXMucmVxdWlyZWQgfHwgKGRlZmF1bHREaXNwbGF5ICYmIGRlZmF1bHREaXNwbGF5Lmxlbmd0aCA+PSAwKSkge1xyXG4gICAgICAgICAgICBkZWZhdWx0T3B0aW9uVGFnID0gZGVmYXVsdERpc3BsYXkgP1xyXG4gICAgICAgICAgICAgICAgYDxvcHRpb24gdmFsdWU9XCJcIj4ke2RlZmF1bHREaXNwbGF5fTwvb3B0aW9uPmAgOlxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdE9wdGlvblRhZztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChsYWJlbEhUTUwpIGxhYmVsID0gbGFiZWxIVE1MO1xyXG5cclxuICAgICAgICBsZXQgb3B0aW9uc0hUTUwgPSBvcHRpb25zLnJlZHVjZSgob3B0aW9uSFRNTCwgb3B0aW9uKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBgJHtvcHRpb25IVE1MfVxyXG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiJHtvcHRpb24udmFsdWV9XCI+JHtvcHRpb24uZGlzcGxheX08L29wdGlvbj5gXHJcbiAgICAgICAgfSwgJycpXHJcblxyXG4gICAgICAgIGxldCBpbnB1dEhUTUwgPSBgIFxyXG4gICAgICAgICAgICAgPGxhYmVsIGZvcj1cIiR7aWR9XCI+JHtsYWJlbH08L2xhYmVsPiAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgPHNlbGVjdCBjbGFzcz1cIiR7Y2xhc3Nlc31cIiAgaWQ9XCIke2lkfVwiIG5hbWU9XCIke25hbWV9XCIke25vblZhbGlkYXRlQXR0cmlidXRlc0hUTUx9ICR7ZXJyb3JUYWdzfSAke3RhZ3N9PlxyXG4gICAgICAgICAgICAgICAgICAke2RlZmF1bHRPcHRpb25UYWd9XHJcbiAgICAgICAgICAgICAgICAgICR7b3B0aW9uc0hUTUx9XHJcbiAgICAgICAgICAgICAgIDwvc2VsZWN0PlxyXG4gICAgICAgICAgICAgICAke2Vycm9ySFRNTH1gO1xyXG5cclxuICAgICAgICByZXR1cm4gYCR7aW5wdXRIVE1MfWA7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBFcnJvck1lc3NhZ2VzIH0gZnJvbSBcIi4vbWVzc2FnZXMuanNcIjtcclxuaW1wb3J0IHsgQXR0cmlidXRlVGFncyB9IGZyb20gXCIuLi91dGlsaXRpZXMvYXR0cmlidXRlcy5qc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFJhZGlvIHtcclxuICAgIGNvbnN0cnVjdG9yKHJhZGlvSW5wdXRPYmosIGVycm9yTWVzc2FnZXMgPSBFcnJvck1lc3NhZ2VzKSB7XHJcbiAgICAgICAgbGV0IHtpbnB1dCA9IHt9LCByYWRpb3MgPSBbXSwgZXJyb3JzID0ge30sIHNldHRpbmdzID0ge319ID0gcmFkaW9JbnB1dE9iajtcclxuXHJcbiAgICAgICAgdGhpcy5yYWRpb3MgPSByYWRpb3M7XHJcbiAgICAgICAgdGhpcy5lcnJvcnMgPSBlcnJvcnM7XHJcbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9IHNldHRpbmdzO1xyXG4gICAgICAgIHRoaXMuaW5wdXQgPSBpbnB1dDtcclxuICAgICAgICB0aGlzLmVycm9yTWVzc2FnZXMgPSBlcnJvck1lc3NhZ2VzO1xyXG4gICAgICAgIHRoaXMuYXR0cmlidXRlVGFncyA9IEF0dHJpYnV0ZVRhZ3M7XHJcbiAgICB9XHJcblxyXG4gICAgdWlSYWRpb0dyb3VwKHJhZGlvc0hUTUwpIHtcclxuICAgICAgICByZXR1cm4gcmFkaW9zSFRNTDtcclxuICAgIH07XHJcblxyXG4gICAgdWlSYWRpb0J1dHRvbkNvbnRhaW5lcihyYWRpb0hUTUwsIHVpQ2xhc3NlcywgdmFsdWUgPSBcIlwiKSB7XHJcbiAgICAgICAgbGV0IHtpZH0gPSB0aGlzLmlucHV0O1xyXG5cclxuICAgICAgICByZXR1cm4gYCBcclxuICAgICAgICA8bGFiZWwgZm9yPVwiJHtpZH0ke3ZhbHVlLmxlbmd0aCA+IDAgPyAnLScrdmFsdWU6ICcnfVwiIGNsYXNzPVwiJHt1aUNsYXNzZXN9XCI+XHJcbiAgICAgICAgJHtyYWRpb0hUTUx9XHJcbiAgICAgICAgPC9sYWJlbD5gO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlclJhZGlvSFRNTChhdHRySFRNTCwgbGFiZWwpIHtcclxuICAgICAgICByZXR1cm4gYCBcclxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiICR7YXR0ckhUTUx9PlxyXG4gICAgICAgICAgICAke2xhYmVsfWA7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHVpQ2xhc3NlcygpIHtcclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHVpQXR0cmlidXRlcygpIHtcclxuICAgICAgICByZXR1cm4gJydcclxuICAgIH1cclxuXHJcbiAgICBnZXQgaHRtbCgpIHtcclxuICAgICAgICBsZXQge2Vycm9ycywgcmFkaW9zLCBzZXR0aW5ncywgaW5wdXQsIHVpQ2xhc3Nlc30gPSB0aGlzO1xyXG4gICAgICAgIGxldCB7bWVzc2FnZXM6IGVycm9yTWVzc2FnZXMsIHRhZ3M6IGVycm9yVGFncyA9IFwiXCJ9ID0gZXJyb3JzO1xyXG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgICAgICBsZXQge2xhYmVsOiBpbnB1dExhYmVsLCBsYWJlbEhUTUw6IGlucHV0TGFibGVIVE1MfSA9IGlucHV0O1xyXG4gICAgICAgIGxldCB7IHNob3dMYWJlbCA9IHRydWV9ID0gc2V0dGluZ3M7XHJcblxyXG4gICAgICAgIGlmIChpbnB1dExhYmxlSFRNTCkgaW5wdXRMYWJlbCA9IGlucHV0TGFibGVIVE1MO1xyXG5cclxuICAgICAgICBsZXQgcmFkaW9zSFRNTCA9IHJhZGlvcy5yZWR1Y2UoKGh0bWwsIHJhZGlvLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICBsZXQge2xhYmVsLCBhdHRySFRNTCA9ICcnLCBjbGFzc2VzID0gJycsIHZhbHVlfSA9IHJhZGlvO1xyXG5cclxuICAgICAgICAgICAgYXR0ckhUTUwgPSBgJHthdHRySFRNTH0gJHtlcnJvclRhZ3N9YDtcclxuXHJcbiAgICAgICAgICAgIGxldCByYWRpb0hUTUwgPSBzZWxmLnJlbmRlclJhZGlvSFRNTChhdHRySFRNTCwgbGFiZWwsIGlucHV0LnJhZGlvQnV0dG9uc1tpbmRleF0udmFsdWUpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGAke2h0bWx9XHJcbiAgICAgICAgICAgICR7c2VsZi51aVJhZGlvQnV0dG9uQ29udGFpbmVyKHJhZGlvSFRNTCwgYCR7dWlDbGFzc2VzfSAke2NsYXNzZXN9YCwgaW5wdXQucmFkaW9CdXR0b25zW2luZGV4XS52YWx1ZSl9YDtcclxuICAgICAgICB9LCBpbnB1dExhYmVsKTtcclxuICAgICAgICBsZXQgZXJyb3JIVE1MID0gbmV3IHRoaXMuZXJyb3JNZXNzYWdlcyhlcnJvck1lc3NhZ2VzKS5odG1sO1xyXG4gICAgICAgIGxldCBhbGxSYWRpb0J1dHRvbnNIVE1MID0gYFxyXG4gICAgICAgICAgICAgJHtyYWRpb3NIVE1MfVxyXG4gICAgICAgICAgICAgJHtlcnJvckhUTUx9YDtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMudWlSYWRpb0dyb3VwKGFsbFJhZGlvQnV0dG9uc0hUTUwpO1xyXG4gICAgfVxyXG59IiwiZXhwb3J0IGNsYXNzIElucHV0U3RhdGUge1xyXG4gICAgY29uc3RydWN0b3IoZm9ybVNlY3Rpb24sIGRhdGEpIHtcclxuICAgICAgICB0aGlzLmZvcm1TZWN0aW9uID0gZm9ybVNlY3Rpb247XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZGVmYXVsdEhlYWRlckNsYXNzZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG4gICAgZ2V0IGRlZmF1bHRGb290ZXJDbGFzc2VzKCkge1xyXG4gICAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuICAgIGdldCBkZWZhdWx0U2VjdGlvbkNsYXNzZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBodG1sKCkge1xyXG4gICAgICAgIGxldCB7Zm9ybVNlY3Rpb24sIGRhdGEsIGRlZmF1bHRGb290ZXJDbGFzc2VzLCBkZWZhdWx0SGVhZGVyQ2xhc3NlcywgZGVmYXVsdFNlY3Rpb25DbGFzc2VzfSA9IHRoaXM7XHJcbiAgICAgICAgbGV0IHtoZWFkZXIgPSB7fSwgZm9vdGVyID0ge30sIHNlY3Rpb24gPSB7fX0gPSBkYXRhO1xyXG4gICAgICAgIGxldCB7Y2xhc3NlczogaGVhZGVyQ2xhc3NlcyA9ICcnLCBodG1sOiBoZWFkZXJIVE1MID0gYDxoMT4ke2RhdGEubmFtZX08L2gxPmB9ID0gaGVhZGVyO1xyXG4gICAgICAgIGxldCB7Y2xhc3Nlczogc2VjdGlvbkNsYXNzZXMgPSAnJyB9ID0gc2VjdGlvbjtcclxuICAgICAgICBsZXQge2NsYXNzZXM6IGZvb3RlckNsYXNzZXMgPSAnJywgaHRtbDogZm9vdGVySFRNTCA9ICcnfSA9IGZvb3RlcjtcclxuXHJcbiAgICAgICAgcmV0dXJuIGBcclxuICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3M9XCIke3NlY3Rpb25DbGFzc2VzfSAke2RlZmF1bHRTZWN0aW9uQ2xhc3Nlc31cIiBpZD1cIiR7ZGF0YS5pZH1cIj5cclxuICAgICAgICAgICAgICAgICA8aGVhZGVyIGNsYXNzPVwiJHtoZWFkZXJDbGFzc2VzfSAke2RlZmF1bHRIZWFkZXJDbGFzc2VzfVwiPiR7aGVhZGVySFRNTH08L2hlYWRlcj5cclxuICAgICAgICAgICAgICAgICR7Zm9ybVNlY3Rpb259XHJcbiAgICAgICAgICAgICAgICA8Zm9vdGVyIGNsYXNzPVwiJHtmb290ZXJDbGFzc2VzfSAke2RlZmF1bHRGb290ZXJDbGFzc2VzfVwiPiR7Zm9vdGVySFRNTH08L2Zvb3Rlcj5cclxuICAgICAgICAgICAgPC9zZWN0aW9uPmA7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBBdHRyaWJ1dGVUYWdzIH0gZnJvbSAnLi4vdXRpbGl0aWVzL2F0dHJpYnV0ZXMuanMnO1xuXG5leHBvcnQgY2xhc3MgTmF2aWdhdGlvblN0YXRlIHtcbiAgICBjb25zdHJ1Y3RvcihkYXRhLCBsaW5rU2VjdGlvbikge1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLmxpbmtTZWN0aW9uID0gbGlua1NlY3Rpb25cbiAgICB9XG5cbiAgICBnZXQgZGVmYXVsdEhlYWRlckNsYXNzZXMoKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICBnZXQgZGVmYXVsdEZvb3RlckNsYXNzZXMoKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICBnZXQgZGVmYXVsdFNlY3Rpb25DbGFzc2VzKCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgZ2V0IGRlZmF1bHRMaW5rQ29udGFpbmVyQ2xhc3NlcygpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIGdldCBodG1sKCkge1xuICAgICAgICBsZXQge2RhdGEsIGxpbmtTZWN0aW9uLCBkZWZhdWx0Rm9vdGVyQ2xhc3NlcywgZGVmYXVsdEhlYWRlckNsYXNzZXMsIGRlZmF1bHRTZWN0aW9uQ2xhc3NlcywgZGVmYXVsdExpbmtDb250YWluZXJDbGFzc2VzfSA9IHRoaXM7XG4gICAgICAgIGxldCB7aGVhZGVyID0ge30sIGZvb3RlciA9IHt9LCBzZWN0aW9uID0ge30sIGxpbmtDb250YWluZXIgPSB7fX0gPSBkYXRhO1xuICAgICAgICBsZXQge2NsYXNzZXM6IGhlYWRlckNsYXNzZXMgPSAnJywgaHRtbDogaGVhZGVySFRNTCA9IGBgfSA9IGhlYWRlcjtcbiAgICAgICAgbGV0IHtjbGFzc2VzOiBzZWN0aW9uQ2xhc3NlcyA9ICcnfSA9IHNlY3Rpb247XG4gICAgICAgIGxldCB7Y2xhc3NlczogZm9vdGVyQ2xhc3NlcyA9ICcnLCBodG1sOiBmb290ZXJIVE1MID0gJyd9ID0gZm9vdGVyO1xuICAgICAgICBsZXQge2NsYXNzZXM6IGxpbmtDb250YWluZXJDbGFzc2VzID0gJycsIGF0dHJpYnV0ZXM6IGxpbmtDb250YWluZXJBdHRyaWJ1dGVzID0ge319ID0gbGlua0NvbnRhaW5lcjtcbiAgICAgICAgbGV0IGxpbmtDb250YWluZXJBdHRyaWJ1dGVIVE1MID0gbmV3IEF0dHJpYnV0ZVRhZ3MobGlua0NvbnRhaW5lckF0dHJpYnV0ZXMsIE9iamVjdC5rZXlzKGxpbmtDb250YWluZXJBdHRyaWJ1dGVzKSkuaHRtbDtcblxuICAgICAgICByZXR1cm4gYFxuICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3M9XCIke3NlY3Rpb25DbGFzc2VzfSAke2RlZmF1bHRTZWN0aW9uQ2xhc3Nlc31cIiBpZD1cIiR7ZGF0YS5pZH1cIj5cbiAgICAgICAgICAgICAgICAgPGhlYWRlciBjbGFzcz1cIiR7aGVhZGVyQ2xhc3Nlc30gJHtkZWZhdWx0SGVhZGVyQ2xhc3Nlc31cIj4ke2hlYWRlckhUTUx9PC9oZWFkZXI+XG4gICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9JyR7ZGVmYXVsdExpbmtDb250YWluZXJDbGFzc2VzfSAke2xpbmtDb250YWluZXJDbGFzc2VzfScgJHtsaW5rQ29udGFpbmVyQXR0cmlidXRlSFRNTH0+XG4gICAgICAgICAgICAgICAgICAgICR7bGlua1NlY3Rpb259XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGZvb3RlciBjbGFzcz1cIiR7Zm9vdGVyQ2xhc3Nlc30gJHtkZWZhdWx0Rm9vdGVyQ2xhc3Nlc31cIj4ke2Zvb3RlckhUTUx9PC9mb290ZXI+XG4gICAgICAgICAgICA8L3NlY3Rpb24+YDtcbiAgICB9XG59IiwiZXhwb3J0IGNsYXNzIFZpZGVvU3RhdGUge1xyXG4gICAgY29uc3RydWN0b3IocGxheWVyU2VjdGlvbiwgZGF0YSkge1xyXG4gICAgICAgIHRoaXMucGxheWVyU2VjdGlvbiA9IHBsYXllclNlY3Rpb247XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGlQaG9uZUlubGluZUNsYXNzZXMoKSB7XHJcbiAgICAgICAgbGV0IHtpc0lwaG9uZSA9IGZhbHNlfSA9IHRoaXMuZGF0YTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGlzSXBob25lID8gJ2lwaG9uZS1pbmxpbmUnIDogJyc7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGh0bWwoKSB7XHJcbiAgICAgICAgbGV0IHtwbGF5ZXJTZWN0aW9uID0gJycsIGRhdGEgPSB7IG5hbWU6ICcnIH19ID0gdGhpcztcclxuICAgICAgICBsZXQge2hlYWRlcjogaGVhZGVyU2V0dGluZ3MgPSB7fSwgZm9vdGVyOiBmb290ZXJTZXR0aW5ncyA9IHt9LCBzZWN0aW9uOiBzZWN0aW9uU2V0dGluZ3MgPSB7fX0gPSBkYXRhO1xyXG4gICAgICAgIGxldCB7Y2xhc3NlczogaGVhZGVyQ2xhc3NlcyA9ICcnLCBodG1sOiBoZWFkZXJIVE1MID0gYDxoMT4ke2RhdGEubmFtZX08L2gxPmB9ID0gaGVhZGVyU2V0dGluZ3M7XHJcbiAgICAgICAgbGV0IHtjbGFzc2VzOiBzZWN0aW9uQ2xhc3NlcyA9ICcnIH0gPSBzZWN0aW9uU2V0dGluZ3M7XHJcbiAgICAgICAgbGV0IHtjbGFzc2VzOiBmb290ZXJDbGFzc2VzID0gJycsIGh0bWw6IGZvb3RlckhUTUwgPSAnJ30gPSBmb290ZXJTZXR0aW5ncztcclxuXHJcbiAgICAgICAgcmV0dXJuIGBcclxuICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3M9XCIke3NlY3Rpb25DbGFzc2VzfVwiIGlkPVwiJHtkYXRhLmlkfVwiPlxyXG4gICAgICAgICAgICAgICAgPGhlYWRlciBjbGFzcz1cIiR7aGVhZGVyQ2xhc3Nlc31cIj4ke2hlYWRlckhUTUx9PC9oZWFkZXI+XHJcbiAgICAgICAgICAgICAgICAke3BsYXllclNlY3Rpb259XHJcbiAgICAgICAgICAgICAgICA8Zm9vdGVyIGNsYXNzPVwiJHtmb290ZXJDbGFzc2VzfVwiPiR7Zm9vdGVySFRNTH08L2Zvb3Rlcj5cclxuICAgICAgICAgICAgPC9zZWN0aW9uPmA7XHJcbiAgICB9XHJcbn0iLCJleHBvcnQgY2xhc3MgU3R5bGUge1xyXG4gICAgY29uc3RydWN0b3IoKSB7fVxyXG5cclxuICAgIGdldFdpZHRoKHdpZHRoKSB7XHJcbiAgICAgICAgaWYgKHdpZHRoID09PSAnMScpIHJldHVybiAnaXZ4anMtZ3JpZC0xLTEnO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCBncmlkU3RyaW5nID0gd2lkdGgucmVwbGFjZSgnLycsICctJyk7XHJcblxyXG4gICAgICAgIHJldHVybiBgaXZ4anMtZ3JpZC0ke2dyaWRTdHJpbmd9YDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgZ2V0IGNvbnRhaW5lckNsYXNzZXMoKXtcclxuICAgICAgICByZXR1cm4gJ2lucHV0LWNvbnRhaW5lcic7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkV2lkdGhDbGFzc2VzKGlucHV0c0hUTUwpIHtcclxuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgbGV0IHtjb250YWluZXJDbGFzc2VzID0gJyd9ID0gdGhpcztcclxuICAgICAgICBsZXQgY29udGVudHMgPSBpbnB1dHNIVE1MLnJlZHVjZSgoY3VycmVudEhUTUwsIGlucHV0SFRNTCkgPT4ge1xyXG4gICAgICAgICAgICBsZXQge2h0bWwsIHNldHRpbmdzID0ge319ID0gaW5wdXRIVE1MO1xyXG4gICAgICAgICAgICBsZXQge3dpZHRoID0gJzEnLCBjb250YWluZXI9e319ID0gc2V0dGluZ3M7XHJcbiAgICAgICAgICAgIGxldCB7Y2xhc3Nlcz0nJ30gPSBjb250YWluZXI7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjbGFzc2VzID0gYCR7Y2xhc3Nlc30gJHtjb250YWluZXJDbGFzc2VzfWBcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGxldCB0aGlzV2lkdGggPSBzZWxmLmdldFdpZHRoKHdpZHRoKTtcclxuXHJcbiAgICAgICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoXCJpdnhqcy1ncmlkLTEtMVwiLCBgJHt0aGlzV2lkdGh9ICR7Y2xhc3Nlc31gKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBgJHtjdXJyZW50SFRNTH0gJHtodG1sfWA7XHJcbiAgICAgICAgfSwgJycpXHJcblxyXG4gICAgICAgIHJldHVybiBjb250ZW50cztcclxuICAgIH1cclxufSIsImltcG9ydCB7IFN0eWxlIH0gZnJvbSBcIi4vc3R5bGVcIjtcclxuaW1wb3J0IHsgRXJyb3JNZXNzYWdlcyB9IGZyb20gXCIuL21lc3NhZ2VzLmpzXCI7XHJcbmltcG9ydCB7IEF0dHJpYnV0ZVRhZ3MgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2F0dHJpYnV0ZXMuanNcIjtcclxuXHJcbmxldCBzdHlsZSA9IG5ldyBTdHlsZSgpO1xyXG5cclxuZXhwb3J0IGNsYXNzIFRleHQge1xyXG4gICAgY29uc3RydWN0b3IoaW5wdXRPYmogPSB7fSwgZXJyb3JNZXNzYWdlcyA9IEVycm9yTWVzc2FnZXMpIHtcclxuICAgICAgICBsZXQge2lucHV0ID0ge30sIHNldHRpbmdzID0ge30sIHRhZ3MgPSB7fSwgZXJyb3JzID0ge319ID0gaW5wdXRPYmo7XHJcblxyXG4gICAgICAgIHRoaXMuaW5wdXQgPSBpbnB1dDtcclxuICAgICAgICB0aGlzLnNldHRpbmdzID0gc2V0dGluZ3M7XHJcbiAgICAgICAgdGhpcy50YWdzID0gdGFncztcclxuICAgICAgICB0aGlzLmVycm9ycyA9IGVycm9ycztcclxuICAgICAgICB0aGlzLmVycm9yTWVzc2FnZXMgPSBlcnJvck1lc3NhZ2VzO1xyXG4gICAgICAgIHRoaXMuYXR0cmlidXRlVGFncyA9IEF0dHJpYnV0ZVRhZ3M7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHVpQ2xhc3NlcygpIHtcclxuICAgICAgICByZXR1cm4gJydcclxuICAgIH1cclxuXHJcbiAgICBnZXQgdWlBdHRyaWJ1dGVzKCkge1xyXG4gICAgICAgIHJldHVybiAnJ1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBodG1sKCkge1xyXG4gICAgICAgIGxldCB7aW5wdXQsIHNldHRpbmdzLCB0YWdzLCBlcnJvcnMsIHVpQ2xhc3NlcywgdWlBdHRyaWJ1dGVzfSA9IHRoaXM7XHJcbiAgICAgICAgbGV0IHtsYWJlbCA9ICcnLCBsYWJlbEhUTUwsIG5hbWUgPSAnJywgaWQgPSAnJ30gPSBpbnB1dDtcclxuICAgICAgICBsZXQge2lucHV0OiBpbnB1dFNldHRpbmdzID0ge30sIHNob3dMYWJlbCA9IHRydWV9ID0gc2V0dGluZ3M7XHJcbiAgICAgICAgbGV0IHtjbGFzc2VzID0gJyd9ID0gaW5wdXRTZXR0aW5ncztcclxuXHJcbiAgICAgICAgY2xhc3NlcyA9IGAke2NsYXNzZXN9ICR7dWlDbGFzc2VzfWA7XHJcblxyXG4gICAgICAgIGxldCB7bWVzc2FnZXM6IGVycm9yTWVzc2FnZXMgPSBbXSwgYXR0cmlidXRlczogZXJyb3JBdHRyaWJ1dGVzID0gJycsIG5vblZhbGlkYXRlID0gW10sIHRhZ3M6IGVycm9yVGFncyA9ICcnfSA9IGVycm9ycztcclxuICAgICAgICBsZXQgZXJyb3JIVE1MID0gbmV3IHRoaXMuZXJyb3JNZXNzYWdlcyhlcnJvck1lc3NhZ2VzKS5odG1sO1xyXG4gICAgICAgIGxldCBub25WYWxpZGF0ZUF0dHJpYnV0ZXNIVE1MID0gbmV3IHRoaXMuYXR0cmlidXRlVGFncyhlcnJvckF0dHJpYnV0ZXMsIG5vblZhbGlkYXRlKS5odG1sO1xyXG5cclxuICAgICAgICBub25WYWxpZGF0ZUF0dHJpYnV0ZXNIVE1MID0gYCR7bm9uVmFsaWRhdGVBdHRyaWJ1dGVzSFRNTH0gJHt1aUF0dHJpYnV0ZXN9YDtcclxuXHJcbiAgICAgICAgaWYgKGxhYmVsSFRNTCkgbGFiZWwgPSBsYWJlbEhUTUw7XHJcblxyXG4gICAgICAgIGxldCBpbnB1dEhUTUwgPSBgIFxyXG4gICAgICAgICAgICA8bGFiZWwgZm9yPVwiJHtpZH1cIj4gJHtsYWJlbH0gPC9sYWJlbD5cclxuICAgICAgICAgICAgPGlucHV0IGNsYXNzPVwiJHtjbGFzc2VzfVwiICBpZD1cIiR7aWR9XCIgbmFtZT1cIiR7bmFtZX1cIiAgdHlwZT1cInRleHRcIiAke25vblZhbGlkYXRlQXR0cmlidXRlc0hUTUx9ICAgJHtlcnJvclRhZ3N9ICR7dGFnc30+XHJcbiAgICAgICAgICAgICR7ZXJyb3JIVE1MfVxyXG4gICAgICAgYDtcclxuXHJcbiAgICAgICAgcmV0dXJuIGAke2lucHV0SFRNTH1gO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgU3R5bGUgfSBmcm9tIFwiLi9zdHlsZVwiO1xyXG5pbXBvcnQgeyBFcnJvck1lc3NhZ2VzIH0gZnJvbSBcIi4vbWVzc2FnZXMuanNcIjtcclxuaW1wb3J0IHsgQXR0cmlidXRlVGFncyB9IGZyb20gXCIuLi91dGlsaXRpZXMvYXR0cmlidXRlcy5qc1wiO1xyXG5cclxubGV0IHN0eWxlID0gbmV3IFN0eWxlKCk7XHJcblxyXG5leHBvcnQgY2xhc3MgVGV4dGFyZWEge1xyXG4gICAgY29uc3RydWN0b3IoaW5wdXRPYmogPSB7fSwgZXJyb3JNZXNzYWdlcyA9IEVycm9yTWVzc2FnZXMpIHtcclxuICAgICAgICBsZXQge2lucHV0ID0ge30sIHNldHRpbmdzID0ge30sIHRhZ3MgPSB7fSwgZXJyb3JzID0ge319ID0gaW5wdXRPYmo7XHJcblxyXG4gICAgICAgIHRoaXMuaW5wdXQgPSBpbnB1dDtcclxuICAgICAgICB0aGlzLnNldHRpbmdzID0gc2V0dGluZ3M7XHJcbiAgICAgICAgdGhpcy50YWdzID0gdGFncztcclxuICAgICAgICB0aGlzLmVycm9ycyA9IGVycm9ycztcclxuICAgICAgICB0aGlzLmVycm9yTWVzc2FnZXMgPSBlcnJvck1lc3NhZ2VzO1xyXG4gICAgICAgIHRoaXMuYXR0cmlidXRlVGFncyA9IEF0dHJpYnV0ZVRhZ3M7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHVpQ2xhc3NlcygpIHtcclxuICAgICAgICByZXR1cm4gJydcclxuICAgIH1cclxuXHJcbiAgICBnZXQgdWlBdHRyaWJ1dGVzKCkge1xyXG4gICAgICAgIHJldHVybiAnJ1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBodG1sKCkge1xyXG4gICAgICAgIGxldCB7aW5wdXQsIHNldHRpbmdzLCB0YWdzLCBlcnJvcnMsIHVpQ2xhc3NlcywgdWlBdHRyaWJ1dGVzfSA9IHRoaXM7XHJcbiAgICAgICAgbGV0IHtsYWJlbCA9ICcnLCBsYWJlbEhUTUwsIG5hbWUgPSAnJywgaWQgPSAnJ30gPSBpbnB1dDtcclxuICAgICAgICBsZXQge2lucHV0OiBpbnB1dFNldHRpbmdzID0ge30sIHNob3dMYWJlbCA9IHRydWV9ID0gc2V0dGluZ3M7XHJcbiAgICAgICAgbGV0IHtjbGFzc2VzID0gJyd9ID0gaW5wdXRTZXR0aW5ncztcclxuICAgICAgICBsZXQge21lc3NhZ2VzOiBlcnJvck1lc3NhZ2VzID0gW10sIGF0dHJpYnV0ZXM6IGVycm9yQXR0cmlidXRlcyA9ICcnLCBub25WYWxpZGF0ZSA9IFtdLCB0YWdzOiBlcnJvclRhZ3MgPSAnJ30gPSBlcnJvcnM7XHJcbiAgICAgICAgbGV0IGVycm9ySFRNTCA9IG5ldyB0aGlzLmVycm9yTWVzc2FnZXMoZXJyb3JNZXNzYWdlcykuaHRtbDtcclxuICAgICAgICBsZXQgbm9uVmFsaWRhdGVBdHRyaWJ1dGVzSFRNTCA9IG5ldyB0aGlzLmF0dHJpYnV0ZVRhZ3MoZXJyb3JBdHRyaWJ1dGVzLCBub25WYWxpZGF0ZSkuaHRtbDtcclxuXHJcbiAgICAgICAgaWYgKGxhYmVsSFRNTCkgbGFiZWwgPSBsYWJlbEhUTUw7XHJcblxyXG4gICAgICAgIGxhYmVsID0gc2hvd0xhYmVsID8gbGFiZWwgOiAnJztcclxuXHJcbiAgICAgICAgbGV0IGlucHV0SFRNTCA9IGAgXHJcbiAgICAgICAgICAgIDxsYWJlbCBmb3I9XCIke2lkfVwiPiAke2xhYmVsfSA8L2xhYmVsPlxyXG4gICAgICAgICAgICA8dGV4dGFyZWEgY2xhc3M9XCIke2NsYXNzZXN9ICR7dWlDbGFzc2VzfVwiICBpZD1cIiR7aWR9XCIgbmFtZT1cIiR7bmFtZX1cIiAke3VpQXR0cmlidXRlc30gICAke25vblZhbGlkYXRlQXR0cmlidXRlc0hUTUx9ICAgJHtlcnJvclRhZ3N9ICR7dGFnc30+XHJcbiAgICAgICAgICAgIDwvdGV4dGFyZWE+XHJcbiAgICAgICAgICAgICR7ZXJyb3JIVE1MfVxyXG4gICAgICAgYDtcclxuXHJcbiAgICAgICAgcmV0dXJuIGAke2lucHV0SFRNTH1gO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgU3R5bGUgfSBmcm9tIFwiLi9zdHlsZVwiO1xyXG5pbXBvcnQgeyBFcnJvck1lc3NhZ2VzIH0gZnJvbSBcIi4vbWVzc2FnZXMuanNcIjtcclxuaW1wb3J0IHsgQXR0cmlidXRlVGFncyB9IGZyb20gXCIuLi91dGlsaXRpZXMvYXR0cmlidXRlcy5qc1wiO1xyXG5cclxubGV0IHN0eWxlID0gbmV3IFN0eWxlKCk7XHJcblxyXG5leHBvcnQgY2xhc3MgVXJsIHtcclxuICAgIGNvbnN0cnVjdG9yKGlucHV0T2JqID0ge30sIGVycm9yTWVzc2FnZXMgPSBFcnJvck1lc3NhZ2VzKSB7XHJcbiAgICAgICAgbGV0IHtpbnB1dCA9IHt9LHNldHRpbmdzID0ge30sdGFncyA9IHt9LGVycm9ycyA9IHt9fSA9IGlucHV0T2JqO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuaW5wdXQgPSBpbnB1dDtcclxuICAgICAgICB0aGlzLnNldHRpbmdzID0gc2V0dGluZ3M7XHJcbiAgICAgICAgdGhpcy50YWdzID0gdGFncztcclxuICAgICAgICB0aGlzLmVycm9ycyA9IGVycm9ycztcclxuICAgICAgICB0aGlzLmVycm9yTWVzc2FnZXMgPSBlcnJvck1lc3NhZ2VzO1xyXG4gICAgICAgIHRoaXMuYXR0cmlidXRlVGFncyA9IEF0dHJpYnV0ZVRhZ3M7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGdldCB1aUNsYXNzZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuICcnXHJcbiAgICB9XHJcbiAgICBcclxuICAgIGdldCB1aUF0dHJpYnV0ZXMoKXtcclxuICAgICAgICByZXR1cm4gJydcclxuICAgIH1cclxuXHJcbiAgICBnZXQgaHRtbCgpIHtcclxuICAgICAgICBsZXQge2lucHV0LCBzZXR0aW5ncywgdGFncywgZXJyb3JzLCB1aUNsYXNzZXMsIHVpQXR0cmlidXRlc30gPSB0aGlzO1xyXG4gICAgICAgIGxldCB7bGFiZWwgPSAnJywgbGFiZWxIVE1MLCBuYW1lID0gJycsIGlkID0gJyd9ID0gaW5wdXQ7XHJcbiAgICAgICAgbGV0IHtpbnB1dDppbnB1dFNldHRpbmdzID0ge30sIHNob3dMYWJlbCA9IHRydWV9ID0gc2V0dGluZ3M7XHJcbiAgICAgICAgbGV0IHtjbGFzc2VzID0gJyd9ID0gaW5wdXRTZXR0aW5ncztcclxuICAgICAgICBsZXQge21lc3NhZ2VzIDogZXJyb3JNZXNzYWdlcyA9IFtdLCBhdHRyaWJ1dGVzIDogZXJyb3JBdHRyaWJ1dGVzID0gJycsIG5vblZhbGlkYXRlID0gW10sIHRhZ3MgOiBlcnJvclRhZ3MgPSAnJ30gPSBlcnJvcnM7XHJcbiAgICAgICAgbGV0IGVycm9ySFRNTCA9IG5ldyB0aGlzLmVycm9yTWVzc2FnZXMoZXJyb3JNZXNzYWdlcykuaHRtbDtcclxuICAgICAgICBsZXQgbm9uVmFsaWRhdGVBdHRyaWJ1dGVzSFRNTCA9IG5ldyB0aGlzLmF0dHJpYnV0ZVRhZ3MoZXJyb3JBdHRyaWJ1dGVzLCBub25WYWxpZGF0ZSkuaHRtbDtcclxuICAgICAgICBcclxuICAgICAgICBpZihsYWJlbEhUTUwpIGxhYmVsID0gbGFiZWxIVE1MO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCBpbnB1dEhUTUwgPSBgIFxyXG4gICAgICAgICAgICA8bGFiZWwgZm9yPVwiJHtpZH1cIj4gJHtsYWJlbH0gPC9sYWJlbD5cclxuICAgICAgICAgICAgPGlucHV0IGNsYXNzPVwiJHtjbGFzc2VzfSAke3VpQ2xhc3Nlc31cIiAke3VpQXR0cmlidXRlc30gIGlkPVwiJHtpZH1cIiBuYW1lPVwiJHtuYW1lfVwiICB0eXBlPVwidXJsXCIgJHtub25WYWxpZGF0ZUF0dHJpYnV0ZXNIVE1MfSAgICR7ZXJyb3JUYWdzfSAke3RhZ3N9PlxyXG4gICAgICAgICAgICAke2Vycm9ySFRNTH1cclxuICAgICAgIGA7XHJcblxyXG4gICAgICAgIHJldHVybiBgJHtpbnB1dEhUTUx9YDtcclxuICAgIH1cclxufSIsImltcG9ydCB7Q29udHJvbHN9IGZyb20gJy4uLy4uL3ZpZGVvL2NvbnRyb2xzL2luZGV4LmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIGV4dGVuZHMgQ29udHJvbHMge1xyXG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICBcclxuICAgICAgICBpZihjb250YWluZXIuaHRtbCBpbnN0YW5jZW9mIEZ1bmN0aW9uKXtcclxuICAgICAgICAgICAgY29udGFpbmVyLmh0bWwodGhpcy5odG1sKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICBkaXYuaW5uZXJIVE1MID0gdGhpcy5odG1sO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChkaXYpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBsZXQge1xyXG4gICAgICAgICAgICBwbGF5UGF1c2VDb250cm9sc0NsYXNzZXMsXHJcbiAgICAgICAgICAgIHRvdGFsVGltZUluZm9DbGFzc2VzLFxyXG4gICAgICAgICAgICBjdXJyZW50VGltZUluZm9DbGFzc2VzLFxyXG4gICAgICAgICAgICBzY3J1YkJhckNsYXNzZXMsXHJcbiAgICAgICAgICAgIG11dGVDb250cm9sc0NsYXNzZXMsXHJcbiAgICAgICAgICAgIHZvbHVtZUJhckNsYXNzZXMgICAgICAgICAgICBcclxuICAgICAgICB9ID0gdGhpcztcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcclxuICAgICAgICB0aGlzLnBsYXlQYXVzZUNvbnRyb2xzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ2aWRlby1jb250cm9scy1wbGF5LXBhdXNlXCIpO1xyXG4gICAgICAgIHRoaXMudG90YWxUaW1lSW5mbyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidmlkZW8tY29udHJvbHMtdG90YWwtdGltZVwiKTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRUaW1lSW5mbyA9ICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInZpZGVvLWNvbnRyb2xzLWN1cnJlbnQtdGltZVwiKTtcclxuICAgICAgICB0aGlzLnNjcnViQmFyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ2aWRlby1jb250cm9scy1zY3J1Yi1iYXJcIik7XHJcbiAgICAgICAgdGhpcy5tdXRlQ29udHJvbHMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInZpZGVvLWNvbnRyb2xzLW11dGUtY29udHJvbHNcIik7XHJcbiAgICAgICAgdGhpcy52b2x1bWVCYXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInZpZGVvLWNvbnRyb2xzLXZvbHVtZS1iYXJcIik7XHJcbiAgICAgICAgICAgXHJcbiAgICB9XHJcbiAgICBcclxuICAgIGdldCBwbGF5UGF1c2VDb250cm9sc0NsYXNzZXMoKXtcclxuICAgICAgICByZXR1cm4gJ3BsYXktcGF1c2UnO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBnZXQgdG90YWxUaW1lSW5mb0NsYXNzZXMoKXtcclxuICAgICAgICByZXR1cm4gJ2R1cmF0aW9uJztcclxuICAgIH1cclxuICAgIFxyXG4gICAgZ2V0IGN1cnJlbnRUaW1lSW5mb0NsYXNzZXMoKXtcclxuICAgICAgICByZXR1cm4gJ2N1cnJlbnQtdGltZSc7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGdldCBzY3J1YkJhckNsYXNzZXMoKXtcclxuICAgICAgICByZXR1cm4gJ3NjcnViLWJhcic7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGdldCBtdXRlQ29udHJvbHNDbGFzc2VzKCl7XHJcbiAgICAgICAgcmV0dXJuICdtdXRlJ1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBnZXQgdm9sdW1lQmFyQ2xhc3Nlcygpe1xyXG4gICAgICAgIHJldHVybiAndm9sdW1lLWJhcidcclxuICAgIH1cclxuICAgIFxyXG4gICAgZ2V0IHBsYXlDbGFzc2VzKCl7XHJcbiAgICAgICAgcmV0dXJuICdmYSBmYS1wbGF5JztcclxuICAgIH1cclxuICAgIFxyXG4gICAgZ2V0IHBhdXNlQ2xhc3Nlcygpe1xyXG4gICAgICAgIHJldHVybiAnZmEgZmEtcGF1c2UnO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBnZXQgdW5tdXRlQ2xhc3Nlcygpe1xyXG4gICAgICAgIHJldHVybiAnZmEgZmEtdm9sdW1lLXVwJztcclxuICAgIH1cclxuICAgIFxyXG4gICAgZ2V0IG11dGVDbGFzc2VzKCl7XHJcbiAgICAgICAgcmV0dXJuICdmYSBmYS12b2x1bWUtb2ZmJztcclxuICAgIH1cclxuICAgIFxyXG4gICAgZ2V0IHNjcnViQmFyVGltZUxhcHNlQ2xhc3Nlcygpe1xyXG4gICAgICAgIHJldHVybiBgdGltZS1sYXBzZWRgXHJcbiAgICB9XHJcbiAgICBcclxuICAgIGdldCB2b2x1bWVCYXJDdXJyZW50Vm9sdW1lQ2xhc3Nlcygpe1xyXG4gICAgICAgIHJldHVybiAnY3VycmVudC12b2x1bWUnO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBnZXQgcGxheVBhdXNlQnV0dG9uSFRNTCgpe1xyXG4gICAgICAgIGxldCB7cGxheUNsYXNzZXMgOiBwbGF5fSA9IHRoaXM7XHJcbiAgICAgICAgbGV0IHtwbGF5UGF1c2VDb250cm9sc0NsYXNzZXMgOiBwbGF5UGF1c2VDb250cm9sc30gPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBgXHJcbiAgICAgICAgPGJ1dHRvbiBpZD1cInZpZGVvLWNvbnRyb2xzLXBsYXktcGF1c2VcIiBjbGFzcz1cIiR7cGxheVBhdXNlQ29udHJvbHN9XCI+XHJcbiAgICAgICAgICAgIDxpIGNsYXNzPScke3BsYXl9Jz48L2k+XHJcbiAgICAgICAgPC9idXR0b24+YFxyXG4gICAgfVxyXG4gICAgICAgXHJcbiAgICBnZXQgc2NydWJCYXJIVE1MKCl7XHJcbiAgICAgICAgcmV0dXJuIGBcclxuICAgICAgICAgICAgIDxkaXYgaWQ9XCJ2aWRlby1jb250cm9scy1zY3J1Yi1iYXJcIiBjbGFzcz1cIiR7dGhpcy5zY3J1YkJhckNsYXNzZXN9XCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiJHt0aGlzLnNjcnViQmFyVGltZUxhcHNlQ2xhc3Nlc31cIj48L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgYFxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBnZXQgdGltZXN0YW1wSFRNTCgpe1xyXG4gICAgICAgIHJldHVybiBgXHJcbiAgICAgICAgPHNwYW4gaWQ9XCJ2aWRlby1jb250cm9scy1jdXJyZW50LXRpbWVcIiBjbGFzcz1cIiR7dGhpcy5jdXJyZW50VGltZUluZm9DbGFzc2VzfVwiPjwvc3Bhbj5cclxuICAgICAgICA8c3BhbiBpZD1cInZpZGVvLWNvbnRyb2xzLXRvdGFsLXRpbWVcIiBjbGFzcz1cIiR7dGhpcy50b3RhbFRpbWVJbmZvQ2xhc3Nlc31cIj48L3NwYW4+XHJcbiAgICAgICAgYDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgZ2V0IG11dGVCdXR0b25IVE1MKCl7XHJcbiAgICAgICAgbGV0IHt1bm11dGVDbGFzc2VzIDogdW5tdXRlLCBtdXRlQ29udHJvbHNDbGFzc2VzfSA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIGBcclxuICAgICAgICAgICAgPGJ1dHRvbiBpZD1cInZpZGVvLWNvbnRyb2xzLW11dGUtY29udHJvbHNcIiBjbGFzcz1cIiR7bXV0ZUNvbnRyb2xzQ2xhc3Nlc31cIj5cclxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiJHt1bm11dGV9XCI+PC9pPlxyXG4gICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICBgXHJcbiAgICB9XHJcbiAgICBcclxuICAgIGdldCB2b2x1bWVCYXJIVE1MKCl7XHJcbiAgICAgICAgcmV0dXJuIGBcclxuICAgICAgICAgICAgPGRpdiAgaWQ9XCJ2aWRlby1jb250cm9scy12b2x1bWUtYmFyXCIgY2xhc3M9XCIke3RoaXMudm9sdW1lQmFyQ2xhc3Nlc31cIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCIke3RoaXMudm9sdW1lQmFyQ3VycmVudFZvbHVtZUNsYXNzZXN9XCI+PC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PiBcclxuICAgICAgICBgXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGh0bWwoKSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IHtcclxuICAgICAgICAgICAgcGxheVBhdXNlQnV0dG9uSFRNTCxcclxuICAgICAgICAgICAgc2NydWJCYXJIVE1MLFxyXG4gICAgICAgICAgICB0aW1lc3RhbXBIVE1MLFxyXG4gICAgICAgICAgICBtdXRlQnV0dG9uSFRNTCxcclxuICAgICAgICAgICAgdm9sdW1lQmFySFRNTFxyXG4gICAgICAgIH0gPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBgXHJcbiAgICAgICAgICAgJHtwbGF5UGF1c2VCdXR0b25IVE1MfVxyXG4gICAgICAgICAgICR7c2NydWJCYXJIVE1MfVxyXG4gICAgICAgICAgICR7dGltZXN0YW1wSFRNTH1cclxuICAgICAgICAgICAke211dGVCdXR0b25IVE1MfVxyXG4gICAgICAgICAgICR7dm9sdW1lQmFySFRNTH0gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICBgXHJcbiAgICB9XHJcblxyXG59IiwiLyoqXHJcbiAqIENvbnZlcnRzIGFuIG9iamVjdCB3aXRoIGF0dHJpYnV0ZXMgYW5kIGtleXMgaW50byBIVE1MXHJcbiAqIHRoYXQgaW5wdXRzIGNhbiBiZSB1c2VkLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEF0dHJpYnV0ZVRhZ3Mge1xyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIFB1bGxzIGFsbCB0aGUgYXR0cmlidXRlIHNldHRpbmdzIGFuZCB0aGUgYXR0cmlidXRlcyBcclxuICAgICAqIHRvIGJlIHJlbmRlcmVkLlxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGF0dHJpYnV0ZURhdGEgLSBzZXR0aW5ncyBmb3IgYWxsIHRoZSBhdHRyaWJ1dGVzLlxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXR0cmlidXRlS2V5cyAtIGF0dHJpYnV0ZSBuYW1lcyB0byBiZSBzZXQuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZURhdGEgPSB7fSwgYXR0cmlidXRlS2V5cyA9IFtdKXtcclxuICAgICAgIFxyXG4gICAgICAgLyoqXHJcbiAgICAgICAgKiBBbGwgYXR0cmlidXRlcyB0byBiZSBtYWRlLlxyXG4gICAgICAgICogQHR5cGUge09iamVjdH1cclxuICAgICAgICAqL1xyXG4gICAgICAgdGhpcy5hdHRyaWJ1dGVEYXRhID0gYXR0cmlidXRlRGF0YTtcclxuICAgICAgIFxyXG4gICAgICAgLyoqXHJcbiAgICAgICAgKiBBdHRyaWJ1dGUgbmFtZXMgdG8gYmUgc2V0LlxyXG4gICAgICAgICogQHR5cGUge0FycmF5fVxyXG4gICAgICAgICovXHJcbiAgICAgICB0aGlzLmF0dHJpYnV0ZUtleXMgPSBhdHRyaWJ1dGVLZXlzO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogUmVuZGVycyBhdHRyaWJ1dGVzIGJhc2VkIG9uIHRoZSBrZXlzIGFuZCBhdHRyaWJ1dGUgZGF0YS5cclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiBhdHRyaWJ1dGVEYXRhID0geyByZXF1aXJlZCA9IFwidHJ1ZVwifTtcclxuICAgICAqIGF0dHJpYnV0ZUtleXMgPSBbXCJyZXF1aXJlZFwiXTtcclxuICAgICAqIFxyXG4gICAgICogLy8gQmVjb21lczogXHJcbiAgICAgKiBodG1sID0gJ3JlcXVpcmVkID0gXCJ0cnVlXCInXHJcbiAgICAgKiBcclxuICAgICAqIEB0eXBlIHtTdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGdldCBodG1sKCl7XHJcbiAgICAgICAgbGV0IHthdHRyaWJ1dGVLZXlzLCBhdHRyaWJ1dGVEYXRhfSA9IHRoaXM7XHJcbiAgICAgICAgbGV0IGF0dHJpYnV0ZUhUTUwgPSBhdHRyaWJ1dGVLZXlzLnJlZHVjZSggKGN1cnJlbnRBdHRyaWJ1dGVIVE1MLCBjdXJyZW50S2V5KSA9PntcclxuXHJcbiAgICAgICAgICAgIGlmKGF0dHJpYnV0ZURhdGFbY3VycmVudEtleV0pe1xyXG4gICAgICAgICAgICAgICAgbGV0IGF0dHJpYnV0ZVRhZ0hUTUwgPSBhdHRyaWJ1dGVEYXRhW2N1cnJlbnRLZXldID09PSAndGFnLW9ubHknID8gXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50S2V5IDpcclxuICAgICAgICAgICAgICAgIGAke2N1cnJlbnRLZXl9PVwiJHthdHRyaWJ1dGVEYXRhW2N1cnJlbnRLZXldfVwiYFxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBgJHtjdXJyZW50QXR0cmlidXRlSFRNTH0gJHthdHRyaWJ1dGVUYWdIVE1MfSBgO1xyXG4gICAgICAgICAgICB9IFxyXG4gICAgICAgICAgICByZXR1cm4gY3VycmVudEF0dHJpYnV0ZUhUTUw7XHJcbiAgICAgICAgfSwgJycpOyAgIFxyXG4gICAgICAgIHJldHVybiBhdHRyaWJ1dGVIVE1MO1xyXG4gICAgfVxyXG59OyIsImltcG9ydCB7VmFsaWRhdGlvbn0gZnJvbSAnLi92YWxpZGF0aW9uLmpzJztcclxuaW1wb3J0IHtDb25maWdTdGF0ZXNWYWxpZGF0aW9ufSBmcm9tICcuL2NvbmZpZy5zdGF0ZXMuanMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIENvbmZpZ1ZhbGlkYXRpb24gZXh0ZW5kcyBWYWxpZGF0aW9ue1xyXG4gICAgXHJcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcgPSB7fSl7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZzsgICAgIFxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBnZXQgdmFsaWRhdGlvbkFycmF5KCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHRoaXMuaGFzU3RhdGVzT2JqLFxyXG4gICAgICAgICAgICB0aGlzLmhhc0RlZmF1bHRTdGF0ZU9iaixcclxuICAgICAgICAgICAgdGhpcy52YWxpZERlZmF1bHRTdGF0ZU9iaixcclxuICAgICAgICAgICAgdGhpcy52YWxpZFN0YXRlQ29uZmlnXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgZ2V0IHZhbGlkU3RhdGVDb25maWcoKXtcclxuICAgICAgICBsZXQge3ZhbGlkLCBlcnJvcnN9ID0gbmV3IENvbmZpZ1N0YXRlc1ZhbGlkYXRpb24odGhpcy5jb25maWcuc3RhdGVzKTtcclxuICAgICAgICBcclxuICAgICAgICBpZighdmFsaWQpe1xyXG4gICAgICAgICAgICB0aGlzLmFkZEVycm9ycyhlcnJvcnMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB2YWxpZCA6IHZhbGlkLFxyXG4gICAgICAgICAgICBlcnJvcjoge1xyXG4gICAgICAgICAgICAgICAgdHlwZSA6ICdpbnZhbGlkJyxcclxuICAgICAgICAgICAgICAgIHBhdGggOiAnY29uZmlnLnN0YXRlcycsXHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlIDogXCJFeHBlcmllbmNlIHJlcXVpcmVzIHRoYXQgYWxsIHN0YXRlcyBhcmUgdmFsaWRcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBnZXQgdmFsaWREZWZhdWx0U3RhdGVPYmooKXtcclxuICAgICAgICAgbGV0IHt2YWxpZH0gPSB0aGlzLmhhc0RlZmF1bHRTdGF0ZU9iajtcclxuICAgICAgICAgXHJcbiAgICAgICAgIGlmKCF2YWxpZCkgcmV0dXJuO1xyXG4gICAgICAgICBcclxuICAgICAgICAgbGV0IHtkZWZhdWx0U3RhdGV9ID0gdGhpcy5jb25maWc7XHJcbiAgICAgICAgIGxldCBmaW5hbEluZGV4ID0gZGVmYXVsdFN0YXRlLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgIGxldCBsYXN0U3RhdGUgPSBkZWZhdWx0U3RhdGVbZmluYWxJbmRleF07XHJcbiAgICAgICAgIFxyXG4gICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgdmFsaWQgOiBsYXN0U3RhdGUuc3RhdGVJZCAmJiBsYXN0U3RhdGUuc3RhdGVJZC5sZW5ndGggPj0gMCxcclxuICAgICAgICAgICAgIGVycm9yIDoge1xyXG4gICAgICAgICAgICAgICAgIFwidHlwZVwiIDogXCJtaXNzaW5nXCIsXHJcbiAgICAgICAgICAgICAgICAgXCJwYXRoXCIgOiBgY29uZmlnLmRlZmF1bHRTdGF0ZVske2ZpbmFsSW5kZXh9XS5zdGF0ZUlkYFxyXG4gICAgICAgICAgICAgfVxyXG4gICAgICAgICB9XHJcbiAgICAgICAgIFxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBnZXQgaGFzRGVmYXVsdFN0YXRlT2JqKCl7XHJcbiAgICAgICAgbGV0IHtkZWZhdWx0U3RhdGUgPSBbXX0gPSB0aGlzLmNvbmZpZztcclxuICAgICAgICBsZXQgZGVmYXVsdFN0YXRlRXhpc3RzID0gdHlwZW9mIGRlZmF1bHRTdGF0ZSAhPT0ndW5kZWZpbmVkJyAmJiBkZWZhdWx0U3RhdGUubGVuZ3RoID49IDE7XHJcbiAgICAgICAgXHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdmFsaWQgOiBkZWZhdWx0U3RhdGVFeGlzdHMsXHJcbiAgICAgICAgICAgIGVycm9yOntcclxuICAgICAgICAgICAgICAgIFwidHlwZVwiIDogXCJtaXNzaW5nXCIsXHJcbiAgICAgICAgICAgICAgICBcInBhdGhcIiA6IFwiY29uZmlnLmRlZmF1bHRTdGF0ZVwiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRhdGE6IGRlZmF1bHRTdGF0ZVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgZ2V0IGhhc1N0YXRlc09iaigpe1xyXG4gICAgICAgIGxldCB7c3RhdGVzfSA9IHRoaXMuY29uZmlnO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHZhbGlkIDogdHlwZW9mIHN0YXRlcyAhPT0gJ3VuZGVmaW5lZCcgJiYgc3RhdGVzLmxlbmd0aCA+PSAxLFxyXG4gICAgICAgICAgICBlcnJvciA6IHtcclxuICAgICAgICAgICAgICAgIFwidHlwZVwiIDogXCJtaXNzaW5nXCIsXHJcbiAgICAgICAgICAgICAgICBcInBhdGhcIiA6IFwiY29uZmlnLnN0YXRlc1wiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRhdGEgOiBzdGF0ZXNcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxufTsiLCJpbXBvcnQgeyBPYmplY3RQYXJzZXJzLCBUeXBlVmFsaWRhdG9yIH0gZnJvbSAnLi4vLi4vLi4vdXRpbGl0aWVzL3R5cGUtcGFyc2Vycy5qcyc7XHJcbmltcG9ydCB7VmFsaWRhdGlvbn0gZnJvbSAnLi92YWxpZGF0aW9uLmpzJztcclxuXHJcbmxldCBvYmplY3RQYXJzZXJzID0gbmV3IE9iamVjdFBhcnNlcnMoKVxyXG5sZXQgdHlwZVZhbGlkYXRvciA9IG5ldyBUeXBlVmFsaWRhdG9yKClcclxuXHJcbmV4cG9ydCBjbGFzcyBDb25maWdTdGF0ZXNWYWxpZGF0aW9uIGV4dGVuZHMgVmFsaWRhdGlvbiB7XHJcblxyXG4gICAgY29uc3RydWN0b3Ioc3RhdGVzID0gW10pIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMuc3RhdGVzID0gc3RhdGVzO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB2YWxpZGF0aW9uQXJyYXkoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgdGhpcy51bmlxdWVWYWxpZFN0YXRlRGF0YSxcclxuICAgICAgICAgICAgdGhpcy5maWxsZWRWYWxpZFN0YXRlRGF0YVxyXG4gICAgICAgIF1cclxuICAgIH1cclxuXHJcbiAgICBjb252ZXJ0VG9Db25maWdFcnJvck9ianMoZXJyb3JzLCBlcnJvclR5cGUpIHtcclxuICAgICAgICByZXR1cm4gZXJyb3JzLm1hcCgoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgbGV0IHtrZXksIHZhbHVlLCBpbmRleH0gPSBlcnJvcjtcclxuICAgICAgICAgICAgbGV0IGVycm9yT2JqZWN0ID0ge1xyXG4gICAgICAgICAgICAgICAgdHlwZSA6IGVycm9yVHlwZSxcclxuICAgICAgICAgICAgICAgIHBhdGggOiBgY29uZmlnLnN0YXRlc1ske2luZGV4fV0uJHtrZXl9YFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYoZXJyb3JUeXBlID09PSAnZHVwbGljYXRlJykgZXJyb3JPYmplY3QubWVzc2FnZSA9ICBgRHVwbGljYXRlIHZhbHVlOiAke3ZhbHVlfWA7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdmFsaWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yT2JqZWN0XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgZ2V0IGZpbGxlZFZhbGlkU3RhdGVEYXRhKCl7XHJcbiAgICAgICAgbGV0IHtlcnJvcnMgPSBbXSwgaXNFbXB0eX0gPSBvYmplY3RQYXJzZXJzLmFueUVtcHR5KHRoaXMuc3RhdGVzLCBbJ2lkJywgJ3VybCcsICd0eXBlJ10pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChpc0VtcHR5KSB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmFkZEVycm9ycyh0aGlzLmNvbnZlcnRUb0NvbmZpZ0Vycm9yT2JqcyhlcnJvcnMsICdtaXNzaW5nJykpO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHZhbGlkOiAhaXNFbXB0eSxcclxuICAgICAgICAgICAgZXJyb3I6IHtcclxuICAgICAgICAgICAgICAgIHBhdGg6ICdjb25maWcuc3RhdGVzJyxcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdOb3QgYWxsIHN0YXRlXFwncyBoYXZlIGFuIGlkLCB1cmwsIGFuZC9vciB0eXBlJyxcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdpbnZhbGlkJ1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGF0YTogdGhpcy5zdGF0ZXNcclxuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCB1bmlxdWVWYWxpZFN0YXRlRGF0YSgpIHtcclxuXHJcbiAgICAgICAgbGV0IHtlcnJvcnMgPSBbXSwgaXNVbmlxdWU6IHZhbGlkIH0gPSBvYmplY3RQYXJzZXJzLmlzVW5pcXVlKHRoaXMuc3RhdGVzLCBbJ2lkJywgJ3VybCddKTtcclxuXHJcbiAgICAgICAgaWYgKCF2YWxpZCkge1xyXG5cclxuICAgICAgICAgICAgdGhpcy5hZGRFcnJvcnModGhpcy5jb252ZXJ0VG9Db25maWdFcnJvck9ianMoZXJyb3JzLCAnZHVwbGljYXRlJykpO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHZhbGlkOiB2YWxpZCxcclxuICAgICAgICAgICAgZXJyb3I6IHtcclxuICAgICAgICAgICAgICAgIHBhdGg6ICdjb25maWcuc3RhdGVzJyxcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdOb3QgYWxsIHN0YXRlXFwncyBpZHMgYW5kIHVybHMgYXJlIHVuaXF1ZScsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnaW52YWxpZCdcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRhdGE6IHRoaXMuc3RhdGVzXHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG59OyIsImltcG9ydCB7VmFsaWRhdGlvbn0gZnJvbSAnLi92YWxpZGF0aW9uLmpzJztcclxuXHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIEV4cGVyaWVuY2VWYWxpZGF0aW9uIGV4dGVuZHMgVmFsaWRhdGlvbntcclxuICAgIGNvbnN0cnVjdG9yKGV4cGVyaWVuY2UgPSB7fSl7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLmV4cGVyaWVuY2UgPSBleHBlcmllbmNlO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBnZXQgdmFsaWRhdGlvbkFycmF5KCl7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgdGhpcy52YWxpZEFuaW1hdGVFbGVtZW50T2JqLFxyXG4gICAgICAgICAgICB0aGlzLnZhbGlkU2V0RGF0YU9ialxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGdldCB2YWxpZEFuaW1hdGVFbGVtZW50T2JqKCl7XHJcbiAgICAgICAgbGV0IHthbmltYXRlRWxlbWVudH0gPSB0aGlzLmV4cGVyaWVuY2U7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdmFsaWQgOiB0eXBlb2YgYW5pbWF0ZUVsZW1lbnQgIT09ICd1bmRlZmluZWQnLFxyXG4gICAgICAgICAgICBlcnJvciA6IHtcclxuICAgICAgICAgICAgICAgIHBhdGggOiAnZXhwZXJpZW5jZS5hbmltYXRlRWxlbWVudCcsXHJcbiAgICAgICAgICAgICAgICB0eXBlIDogXCJtaXNzaW5nXCJcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGF0YSA6IGFuaW1hdGVFbGVtZW50ICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBnZXQgdmFsaWRTZXREYXRhT2JqKCl7XHJcbiAgICAgICAgbGV0IHtzZXREYXRhfSA9IHRoaXMuZXhwZXJpZW5jZTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB2YWxpZCA6IHR5cGVvZiBzZXREYXRhICE9PSAndW5kZWZpbmVkJyxcclxuICAgICAgICAgICAgZXJyb3IgOiB7XHJcbiAgICAgICAgICAgICAgICBwYXRoIDogJ2V4cGVyaWVuY2Uuc2V0RGF0YScsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiBcIm1pc3NpbmdcIlxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkYXRhIDogc2V0RGF0YSAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn07IiwiaW1wb3J0IHsgT2JqZWN0UGFyc2VycywgVHlwZVZhbGlkYXRvciB9IGZyb20gJy4uLy4uLy4uL3V0aWxpdGllcy90eXBlLXBhcnNlcnMuanMnO1xyXG5pbXBvcnQgeyBWYWxpZGF0aW9uIH0gZnJvbSAnLi92YWxpZGF0aW9uLmpzJztcclxuaW1wb3J0IHsgRXhwZXJpZW5jZVZhbGlkYXRpb24gfSBmcm9tICcuL2V4cGVyaWVuY2UuanMnO1xyXG5pbXBvcnQgeyBNb2R1bGVWYWxpZGF0aW9uIH0gZnJvbSAnLi9tb2R1bGVzLmpzJztcclxuaW1wb3J0IHsgQ29uZmlnVmFsaWRhdGlvbiB9IGZyb20gJy4vY29uZmlnLmpzJztcclxuXHJcbmxldCBvYmplY3RQYXJzZXJzID0gbmV3IE9iamVjdFBhcnNlcnMoKVxyXG5sZXQgdHlwZVZhbGlkYXRvciA9IG5ldyBUeXBlVmFsaWRhdG9yKClcclxuXHJcbmV4cG9ydCBjbGFzcyBpVlhqc1ZhbGlkYXRpb24gZXh0ZW5kcyBWYWxpZGF0aW9uIHtcclxuXHJcbiAgY29uc3RydWN0b3IoZGF0YSkge1xyXG4gICAgc3VwZXIoKVxyXG4gICAgdGhpcy5kYXRhID0gZGF0YVxyXG5cclxuICAgIGlmICghdGhpcy52YWxpZCkge1xyXG4gICAgICB0aGlzLmVycm9yID0ge1xyXG4gICAgICAgIG1lc3NhZ2U6IHRoaXMuY29sbGVjdEVycm9yTWVzc2FnZXMoKSxcclxuICAgICAgICBkYXRhOiB0aGlzLmRhdGEsXHJcbiAgICAgICAgZXJyb3JzOiB0aGlzLmVycm9yc1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb2xsZWN0RXJyb3JNZXNzYWdlcygpIHtcclxuICAgIHJldHVybiB0aGlzLmVycm9ycy5yZXZlcnNlKCkucmVkdWNlKChlcnJvck1lc3NhZ2VzLCBlcnJvck9iaikgPT4ge1xyXG4gICAgICBsZXQge2Vycm9yfSA9IGVycm9yT2JqXHJcbiAgICAgIHJldHVybiBgJHtlcnJvck1lc3NhZ2VzfVxyXG5UWVBFOiAke2Vycm9yLnR5cGUgPyBlcnJvci50eXBlIDogJ0VSUk9SJ30gIFBBVEg6ICR7ZXJyb3IucGF0aH0gJHtlcnJvci5tZXNzYWdlICYmIGVycm9yLm1lc3NhZ2UubGVuZ3RoID4gMCA/ICdNRVNTQUdFOiAnICsgZXJyb3IubWVzc2FnZSArICcnIDogJyd9YFxyXG4gICAgfSwgJycpO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHZhbGlkYXRpb25BcnJheSgpIHtcclxuICAgIGxldCBjdXJyZW50VmFsaWRhdGlvbkFycmF5ID0gW1xyXG4gICAgICB0aGlzLnJ1bGVWYWxpZGF0aW9uT2JqLFxyXG4gICAgICB0aGlzLmV4cGVyaWVuY2VWYWxpZGF0aW9uT2JqLFxyXG4gICAgICB0aGlzLmNvbmZpZ1ZhbGlkYXRpb25PYmpcclxuICAgIF07XHJcbiAgICByZXR1cm4gY3VycmVudFZhbGlkYXRpb25BcnJheVxyXG4gIH1cclxuXHJcbiAgZ2V0IGNvbmZpZ1ZhbGlkYXRpb25PYmooKSB7XHJcbiAgICBsZXQge2NvbmZpZ30gPSB0aGlzLmRhdGE7XHJcbiAgICBsZXQge3ZhbGlkLCBlcnJvcnN9ID0gbmV3IENvbmZpZ1ZhbGlkYXRpb24oY29uZmlnKTtcclxuXHJcbiAgICBpZiAoIXZhbGlkKSB7XHJcbiAgICAgIHRoaXMuYWRkRXJyb3JzKGVycm9ycyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdmFsaWQ6IHZhbGlkLFxyXG4gICAgICBlcnJvcjoge1xyXG4gICAgICAgIFwicGF0aFwiOiBcImNvbmZpZ1wiLFxyXG4gICAgICAgIFwibWVzc2FnZVwiOiBcIkFuIGV4cGVyaWVuY2UgbXVzdCBoYXZlIGEgdmFsaWQgY29uZmlnXCIsXHJcbiAgICAgICAgXCJ0eXBlXCI6IFwiaW52YWxpZFwiXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgfVxyXG5cclxuICBnZXQgZXhwZXJpZW5jZVZhbGlkYXRpb25PYmooKSB7XHJcbiAgICBsZXQge2V4cGVyaWVuY2V9ID0gdGhpcy5kYXRhXHJcbiAgICBsZXQge3ZhbGlkLCBlcnJvcnN9ID0gbmV3IEV4cGVyaWVuY2VWYWxpZGF0aW9uKGV4cGVyaWVuY2UpXHJcbiAgICBsZXQgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgaWYgKCF2YWxpZCkge1xyXG4gICAgICB0aGlzLmFkZEVycm9ycyhlcnJvcnMpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHZhbGlkOiB2YWxpZCxcclxuICAgICAgZXJyb3I6IHtcclxuICAgICAgICBwYXRoOiAnZXhwZXJpZW5jZScsXHJcbiAgICAgICAgbWVzc2FnZTogJ0FuIGV4cGVyaWVuY2UgbXVzdCBub3QgaGF2ZSBhbnkgZXJyb3JzJyxcclxuICAgICAgICB0eXBlOiAnaW52YWxpZCdcclxuXHJcbiAgICAgIH0sXHJcbiAgICAgIGRhdGE6IGV4cGVyaWVuY2VcclxuXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXQgcnVsZVZhbGlkYXRpb25PYmooKSB7XHJcbiAgICBsZXQge3J1bGVzfSA9IHRoaXMuZGF0YVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHZhbGlkOiB0eXBlb2YgcnVsZXMgIT09ICd1bmRlZmluZWQnLFxyXG4gICAgICBlcnJvcjoge1xyXG4gICAgICAgIG5hbWU6ICdNaXNzaW5nIFJ1bGVzOicsXHJcbiAgICAgICAgbWVzc2FnZTogYFRoZSBmdW5jdGlvbiBydWxlcyBuZWVkcyB0byBiZSBkZWZpbmVkIGluIHRoZSBleHBlcmllbmNlLmBcclxuICAgICAgfSxcclxuICAgICAgZGF0YTogcnVsZXNcclxuICAgIH1cclxuICB9XHJcblxyXG59O1xyXG4iLCJpbXBvcnQge1ZhbGlkYXRpb259IGZyb20gJy4vdmFsaWRhdGlvbi5qcyc7XHJcbmltcG9ydCB7VHlwZVZhbGlkYXRvcn0gZnJvbSAnLi4vLi4vLi4vdXRpbGl0aWVzL3R5cGUtcGFyc2Vycy5qcyc7XHJcblxyXG5sZXQgZGVidWcgPSB0cnVlO1xyXG5leHBvcnQgY2xhc3MgTW9kdWxlVmFsaWRhdGlvbiBleHRlbmRzIFZhbGlkYXRpb24ge1xyXG4gICAgY29uc3RydWN0b3IoZXhwZXJpZW5jZSl7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLmV4cGVyaWVuY2UgPSBleHBlcmllbmNlO1xyXG4gICAgICAgIHRoaXMudHlwZVZhbGlkYXRvciA9IG5ldyBUeXBlVmFsaWRhdG9yKCk7XHJcbiAgICAgICAgXHJcbiAgICB9XHJcbiAgICBcclxuICAgIGdldCB2YWxpZGF0aW9uQXJyYXkoKXtcclxuICAgICAgICBsZXQgbW9kdWxlVmFsaWRhdGlvbkFycmF5ID0gW1xyXG4gICAgICAgICAgICB0aGlzLnZhbGlkVUlNb2R1bGVPYmogICAgICBcclxuICAgICAgICBdICAgIFxyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiBtb2R1bGVWYWxpZGF0aW9uQXJyYXk7XHJcbiAgICB9XHJcbiAgICAgICAgXHJcbiAgICBnZXQgdmFsaWRVSU1vZHVsZU9iaigpe1xyXG4gICAgICAgIGxldCB7dWl9ID0gdGhpcy5leHBlcmllbmNlO1xyXG4gICAgICAgXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdmFsaWQgOiB0eXBlb2YgdWkgIT09ICd1bmRlZmluZWQnICYmIHRoaXMudHlwZVZhbGlkYXRvci5pc1N0cmluZyh1aSkgJiYgIHVpLmxlbmd0aCA+IDAsXHJcbiAgICAgICAgICAgIGVycm9yIDoge1xyXG4gICAgICAgICAgICAgICAgXCJwYXRoXCIgOiBcInVpXCIsXHJcbiAgICAgICAgICAgICAgICBcInR5cGVcIiA6IFwibWlzc2luZ1wiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRhdGEgOiB1aVxyXG4gICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgfVxyXG4gICAgICBcclxufTsiLCJleHBvcnQgY2xhc3MgVmFsaWRhdGlvbiB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmVycm9ycyA9IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB2YWxpZGF0aW9uQXJyYXkoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB2YWxpZCgpIHtcclxuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdGlvbkFycmF5LnJlZHVjZSgoaXNWYWxpZCwgaXNQYXJ0VmFsaWQpID0+IHtcclxuICAgICAgICAgICAgaWYoIWlzUGFydFZhbGlkKSByZXR1cm4gaXNWYWxpZDtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBpc1BhcnRWYWxpZC52YWxpZCA9PT0gJ2Jvb2xlYW4nICYmICFpc1BhcnRWYWxpZC52YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5lcnJvcnMucHVzaChpc1BhcnRWYWxpZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWQgJiYgaXNQYXJ0VmFsaWQudmFsaWQ7XHJcbiAgICAgICAgfSwgdHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkRXJyb3JzKG5ld0Vycm9ycykge1xyXG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgICAgICBuZXdFcnJvcnMuZm9yRWFjaCgoZXJyb3JPYmopID0+IHtcclxuICAgICAgICAgICAgc2VsZi5lcnJvcnMucHVzaChlcnJvck9iailcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxufTsiLCJpbXBvcnQgVmlkZW9TZXR0aW5ncyBmcm9tICcuLi9zZXR0aW5ncy5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyB7XHJcbiAgICBjb250cnVjdG9yKCkgeyAgICAgICAgXHJcbiAgICAgICAgdGhpcy52b2x1bWUgPSAwO1xyXG4gICAgICAgIHRoaXMuY3VycmVudHRpbWUgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIHBsYXkoKSB7XHJcbiAgICAgICAgdGhpcy5pVlhqc0J1cy5lbWl0KHRoaXMuY29udHJvbEV2ZW50TmFtZXMuUExBWSk7XHJcbiAgICB9XHJcblxyXG4gICAgcGF1c2UoKSB7XHJcbiAgICAgICAgdGhpcy5pVlhqc0J1cy5lbWl0KHRoaXMuY29udHJvbEV2ZW50TmFtZXMuUEFVU0UpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldER1cmF0aW9uKGNiKSB7XHJcbiAgICAgICAgdGhpcy5pVlhqc0J1cy5vbmNlKHRoaXMuY29udHJvbEV2ZW50TmFtZXMuU0VUX0RVUkFUSU9OLCAoZHVyYXRpb24pID0+IHtcclxuICAgICAgICAgICAgY2IoZHVyYXRpb24pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuaVZYanNCdXMuZW1pdCh0aGlzLmNvbnRyb2xFdmVudE5hbWVzLkdFVF9EVVJBVElPTik7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0Vm9sdW1lKHZvbHVtZSkge1xyXG4gICAgICAgIHRoaXMuaVZYanNCdXMuZW1pdCh0aGlzLmNvbnRyb2xFdmVudE5hbWVzLlNFVF9WT0xVTUUsIHZvbHVtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2VlayhzZWNvbmRzKSB7XHJcbiAgICAgICAgdGhpcy5pVlhqc0J1cy5lbWl0KHRoaXMuY29udHJvbEV2ZW50TmFtZXMuU0VFSywge3NlY29uZHN9KTtcclxuICAgIH1cclxufSIsImltcG9ydCBDb250cm9sRXZlbnRzIGZyb20gJy4vZXZlbnRzLmpzJztcclxuaW1wb3J0IFZpZGVvRXZlbnROYW1lcyBmcm9tIFwiLi4vLi4vLi4vY29uc3RhbnRzL3ZpZGVvLmV2ZW50cy5qc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIENvbnRyb2xzIGV4dGVuZHMgQ29udHJvbEV2ZW50cyB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMuY3VycmVudFZvbHVtZSA9IDAuNTtcclxuICAgICAgICB0aGlzLmNvbnRyb2xFdmVudE5hbWVzID0gbmV3IFZpZGVvRXZlbnROYW1lcygpO1xyXG4gICAgfVxyXG5cclxuICAgIGRpc3Bvc2UoaVZYanNCdXMpIHtcclxuICAgICAgICBpVlhqc0J1cy5yZW1vdmVMaXN0ZW5lcih0aGlzLmNvbnRyb2xFdmVudE5hbWVzLlRJTUVfVVBEQVRFLCB0aGlzLnVwZGF0ZVRpbWUpO1xyXG4gICAgICAgIGlWWGpzQnVzLnJlbW92ZUxpc3RlbmVyKHRoaXMuY29udHJvbEV2ZW50TmFtZXMuUExBWUlORywgdGhpcy53aGlsZVBsYXlpbmcpO1xyXG4gICAgICAgIGlWWGpzQnVzLnJlbW92ZUxpc3RlbmVyKHRoaXMuY29udHJvbEV2ZW50TmFtZXMuQ0FOX1BMQVksIHRoaXMuY2FuUGxheUNhbGxiYWNrKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRBYnNvbHV0ZVBvc2l0aW9uKGVsZW1lbnQpIHtcclxuICAgICAgICBsZXQgcmVsYXRpdmVQb3NpdGlvbiA9IHsgeDogZWxlbWVudC5vZmZzZXRMZWZ0LCB5OiBlbGVtZW50Lm9mZnNldFRvcCB9O1xyXG5cclxuICAgICAgICBpZiAoZWxlbWVudC5vZmZzZXRQYXJlbnQpIHtcclxuICAgICAgICAgICAgbGV0IHRlbXBQb3NpdGlvbiA9IHRoaXMuZ2V0QWJzb2x1dGVQb3NpdGlvbihlbGVtZW50Lm9mZnNldFBhcmVudCk7XHJcblxyXG4gICAgICAgICAgICByZWxhdGl2ZVBvc2l0aW9uLnggKz0gdGVtcFBvc2l0aW9uLng7XHJcbiAgICAgICAgICAgIHJlbGF0aXZlUG9zaXRpb24ueSArPSB0ZW1wUG9zaXRpb24ueTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZWxhdGl2ZVBvc2l0aW9uO1xyXG4gICAgfVxyXG5cclxuICAgIGFkanVzdFZvbHVtZShldmVudCkge1xyXG4gICAgICAgIGxldCB7dm9sdW1lQmFyLCBtdXRlQ29udHJvbHMsIGN1cnJlbnRWb2x1bWUsIHZvbHVtZUJhckN1cnJlbnRWb2x1bWVDbGFzc2VzLCB1bm11dGVDbGFzc2VzLCBtdXRlQ2xhc3Nlc30gPSB0aGlzO1xyXG4gICAgICAgIGxldCB7b2Zmc2V0V2lkdGg6IHdpZHRoIH0gPSB2b2x1bWVCYXI7XHJcbiAgICAgICAgbGV0IGN1cnJlbnRWb2x1bWVTcGFuID0gdGhpcy5nZXRFbGVtZW50QnlDbGFzc2VzKHZvbHVtZUJhci5jaGlsZHJlbiwgW3ZvbHVtZUJhckN1cnJlbnRWb2x1bWVDbGFzc2VzXSk7XHJcbiAgICAgICAgbGV0IGFic29sdXRlUG9zaXRpb24gPSB0aGlzLmdldEFic29sdXRlUG9zaXRpb24odm9sdW1lQmFyKTtcclxuICAgICAgICBsZXQge3g6IGFic29sdXRlWH0gPSBhYnNvbHV0ZVBvc2l0aW9uO1xyXG4gICAgICAgIGxldCB7IHBhZ2VYOiB4IH0gPSBldmVudDtcclxuICAgICAgICBsZXQgdHJ1ZVggPSAoeCAtIChhYnNvbHV0ZVgpKTtcclxuICAgICAgICBsZXQgdm9sdW1lTGV2ZWwgPSAodHJ1ZVggLyB3aWR0aCk7XHJcbiAgICAgICAgbGV0IG11dGVDb250cm9sc0NsYXNzZXMgPSBbbXV0ZUNsYXNzZXMsIHVubXV0ZUNsYXNzZXNdO1xyXG4gICAgICAgIGxldCBtdXRlSWNvbiA9IHRoaXMuZ2V0RWxlbWVudEJ5Q2xhc3NlcyhtdXRlQ29udHJvbHMuY2hpbGRyZW4sIG11dGVDb250cm9sc0NsYXNzZXMpO1xyXG5cclxuICAgICAgICBtdXRlSWNvbi5jbGFzc05hbWUgPSB1bm11dGVDbGFzc2VzO1xyXG4gICAgICAgIGN1cnJlbnRWb2x1bWVTcGFuLnN0eWxlLndpZHRoID0gYCR7dm9sdW1lTGV2ZWwgKiAxMDB9JWA7XHJcblxyXG4gICAgICAgIHRoaXMuY3VycmVudFZvbHVtZSA9IHZvbHVtZUxldmVsO1xyXG4gICAgICAgIHRoaXMuc2V0Vm9sdW1lKHZvbHVtZUxldmVsKTtcclxuICAgIH1cclxuXHJcbiAgICBzY3J1YihldmVudCkge1xyXG4gICAgICAgIGxldCB7Y3VycmVudFRpbWVJbmZvLCBzY3J1YkJhciwgc2NydWJCYXJUaW1lTGFwc2VDbGFzc2VzfSA9IHRoaXM7XHJcbiAgICAgICAgbGV0IHtvZmZzZXRXaWR0aDogd2lkdGh9ID0gc2NydWJCYXI7XHJcbiAgICAgICAgbGV0IGFic29sdXRlUG9zaXRpb24gPSB0aGlzLmdldEFic29sdXRlUG9zaXRpb24oc2NydWJCYXIpO1xyXG4gICAgICAgIGxldCB7eDogYWJzb2x1dGVYfSA9IGFic29sdXRlUG9zaXRpb247XHJcbiAgICAgICAgbGV0IHsgcGFnZVg6IHggfSA9IGV2ZW50O1xyXG4gICAgICAgIGxldCB0cnVlWCA9ICh4IC0gKGFic29sdXRlWCkpO1xyXG4gICAgICAgIGxldCBzY3J1YlRvVGltZSA9IHRoaXMuZHVyYXRpb24gKiAodHJ1ZVggLyB3aWR0aCk7XHJcbiAgICAgICAgbGV0IGN1cnJlbnRUaW1lT2JqZWN0ID0gdGhpcy5jb252ZXJ0U2Vjb25kc1RvUGFydHMoc2NydWJUb1RpbWUpO1xyXG4gICAgICAgIGxldCBjdXJyZW50VGltZVN0YW1wID0gdGhpcy5jcmVhdGVUaW1lU3RhbXAoY3VycmVudFRpbWVPYmplY3QpO1xyXG4gICAgICAgIGxldCBzZWFyY2hDbGFzc2VzID0gW3NjcnViQmFyVGltZUxhcHNlQ2xhc3Nlc11cclxuICAgICAgICBsZXQgdGltZWxhcHNlZCA9IHRoaXMuZ2V0RWxlbWVudEJ5Q2xhc3NlcyhzY3J1YkJhci5jaGlsZHJlbiwgc2VhcmNoQ2xhc3Nlcyk7XHJcblxyXG4gICAgICAgIGN1cnJlbnRUaW1lSW5mby5pbm5lckhUTUwgPSBgJHtjdXJyZW50VGltZVN0YW1wfWA7XHJcbiAgICAgICAgdGltZWxhcHNlZC5zdHlsZS53aWR0aCA9IGAkeyh0cnVlWCAvIHdpZHRoKSAqIDEwMH0lYDtcclxuXHJcbiAgICAgICAgdGhpcy5zZWVrKHNjcnViVG9UaW1lKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRQbGF5UGF1c2UoZXZlbnQpIHtcclxuICAgICAgICBsZXQge3BsYXlQYXVzZUNvbnRyb2xzLCBwbGF5Q2xhc3NlcywgcGF1c2VDbGFzc2VzfSA9IHRoaXM7XHJcbiAgICAgICAgbGV0IHNlYXJjaENsYXNzZXMgPSBbcGxheUNsYXNzZXMsIHBhdXNlQ2xhc3Nlc107XHJcbiAgICAgICAgbGV0IHBsYXlQYXVzZUljb24gPSB0aGlzLmdldEVsZW1lbnRCeUNsYXNzZXMocGxheVBhdXNlQ29udHJvbHMuY2hpbGRyZW4sIHNlYXJjaENsYXNzZXMpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHN3aXRjaCAocGxheVBhdXNlSWNvbi5jbGFzc05hbWUpIHtcclxuICAgICAgICAgICAgY2FzZSBwbGF5Q2xhc3NlczpcclxuICAgICAgICAgICAgICAgIHBsYXlQYXVzZUljb24uY2xhc3NOYW1lID0gcGF1c2VDbGFzc2VzO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMucGxheSgpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgcGF1c2VDbGFzc2VzOlxyXG4gICAgICAgICAgICAgICAgcGxheVBhdXNlSWNvbi5jbGFzc05hbWUgPSBwbGF5Q2xhc3NlcztcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgdGhpcy5wYXVzZSgpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2V0TXV0ZShldmVudCkge1xyXG4gICAgICAgIGxldCB7bXV0ZUNvbnRyb2xzLCBtdXRlQ2xhc3NlcywgdW5tdXRlQ2xhc3Nlcywgdm9sdW1lQmFyLCB2b2x1bWVCYXJDdXJyZW50Vm9sdW1lQ2xhc3Nlc30gPSB0aGlzO1xyXG4gICAgICAgIGxldCBtdXRlQ29udHJvbHNDbGFzc2VzID0gW211dGVDbGFzc2VzLCB1bm11dGVDbGFzc2VzXTtcclxuICAgICAgICBsZXQgbXV0ZUljb24gPSB0aGlzLmdldEVsZW1lbnRCeUNsYXNzZXMobXV0ZUNvbnRyb2xzLmNoaWxkcmVuLCBtdXRlQ29udHJvbHNDbGFzc2VzKTtcclxuICAgICAgICBsZXQgY3VycmVudFZvbHVtZVNwYW4gPSB0aGlzLmdldEVsZW1lbnRCeUNsYXNzZXModm9sdW1lQmFyLmNoaWxkcmVuLCBbdm9sdW1lQmFyQ3VycmVudFZvbHVtZUNsYXNzZXNdKTtcclxuXHJcbiAgICAgICAgc3dpdGNoIChtdXRlSWNvbi5jbGFzc05hbWUpIHtcclxuICAgICAgICAgICAgY2FzZSB1bm11dGVDbGFzc2VzOlxyXG4gICAgICAgICAgICAgICAgbXV0ZUljb24uY2xhc3NOYW1lID0gbXV0ZUNsYXNzZXM7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50Vm9sdW1lU3Bhbi5zdHlsZS53aWR0aCA9IGAwJWA7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0Vm9sdW1lKDApO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgbXV0ZUNsYXNzZXM6XHJcbiAgICAgICAgICAgICAgICBtdXRlSWNvbi5jbGFzc05hbWUgPSB1bm11dGVDbGFzc2VzO1xyXG4gICAgICAgICAgICAgICAgY3VycmVudFZvbHVtZVNwYW4uc3R5bGUud2lkdGggPSBgJHt0aGlzLmN1cnJlbnRWb2x1bWUgKiAxMDB9JWA7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRWb2x1bWUodGhpcy5jdXJyZW50Vm9sdW1lKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uUmVhZHlUb1BsYXkocGxheWVyLCBzdGF0ZURhdGEpIHtcclxuICAgICAgICBsZXQge3ZvbHVtZUJhciwgdm9sdW1lQmFyQ3VycmVudFZvbHVtZUNsYXNzZXN9ID0gdGhpcztcclxuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgbGV0IGN1cnJlbnRWb2x1bWVTcGFuID0gdGhpcy5nZXRFbGVtZW50QnlDbGFzc2VzKHZvbHVtZUJhci5jaGlsZHJlbiwgW3ZvbHVtZUJhckN1cnJlbnRWb2x1bWVDbGFzc2VzXSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY3VycmVudFZvbHVtZVNwYW4uc3R5bGUud2lkdGggPSBgJHtzZWxmLmN1cnJlbnRWb2x1bWUgKiAxMDB9JWA7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5zZXRWb2x1bWUoc2VsZi5jdXJyZW50Vm9sdW1lKTtcclxuICAgICAgICB0aGlzLmdldER1cmF0aW9uKChkdXJhdGlvbikgPT4ge1xyXG4gICAgICAgICAgICBsZXQge3RvdGFsVGltZUluZm8sIGN1cnJlbnRUaW1lSW5mbywgc2NydWJCYXJ9ID0gc2VsZjtcclxuICAgICAgICAgICAgbGV0IGR1cmF0aW9uVGltZU9iamVjdCA9IHNlbGYuY29udmVydFNlY29uZHNUb1BhcnRzKGR1cmF0aW9uKTtcclxuICAgICAgICAgICAgbGV0IGR1cmF0aW9uVGltZVN0YW1wID0gc2VsZi5jcmVhdGVUaW1lU3RhbXAoZHVyYXRpb25UaW1lT2JqZWN0KTtcclxuXHJcbiAgICAgICAgICAgIHNlbGYuZHVyYXRpb24gPSBkdXJhdGlvbjtcclxuXHJcbiAgICAgICAgICAgIGlmICh0b3RhbFRpbWVJbmZvKSB0b3RhbFRpbWVJbmZvLmlubmVySFRNTCA9IGAvJHtkdXJhdGlvblRpbWVTdGFtcH1gO1xyXG4gICAgICAgICAgICBpZiAoY3VycmVudFRpbWVJbmZvKSBjdXJyZW50VGltZUluZm8uaW5uZXJIVE1MID0gYDAwOjAwYDtcclxuICAgICAgICAgICAgaWYgKHNjcnViQmFyKSBzY3J1YkJhci5jaGlsZHJlblswXS5zdHlsZS53aWR0aCA9IGAwJWA7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgb25UaW1lVXBkYXRlKHBsYXllcikge1xyXG4gICAgICAgIGxldCB7Y3VycmVudFRpbWVJbmZvLCBzY3J1YkJhciwgc2NydWJCYXJUaW1lTGFwc2VDbGFzc2VzfSA9IHRoaXM7XHJcbiAgICAgICAgbGV0IHtjdXJyZW50VGltZTogc2Vjb25kc30gPSBwbGF5ZXJbMF07XHJcblxyXG4gICAgICAgIHNlY29uZHMgPSBzZWNvbmRzID4gdGhpcy5kdXJhdGlvbiA/IDAgOiBzZWNvbmRzO1xyXG4gICAgICAgICBcclxuICAgICAgICBsZXQgY3VycmVudFRpbWVPYmplY3QgPSB0aGlzLmNvbnZlcnRTZWNvbmRzVG9QYXJ0cyhzZWNvbmRzKTtcclxuICAgICAgICBsZXQgY3VycmVudFRpbWVTdGFtcCA9IHRoaXMuY3JlYXRlVGltZVN0YW1wKGN1cnJlbnRUaW1lT2JqZWN0KTtcclxuICAgICAgICBsZXQgdGltZUxhcHNlZCA9IHNlY29uZHMgLyB0aGlzLmR1cmF0aW9uO1xyXG5cclxuICAgICAgICBpZiAoY3VycmVudFRpbWVJbmZvKSBjdXJyZW50VGltZUluZm8uaW5uZXJIVE1MID0gYCR7Y3VycmVudFRpbWVTdGFtcH1gO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCBzZWFyY2hDbGFzc2VzID0gW3NjcnViQmFyVGltZUxhcHNlQ2xhc3Nlc107XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKHNjcnViQmFyKSB7XHJcbiAgICAgICAgICAgIGxldCB0aW1lbGFwc2VkRWxlbWVudCA9IHRoaXMuZ2V0RWxlbWVudEJ5Q2xhc3NlcyhzY3J1YkJhci5jaGlsZHJlbiwgc2VhcmNoQ2xhc3Nlcyk7XHJcbiAgICAgICAgICAgICBcclxuICAgICAgICAgICAgdGltZWxhcHNlZEVsZW1lbnQuc3R5bGUud2lkdGggPSBgJHt0aW1lTGFwc2VkICogMTAwfSVgO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvblBsYXlpbmcoKSB7XHJcbiAgICAgICAgbGV0IHtwbGF5UGF1c2VDb250cm9scywgcGxheUNsYXNzZXMsIHBhdXNlQ2xhc3Nlc30gPSB0aGlzO1xyXG4gICAgICAgIGxldCBzZWFyY2hDbGFzc2VzID0gW3BsYXlDbGFzc2VzLCBwYXVzZUNsYXNzZXNdXHJcbiAgICAgICAgbGV0IHBsYXlQYXVzZUljb24gPSB0aGlzLmdldEVsZW1lbnRCeUNsYXNzZXMoXHJcbiAgICAgICAgICAgIHBsYXlQYXVzZUNvbnRyb2xzLmNoaWxkcmVuLFxyXG4gICAgICAgICAgICBzZWFyY2hDbGFzc2VzXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgcGxheVBhdXNlSWNvbi5jbGFzc05hbWUgPSBwYXVzZUNsYXNzZXM7XHJcblxyXG4gICAgICAgIHRoaXMucGxheSgpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uUGF1c2VkKCkge1xyXG4gICAgICAgIGxldCB7cGxheVBhdXNlQ29udHJvbHMsIHBsYXlDbGFzc2VzLCBwYXVzZUNsYXNzZXN9ID0gdGhpcztcclxuICAgICAgICBsZXQgc2VhcmNoQ2xhc3NlcyA9IFtwbGF5Q2xhc3NlcywgcGF1c2VDbGFzc2VzXVxyXG4gICAgICAgIGxldCBwbGF5UGF1c2VJY29uID0gdGhpcy5nZXRFbGVtZW50QnlDbGFzc2VzKFxyXG4gICAgICAgICAgICBwbGF5UGF1c2VDb250cm9scy5jaGlsZHJlbixcclxuICAgICAgICAgICAgc2VhcmNoQ2xhc3Nlc1xyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHBsYXlQYXVzZUljb24uY2xhc3NOYW1lID0gcGxheUNsYXNzZXM7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5wYXVzZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZEV2ZW50TGlzdGVuZXJzKGlWWGpzQnVzKSB7XHJcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIGxldCB7c2NydWJCYXIsIHZvbHVtZUJhciwgcGxheVBhdXNlQ29udHJvbHMsIG11dGVDb250cm9sc30gPSB0aGlzO1xyXG5cclxuICAgICAgICB0aGlzLmlWWGpzQnVzID0gaVZYanNCdXM7XHJcbiAgICAgICAgdGhpcy51cGRhdGVUaW1lID0gaVZYanNCdXMub24odGhpcy5jb250cm9sRXZlbnROYW1lcy5USU1FX1VQREFURSwgdXBkYXRlVGltZSk7XHJcbiAgICAgICAgdGhpcy53aGlsZVBhdXNlZCA9IGlWWGpzQnVzLm9uKHRoaXMuY29udHJvbEV2ZW50TmFtZXMuUEFVU0VELCB3aGlsZVBhdXNlZCk7XHJcbiAgICAgICAgdGhpcy53aGlsZVBsYXlpbmcgPSBpVlhqc0J1cy5vbih0aGlzLmNvbnRyb2xFdmVudE5hbWVzLlBMQVlJTkcsIHdoaWxlUGxheWluZyk7XHJcbiAgICAgICAgdGhpcy5jYW5QbGF5Q2FsbGJhY2sgPSAgaVZYanNCdXMub24odGhpcy5jb250cm9sRXZlbnROYW1lcy5DQU5fUExBWSwgY2FuUGxheUNhbGxCYWNrKTtcclxuICAgICAgICB0aGlzLnVwZGF0ZVRpbWUgPSB0aGlzLnVwZGF0ZVRpbWUgPyB0aGlzLnVwZGF0ZVRpbWUgOiB1cGRhdGVUaW1lO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHZvbHVtZUJhci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgc2VsZi5hZGp1c3RWb2x1bWUoZXZlbnQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHNjcnViQmFyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIHNlbGYuc2NydWIoZXZlbnQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHBsYXlQYXVzZUNvbnRyb2xzLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgc2VsZi5zZXRQbGF5UGF1c2UoZXZlbnQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIG11dGVDb250cm9scy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICBzZWxmLnNldE11dGUoZXZlbnQpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgIFxyXG4gICAgICAgIGZ1bmN0aW9uIGNhblBsYXlDYWxsQmFjayhwbGF5ZXIsIF9zdGF0ZURhdGEpIHtcclxuICAgICAgICAgICAgc2VsZi5vblJlYWR5VG9QbGF5KHBsYXllciwgX3N0YXRlRGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgXHJcbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlVGltZShwbGF5ZXIpIHtcclxuICAgICAgICAgICAgc2VsZi5vblRpbWVVcGRhdGUocGxheWVyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHdoaWxlUGF1c2VkKHBsYXllcikge1xyXG4gICAgICAgICAgICBzZWxmLm9uUGF1c2VkKHBsYXllcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiB3aGlsZVBsYXlpbmcoKSB7XHJcbiAgICAgICAgICAgIHNlbGYub25QbGF5aW5nKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldEVsZW1lbnRCeUNsYXNzZXMoZWxlbWVudHMsIGNsYXNzZXMpIHtcclxuICAgICAgICBsZXQgZWxlbWVudEFycmF5ID0gZWxlbWVudHMgaW5zdGFuY2VvZiBBcnJheSA/XHJcbiAgICAgICAgICAgIGVsZW1lbnRzIDpcclxuICAgICAgICAgICAgQXJyYXkuZnJvbShlbGVtZW50cyk7XHJcbiAgICAgICAgbGV0IHRoaXNFbGVtZW50O1xyXG5cclxuICAgICAgICBjbGFzc2VzLmZvckVhY2goKGNsYXNzTmFtZSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgaWYgKCFjbGFzc05hbWUpIHJldHVybjtcclxuICAgICAgICAgICAgaWYgKHRoaXNFbGVtZW50KSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICB0aGlzRWxlbWVudCA9IGVsZW1lbnRBcnJheS5maW5kKChlbGVtZW50LCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQuY2xhc3NOYW1lLmluZGV4T2YoY2xhc3NOYW1lKSA+PSAwO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpc0VsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlVGltZVN0YW1wKHRpbWVPYmplY3QpIHtcclxuICAgICAgICBsZXQge2hvdXJzLCByZW1haW5pbmdNaW51dGVzOiBtaW51dGVzLCByZW1haW5pbmdTZWNvbmRzOiBzZWNvbmRzfSA9IHRpbWVPYmplY3Q7XHJcbiAgICAgICAgbGV0IGhvdXJTdHJpbmcgPSAnJztcclxuICAgICAgICBsZXQgbWludXRlU3RyaW5nID0gbWludXRlcyA8IDEwID9cclxuICAgICAgICAgICAgYDAke21pbnV0ZXN9OmAgOlxyXG4gICAgICAgICAgICBgJHttaW51dGVzfTpgO1xyXG4gICAgICAgIGxldCBzZWNvbmRTdHJpbmcgPSBzZWNvbmRzIDwgMTAgP1xyXG4gICAgICAgICAgICBgMCR7c2Vjb25kc31gIDpcclxuICAgICAgICAgICAgYCR7c2Vjb25kc31gO1xyXG5cclxuICAgICAgICBpZiAoaG91cnMgPiAwKSB7XHJcbiAgICAgICAgICAgIGhvdXJTdHJpbmcgPSBob3VycyA8IDEwID9cclxuICAgICAgICAgICAgICAgIGAwJHtob3Vyc306YCA6XHJcbiAgICAgICAgICAgICAgICBgJHtob3Vyc306YDtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4gYCR7aG91clN0cmluZ30ke21pbnV0ZVN0cmluZ30ke3NlY29uZFN0cmluZ31gO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnZlcnRTZWNvbmRzVG9QYXJ0cyhzZWNvbmRzKSB7XHJcbiAgICAgICAgbGV0IG1pbnV0ZXMgPSBNYXRoLmZsb29yKHNlY29uZHMgLyA2MCk7XHJcbiAgICAgICAgbGV0IHRpbWVJbmZvcm1hdGlvbiA9IHtcclxuICAgICAgICAgICAgbWludXRlczogbWludXRlcyxcclxuICAgICAgICAgICAgaG91cnM6IE1hdGguZmxvb3IobWludXRlcyAvIDYwKSxcclxuICAgICAgICAgICAgcmVtYWluaW5nU2Vjb25kczogTWF0aC5mbG9vcihzZWNvbmRzICUgNjApLFxyXG4gICAgICAgICAgICByZW1haW5pbmdNaW51dGVzOiBNYXRoLmZsb29yKG1pbnV0ZXMgJSA2MCksXHJcbiAgICAgICAgICAgIHNlY29uZHM6IHNlY29uZHNcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aW1lSW5mb3JtYXRpb247XHJcbiAgICB9XHJcbn07IiwiLy8gVHlwZXNcclxuaW1wb3J0IHsgSHRtbDUgfSBmcm9tICcuL3R5cGVzL2h0bWw1LmpzJztcclxuaW1wb3J0IHsgWW91VHViZSB9IGZyb20gJy4vdHlwZXMveW91VHViZS5qcyc7XHJcbmltcG9ydCB7IFZpbWVvIH0gZnJvbSAnLi90eXBlcy92aW1lby5qcyc7XHJcblxyXG5leHBvcnQgY2xhc3MgUmVnaXN0ZXJlZFZpZGVvTW9kdWxlcyAge1xyXG4gICAgY29uc3RydWN0b3IoKXtcclxuICAgICAgICB0aGlzLnlvdXR1YmUgPSBZb3VUdWJlO1xyXG4gICAgICAgIHRoaXMuaHRtbDUgPSBIdG1sNTtcclxuICAgICAgICB0aGlzLnZpbWVvID0gVmltZW9cclxuICAgIH0gIFxyXG59OyIsImV4cG9ydCBkZWZhdWx0IGNsYXNze1xyXG4gICAgXHJcbiAgICBjb25zdHJ1Y3Rvcigpe1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIGdldCBQbGF5ZXJDb250cm9sRXZlbnRzKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIFwicGxheVwiIDogJ2lWWDp2aWRlbzpwbGF5JyxcclxuICAgICAgICAgICAgXCJwYXVzZVwiIDogJ2lWWDp2aWRlbzpwYXVzZScsXHJcbiAgICAgICAgICAgIFwic2Vla1wiIDogJ2lWWDp2aWRlbzpzZWVrZWQnLFxyXG4gICAgICAgICAgICBcInBsYXlpbmdcIiA6IFwiaVZYOnZpZGVvOnBsYXlpbmdcIixcclxuICAgICAgICAgICAgXCJlbmRlZFwiIDogXCJpVlg6dmlkZW86ZW5kZWRcIixcclxuICAgICAgICAgICAgXCJwYXVzZWRcIiA6IFwiaVZYOnZpZGVvOnBhdXNlZFwiLFxyXG4gICAgICAgICAgICBcInNldFZvbHVtZVwiIDogJ2lWWDp2aWRlbzpzZXRWb2x1bWUnLFxyXG4gICAgICAgICAgICBcImR1cmF0aW9uXCIgOiBcImlWWDp2aWRlbzpyZXF1ZXN0RHVyYXRpb25cIixcclxuICAgICAgICAgICAgXCJnZXREdXJhdGlvblwiIDogXCJpVlg6dmlkZW86Z2V0RHVyYXRpb25cIixcclxuICAgICAgICAgICAgXCJjYW5QbGF5XCIgOiBcImlWWDp2aWRlbzpjYW5wbGF5XCIsXHJcbiAgICAgICAgICAgIFwidGltZVVwZGF0ZVwiIDogXCJpVlg6dmlkZW86dGltZXVwZGF0ZVwiLFxyXG4gICAgICAgICAgICBcImRpc3Bvc2VcIiA6IFwiaVZYOnZpZGVvOmRpc3Bvc2VcIixcclxuICAgICAgICAgICAgXCJ2b2x1bWVcIiA6ICdpVlg6dmlkZW86c2V0Vm9sdW1lJyAgIFxyXG4gICAgICAgIH1cclxuICAgIH1cclxufTsiLCJpbXBvcnQgeyBPYmplY3RQYXJzZXJzIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxpdGllcy90eXBlLXBhcnNlcnMuanNcIjtcbmltcG9ydCBQbGF5ZXJTZXR0aW5ncyBmcm9tIFwiLi4vc2V0dGluZ3MuanNcIjtcbmltcG9ydCBWaWRlb0V2ZW50TmFtZXMgZnJvbSBcIi4uLy4uLy4uL2NvbnN0YW50cy92aWRlby5ldmVudHMuanNcIjtcblxubGV0IHRoaXNPYmplY3RQYXJzZXJzID0gbmV3IE9iamVjdFBhcnNlcnMoKTtcbmxldCBwbGF5ZXJTZXR0aW5ncyA9IG5ldyBQbGF5ZXJTZXR0aW5ncygpO1xuXG5leHBvcnQgY2xhc3MgSHRtbDUge1xuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lciwgc2V0dGluZ3MsIHN0YXRlRGF0YSA9IHt9LCBpVlhqc0xvZykge1xuICAgICAgICB0aGlzLnNldHRpbmdzID0gc2V0dGluZ3M7XG4gICAgICAgIHRoaXMuc3RhdGVEYXRhID0gc3RhdGVEYXRhO1xuICAgICAgICB0aGlzLnZpZGVvRXZlbnROYW1lcyA9IG5ldyBWaWRlb0V2ZW50TmFtZXMoKTtcblxuICAgICAgICBjb250YWluZXIuaHRtbCh0aGlzLmh0bWwpO1xuXG4gICAgICAgIHRoaXMucGxheWVyID0gY29udGFpbmVyWzBdLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiVklERU9cIilbMF07XG4gICAgICAgIHRoaXMuaVZYanNMb2cgPSBpVlhqc0xvZztcbiAgICB9XG5cbiAgICBwbGF5KCkge1xuICAgICAgICB0aGlzLnBsYXllci5wbGF5KCk7XG4gICAgfVxuXG4gICAgcGF1c2UoKSB7XG4gICAgICAgIHRoaXMucGxheWVyLnBhdXNlKCk7XG4gICAgfVxuXG4gICAgc2VlayhuZXdUaW1lKSB7XG4gICAgICAgIFxuICAgICAgICB0aGlzLnBsYXllci5jdXJyZW50VGltZSA9IG5ld1RpbWU7XG4gICAgfVxuXG4gICAgZ2V0RHVyYXRpb24oKSB7XG4gICAgICAgIHRoaXMuaVZYanNCdXMuZW1pdCh0aGlzLnZpZGVvRXZlbnROYW1lcy5TRVRfRFVSQVRJT04sIHRoaXMucGxheWVyLmR1cmF0aW9uKTtcbiAgICB9XG5cbiAgICBzZXRWb2x1bWUodm9sdW1lKSB7XG4gICAgICAgIHRoaXMucGxheWVyLnZvbHVtZSA9IHZvbHVtZTtcbiAgICB9XG5cbiAgICBzZWVrKGN1cnJlbnRUaW1lKSB7XG4gICAgICAgIHRoaXMucGxheWVyLmN1cnJlbnRUaW1lID0gY3VycmVudFRpbWVcbiAgICB9XG5cbiAgICBwbGF5aW5nKCkgeyB9XG5cbiAgICBzZXRPblJlYWR5KCkge1xuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy5wbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcigncGF1c2UnLCAoKSA9PiB7XG4gICAgICAgICAgICBzZWxmLmlWWGpzQnVzLmVtaXQoc2VsZi52aWRlb0V2ZW50TmFtZXMuUEFVU0VELCBzZWxmLnBsYXllcik7XG4gICAgICAgIH0pXG4gICAgICAgIHRoaXMucGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NhbnBsYXknLCAoKSA9PiB7XG4gICAgICAgICAgICBzZWxmLmlWWGpzQnVzLmVtaXQoc2VsZi52aWRlb0V2ZW50TmFtZXMuQ0FOX1BMQVksIHNlbGYucGxheWVyLCBzZWxmLnN0YXRlRGF0YSlcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoJ3BsYXlpbmcnLCAoKSA9PiB7XG4gICAgICAgICAgICBzZWxmLmlWWGpzQnVzLmVtaXQoc2VsZi52aWRlb0V2ZW50TmFtZXMuUExBWUlORywgc2VsZi5wbGF5ZXIsIHNlbGYuc3RhdGVEYXRhKVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzZXRUaW1lVXBkYXRlKCkge1xuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy5wbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcigndGltZXVwZGF0ZScsICgpID0+IHtcbiAgICAgICAgICAgIHNlbGYuaVZYanNCdXMuZW1pdChzZWxmLnZpZGVvRXZlbnROYW1lcy5USU1FX1VQREFURSwgc2VsZi5wbGF5ZXIsIHNlbGYuc3RhdGVEYXRhKVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHNldE9uRW5kKCkge1xuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy5wbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcignZW5kZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICBzZWxmLmlWWGpzQnVzLmVtaXQoc2VsZi52aWRlb0V2ZW50TmFtZXMuRU5ERUQsIHNlbGYucGxheWVyLCBzZWxmLnN0YXRlRGF0YSlcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBhZGRFdmVudExpc3RlbmVycyhpVlhqc0J1cykge1xuICAgICAgICBsZXQgeyB2aWRlb0V2ZW50TmFtZXMsIGlWWGpzTG9nIH0gPSB0aGlzOztcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xuXG4gICAgICAgIHRoaXMuaVZYanNCdXMgPSBpVlhqc0J1cztcblxuICAgICAgICAvLyBHZXQgY3VzdG9tIGlWWGpzQnVzIEZ1bmN0aW9uXG4gICAgICAgIHRoaXMucGxheU9uRXZlbnQgPSBpVlhqc0J1cy5vbih2aWRlb0V2ZW50TmFtZXMuUExBWSwgcGxheU9uRXZlbnQpO1xuICAgICAgICB0aGlzLnBhdXNlT25FdmVudCA9IGlWWGpzQnVzLm9uKHZpZGVvRXZlbnROYW1lcy5QQVVTRSwgcGF1c2VPbkV2ZW50KTtcbiAgICAgICAgdGhpcy52b2x1bWVPbkV2ZW50ID0gaVZYanNCdXMub24odmlkZW9FdmVudE5hbWVzLlNFVF9WT0xVTUUsIHZvbHVtZU9uRXZlbnQpO1xuICAgICAgICB0aGlzLmR1cmF0aW9uT25FdmVudCA9IGlWWGpzQnVzLm9uKHZpZGVvRXZlbnROYW1lcy5HRVRfRFVSQVRJT04sIGR1cmF0aW9uT25FdmVudCk7XG4gICAgICAgIHRoaXMuc2Vla09uRXZlbnQgPSBpVlhqc0J1cy5vbih2aWRlb0V2ZW50TmFtZXMuU0VFSywgc2Vla09uRXZlbnQpO1xuICAgICAgICB0aGlzLnBsYXlpbmdPbkV2ZW50ID0gaVZYanNCdXMub24odmlkZW9FdmVudE5hbWVzLlBMQVlJTkcsIHBsYXlpbmdPbkV2ZW50KTtcblxuICAgICAgICAvLyBJZiBpdCBkb2Vzbid0IGhhdmUgYSBjdXN0b20gZnVuY3Rpb24sIGFkZCB0aGUgZGVmYXVsdCBvbmUgc28gdGhlIEJ1cyBjYW4gZGlzcG9zZSBvZiBpdC5cbiAgICAgICAgdGhpcy5wbGF5T25FdmVudCA9IHRoaXMucGxheU9uRXZlbnQgPyB0aGlzLnBsYXlPbkV2ZW50IDogcGxheU9uRXZlbnQ7XG4gICAgICAgIHRoaXMucGF1c2VPbkV2ZW50ID0gdGhpcy5wYXVzZU9uRXZlbnQgPyB0aGlzLnBhdXNlT25FdmVudCA6IHBhdXNlT25FdmVudDtcbiAgICAgICAgdGhpcy5zZWVrT25FdmVudCA9IHRoaXMuc2Vla09uRXZlbnQgPyB0aGlzLnNlZWtPbkV2ZW50IDogc2Vla09uRXZlbnQ7XG4gICAgICAgIHRoaXMuZHVyYXRpb25PbkV2ZW50ID0gdGhpcy5kdXJhdGlvbk9uRXZlbnQgPyB0aGlzLmR1cmF0aW9uT25FdmVudCA6IGR1cmF0aW9uT25FdmVudDtcbiAgICAgICAgdGhpcy52b2x1bWVPbkV2ZW50ID0gdGhpcy52b2x1bWVPbkV2ZW50ID8gdGhpcy52b2x1bWVPbkV2ZW50IDogdm9sdW1lT25FdmVudDtcbiAgICAgICAgdGhpcy5wbGF5aW5nT25FdmVudCA9IHRoaXMucGxheWluZ09uRXZlbnQgPyB0aGlzLnBsYXlpbmdPbkV2ZW50IDogcGxheWluZ09uRXZlbnQ7XG5cbiAgICAgICAgdGhpcy5zZXRPblJlYWR5KCk7XG4gICAgICAgIHRoaXMuc2V0VGltZVVwZGF0ZSgpO1xuICAgICAgICB0aGlzLnNldE9uRW5kKCk7XG5cbiAgICAgICAgdGhpcy5wbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGxldCB7IHNldHRpbmdzIH0gPSBzZWxmO1xuICAgICAgICAgICAgbGV0IHsgc3JjLCBzb3VyY2VzID0gW10gfSA9IHNldHRpbmdzO1xuICAgICAgICAgICAgbGV0IHNvdXJjZVN0cmluZyA9IFwiXCI7XG5cbiAgICAgICAgICAgIGlmIChzcmMpIHtcbiAgICAgICAgICAgICAgICBzb3VyY2VTdHJpbmcgPSBgRmFpbGVkIHRvIGxvYWQgdmlkZW8gd2l0aCBmaWxlcGF0aDogJHtzcmN9YDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHNvdXJjZXMpIHtcbiAgICAgICAgICAgICAgICBzb3VyY2VTdHJpbmcgPSBzb3VyY2VzLnJlZHVjZSgoc291cmNlTGlzdCwgc291cmNlUGF0aCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYCR7c291cmNlTGlzdH0ke3NvdXJjZVBhdGguc3JjfWA7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYCR7c291cmNlTGlzdH0sJHtzb3VyY2VQYXRoLnNyY31gO1xuICAgICAgICAgICAgICAgIH0sIFwiRmFpbGVkIHRvIGxvYWQgb25lIG9mIHRoZSB2aWRlb3Mgd2l0aCBmaWxlcGF0aHM6IFwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGVycm9yT2JqID0ge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGAke3NvdXJjZVN0cmluZ31gXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlWWGpzTG9nLmVycm9yKGVycm9yT2JqLCBcIlZJREVPXCIpO1xuICAgICAgICB9LCB0cnVlKTtcblxuICAgICAgICBmdW5jdGlvbiBwbGF5T25FdmVudCgpIHtcbiAgICAgICAgICAgIHNlbGYucGxheSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcGF1c2VPbkV2ZW50KCkge1xuICAgICAgICAgICAgc2VsZi5wYXVzZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcGxheWluZ09uRXZlbnQoKSB7XG4gICAgICAgICAgICBzZWxmLnBsYXlpbmcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNlZWtPbkV2ZW50KGN1cnJlbnRUaW1lKSB7XG4gICAgICAgICAgICBsZXQgeyBzZWNvbmRzIH0gPSBjdXJyZW50VGltZTtcblxuICAgICAgICAgICAgaWYgKHNlY29uZHMpIHtcbiAgICAgICAgICAgICAgICBzZWxmLnNlZWsoc2Vjb25kcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNlbGYuc2VlayhjdXJyZW50VGltZVswXS5zZWNvbmRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGR1cmF0aW9uT25FdmVudCgpIHtcbiAgICAgICAgICAgIHNlbGYuZ2V0RHVyYXRpb24oKVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdm9sdW1lT25FdmVudCh2b2x1bWUpIHtcbiAgICAgICAgICAgIHNlbGYuc2V0Vm9sdW1lKHZvbHVtZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkaXNwb3NlKGlWWGpzQnVzKSB7XG4gICAgICAgIGxldCB7IHZpZGVvRXZlbnROYW1lcyB9ID0gdGhpcztcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgICAgICBsZXQgZXZlbnROYW1lTWFwID0ge1xuICAgICAgICAgICAgcGxheTogdmlkZW9FdmVudE5hbWVzLlBMQVksXG4gICAgICAgICAgICBwYXVzZTogdmlkZW9FdmVudE5hbWVzLlBBVVNFLFxuICAgICAgICAgICAgc2VlazogdmlkZW9FdmVudE5hbWVzLlNFRUssXG4gICAgICAgICAgICBkdXJhdGlvbjogdmlkZW9FdmVudE5hbWVzLkdFVF9EVVJBVElPTixcbiAgICAgICAgICAgIHZvbHVtZTogdmlkZW9FdmVudE5hbWVzLlNFVF9WT0xVTUUsXG4gICAgICAgICAgICBwbGF5aW5nOiB2aWRlb0V2ZW50TmFtZXMuUExBWUlOR1xuICAgICAgICB9O1xuICAgICAgICBsZXQgZXZlbnRzVG9EaXNwb3NlID0gT2JqZWN0LmtleXMoZXZlbnROYW1lTWFwKTtcblxuICAgICAgICBldmVudHNUb0Rpc3Bvc2UuZm9yRWFjaCgoZXZlbnROYW1lVG9EaXNwb3NlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFzZWxmW2Ake2V2ZW50TmFtZVRvRGlzcG9zZX1PbkV2ZW50YF0pIHJldHVybjtcblxuICAgICAgICAgICAgaVZYanNCdXMucmVtb3ZlTGlzdGVuZXIoZXZlbnROYW1lTWFwW2V2ZW50TmFtZVRvRGlzcG9zZV0sIHNlbGZbYCR7ZXZlbnROYW1lVG9EaXNwb3NlfU9uRXZlbnRgXSlcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0IGh0bWwoKSB7XG4gICAgICAgIGxldCB7IGlzaU9TID0gZmFsc2UgfSA9IHRoaXMuc3RhdGVEYXRhO1xuICAgICAgICBsZXQgeyB0cmFja3MgPSBbXSwgc291cmNlcyA9IFtdLCBjb250cm9scyA9IHRydWUgfSA9IHRoaXMuc2V0dGluZ3M7XG4gICAgICAgIGxldCB0YWdzID0gWyd0cmFja3MnLCAnc291cmNlcycsICdhdXRvcGxheSddO1xuICAgICAgICBsZXQganVzdEF0dHJzID0gWydjb250cm9scyddO1xuXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5zZXR0aW5ncy5jb250cm9scyA9PT0gJ3N0cmluZycgfHwgIWNvbnRyb2xzKSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5zZXR0aW5ncy5jb250cm9scztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MuY29udHJvbHMgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGF0dHJIVE1MID0gdGhpc09iamVjdFBhcnNlcnMucmVkdWNlKHRoaXMuc2V0dGluZ3MsICh0aGlzQXR0ckhUTUwsIHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgICAgIGlmICh0YWdzLmluZGV4T2Yoa2V5KSA+PSAwKSByZXR1cm4gdGhpc0F0dHJIVE1MO1xuICAgICAgICAgICAgaWYgKGp1c3RBdHRycy5pbmRleE9mKGtleSkgPj0gMCkgcmV0dXJuIGAke3RoaXNBdHRySFRNTH0gJHtrZXl9YDtcblxuICAgICAgICAgICAgcmV0dXJuIGAke3RoaXNBdHRySFRNTH0gJHtrZXl9PVwiJHt2YWx1ZX1cImBcbiAgICAgICAgfSwgXCJcIik7XG4gICAgICAgIGxldCB0cmFja1RhZ3MgPSB0cmFja3MucmVkdWNlKCh0cmFja0hUTUwsIHRyYWNrU2V0dGluZ3MsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBsZXQgdHJhY2tBdHRySFRNTCA9IHRoaXNPYmplY3RQYXJzZXJzLnJlZHVjZSh0cmFja1NldHRpbmdzLCAoYXR0ckhUTUwsIHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7YXR0ckhUTUx9ICR7a2V5fT1cIiR7dmFsdWV9XCJgO1xuICAgICAgICAgICAgfSwgXCJcIilcblxuICAgICAgICAgICAgcmV0dXJuIGAke3RyYWNrSFRNTH0gXG4gICAgICAgICAgICA8dHJhY2sgJHt0cmFja0F0dHJIVE1MfT5gO1xuICAgICAgICB9LCBcIlwiKTtcbiAgICAgICAgbGV0IHNvdXJjZVRhZ3MgPSBzb3VyY2VzLnJlZHVjZSgoc291cmNlSFRNTCwgc291cmNlU2V0dGluZ3MsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBsZXQgc291cmNlQXR0ckhUTUwgPSB0aGlzT2JqZWN0UGFyc2Vycy5yZWR1Y2Uoc291cmNlU2V0dGluZ3MsIChhdHRySFRNTCwgdmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBgJHthdHRySFRNTH0gJHtrZXl9PVwiJHt2YWx1ZX1cImA7XG4gICAgICAgICAgICB9LCBcIlwiKVxuXG4gICAgICAgICAgICByZXR1cm4gYCR7c291cmNlSFRNTH0gXG4gICAgICAgICAgICA8c291cmNlICR7c291cmNlQXR0ckhUTUx9PmA7XG4gICAgICAgIH0sIFwiXCIpO1xuXG4gICAgICAgIHJldHVybiBgXG4gICAgICAgICAgICA8dmlkZW8gIHdpZHRoPVwiMTAwJVwiICR7YXR0ckhUTUx9IG9uY2xpY2s9XCJ0aGlzLnBhdXNlZCA/IHRoaXMucGxheSgpIDogdGhpcy5wYXVzZSgpO1wiPlxuICAgICAgICAgICAgICAgICR7c291cmNlVGFnc31cbiAgICAgICAgICAgICAgICAke3RyYWNrVGFnc31cbiAgICAgICAgICAgIDwvdmlkZW8+YDtcbiAgICB9XG59OyIsImltcG9ydCBQbGF5ZXJTZXR0aW5ncyBmcm9tIFwiLi4vc2V0dGluZ3MuanNcIjtcclxuaW1wb3J0IFZpZGVvRXZlbnROYW1lcyBmcm9tIFwiLi4vLi4vLi4vY29uc3RhbnRzL3ZpZGVvLmV2ZW50cy5qc1wiO1xyXG5cclxubGV0IHBsYXllclNldHRpbmdzID0gbmV3IFBsYXllclNldHRpbmdzKCk7XHJcblxyXG5leHBvcnQgY2xhc3MgVmltZW8ge1xyXG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyLCBzZXR0aW5ncywgc3RhdGVEYXRhLCBpVlhqc0xvZykge1xyXG4gICAgICAgIHRoaXMuX3NldHRpbmdzID0gc2V0dGluZ3M7XHJcbiAgICAgICAgdGhpcy5fc3RhdGVEYXRhID0gc3RhdGVEYXRhO1xyXG5cclxuICAgICAgICBsZXQge2lkLCB3aWR0aCwgbG9vcH0gPSBzZXR0aW5ncztcclxuICAgICAgICBsZXQgb3B0aW9ucyA9IHsgaWQsIHdpZHRoLCBsb29wIH07XHJcblxyXG4gICAgICAgIGNvbnRhaW5lci5odG1sKHRoaXMuaHRtbCk7XHJcblxyXG4gICAgICAgIHRoaXMucGxheWVyID0gbmV3IHdpbmRvdy5WaW1lby5QbGF5ZXIoJ3BsYXllcjEnLCBvcHRpb25zKTtcclxuICAgICAgICB0aGlzLnZpZGVvRXZlbnROYW1lcyA9IG5ldyBWaWRlb0V2ZW50TmFtZXMoKTtcclxuICAgICAgICB0aGlzLmlWWGpzTG9nID0gaVZYanNMb2dcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVQbGF5ZXIoKSB7XHJcbiAgICAgICAgbGV0IGhhc0NvbnRyb2xzID0gMTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBjb250cm9scyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgaGFzQ29udHJvbHMgPSAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBkaXNwb3NlKGlWWGpzQnVzKSB7XHJcbiAgICAgICAgbGV0IHt2aWRlb0V2ZW50TmFtZXN9ID0gdGhpcztcclxuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgbGV0IGV2ZW50TmFtZU1hcCA9IHtcclxuICAgICAgICAgICAgcGxheTogdmlkZW9FdmVudE5hbWVzLlBMQVksXHJcbiAgICAgICAgICAgIHBhdXNlOiB2aWRlb0V2ZW50TmFtZXMuUEFVU0UsXHJcbiAgICAgICAgICAgIHNlZWs6IHZpZGVvRXZlbnROYW1lcy5TRUVLLFxyXG4gICAgICAgICAgICBkdXJhdGlvbjogdmlkZW9FdmVudE5hbWVzLkdFVF9EVVJBVElPTixcclxuICAgICAgICAgICAgdm9sdW1lOiB2aWRlb0V2ZW50TmFtZXMuU0VUX1ZPTFVNRSxcclxuICAgICAgICAgICAgcGxheWluZzogdmlkZW9FdmVudE5hbWVzLlBMQVlJTkcsXHJcbiAgICAgICAgICAgIGVuZGVkOiB2aWRlb0V2ZW50TmFtZXMuRU5ERURcclxuICAgICAgICB9O1xyXG4gICAgICAgIGxldCBldmVudHNUb0Rpc3Bvc2UgPSBPYmplY3Qua2V5cyhldmVudE5hbWVNYXApO1xyXG5cclxuICAgICAgICBldmVudHNUb0Rpc3Bvc2UuZm9yRWFjaCgoZXZlbnROYW1lVG9EaXNwb3NlLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIXNlbGZbYCR7ZXZlbnROYW1lVG9EaXNwb3NlfU9uRXZlbnRgXSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgaVZYanNCdXMucmVtb3ZlTGlzdGVuZXIoZXZlbnROYW1lTWFwW2V2ZW50TmFtZVRvRGlzcG9zZV0sIHNlbGZbYCR7ZXZlbnROYW1lVG9EaXNwb3NlfU9uRXZlbnRgXSlcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRFdmVudExpc3RlbmVycyhpVlhqc0J1cykge1xyXG4gICAgICAgIGxldCB7X3N0YXRlRGF0YTogc3RhdGVEYXRhLCB2aWRlb0V2ZW50TmFtZXMsIF9zZXR0aW5nc30gPSB0aGlzO1xyXG4gICAgICAgIGxldCB7aWR9ID0gX3NldHRpbmdzO1xyXG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgICAgICBsZXQgdGltZVVwZGF0ZUlkO1xyXG4gICAgICAgIGxldCB1cmwgPSBgaHR0cHM6Ly9wbGF5ZXIudmltZW8uY29tL3ZpZGVvLyR7X3NldHRpbmdzLmlkfWBcclxuICAgICAgICBsZXQgb0VtYmVkVXJsID0gYGh0dHBzOi8vdmltZW8uY29tL2FwaS9vZW1iZWQuanNvbj91cmw9JHt1cmx9YFxyXG4gICAgICAgIGxldCBjYW5HZXRWaWRlbyA9ICh4aHIpID0+IHtcclxuICAgICAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBlcnJvck9iaiA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA6IGBWaW1lbyBmYWlsZWQgdG8gbG9hZCB3aXRoIGlkOiAke2lkfS5gXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuaVZYanNMb2cuZXJyb3IoZXJyb3JPYmosIFwiVklERU9cIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGxldCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuICAgICAgICBsZXQgZGVmZXJyZWQgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSAoKSA9PiB7IGNhbkdldFZpZGVvKHhocik7IH07XHJcbiAgICAgICAgICAgIHhoci5vcGVuKCdHRVQnLCBvRW1iZWRVcmwpO1xyXG4gICAgICAgICAgICB4aHIuc2VuZCgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBzZWxmLmR1cmF0aW9uT25FdmVudCA9IGlWWGpzQnVzLm9uKHZpZGVvRXZlbnROYW1lcy5HRVRfRFVSQVRJT04sIGR1cmF0aW9uT25FdmVudCk7XHJcbiAgICAgICAgc2VsZi5wYXVzZU9uRXZlbnQgPSBpVlhqc0J1cy5vbih2aWRlb0V2ZW50TmFtZXMuUEFVU0UsIHBhdXNlT25FdmVudCk7XHJcbiAgICAgICAgc2VsZi5wbGF5T25FdmVudCA9IGlWWGpzQnVzLm9uKHZpZGVvRXZlbnROYW1lcy5QTEFZLCBwbGF5T25FdmVudCk7XHJcbiAgICAgICAgc2VsZi5zZWVrT25FdmVudCA9IGlWWGpzQnVzLm9uKHZpZGVvRXZlbnROYW1lcy5TRUVLLCBzZWVrT25FdmVudCk7XHJcbiAgICAgICAgc2VsZi52b2x1bWVPbkV2ZW50ID0gaVZYanNCdXMub24odmlkZW9FdmVudE5hbWVzLlNFVF9WT0xVTUUsIHZvbHVtZU9uRXZlbnQpO1xyXG5cclxuICAgICAgICBzZWxmLmR1cmF0aW9uT25FdmVudCA9IHR5cGVvZiBzZWxmLmR1cmF0aW9uT25FdmVudCA9PT0gJ2Z1bmN0aW9uJyA/IHNlbGYuZHVyYXRpb25PbkV2ZW50IDogZHVyYXRpb25PbkV2ZW50O1xyXG4gICAgICAgIHNlbGYucGF1c2VPbkV2ZW50ID0gdHlwZW9mIHNlbGYucGF1c2VPbkV2ZW50ID09PSAnZnVuY3Rpb24nID8gc2VsZi5wYXVzZU9uRXZlbnQgOiBwYXVzZU9uRXZlbnQ7XHJcbiAgICAgICAgc2VsZi5wbGF5T25FdmVudCA9IHR5cGVvZiBzZWxmLnBsYXlPbkV2ZW50ID09PSAnZnVuY3Rpb24nID8gc2VsZi5wbGF5T25FdmVudCA6IHBsYXlPbkV2ZW50O1xyXG4gICAgICAgIHNlbGYuc2Vla09uRXZlbnQgPSB0eXBlb2Ygc2VsZi5zZWVrT25FdmVudCA9PT0gJ2Z1bmN0aW9uJyA/IHNlbGYuc2Vla09uRXZlbnQgOiBzZWVrT25FdmVudDtcclxuICAgICAgICBzZWxmLnZvbHVtZU9uRXZlbnQgPSB0eXBlb2Ygc2VsZi52b2x1bWVPbkV2ZW50ID09PSAnZnVuY3Rpb24nID8gc2VsZi52b2x1bWVPbkV2ZW50IDogdm9sdW1lT25FdmVudDtcclxuXHJcbiAgICAgICAgZGVmZXJyZWQudGhlbigoKT0+e1xyXG4gICAgICAgICAgICAgc2VsZi5wbGF5ZXIucmVhZHkoKS50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlWWGpzQnVzLmVtaXQodmlkZW9FdmVudE5hbWVzLkNBTl9QTEFZLCBzZWxmLnBsYXllcik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICBcclxuICAgICAgICBzZWxmLnBsYXllci5vbigndGltZXVwZGF0ZScsICh2aW1lb1BsYXlJbmZvKSA9PiB7XHJcbiAgICAgICAgICAgIHZpbWVvUGxheUluZm8uY3VycmVudFRpbWUgPSB2aW1lb1BsYXlJbmZvLnNlY29uZHM7XHJcblxyXG4gICAgICAgICAgICBpVlhqc0J1cy5lbWl0KHZpZGVvRXZlbnROYW1lcy5USU1FX1VQREFURSwgdmltZW9QbGF5SW5mbyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHNlbGYucGxheWVyLm9uKCdlbmRlZCcsICgpID0+e1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkdPVCBIRVJFP1wiKTtcclxuICAgICAgICAgICAgaVZYanNCdXMuZW1pdCh2aWRlb0V2ZW50TmFtZXMuRU5ERUQsIHNlbGYpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBzZWxmLnBsYXllci5vbignbG9hZGVkJywgKCk9PntcclxuICAgICAgICAgICAgaVZYanNCdXMuZW1pdCh2aWRlb0V2ZW50TmFtZXMuQ0FOX1BMQVksIHNlbGYpO1xyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHBsYXlPbkV2ZW50KCkge1xyXG4gICAgICAgICAgICBzZWxmLnBsYXllci5wbGF5KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBwYXVzZU9uRXZlbnQoKSB7XHJcbiAgICAgICAgICAgIHNlbGYucGxheWVyLnBhdXNlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiB2b2x1bWVPbkV2ZW50KHZvbHVtZSkge1xyXG4gICAgICAgICAgICBzZWxmLnBsYXllci5zZXRWb2x1bWUodm9sdW1lKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNlZWtPbkV2ZW50KGN1cnJlbnRUaW1lKSB7XHJcbiAgICAgICAgICAgIHNlbGYucGxheWVyLnNldEN1cnJlbnRUaW1lKGN1cnJlbnRUaW1lKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGR1cmF0aW9uT25FdmVudCgpIHtcclxuICAgICAgICAgICAgc2VsZi5wbGF5ZXJcclxuICAgICAgICAgICAgICAgIC5nZXREdXJhdGlvbigpXHJcbiAgICAgICAgICAgICAgICAudGhlbigoZHVyYXRpb24pPT57XHJcbiAgICAgICAgICAgICAgICAgICAgaVZYanNCdXMuZW1pdCh2aWRlb0V2ZW50TmFtZXMuU0VUX0RVUkFUSU9OLCBkdXJhdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9KTsgICBcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGh0bWwoKSB7XHJcbiAgICAgICAgcmV0dXJuIGA8ZGl2IGlkPVwicGxheWVyMVwiIGRhdGEtdmltZW8tYXV0b3BsYXk9XCJmYWxzZVwiIGRhdGEtdmltZW8tbG9vcD1cImZhbHNlXCI+PC9kaXY+YDtcclxuICAgIH1cclxufSIsImltcG9ydCBWaWRlb0V2ZW50TmFtZXMgZnJvbSBcIi4uLy4uLy4uL2NvbnN0YW50cy92aWRlby5ldmVudHMuanNcIjtcblxuZXhwb3J0IGNsYXNzIFlvdVR1YmUge1xuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lciwgc2V0dGluZ3MsIHN0YXRlRGF0YSwgaVZYanNMb2cpIHtcbiAgICAgICAgdGhpcy5fc2V0dGluZ3MgPSBzZXR0aW5ncztcbiAgICAgICAgdGhpcy5fc3RhdGVEYXRhID0gc3RhdGVEYXRhO1xuICAgICAgICB0aGlzLmludGVydmFscyA9IFtdO1xuICAgICAgICB0aGlzLnZpZGVvRXZlbnROYW1lcyA9IG5ldyBWaWRlb0V2ZW50TmFtZXMoKTtcbiAgICAgICAgdGhpcy5pVlhqc0xvZyA9IGlWWGpzTG9nO1xuXG4gICAgICAgIGNvbnRhaW5lci5odG1sKHRoaXMuaHRtbCk7XG4gICAgfVxuXG4gICAgY3JlYXRlUGxheWVyKCkge1xuICAgICAgICBsZXQgeyBoZWlnaHQgPSAnaW5oZXJpdCcsIHdpZHRoID0gJ2luaGVyaXQnLCBpZCwgY29udHJvbHN9ID0gdGhpcy5fc2V0dGluZ3M7XG4gICAgICAgIGxldCBoYXNDb250cm9scyA9IDE7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb250cm9scyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGhhc0NvbnRyb2xzID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucGxheWVyID0gbmV3IFlULlBsYXllcihgeW91dHViZS1wbGF5ZXJgLCB7XG4gICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICAgIHZpZGVvSWQ6IGlkLFxuICAgICAgICAgICAgcGxheWVyVmFyczoge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xzOiBoYXNDb250cm9scyxcbiAgICAgICAgICAgICAgICBzaG93aW5mbzogMCxcbiAgICAgICAgICAgICAgICBhdXRvaGlkZTogMVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBkaXNwb3NlKGlWWGpzQnVzKSB7XG4gICAgICAgIGxldCB7dmlkZW9FdmVudE5hbWVzfSA9IHRoaXM7XG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgICAgbGV0IGV2ZW50TmFtZU1hcCA9IHtcbiAgICAgICAgICAgIHBsYXk6IHZpZGVvRXZlbnROYW1lcy5QTEFZLFxuICAgICAgICAgICAgcGF1c2U6IHZpZGVvRXZlbnROYW1lcy5QQVVTRSxcbiAgICAgICAgICAgIHNlZWs6IHZpZGVvRXZlbnROYW1lcy5TRUVLLFxuICAgICAgICAgICAgZHVyYXRpb246IHZpZGVvRXZlbnROYW1lcy5HRVRfRFVSQVRJT04sXG4gICAgICAgICAgICB2b2x1bWU6IHZpZGVvRXZlbnROYW1lcy5TRVRfVk9MVU1FLFxuICAgICAgICAgICAgcGxheWluZzogdmlkZW9FdmVudE5hbWVzLlBMQVlJTkcsXG4gICAgICAgICAgICBlbmRlZDogdmlkZW9FdmVudE5hbWVzLkVOREVEXG4gICAgICAgIH07XG4gICAgICAgIGxldCBldmVudHNUb0Rpc3Bvc2UgPSBPYmplY3Qua2V5cyhldmVudE5hbWVNYXApO1xuXG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aW1lVXBkYXRlSWQpO1xuXG4gICAgICAgIGV2ZW50c1RvRGlzcG9zZS5mb3JFYWNoKChldmVudE5hbWVUb0Rpc3Bvc2UsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAoIXNlbGZbYCR7ZXZlbnROYW1lVG9EaXNwb3NlfU9uRXZlbnRgXSkgcmV0dXJuO1xuXG4gICAgICAgICAgICBpVlhqc0J1cy5yZW1vdmVMaXN0ZW5lcihldmVudE5hbWVNYXBbZXZlbnROYW1lVG9EaXNwb3NlXSwgc2VsZltgJHtldmVudE5hbWVUb0Rpc3Bvc2V9T25FdmVudGBdKVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhZGRFdmVudExpc3RlbmVycyhpVlhqc0J1cykge1xuICAgICAgICBsZXQge19zdGF0ZURhdGE6IHN0YXRlRGF0YSwgcGxheWVyLCB2aWRlb0V2ZW50TmFtZXN9ID0gdGhpcztcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgICAgICBsZXQgdGltZVVwZGF0ZUlkO1xuICAgICAgICBsZXQgbnVtYmVyb2ZUaW1ldXBkYXRlcyA9IDA7XG5cbiAgICAgICAgcGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoJ29uRXJyb3InLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGxldCBtZXNzYWdlcyA9IHtcbiAgICAgICAgICAgICAgICAyIDogYFRoZSByZXF1ZXN0IGNvbnRhaW5zIGFuIGludmFsaWQgcGFyYW1ldGVyIHZhbHVlLiBGb3IgZXhhbXBsZSwgdGhpcyBlcnJvciBvY2N1cnMgaWYgeW91IHNwZWNpZnkgYSB2aWRlbyBJRCB0aGF0IGRvZXMgbm90IGhhdmUgMTEgY2hhcmFjdGVycywgb3IgaWYgdGhlIHZpZGVvIElEIGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycywgc3VjaCBhcyBleGNsYW1hdGlvbiBwb2ludHMgb3IgYXN0ZXJpc2tzLmAsXG4gICAgICAgICAgICAgICAgNSA6IGBUaGUgcmVxdWVzdGVkIGNvbnRlbnQgY2Fubm90IGJlIHBsYXllZCBpbiBhbiBIVE1MNSBwbGF5ZXIgb3IgYW5vdGhlciBlcnJvciByZWxhdGVkIHRvIHRoZSBIVE1MNSBwbGF5ZXIgaGFzIG9jY3VycmVkLmAsXG4gICAgICAgICAgICAgICAgMTAwIDogYFRoZSB2aWRlbyByZXF1ZXN0ZWQgd2FzIG5vdCBmb3VuZC4gVGhpcyBlcnJvciBvY2N1cnMgd2hlbiBhIHZpZGVvIGhhcyBiZWVuIHJlbW92ZWQgKGZvciBhbnkgcmVhc29uKSBvciBoYXMgYmVlbiBtYXJrZWQgYXMgcHJpdmF0ZS5gLFxuICAgICAgICAgICAgICAgIDEwMSA6IGBUaGUgb3duZXIgb2YgdGhlIHJlcXVlc3RlZCB2aWRlbyBkb2VzIG5vdCBhbGxvdyBpdCB0byBiZSBwbGF5ZWQgaW4gZW1iZWRkZWQgcGxheWVycy5gLFxuICAgICAgICAgICAgICAgIDE1MCA6IGBUaGUgdmlkZW8gcmVxdWVzdGVkIHdhcyBub3QgZm91bmQuIFRoaXMgZXJyb3Igb2NjdXJzIHdoZW4gYSB2aWRlbyBoYXMgYmVlbiByZW1vdmVkIChmb3IgYW55IHJlYXNvbikgb3IgaGFzIGJlZW4gbWFya2VkIGFzIHByaXZhdGUuYFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGxldCBlcnJvck9iaiA9IHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlIDogbWVzc2FnZXNbZXZlbnQuZGF0YV1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHNlbGYuaVZYanNMb2cuZXJyb3IoZXJyb3JPYmosIFwiVklERU9cIik7XG4gICAgICAgIH0pXG5cbiAgICAgICAgcGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoJ29uU3RhdGVDaGFuZ2UnLFxuICAgICAgICAgICAgZnVuY3Rpb24gb25TdGF0ZUNoYW5nZSgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHBsYXllci5nZXRQbGF5ZXJTdGF0ZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlWWGpzQnVzLmVtaXQodmlkZW9FdmVudE5hbWVzLkVOREVELCBwbGF5ZXIsIHN0YXRlRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgaVZYanNCdXMuZW1pdCh2aWRlb0V2ZW50TmFtZXMuUExBWUlORywgcGxheWVyLCBzdGF0ZURhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgaVZYanNCdXMuZW1pdCh2aWRlb0V2ZW50TmFtZXMuUEFVU0VELCBwbGF5ZXIsIHN0YXRlRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgaVZYanNCdXMuZW1pdCh2aWRlb0V2ZW50TmFtZXMuQlVGRkVSSU5HLCBwbGF5ZXIsIHN0YXRlRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBwbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcignb25SZWFkeScsXG4gICAgICAgICAgICBmdW5jdGlvbiBvbllvdVR1YmVPblJlYWR5KCkge1xuICAgICAgICAgICAgICAgIHNlbGYucGxheU9uRXZlbnQgPSBpVlhqc0J1cy5vbih2aWRlb0V2ZW50TmFtZXMuUExBWSwgcGxheU9uRXZlbnQpO1xuICAgICAgICAgICAgICAgIHNlbGYucGF1c2VPbkV2ZW50ID0gaVZYanNCdXMub24odmlkZW9FdmVudE5hbWVzLlBBVVNFLCBwYXVzZU9uRXZlbnQpO1xuICAgICAgICAgICAgICAgIHNlbGYudm9sdW1lT25FdmVudCA9IGlWWGpzQnVzLm9uKHZpZGVvRXZlbnROYW1lcy5TRVRfVk9MVU1FLCB2b2x1bWVPbkV2ZW50KTtcbiAgICAgICAgICAgICAgICBzZWxmLmR1cmF0aW9uT25FdmVudCA9IGlWWGpzQnVzLm9uKHZpZGVvRXZlbnROYW1lcy5HRVRfRFVSQVRJT04sIGR1cmF0aW9uT25FdmVudCk7XG4gICAgICAgICAgICAgICAgc2VsZi5zZWVrT25FdmVudCA9IGlWWGpzQnVzLm9uKHZpZGVvRXZlbnROYW1lcy5TRUVLLCBzZWVrT25FdmVudCk7XG4gICAgICAgICAgICAgICAgc2VsZi5wYXVzZWRPbkV2ZW50ID0gaVZYanNCdXMub24odmlkZW9FdmVudE5hbWVzLlBBVVNFRCwgcGF1c2VkT25FdmVudCk7XG4gICAgICAgICAgICAgICAgc2VsZi5lbmRlZE9uRXZlbnQgPSBpVlhqc0J1cy5vbih2aWRlb0V2ZW50TmFtZXMuRU5ERUQsIGVuZGVkT25FdmVudCk7XG4gICAgICAgICAgICAgICAgc2VsZi5wbGF5aW5nT25FdmVudCA9IGlWWGpzQnVzLm9uKHZpZGVvRXZlbnROYW1lcy5QTEFZSU5HLCBwbGF5aW5nT25FdmVudCk7XG4gICAgICAgICAgICAgICAgc2VsZi5wbGF5T25FdmVudCA9IHR5cGVvZiBzZWxmLnBsYXlPbkV2ZW50ID09PSAnZnVuY3Rpb24nID8gc2VsZi5wbGF5T25FdmVudCA6IHBsYXlPbkV2ZW50O1xuICAgICAgICAgICAgICAgIHNlbGYucGF1c2VPbkV2ZW50ID0gdHlwZW9mIHNlbGYucGF1c2VPbkV2ZW50ID09PSAnZnVuY3Rpb24nID8gc2VsZi5wYXVzZU9uRXZlbnQgOiBwYXVzZU9uRXZlbnQ7XG4gICAgICAgICAgICAgICAgc2VsZi5zZWVrT25FdmVudCA9IHR5cGVvZiBzZWxmLnNlZWtPbkV2ZW50ID09PSAnZnVuY3Rpb24nID8gc2VsZi5zZWVrT25FdmVudCA6IHNlZWtPbkV2ZW50O1xuICAgICAgICAgICAgICAgIHNlbGYuZHVyYXRpb25PbkV2ZW50ID0gdHlwZW9mIHNlbGYuZHVyYXRpb25PbkV2ZW50ID09PSAnZnVuY3Rpb24nID8gc2VsZi5kdXJhdGlvbk9uRXZlbnQgOiBkdXJhdGlvbk9uRXZlbnQ7XG4gICAgICAgICAgICAgICAgc2VsZi52b2x1bWVPbkV2ZW50ID0gdHlwZW9mIHNlbGYudm9sdW1lT25FdmVudCA9PT0gJ2Z1bmN0aW9uJyA/IHNlbGYudm9sdW1lT25FdmVudCA6IHZvbHVtZU9uRXZlbnQ7XG4gICAgICAgICAgICAgICAgc2VsZi5wYXVzZWRPbkV2ZW50ID0gdHlwZW9mIHNlbGYucGF1c2VkT25FdmVudCA9PT0gJ2Z1bmN0aW9uJyA/IHNlbGYucGF1c2VkT25FdmVudCA6IHBhdXNlZE9uRXZlbnQ7XG4gICAgICAgICAgICAgICAgc2VsZi5lbmRlZE9uRXZlbnQgPSB0eXBlb2Ygc2VsZi5lbmRlZE9uRXZlbnQgPT09ICdmdW5jdGlvbicgPyBzZWxmLmVuZGVkT25FdmVudCA6IGVuZGVkT25FdmVudDtcbiAgICAgICAgICAgICAgICBzZWxmLnBsYXlpbmdPbkV2ZW50ID0gdHlwZW9mIHNlbGYucGxheWluZ09uRXZlbnQgPT09ICdmdW5jdGlvbicgPyBzZWxmLnBsYXlpbmdPbkV2ZW50IDogcGxheWluZ09uRXZlbnQ7XG4gICAgICAgICAgICAgICAgaVZYanNCdXMuZW1pdCh2aWRlb0V2ZW50TmFtZXMuQ0FOX1BMQVksIHBsYXllcik7XG4gICAgICAgICAgICB9KTtcblxuXG4gICAgICAgIGZ1bmN0aW9uIHBsYXlPbkV2ZW50KCkge1xuICAgICAgICAgICAgcGxheWVyLnBsYXlWaWRlbygpO1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChzZWxmLnRpbWVVcGRhdGVJZCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBwYXVzZU9uRXZlbnQoKSB7XG4gICAgICAgICAgICBwbGF5ZXIucGF1c2VWaWRlbygpO1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChzZWxmLnRpbWVVcGRhdGVJZCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBkdXJhdGlvbk9uRXZlbnQoKSB7XG4gICAgICAgICAgICBpVlhqc0J1cy5lbWl0KHZpZGVvRXZlbnROYW1lcy5TRVRfRFVSQVRJT04sIHBsYXllci5nZXREdXJhdGlvbigpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHZvbHVtZU9uRXZlbnQodm9sdW1lKSB7XG4gICAgICAgICAgICBwbGF5ZXIuc2V0Vm9sdW1lKHZvbHVtZSAqIDEwMCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBwbGF5aW5nT25FdmVudCgpIHtcbiAgICAgICAgICAgIHBsYXllci5jdXJyZW50VGltZSA9IHBsYXllci5nZXRDdXJyZW50VGltZSgpO1xuXG4gICAgICAgICAgICBpVlhqc0J1cy5lbWl0KHZpZGVvRXZlbnROYW1lcy5USU1FX1VQREFURSwgcGxheWVyKTtcblxuICAgICAgICAgICAgbGV0IGN1cnJlbnROdW1iZXIgPSBudW1iZXJvZlRpbWV1cGRhdGVzO1xuXG4gICAgICAgICAgICBzZWxmLnRpbWVVcGRhdGVJZCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICAgICAgICBwbGF5ZXIuY3VycmVudFRpbWUgPSBwbGF5ZXIuZ2V0Q3VycmVudFRpbWUoKTtcblxuICAgICAgICAgICAgICAgIGlWWGpzQnVzLmVtaXQodmlkZW9FdmVudE5hbWVzLlRJTUVfVVBEQVRFLCBwbGF5ZXIpO1xuICAgICAgICAgICAgfSwgNTApO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc2Vla09uRXZlbnQoY3VycmVudFRpbWUpIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoc2VsZi50aW1lVXBkYXRlSWQpO1xuICAgICAgICAgICAgcGxheWVyLnNlZWtUbyhjdXJyZW50VGltZSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBwYXVzZWRPbkV2ZW50KCkge1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChzZWxmLnRpbWVVcGRhdGVJZCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBlbmRlZE9uRXZlbnQoKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKHNlbGYudGltZVVwZGF0ZUlkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldCBodG1sKCkge1xuICAgICAgICByZXR1cm4gYDxkaXYgaWQ9XCJ5b3V0dWJlLXBsYXllclwiPjwvZGl2PmA7XG4gICAgfVxufSIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIHtcblx0Y29uc3RydWN0b3IobG9nKSB7XG5cdFx0dGhpcy5sb2cgPSBsb2dcblx0fVxuXG5cdGFzc2VydCh0ZXN0LCBuYW1lLCBtZXNzYWdlKSB7XG5cdFx0bGV0IHtsb2d9ID0gdGhpcztcblx0XHRsZXQge3Nob3c6IGRlYnVnfSA9IGxvZztcblxuXHRcdGlmICghdGVzdCkge1xuXHRcdFx0bGV0IGVycm9yT2JqID0geyBcblx0XHRcdFx0bWVzc2FnZSA6IGAke25hbWV9IGlzIGludmFsaWQ6ICR7bWVzc2FnZX0uYFxuXHRcdFx0fTtcblxuXHRcdFx0aWYoZGVidWcpe1xuXHRcdFx0XHR0aGlzLmxvZy5lcnJvcihlcnJvck9iaiwgXCJBU1NFUlRcIik7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihlcnJvck9iai5tZXNzYWdlKTtcblx0XHRcdH0gXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRlc3Q7XG5cdH1cbn0iLCJpbXBvcnQgTG9nZ2luZ01lc3NhZ2VzIGZyb20gJy4uL2NvbnN0YW50cy9sb2dnaW5nLmpzJztcbmltcG9ydCBFcnJvck1lc3NhZ2VzIGZyb20gJy4uL2NvbnN0YW50cy9lcnJvcnMuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyB7XG4gICAgY29uc3RydWN0b3Ioc2hvdywgQnVzKSB7XG4gICAgICAgIHRoaXMuc2hvdyA9IHNob3c7XG4gICAgICAgIHRoaXMuTG9nZ2luZ01lc3NhZ2VzID0gbmV3IExvZ2dpbmdNZXNzYWdlcygpO1xuICAgICAgICB0aGlzLkVycm9yTWVzc2FnZXMgPSBuZXcgRXJyb3JNZXNzYWdlcygpO1xuICAgICAgICB0aGlzLkJ1cyA9IEJ1cztcbiAgICB9XG5cbiAgICB3YXJuKG1lc3NhZ2UpIHtcbiAgICAgICAgbGV0IHsgc2hvdywgTG9nZ2luZ01lc3NhZ2VzLCBCdXMgfSA9IHRoaXM7XG4gICAgICAgIGxldCB3YXJuTWVzc2FnZSA9IExvZ2dpbmdNZXNzYWdlcy5XQVJOO1xuICAgICAgICBsZXQgd2FyblBheWxvYWQgPSB7XG4gICAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hvdykge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGAke3dhcm5NZXNzYWdlfTogJHttZXNzYWdlfWApO1xuICAgICAgICB9XG5cbiAgICAgICAgQnVzLmVtaXQod2Fybk1lc3NhZ2UsIHdhcm5QYXlsb2FkKTtcbiAgICB9XG5cbiAgICBlcnJvcihlcnJvciwgdHlwZSA9IFwiREVGQVVMVFwiKSB7XG4gICAgICAgIGxldCB7IHNob3csIEVycm9yTWVzc2FnZXMsIEJ1cyB9ID0gdGhpcztcbiAgICAgICAgbGV0IGVycm9yVHlwZU1lc3NhZ2UgPSBFcnJvck1lc3NhZ2VzW3R5cGVdO1xuICAgICAgICBsZXQgeyBtZXNzYWdlIH0gPSBlcnJvcjtcbiAgICAgICAgbGV0IGVycm9yUGF5bG9hZCA9IHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICAgICAgICB0eXBlOiBlcnJvclR5cGVNZXNzYWdlLFxuICAgICAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpXG4gICAgICAgIH1cblxuICAgICAgICBjb25zb2xlLmVycm9yKGAke2Vycm9yVHlwZU1lc3NhZ2V9OiAke21lc3NhZ2V9YCk7XG4gICAgICAgIEJ1cy5lbWl0KGVycm9yVHlwZU1lc3NhZ2UsIGVycm9yKTtcbiAgICAgICAgQnVzLmVtaXQoTG9nZ2luZ01lc3NhZ2VzLkVSUk9SLCBlcnJvclBheWxvYWQpO1xuICAgIH1cblxuICAgIGRlYnVnKG1lc3NhZ2UsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBsZXQgeyBzaG93LCBMb2dnaW5nTWVzc2FnZXMsIEJ1cyB9ID0gdGhpcztcbiAgICAgICAgbGV0IGxvZ01lc3NhZ2UgPSBMb2dnaW5nTWVzc2FnZXMuREVCVUc7XG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgICAgbGV0IHsgZ3JvdXAgPSBmYWxzZSB9ID0gb3B0aW9ucztcblxuICAgICAgICBpZiAoZ3JvdXAgJiYgc2hvdykge1xuICAgICAgICAgICAgbGV0IHsgbWVzc2FnZXMgfSA9IG9wdGlvbnM7XG5cbiAgICAgICAgICAgIGNvbnNvbGUuZ3JvdXBDb2xsYXBzZWQoYCR7bG9nTWVzc2FnZX06ICR7bWVzc2FnZX1gKVxuXG4gICAgICAgICAgICBtZXNzYWdlcy5mb3JFYWNoKG1lc3NhZ2UgPT4ge1xuICAgICAgICAgICAgICAgIGxldCB7IHRpdGxlLCBtZXNzYWdlIDogbG9nTWVzYWdlIH0gPSBtZXNzYWdlO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRpdGxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHRpdGxlKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jcmVhdGVNZXNzYWdlKGxvZ01lc2FnZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jcmVhdGVNZXNzYWdlKGxvZ01lc2FnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcblxuICAgICAgICAgICAgQnVzLmVtaXQobG9nTWVzc2FnZSwgbWVzc2FnZSwgb3B0aW9ucyk7XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaG93KSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgJHtsb2dNZXNzYWdlfToke21lc3NhZ2V9YCk7XG4gICAgICAgICAgICBCdXMuZW1pdChsb2dNZXNzYWdlLCBtZXNzYWdlKTtcbiAgICAgICAgfVxuXG5cbiAgICB9XG5cbiAgICBjcmVhdGVNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKChtZXNzYWdlICE9PSBudWxsICYmIHR5cGVvZiBtZXNzYWdlID09PSAnb2JqZWN0JykgfHwgQXJyYXkuaXNBcnJheShtZXNzYWdlKSkge1xuICAgICAgICAgICAgY29uc29sZS5kaXIobWVzc2FnZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhtZXNzYWdlKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgbG9nKG1lc3NhZ2UpIHtcbiAgICAgICAgbGV0IHsgc2hvdywgTG9nZ2luZ01lc3NhZ2VzLCBCdXMgfSA9IHRoaXM7XG4gICAgICAgIGxldCBsb2dNZXNzYWdlID0gTG9nZ2luZ01lc3NhZ2VzLkxPRztcbiAgICAgICAgbGV0IGxvZ1BheWxvYWQgPSB7XG4gICAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc29sZS5sb2coYCR7bG9nTWVzc2FnZX06ICR7bWVzc2FnZX1gKTtcbiAgICAgICAgQnVzLmVtaXQobG9nTWVzc2FnZSwgbG9nUGF5bG9hZCk7XG4gICAgfVxuXG4gICAgdHJhY2Uoc3RhY2spIHtcbiAgICAgICAgbGV0IHsgc2hvdywgTG9nZ2luZ01lc3NhZ2VzLCBCdXMgfSA9IHRoaXM7XG4gICAgICAgIGxldCBzdGFja1BheUxvYWQgPSB7XG4gICAgICAgICAgICBzdGFjazogc3RhY2ssXG4gICAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKClcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoc2hvdykge1xuICAgICAgICAgICAgY29uc29sZS50cmFjZShzdGFjayk7XG4gICAgICAgIH1cblxuICAgICAgICBCdXMuZW1pdChMb2dnaW5nTWVzc2FnZXMuVFJBQ0UsIHN0YWNrUGF5TG9hZCk7XG4gICAgfVxufSIsImV4cG9ydCBjbGFzcyBUeXBlVmFsaWRhdG9yIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBnZXQgdG9TdHJpbmcoKSB7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XHJcbiAgICB9XHJcblxyXG4gICAgaXNVbmRlZmluZWQob2JqKSB7XHJcbiAgICAgICAgcmV0dXJuIG9iaiA9PT0gdW5kZWZpbmVkIHx8IG9iaiA9PT0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBpc1N0cmluZyhvYmopIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IFN0cmluZ10nO1xyXG4gICAgfVxyXG5cclxuICAgIGlzRnVuY3Rpb24ob2JqKXtcclxuICAgICAgICByZXR1cm4gb2JqICYmIHRoaXMudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xyXG4gICAgfVxyXG5cclxuICAgIGlzTnVtYmVyKG9iaikge1xyXG4gICAgICAgIHJldHVybiAhaXNOYU4ob2JqKTtcclxuICAgIH1cclxuXHJcbiAgICBpc0Jvb2xlYW4ob2JqKSB7XHJcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdib29sZWFuJyB8fCAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG9iai52YWx1ZU9mKCkgPT09ICdib29sZWFuJyk7XHJcbiAgICB9XHJcblxyXG4gICAgaXNFbXB0eShvYmopIHtcclxuICAgICAgICBsZXQgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xyXG4gICAgICAgIGxldCBpc0FycmF5ID0gQXJyYXkuaXNBcnJheShvYmopO1xyXG4gICAgICAgIGxldCBpc1N0cmluZyA9IHR5cGVvZiBvYmogPT09ICdzdHJpbmcnO1xyXG4gICAgICAgIGxldCBjaGVja0xlbmd0aCA9IGlzQXJyYXkgfHwgaXNTdHJpbmc7XHJcblxyXG4gICAgICAgIGlmIChjaGVja0xlbmd0aCAmJiBvYmoubGVuZ3RoID09PSAwKSByZXR1cm4gdHJ1ZTtcclxuICAgICAgICBpZiAoY2hlY2tMZW5ndGggJiYgb2JqLmxlbmd0aCA+IDApIHJldHVybiBmYWxzZTtcclxuICAgICAgICBpZiAoIWlzTmFOKG9iaikpIHJldHVybiBmYWxzZTtcclxuICAgICAgICBpZiAob2JqID09PSB1bmRlZmluZWQpIHJldHVybiB0cnVlO1xyXG4gICAgICAgIGlmIChvYmogPT09IG51bGwpIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbn1cclxuXHJcbmxldCB0eXBlVmFsaWRhdG9yID0gbmV3IFR5cGVWYWxpZGF0b3IoKTtcclxuXHJcbmV4cG9ydCBjbGFzcyBPYmplY3RQYXJzZXJzIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFsbG93cyB5b3UgdG8gbWFwIGFuIG9iamVjdCBieSB0aGUga2V5cyBvZiBhIGdpdmVuIG9iamVjdCBcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvYmplY3QgLSBvYmplY3QgdG8gbWFwO1xyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBmdW5jdGlvbiB0byBydW4gYnkgZWFjaCB2YWx1ZSBhbmQga2V5ICBcclxuICAgICAqL1xyXG4gICAgbWFwS2V5cyhvYmplY3QsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgaWYgKCFvYmplY3QgfHwgb2JqZWN0ID09PSB7fSkgcmV0dXJuIFtdO1xyXG5cclxuICAgICAgICBsZXQga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XHJcbiAgICAgICAgbGV0IGVudHJpZXMgPSBrZXlzLnJlZHVjZSgoY3VycmVudEFycmF5LCBrZXkpID0+IHtcclxuICAgICAgICAgICAgbGV0IGVudHJ5ID0gW2tleSwgb2JqZWN0W2tleV1dO1xyXG5cclxuICAgICAgICAgICAgY3VycmVudEFycmF5LnB1c2goZW50cnkpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRBcnJheTtcclxuICAgICAgICB9LCBbXSk7XHJcbiAgICAgICAgbGV0IHJlZHVjZU1hcCA9IG5ldyBNYXAoZW50cmllcyk7XHJcbiAgICAgICAgbGV0IG1hcHBlZEFycmF5ID0gW107XHJcblxyXG4gICAgICAgIGlmICghcmVkdWNlTWFwKSByZXR1cm4gW107XHJcblxyXG4gICAgICAgIHJlZHVjZU1hcC5mb3JFYWNoKGZ1bmN0aW9uICh2YWwsIGtleSkge1xyXG4gICAgICAgICAgICBtYXBwZWRBcnJheS5wdXNoKGNhbGxiYWNrKHZhbCwga2V5KSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBtYXBwZWRBcnJheTtcclxuICAgIH1cclxuXHJcbiAgICBtZXJnZShiYXNlLCBtZXJnZWQsIGlnbm9yZSkge1xyXG4gICAgICAgIGxldCBtZXJnZWRLZXlzID0gT2JqZWN0LmtleXMobWVyZ2VkKTtcclxuICAgICAgICBsZXQgdW5pb25lZE9iamVjdCA9IG5ldyBPYmplY3QoYmFzZSk7XHJcblxyXG4gICAgICAgIG1lcmdlZEtleXMuZm9yRWFjaCgobWVyZ2VkS2V5LCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoaWdub3JlICYmIGlnbm9yZS5pbmRleE9mKG1lcmdlZEtleSkgPj0gMCkgcmV0dXJuO1xyXG4gICAgICAgICAgICB1bmlvbmVkT2JqZWN0W21lcmdlZEtleV0gPSBtZXJnZWRbbWVyZ2VkS2V5XTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHVuaW9uZWRPYmplY3Q7XHJcbiAgICB9XHJcblxyXG4gICAgcmVkdWNlKG9iamVjdCwgY2FsbGJhY2ssIGRlZmF1bHRWYWx1ZSkge1xyXG4gICAgICAgIGlmICghb2JqZWN0IHx8IG9iamVjdCA9PT0ge30pIHJldHVybjtcclxuXHJcbiAgICAgICAgbGV0IGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xyXG4gICAgICAgIGxldCBlbnRyaWVzID0ga2V5cy5yZWR1Y2UoKGN1cnJlbnRBcnJheSwga2V5KSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBlbnRyeSA9IFtrZXksIG9iamVjdFtrZXldXTtcclxuICAgICAgICAgICAgY3VycmVudEFycmF5LnB1c2goZW50cnkpO1xyXG4gICAgICAgICAgICByZXR1cm4gY3VycmVudEFycmF5O1xyXG4gICAgICAgIH0sIFtdKTtcclxuICAgICAgICBsZXQgcmVkdWNlTWFwID0gbmV3IE1hcChlbnRyaWVzKTtcclxuXHJcbiAgICAgICAgcmVkdWNlTWFwLmZvckVhY2goZnVuY3Rpb24gKHZhbCwga2V5KSB7XHJcbiAgICAgICAgICAgIGRlZmF1bHRWYWx1ZSA9IGNhbGxiYWNrKGRlZmF1bHRWYWx1ZSwgdmFsLCBrZXkpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSXRlcmF0ZXMgdGhyb3VnaCBhIGNvbGxlY3Rpb24gdG8gZmluZCBpZiBhbnkgb2YgdGhlIHZhbHVlcyBcclxuICAgICAqIHdpdGggdGhlIGtleXMgaXMgZW1wdHkuXHJcbiAgICAgKi9cclxuICAgIGFueUVtcHR5KGNvbGxlY3Rpb24sIGtleXMpIHtcclxuICAgICAgICBsZXQgaGFzRWxlbWVudHMgPSB7XHJcbiAgICAgICAgICAgIGlzRW1wdHk6IGZhbHNlLFxyXG4gICAgICAgICAgICBlcnJvcnM6IFtdXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY29sbGVjdGlvbi5mb3JFYWNoKChlbGVtZW50LCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICBrZXlzLmZvckVhY2goKGtleSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVWYWxpZGF0b3IuaXNFbXB0eShlbGVtZW50W2tleV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGFzRWxlbWVudHMuaXNFbXB0eSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaGFzRWxlbWVudHMuZXJyb3JzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IGtleSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZWxlbWVudFtrZXldXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGhhc0VsZW1lbnRzO1xyXG4gICAgfVxyXG5cclxuICAgIGhhcyhjb2xsZWN0aW9uLCBlbGVtZW50KSB7XHJcblxyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGVsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhhc1NhbWVBcnJheShjb2xsZWN0aW9uLCBlbGVtZW50KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgZWxlbWVudCA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGFzU2FtZU9iamVjdChjb2xsZWN0aW9uLCBlbGVtZW50KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb24uaW5kZXhPZihlbGVtZW50KSA+PSAwO1xyXG4gICAgfVxyXG5cclxuICAgIGhhc1NhbWVPYmplY3QoY29sbGVjdGlvbiwgZWxlbWVudCkge1xyXG4gICAgICAgIGxldCBpdEhhcyA9IGZhbHNlO1xyXG5cclxuICAgICAgICBjb2xsZWN0aW9uLmZvckVhY2goKGNoZWNrRWxlbWVudCwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjaGVja0VsZW1lbnQgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY2hlY2tFbGVtZW50S2V5cyA9IE9iamVjdC5rZXlzKGNoZWNrRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICBjaGVja0VsZW1lbnRLZXlzLmZvckVhY2goKGtleSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpdEhhcyA9IGNoZWNrRWxlbWVudFtrZXldID09PSBlbGVtZW50W2tleV07XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIHJldHVybiBpdEhhcztcclxuICAgIH1cclxuXHJcbiAgICBoYXNTYW1lQXJyYXkoY29sbGVjdGlvbiwgYXJyYXlFbGVtZW50KSB7XHJcbiAgICAgICAgbGV0IGl0SGFzID0gZmFsc2U7XHJcblxyXG4gICAgICAgIGNvbGxlY3Rpb24uZm9yRWFjaCgoY2hlY2tFbGVtZW50LCBpbmRleCkgPT4ge1xyXG5cclxuXHJcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGNoZWNrRWxlbWVudCkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBjaGVja0VsZW1lbnQuZm9yRWFjaCgodGVzdEVsZW1lbnQsIGluZGV4KSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGl0SGFzID0gdGVzdEVsZW1lbnQgPT09IGFycmF5RWxlbWVudFtpbmRleF07XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gaXRIYXM7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0VmFsdWUob2JqZWN0LCBwYXRoLCB2YWx1ZSkge1xyXG4gICAgICAgIHZhciBhID0gcGF0aC5zcGxpdCgnLicpO1xyXG4gICAgICAgIHZhciBvID0gb2JqZWN0O1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYS5sZW5ndGggLSAxOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIG4gPSBhW2ldO1xyXG4gICAgICAgICAgICBpZiAobiBpbiBvKSB7XHJcbiAgICAgICAgICAgICAgICBvID0gb1tuXTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG9bbl0gPSB7fTtcclxuICAgICAgICAgICAgICAgIG8gPSBvW25dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG9bYVthLmxlbmd0aCAtIDFdXSA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFZhbHVlRnJvbVBhdGgocGF0aCwgb2JqZWN0KSB7XHJcbiAgICAgICAgbGV0IHBhdGhQYXJ0cyA9IHBhdGguc3BsaXQoXCIuXCIpO1xyXG4gICAgICAgIGxldCBvbGREYXRhID0gb2JqZWN0O1xyXG4gICAgICAgIGxldCBjdXJyZW50RGF0YSA9IHt9O1xyXG4gICAgICAgIGxldCByZXR1cm5WYWx1ZTtcclxuXHJcbiAgICAgICAgcGF0aFBhcnRzLmZvckVhY2goKHBhdGhQYXJ0LCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodHlwZVZhbGlkYXRvci5pc0VtcHR5KHBhdGhQYXJ0KSkgcmV0dXJuO1xyXG4gICAgICAgICAgICBjdXJyZW50RGF0YSA9IG9sZERhdGFbcGF0aFBhcnRdO1xyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVWYWxpZGF0b3IuaXNFbXB0eShjdXJyZW50RGF0YSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVyblZhbHVlID0gY3VycmVudERhdGE7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVyblZhbHVlID0gY3VycmVudERhdGE7XHJcbiAgICAgICAgICAgIG9sZERhdGEgPSBjdXJyZW50RGF0YTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHJldHVyblZhbHVlO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVja3MgaW4gYW4gYXJyYXkgb2Ygb2JqZWN0cyB0byBzZWUgaWYgdGhlIHZhbHVlcyBcclxuICAgICAqIGF0IHRoZSBrZXlzIGlzIHVuaXF1ZSBhbmQgcmV0dXJucyBhbiBvYmplY3QgaW5kaWNhdGluZyBcclxuICAgICAqIGlmIHRoZXkgYXJlIHVuaXF1ZSBhbmQgYW55IGVycm9ycyB0aGF0IGRvbid0IG1hdGNoIGZvciBcclxuICAgICAqIGNvcnJlY3Rpb24uXHJcbiAgICAgKi9cclxuICAgIGlzVW5pcXVlKGNvbGxlY3Rpb24gPSBbXSwga2V5cyA9IFtdKSB7XHJcbiAgICAgICAgbGV0IGhhc1VuaXF1ZSA9IHtcclxuICAgICAgICAgICAgaXNVbmlxdWU6IHRydWUsXHJcbiAgICAgICAgICAgIGVycm9yczogW11cclxuICAgICAgICB9O1xyXG4gICAgICAgIGxldCBhbGxVbmlxdWVWYWx1ZXMgPSB7fTtcclxuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgIGtleXMuZm9yRWFjaCgoa2V5KSA9PiB7XHJcbiAgICAgICAgICAgIGFsbFVuaXF1ZVZhbHVlc1trZXldID0gW107XHJcbiAgICAgICAgICAgIGNvbGxlY3Rpb24uZm9yRWFjaCgoZWxlbWVudCwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBub3RVbmlxdWUgPSBzZWxmLmhhcyhhbGxVbmlxdWVWYWx1ZXNba2V5XSwgZWxlbWVudFtrZXldKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAobm90VW5pcXVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGFzVW5pcXVlLmVycm9ycy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBrZXksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBpbmRleCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGVsZW1lbnRba2V5XVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGhhc1VuaXF1ZS5pc1VuaXF1ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhbGxVbmlxdWVWYWx1ZXNba2V5XS5wdXNoKGVsZW1lbnRba2V5XSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBoYXNVbmlxdWU7XHJcbiAgICB9XHJcbn07Il19
