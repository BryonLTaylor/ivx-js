/* add the base story player mix-ins*/
.base-mixins();

/* Only for Forge */
.styleGuideStyles();

/*=========================
NITRO IMPORTS
===========================

/* Import Fonts for NITRO */
@import url('https://fonts.googleapis.com/css?family=Roboto:300,400,700');
@import url('https://fonts.googleapis.com/css?family=Roboto+Slab:300,400,700');

/*Import Icons for NITRO */
@import url('https://use.fontawesome.com/releases/v5.0.8/css/all.css');

/*=========================
NITRO STYLES CONFIGURATION
===========================
1.  Color Palette
2.  Typography
3.  Images
4.  Backgrounds
5.  Buttons
6.  Video Controls
7.  Form Inputs
8.  Grid
9.  Embedded Scenes
10. CUSTOM NITRO STYLES
==========================*/

/*=====================
1 Color Palette
======================*/

//Main Brand Colors
@primary:			#8C1D40; //ASU MAROON
@primary-hover:     #D23153;
@secondary:			#FFC627; //ASU GOLD

//Secondary Brand Colors
@brandGreen:        #78BF20;
@brandBlue:         #00A3E0;
@brandOrange:       #FF7F32;
@brandBlueGrey:     #5C6670;

//alert colors
@success:           #148E4B;
@info:              #008ED6;
@warning:           #EC5937;
@danger:            #BFE319;

.genMonocramaticClasses(@primary, primary, standard, background);
.genMonocramaticClasses(@primary, primary, standard, color);
.genMonocramaticClasses(@secondary, secondary, standard, background);
.genMonocramaticClasses(@secondary, secondary, standard, color);
.genMonocramaticClasses(@brandGreen, green, standard, background);
.genMonocramaticClasses(@brandBlue, blue, standard, background);
.genMonocramaticClasses(@brandOrange, orange, standard, background);
.genMonocramaticClasses(@brandBlueGrey, bluegrey, standard, background);

/*=====================
2 Typography
======================*/

/* Font Variable for NITRO */
@bodyFont: 			'Roboto', 'Helvetica Neue', Helvetica, Arial, sans-serif;
//@headingFont: 	'Roboto Slab', 'Palatino Linotype', Palatino, serif;
@headingFont:       @bodyFont;
@fontSystem: 		primary;

@iconFont:          'Font Awesome\ 5 Free';
.ivx-icon{
    &:before{
        font-family: @iconFont;
    }
}

.setFontSystem(@fontSystem, @bodyFont, @headingFont);
.setGlobalFont({.ivx-font-primary});

/*=====================
3 Images
======================*/

@logoProperties: width 100%;
@basicLogoProperties: max-width 100px;

.genImageClasses(logo, @logoProperties);
.genImageClasses(basic-logo, @basicLogoProperties);

/*=====================
4 Backgrounds
======================*/

@welcomeAppGradient: #EEEEEE, #BDBDBD;
.genBackgroundGradientClasses(welcome-app, @welcomeAppGradient);
.genBackgroundImageClasses(video-bgs, 'https://7b6f59677e6023c46b1c-5298a79f5e521f276537975a1b0a0b03.ssl.cf2.rackcdn.com/NITRO/images/test-video-bg.jpg', none, black, 25%);

/*=====================
5 Buttons
======================*/

@defaultButtonStyles:{ border-radius: 100px; };
@roundedButtonStyles:{ border-radius: 4px; };
@largeButtonProperties:{ font-size: 1.3125rem; };
@smallButtonProperties:{ font-size: .75rem; };
.genButtons(default, @defaultButtonStyles);
.genButtons(rounded, @roundedButtonStyles);
.genButtons(large, @largeButtonProperties);
.genButtons(small, @smallButtonProperties);

.createIconButtons(@iconFont);

.createButtonColors();
.createButtonColors(){
    @invertedButtonProperties: box-shadow ~"0px 0px 0px 1px black inset";
    .ivx-input-buttons-primary{ .ivx-color-primary; }
    .ivx-input-buttons-secondary{ .ivx-color-grey-300; }
    .ivx-input-buttons-inverted{ .ivx-color-white; .ivx-color-black-color; }
    .setButtonProperties(inverted, @invertedButtonProperties);
    .ivx-input-buttons-warning{ background-color: @warning; }
    .ivx-input-buttons-error{ background-color: @danger; color: @black; }
    .ivx-input-buttons-confirm{ background-color: @brandGreen; }
    .ivx-input-buttons-deny{ background-color: @brandOrange; }
    .ivx-input-buttons-rfi{ .ivx-color-secondary; }
    .ivx-input-buttons-eop{ .ivx-color-blue; .ivx-color-white-color; }
}

/*=====================
6 Video Controls
======================*/

.genPlayerStyles();
.createVideoControls();

.createVideoControls(
    transparent,
    @transparentControlStyles,
    @transparentScrubBar,
    @transparentTimeLapse,
    @transparentVideoButton,
    @transparentVideoButton,
    @transparentCCStyles,
    @transparentControlsText,
    @transparentControlsText
);
@transparentControlStyles: {._containerStyles};
@transparentScrubBar: {.ivx-color-grey-300};
@transparentTimeLapse: {._timeLapseStyle; .ivx-color-primary};
@transparentVideoButton: {background: transparent; ._defaultControlButtons};
@transparentCCStyles: {
    ._defaultControlButtons;

    &.ivx-video-controls-tracks-on{
        background: transparent;
    }

    &.ivx-video-controls-tracks-off{
        background: transparent;
        color: fadeOut(@white, 50%);
    }
};
@transparentControlsText: {.ivx-color-white-color};

/*=====================
7 Form Inputs
======================*/

.genErrorMessages();
.genErrorMessageContainers();
.genTextInputs(rounded);
.genTextInputContainers();
.genTextareaInputs(rounded);
.genTextareaInputContainers();
.genRadioInputs();
.genRadioInputContainers();
.genCheckboxInputs();
.genCheckboxInputContainers();
.genOptionsInputs();
.genOptionsInputContainers();
.genSubmitButtonInputs(rounded);
.genSubmitButtonInputContainers();
.createIconSubmitButtons(@iconFont);

/*=====================
8 Grid
======================*/

@columnCount: 16;
@gutterWidth: 15px;
@maxContainerWidth: 75rem;
@breakPoints: xs 0, sm 48rem, md 64rem, lg @maxContainerWidth; //name and size pair
@gridtype: flexbox; //default or flexbox

//create the grid
.generate-grid-container(@maxContainerWidth);
.generate-grid-framework(@gridtype);
.make-grids(@breakPoints);

/*=====================
9 Embedded Scenes
======================*/

//create parent and child scene Styles
.genParentSceneClasses();
.genChildSceneClasses();

/*=====================
10 Custom Nitro Styles
======================*/

a{
    color: @primary;
    text-decoration: none;
    border-bottom: 1px dotted @primary;
    word-wrap: break-word;
}

a:hover,
a:focus{
    color: @primary-hover;
    text-decoration: none;
    border-bottom: 1px dotted @primary-hover;
}

.ivx-input-container-text,
.ivx-input-container-textarea,
.ivx-input-container-options{
    .ivx-input-label{
        text-transform: uppercase;
        font-weight: bold;
        color: @primary;
    }
}

.ivx-input-container-options{
    margin-top: 1em;
}

.radio-group-label,
.ivx-font-primary .radio-group-label,
.checkbox-group-label,
.ivx-font-primary .checkbox-group-label{
    display: block;
    font-size: .75em;
    padding-bottom: 1.125em;
    text-transform: uppercase;
    font-weight: bold;
    color: @primary;
}

.ivx-input-container-checkbox,
.ivx-input-container-radio{

    p.label{
        text-transform: uppercase;
        font-weight: bold;
        color: @primary;
        font-size: .75em;
        display: block;
        padding-bottom: .5em;
    }
}

.ivx-input-label-radio{
    position: relative;

    .ivx-input-radio{
        appearance: none;
        -webkit-appearance: none;
        -moz-appearance: none;
        padding-left: .875em;
    }

    .ivx-input-radio:before{
        content: '';
        display: block;
        position: absolute;
        width: 1.25em;
        height: 1.25em;
        border-radius: 1.25em;
        box-sizing: border-box;
        background: @white;
        border: 2px solid @primary;
        left: 0px;
        top: 50%;
        margin-top: -.625em;
    }

    .ivx-input-radio:checked:after{
        content: '';
        display: block;
        position: absolute;
        width: .75em;
        height: .75em;
        border-radius: .75em;
        background: @primary;
        left: .25em;
        top: 50%;
        margin-top: -.375em;
    }
}

.ivx-input-container-checkbox{

    .ivx-input-label{
        position: relative;

        .ivx-input-checkbox{
            appearance: none;
            -webkit-appearance: none;
            -moz-appearance: none;
            padding-left: .875em;
        }

        .ivx-input-checkbox:before{
            content: '';
            display: block;
            position: absolute;
            width: 1.25em;
            height: 1.25em;
            box-sizing: border-box;
            background: @white;
            border: 2px solid @primary;
            left: 0px;
            top: 50%;
            margin-top: -.625em;
            border-radius: 2px;
        }

        .ivx-input-checkbox:checked:after{
            font-family: @iconFont;
            content: "\f00c";
            font-weight: 900;
            font-size: .75em;
            display: block;
            position: absolute;
            width: 1.667em;
            height: 1.667em;
            line-height: 1.667em;
            color: @primary;
            left: 0px;
            top: 50%;
            margin-top: -.78125em;
            text-align: center;
        }
    }
}

.ivx-input-error-message{
    color: @warning;
}
.ivx-input-error-message:before {
    font-family: @iconFont;
    content: "\f12a";
    font-weight: 900;
    display: inline-block;
    padding-right: .25em;
}

.base-mixins(){

    /*=========================
    BASE IMPORTS
    =========================*/

    @import url('https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.0/normalize.min.css');

    /*=========================
    BASE MIX-INS
    ===========================
    1.  Framework Mixins
    2.  Color Palette
    3.  Typography
    4.  Images
    5.  Backgrounds
    6.  Buttons
    7.  Video Controls
    8.  Form Inputs
    9.  Grid
    10. Embedded Scenes
    11. Responsive
    ==========================*/

    .framework-mixins();
    .color-palette-mixins();
    .typography-mixins();
    .image-mixins();
    .background-mixins();
    .button-mixins();
    .video-control-mixins();
    .form-input-mixins();
    .grid-mixins();
    .embedded-scene-mixins();
    .responsive-mixins();

    /*=====================
    1 Framework Mixins
    ======================*/
    .framework-mixins(){

        .setStatementFromList(@fontSystem, @blockStatement, @list){
            .ivx-font-@{fontSystem}{
                @{blockStatement}{
                    .setPropertyFromList(@list);
                }
            }
        }

        .setPropertyFromList(@list, @index : 1) when (@index <= length(@list)) and (length(@list) >= 2){
            @propertyObj:  extract(@list, @index);
            .getPropertyNameAndValue(@propertyObj, @list);
            .setProperty(@propertyName, @propertyValue);
            .setPropertyFromList(@list, (@index + 1));
        }

        .getPropertyNameAndValue(@propertyObj, @list) when (length(@propertyObj) <= 1){
            @propertyName:  extract(@list, 1);
            @propertyValue: extract(@list, 2);
        }

        .getPropertyNameAndValue(@propertyObj, @list) when (length(@propertyObj) > 1){
            @propertyName:  extract(@propertyObj, 1);
            @propertyValue: extract(@propertyObj, 2);
        }

        .setProperty(@propertyName, @propertyValue){
            @{propertyName} : @propertyValue;
        }

    }

    /*=====================
    2 Color Palettes
    ======================*/
    .color-palette-mixins(){

        /*Story Player Defaults*/
        @black:				#000;
        @white:				#FFFFFF;

        /* Standard SP Palletes */
        .setBlackWhiteClasses(@black, @white);
        .genMonocramaticClasses(@grey, grey, grey, background);

        /*Material Defaults*/
        @red: 			#F44336;
        @pink: 			#E91E63;
        @purple:		#9C27B0;
        @deepPurple: 	#673AB7;
        @indigo: 		#3F51B5;
        @blue: 			#2196F3;
        @lightBlue: 	#03A9F4;
        @cyan: 			#00BCD4;
        @teal: 			#009688;
        @green: 		#4CAF50;
        @lightGreen: 	#8BC34A;
        @lime: 			#CDDC39;
        @yellow: 		#FFEB3B;
        @amber: 		#FFC106;
        @orange: 		#FF9800;
        @deepOrange: 	#FF5722;
        @brown: 		#795548;
        @grey: 			#9E9E9E;
        @blueGrey: 	    #607D8B;

        .setBlackWhiteClasses(@black, @white){
            .ivx-color-black, .ivx-color-inverted{
                background:@black;
            }

            .ivx-color-white{
                background:@white;
            }

            .ivx-color-black-color{
                color:@black;
            }

            .ivx-color-white-color{
                color:@white;
            }
        }

        @levelNames: 50, 100, 200, 300, 400, 500, 600, 700, 800, 900, A100, A200, A400, A700;
        .genMonocramaticClasses (@color, @colorName, @category, @colorProperty,  @index : 1) when (@index <= length(@levelNames)) and not (@category = standard) {
            .genMonocramaticClasses(@color, @colorName, @category, @colorProperty, @index + 1);
            .getHSLValues(@category);


            @hue : hue(@color);
            @saturation : saturation(@color);
            @lightness : lightness(@color);
            @hsl-value: extract(@hsl-values, @index);
            @hue-offset: extract(@hsl-value, 1) - extract(@default-hsl-value, 1);
            @sat-offset: extract(@hsl-value, 2) - extract(@default-hsl-value, 2);
            @light-offset: extract(@hsl-value, 3) - extract(@default-hsl-value, 3);
            @bgValue:  hsl(@hue + @hue-offset, @saturation + @sat-offset, @lightness+ @light-offset);

            .setColorProperty(@colorName, @bgValue, @colorProperty, @index);

        }

        .genMonocramaticClasses (@color, @colorName, @category, @colorProperty,  @index : 1) when (@index <= length(@levelNames)) and (@category = standard) {
            .genMonocramaticClasses(@color, @colorName, @category, @colorProperty, @index + 1);
            .getStandardColors(@color);
            @bgValue: extract(@standard-colors, @index);
            .setColorProperty(@colorName, @bgValue, @colorProperty, @index);
        }

        .setColorProperty(@colorName, @bgValue, @colorProperty, @index){

            @level: extract(@levelNames, @index);

            .setStandardColorClasses(@level, @colorName, @bgValue, @colorProperty);

            .ivx-color-@{colorName}-@{level} when (@colorProperty = background){
                background: @bgValue;
                color: contrast(@bgValue);
            }

            .ivx-color-@{colorName}-@{level}-@{colorProperty} when not (@colorProperty = background){
                @{colorProperty}:@bgValue;
            }
        }

        .getStandardColors(@color){
            @multiplyColor: multiply(@color, @color);

            @standard-colors:
            mix(@color, @white, 12%),
            mix(@color, @white, 30%),
            mix(@color, @white, 50%),
            mix(@color, @white, 70%),
            mix(@color, @white, 85%),
            @color,
            mix(@color, @multiplyColor, 87%),
            mix(@color, @multiplyColor, 70%),
            mix(@color, @multiplyColor, 54%),
            mix(@color, @multiplyColor, 25%),
            mix(@color, @white, 30%),
            mix(@color ,@white, 70%),
            mix(@color, @multiplyColor, 87%),
            mix(@color, @multiplyColor, 54%);
        }

        .setStandardColorClasses(@level, @colorName, @bgValue, @colorProperty){

            .setDefaultClass(@colorName, @colorProperty) when (@level = 500){

                .ivx-color-@{colorName} when (@colorProperty = background){
                    background: @bgValue;
                    color: contrast(@bgValue);
                }

                .ivx-color-@{colorName}-@{colorProperty} when not (@colorProperty = background){
                    @{colorProperty} : @bgValue;
                }

            }

            .setLightClass(@colorName, @colorProperty) when (@level = 50){

                .ivx-color-@{colorName}-light when (@colorProperty = background){
                    background: @bgValue;
                    color: contrast(@bgValue);
                }

                .ivx-color-@{colorName}-light-@{colorProperty} when not (@colorProperty = background){
                    @{colorProperty} : @bgValue;
                }

            }

            .setLightClass(@colorName, @colorProperty) when (@level = 900){
                .ivx-color-@{colorName}-dark when (@colorProperty = background){
                    background: @bgValue;
                    color: contrast(@bgValue);
                }

                .ivx-color-@{colorName}-dark-@{colorProperty} when not (@colorProperty = background){
                    @{colorProperty} : @bgValue;
                }
            }

            .setDefaultClass(@colorName, @colorProperty);
            .setLightClass(@colorName, @colorProperty);

        }

        .genPalleteClasses (@colorName, @customColors, @colorProperty, @index : 1) when (@index <= length(@levelNames)){

            .genPalleteClasses (@colorName, @customColors, @colorProperty, @index + 1);

            @lightTextBreak: 50;
            @bgValue: extract(@customColors, @index);
            @level: extract(@levelNames, @index);
            @lightnessLevel: lightness(@bgValue);

            .setStandardColorClasses(@level, @colorName, @bgValue, @lightnessLevel,  @lightTextBreak, @colorProperty);

            .ivx-color-@{colorName}-@{level} when ((@lightnessLevel <  @lightTextBreak) and (@colorProperty = background)){
                @{colorProperty}: @bgValue;
                /* color:white; */
            }

            .ivx-color-@{colorName}-@{level} when ((@lightnessLevel >=  @lightTextBreak) and (@colorProperty = background)){
                @{colorProperty}: @bgValue;
                /* color:black; */
            }

            .ivx-color-@{colorName}-@{level}-@{colorProperty} when not (@colorProperty = background){
                @{colorProperty}:@bgValue;
            }

        }

        .getHSLValues(@category) when not (@category = custom) {

            .isRed (@category) when (@category = red) {
                @colors:#FFEBEE,#FFCDD2, #EF9A9A, #E57373, #EF5350, #F44336, #E53935, #D32F2F, #C62828, #B71C1C, #FF8A80,#FF5252,#FF1744,#D50000;
            }

            .isPink (@category) when (@category = pink) {
                @colors:#FCE4EC,#F8BBD0, #F48FB1, #F06292, #EC407A, #E91E63, #D81B60, #C2185B, #AD1457, #880E4F, #FF80AB,#FF4081,#F50057,#C51162;
            }

            .isPurple (@category) when (@category = purple) {
                @colors:#F3E5F5,#E1BEE7, #CE93D8, #BA68C8, #AB47BC, #9C27B0, #8E24AA, #7B1FA2, #6A1B9A, #4A148C, #EA80FC, #E040FB, #D500F9, #AA00FF;
            }

            .isDeepPurple (@category) when (@category = deepPurple) {
                @colors:#EDE7F6,#D1C4E9, #B39DDB, #9575CD, #7E57C2, #673AB7, #5E35B1, #512DA8, #4527A0, #311B92, #B388FF, #7C4DFF, #651FFF, #6200EA;
            }

            .isIndigo (@category) when (@category = indigo) {
                @colors:#E8EAF6, #C5CAE9, #9FA8DA, #7986CB, #5C6BC0, #3F51B5, #3949AB, #303F9F, #283593, #1A237E, #8C9EFF, #536DFE, #3D5AFE, #304FFE;
            }

            .isBlue (@category) when (@category = blue) {
                @colors: #E3F2FD, #BBDEFB, #90CAF9, #64B5F6, #42A5F5, #2196F3, #1E88E5, #1976D2, #1565C0, #0D47A1, #82B1FF, #448AFF, #2979FF, #2962FF;
            }

            .isLightBlue (@category) when (@category = lightBlue) {
                @colors:#E1F5FE, #B3E5FC, #81D4FA, #4FC3F7, #29B6F6, #03A9F4, #039BE5, #0288D1, #0277BD, #01579B, #80D8FF, #40C4FF, #00B0FF, #0091EA;
            }

            .isCyan (@category) when (@category = cyan) {
                @colors:#E0F7FA, #B2EBF2, #80DEEA, #4DD0E1, #26C6DA, #00BCD4, #00ACC1, #0097A7, #00838F, #006064, #84FFFF, #18FFFF, #00E5FF, #00B8D4;
            }

            .isTeal (@category) when (@category = teal) {
                @colors:#E0F2F1, #B2DFDB, #80CBC4, #4DB6AC, #26A69A, #009688, #00897B, #00796B, #00695C, #004D40, #A7FFEB, #64FFDA, #1DE9B6, #00BFA5;
            }

            .isGreen (@category) when (@category = green) {
                @colors:#E8F5E9, #C8E6C9, #A5D6A7, #81C784, #66BB6A, #4CAF50, #43A047, #388E3C, #2E7D32, #1B5E20, #B9F6CA, #69F0AE, #00E676, #00C853;
            }

            .isLightGreen (@category) when (@category = lightGreen) {
                @colors:#F1F8E9,#DCEDC8,#C5E1A5, #AED581, #9CCC65,#8BC34A, #7CB342, #689F38, #558B2F, #33691E, #CCFF90, #B2FF59, #76FF03, #64DD17;
            }

            .isLime (@category) when (@category = lime) {
                @colors:#F9FBE7,#F0F4C3,#E6EE9C, #DCE775, #D4E157,#CDDC39, #C0CA33, #AFB42B, #9E9D24, #827717, #F4FF81, #EEFF41, #C6FF00, #AEEA00;
            }

            .isYellow (@category) when (@category = yellow) {
                @colors: #FFFDE7, #FFF9C4, #FFF59D, #FFF176, #FFEE58, #FFEB3B, #FDD835, #FBC02D, #F9A825, #F57F17, #FFFF8D, #FFFF00, #FFEA00, #FFD600;
            }

            .isAmber (@category) when (@category = amber) {
                @colors:#FFF8E1,#FFECB3,#FFE082, #FFD54F, #FFCA28,#FFC107, #FFB300, #FFA000, #FF8F00, #FF6F00, #FFE57F, #FFD740, #FFC400, #FFAB00;
            }

            .isOrange (@category) when (@category = orange) {
                @colors:#FFF3E0,#FFE0B2,#FFCC80, #FFB74D, #FFA726,#FF9800, #FB8C00, #F57C00, #EF6C00, #E65100, #FFD180, #FFAB40, #FF9100, #FF6D00;
            }

            .isDeepOrange (@category) when (@category = deepOrange) {
                @colors:#FBE9E7,#FFCCBC,#FFAB91, #FF8A65, #FF7043,#FF5722, #F4511E, #E64A19, #D84315, #BF360C, #FF9E80, #FF6E40, #FF3D00, #DD2C00;
            }

            .isBrown(@category) when (@category = brown) {
                @colors:#EFEBE9,#D7CCC8,#BCAAA4, #A1887F, #8D6E63,#795548, #6D4C41, #5D4037, #4E342E, #3E2723, #D7CCC8, #A1887F, #795548, #5D4037;
            }

            .isGrey (@category) when (@category = grey) {
                @colors:#FAFAFA,#F5F5F5,#EEEEEE, #E0E0E0, #BDBDBD,#9E9E9E, #757575, #616161, #424242, #212121, #EEEEEE, #9E9E9E, #424242, #212121;
            }

            .isBlueGrey (@category) when (@category = blueGrey) {
                @colors:#ECEFF1,#CFD8DC,#B0BEC5, #90A4AE, #78909C,#607D8B, #546E7A, #455A64, #37474F, #263238, #B0BEC5, #78909C, #546E7A, #37474F;
            }

            .isRed(@category);
            .isPink(@category);
            .isPurple(@category);
            .isDeepPurple(@category);
            .isIndigo(@category);
            .isBlue(@category);
            .isLightBlue(@category);
            .isCyan(@category);
            .isTeal(@category);
            .isGreen(@category);
            .isLightGreen(@category);
            .isLime(@category);
            .isYellow(@category);
            .isAmber(@category);
            .isOrange(@category);
            .isDeepOrange(@category);
            .isBrown(@category);
            .isGrey(@category);
            .isBlueGrey (@category);

            @color-50: extract(@colors, 1);
            @color-100: extract(@colors, 2);
            @color-200: extract(@colors, 3);
            @color-300: extract(@colors, 4);
            @color-400: extract(@colors, 5);
            @color-500: extract(@colors, 6);
            @color-600: extract(@colors, 7);
            @color-700: extract(@colors, 8);
            @color-800: extract(@colors, 9);
            @color-900: extract(@colors, 10);
            @color-A100: extract(@colors, 11);
            @color-A200: extract(@colors, 12);
            @color-A400: extract(@colors, 13);
            @color-A700: extract(@colors, 14);

            @default-hsl-value: hue(@color-500) saturation( @color-500) lightness( @color-500);
            @hsl-values:
            hue(@color-50) saturation(@color-50) lightness(@color-50),
            hue(@color-100) saturation( @color-100) lightness(@color-100),
            hue(@color-200) saturation(@color-200) lightness(@color-200),
            hue(@color-300) saturation(@color-300) lightness(@color-300),
            hue(@color-400) saturation(@color-400) lightness(@color-400),
            hue(@color-500) saturation(@color-500) lightness(@color-500),
            hue(@color-600) saturation(@color-600) lightness(@color-600),
            hue(@color-700) saturation(@color-700) lightness(@color-700),
            hue(@color-800) saturation(@color-800) lightness(@color-800),
            hue(@color-900) saturation(@color-900) lightness(@color-900),
            hue(@color-A100) saturation(@color-A100) lightness(@color-A100),
            hue(@color-A200) saturation(@color-A200) lightness(@color-A200),
            hue(@color-A400) saturation(@color-A400) lightness(@color-A400),
            hue(@color-A700) saturation(@color-A700) lightness(@color-A700);

        }

    }

    /*=====================
    3 Typography
    ======================*/
    .typography-mixins(){

        .setGlobalFont(@fontFamily){
            body{
                @fontFamily();
            }
        }
        .setFontSystem(@fontSystem, @bodyFont, @headingFont, @portraitFontSize : 16px, @landscapeFontSize: 16px, @largerDevicesFontSize: 16px){

            .setBodyFont(@fontSystem, @bodyFont);
            .setHeadingFont(@fontSystem, @headingFont);

            .ivx-font-@{fontSystem}{
                //mobile landscape
                @media only screen and (min-width: 320px) and (max-width: 812px) and (orientation: landscape) {
                    font-size:@portraitFontSize;
                }
                //mobile portrait
                @media only screen and (min-width: 320px) and (max-width: 812px) and (orientation: portrait) {
                    font-size:@landscapeFontSize;
                }
                //larger devices
                @media only screen and (min-width: 46.0625em) and (min-height: 30.0625em) {
                    font-size:@largerDevicesFontSize;
                }
            }

            @h1DefaultStyles: font-weight 700, font-size 2em;
            .setStatementFromList(@fontSystem, h1, @h1DefaultStyles);

            @h2DefaultStyles: font-weight 700, font-size 1.5em;
            .setStatementFromList(@fontSystem, h2, @h2DefaultStyles);

            @h3DefaultStyles: font-weight 700, font-size 1.17em;
            .setStatementFromList(@fontSystem, h3, @h3DefaultStyles);

            @h4DefaultStyles: font-weight 700, font-size 1.14em;
            .setStatementFromList(@fontSystem, h4, @h4DefaultStyles);

            @paragraphLargeStyles: font-weight 400, font-size 1.17em;
            @paragraphLargeStylesBold: font-weight 700, font-size 1.17em;
            .setStatementFromList(@fontSystem, ~"p.ivx-font-large", @paragraphLargeStyles);
            .setStatementFromList(@fontSystem, ~"p.ivx-font-large.ivx-font-bold", @paragraphLargeStylesBold);

            @paragraphStyles: font-weight 400, font-size 1em;
            @paragraphStylesBold: font-weight 700, font-size 1em;
            .setStatementFromList(@fontSystem, ~"p", @paragraphStyles);
            .setStatementFromList(@fontSystem, ~"p.ivx-font-bold", @paragraphStylesBold);
            .ivx-font-bold{
                font-weight: 700;
                font-size: 1em;
            }
            //.setStatementFromList(@fontSystem, ~"div", @paragraphStyles);
            //.setStatementFromList(@fontSystem, ~"div.ivx-font-bold", @paragraphStylesBold);
            //.setStatementFromList(@fontSystem, ~"span", @paragraphStyles);
            //.setStatementFromList(@fontSystem, ~"span.ivx-font-bold", @paragraphStylesBold);

            @paragraphSmallStyles: font-weight 400, font-size .83em;
            @paragraphSmallStylesBold: font-weight 700, font-size .83em;
            .setStatementFromList(@fontSystem, ~"p.ivx-font-small", @paragraphSmallStyles);
            .setStatementFromList(@fontSystem, ~"p.ivx-font-small.ivx-font-bold", @paragraphSmallStylesBold);

            @smallStyles: @paragraphSmallStyles;
            @smallStylesBold: @paragraphSmallStylesBold;
            .setStatementFromList(@fontSystem, ~"small", @smallStyles);
            .setStatementFromList(@fontSystem, ~"small.ivx-font-bold", @smallStylesBold);

            @paragraphTinyStyles: font-weight 400, font-size .67em;
            @paragraphTinyStylesBold: font-weight 700, font-size .67em;
            .setStatementFromList(@fontSystem, ~"p.ivx-font-tiny", @paragraphTinyStyles);
            .setStatementFromList(@fontSystem, ~"p.ivx-font-tiny.ivx-font-bold", @paragraphTinyStylesBold);

            @defaultSubtitle: display block, opacity .7, font-size .675em;
            .setSubTitles(@fontSystem, default, @defaultSubtitle);

            @alternativeSubtitle: display inline;
            .setSubTitles(@fontSystem, alternative, @alternativeSubtitle);

            @anchorDefault: display ~"inline-block";
            @anchorVisited: ;
            @anchorHover:color;
            @anchorFocus: ;
            @anchorActive: ;
            .setStatementFromList(@fontSystem, ~"a", @anchorDefault);
            .setStatementFromList(@fontSystem, ~"a:hover", @anchorHover);

        }

        .setHeadingFont(@fontSystem, @fontFamily){
            .ivx-font-@{fontSystem}{
                h1,h2,h3,h4{
                    font-family: @fontFamily;
                    small{
                        font-family: @fontFamily;
                    }
                }
            }
        }

        .setSubTitles(@fontSystem, @type, @style) when (@type = default){
            .setStatementFromList(@fontSystem, ~"h1 small, h2 small, h3 small, h4 small", @style);
        }

        .setSubTitles(@fontSystem, @type, @style) when not (@type = default){
            .setStatementFromList(@fontSystem, ~"h1.ivx-header-@{type} small, h2.ivx-header-@{type} small", @style);
        }

        .setBodyFont(@fontSystem, @fontFamily){
            .ivx-font-@{fontSystem}{
                *{
                    font-family:@fontFamily;
                    -webkit-font-smoothing: antialiased;
                    -moz-osx-font-smoothing: grayscale;
                }
            }
        }

    }

    /*=====================
    4 Images
    ======================*/
    .image-mixins(){

        .genImageClasses(@imageType, @imageProperties, @containerProperties:display block){
            .ivx-image-container-@{imageType} {
                .setPropertyFromList(@containerProperties);

                .ivx-image-@{imageType}{
                    .setPropertyFromList(@imageProperties);
                }
            }

        }

    }

    /*=====================
    5 Backgrounds
    ======================*/
    .background-mixins(){

        /* Background Image */

        .genBackgroundImageClasses(@backgroundType, @bgImage, @blurAmount:none, @color:transparent, @colorOpacity: 75%){
            .ivx-background-image-@{backgroundType}{
                position: fixed; //make sure this will work when applied to elements like buttons
                width: 100%;
                height: 100%;
                box-shadow: inset 0 0 0 1000px fadeOut(@color, @colorOpacity);
                background-image: url(@bgImage);
                background-position: center center;
                background-size: cover;
                left: 0;
                top: 0;
                z-index: -1;
                transform: scale(1.1);
                ._blur(@blurAmount);
            }
        }

        ._blur(@blurAmount){
            -webkit-filter: ~'blur('@blurAmount~')';
            -moz-filter: ~'blur('@blurAmount~')';
            -o-filter: ~'blur('@blurAmount~')';
            -ms-filter:~'blur('@blurAmount~')';
            filter: ~'blur('@blurAmount~')';
        }

        /* Background Gradient */

        .genBackgroundGradientClasses(@backgroundType, @colorList, @direction:to bottom, @color:transparent, @colorOpacity: 75%){
            .ivx-background-gradient-@{backgroundType}{
                position: fixed;  //make sure this will work when applied to elements like buttons
                width: 100%;
                height: 100%;
                box-shadow: inset 0 0 0 1000px fadeOut(@color, @colorOpacity);
                background-image: svg-gradient(@direction, @colorList);
                background-position: center center;
                background-size: cover;
                left: 0;
                top: 0;
                z-index: -1;
                transform: scale(1.1);
            }
        }

    }

    /*=====================
    6 Buttons
    ======================*/
    .button-mixins(){

        .getButtonContainerClasses(stacked, @stackedButtonStyles);
        @stackedButtonStyles: {
            & .ivx-input-buttons{
                display: block;
            }
        };

        .getButtonContainerClasses(@containerType:default, @inputContainerButtonStyles) when (@containerType = default){

            .ivx-input-container-buttons{
                @inputContainerButtonStyles();
            }

        }

        .getButtonContainerClasses(@containerType, @inputContainerButtonStyles) when not (@containerType = default){

            .ivx-input-container-buttons-@{containerType}{
                @inputContainerButtonStyles();
            }

        }

        ._defaultButtonStyles{
            font-size: 1rem;
            border: none;
            background: black;
            color: white;
            padding: .75em 2em;
        }

        .genButtons(@buttonStyle:default, @defaultStyles: {}) when (@buttonStyle = default){
            .ivx-input-buttons{
                ._defaultButtonStyles;
                @defaultStyles();
            }
        }

        .genButtons(@buttonStyle, @customStyles) when not (@buttonStyle = default){
            .ivx-input-buttons-@{buttonStyle}{
                ._defaultButtonStyles;
                @customStyles();
            }
        }

        .createIconButtons(@icons){
            .ivx-input-buttons-icon{
                ._iconStyle();
                padding: .75em;
            }
            .ivx-input-buttons-icon-labeled{
                ._iconStyle();
                i{
                    margin-right: .5em;
                }
            }
            .ivx-input-buttons-icon-labeled-right{
                ._iconStyle();
                i{
                    margin-left: .5em;
                }
            }
            ._iconStyle(){
                i{
                    height: 1.2em;
                    width: 1.2em;
                    margin: -.2em;
                    font-family: @icons;
                    font-size: 1.25em;
                }
                i:before{
                    vertical-align: middle;
                }
            }
        }

        .setButtonProperties(@buttonType, @list) when (@buttonType = custom){
            .ivx-input-buttons{
                .setPropertyFromList(@list);
            }
        }

        .setButtonProperties(@buttonType, @list) when not (@buttonType = default){
            .ivx-input-buttons-@{buttonType}{
                .setPropertyFromList(@list);
            }
        }

    }

    /*=====================
    7 Video Controls
    ======================*/
    .video-control-mixins(){

        .genPlayerStyles(
            @playerStyles:{
                line-height: 0;
            }){

            .ivx-state-video-player{
                @playerStyles();
            }

        }

        ._defaultControlButtons{
            padding: .75em;
            width: 3rem;
        }

        ._containerStyles{
            position: relative;
        }

        ._scrubStyle{
            position: absolute;
            top: 0;
            left: 0;
        }

        ._timeLapseStyle{
            height: 100%;
        }

        ._playPauseStyle{
            position: absolute;
            top: 1.5rem;
            left: 5%;
            ._defaultControlButtons;
        }

        ._muteStyle{
            position: absolute;
            top: 1.5rem;
            right: 5%;
            ._defaultControlButtons;
        }

        ._ccStyle{
            position: absolute;
            top: 1.5rem;
            right: ~"calc(5% + 3rem + .5em)";
            ._defaultControlButtons;
        }

        ._currentTimeStyle{
            position: absolute;
            left: ~"calc(5% + 3rem + 1em)";
            top: 2.25rem;
        }

        ._durationStyle{
            position: absolute;
            left: ~"calc(5% + 3rem + 4em)";
            top: 2.25rem;
        }

        ._trackStyle{
            margin: 0;
            padding-top: ~"calc(2rem + 42px)";
            padding-left: 0;
        }

        .createVideoControls(@controlType:default,

            @containerStyles:{
                ._containerStyles;
            },

            @scrubStyle:{
                ._scrubStyle;
            },

            @timeLapseStyle:{
                ._timeLapseStyle;
            },

            @playPauseStyle:{
                ._playPauseStyle;
            },

            @muteStyle:{
                ._muteStyle;
            },

            @ccStyle:{
                ._ccStyle;
            },

            @currentTimeStyle:{
                ._currentTimeStyle;
            },

            @durationStyle:{
                ._durationStyle;
            },

            @trackStyle:{
                ._trackStyle;
            })

            when (@controlType = default){

            .ivx-video-controls{

                .ivx-video-controls-container{
                    @containerStyles();
                    .createPlayPauseButton(@playPauseStyle);
                    .createMuteButton(@muteStyle);
                    .createCCButton(@ccStyle);
                    .createScrubBar(@scrubStyle, @timeLapseStyle);
                    .createTimeStamp(@currentTimeStyle,@durationStyle);
                    .createTrackSelect;
                    .createChapterList(@trackStyle);
                }
            }

        }

        .createVideoControls(@controlType,

            @containerStyles:{
                ._containerStyles;
            },

            @scrubStyle:{
                ._scrubStyle;
            },

            @timeLapseStyle:{
                ._timeLapseStyle;
            },

            @playPauseStyle:{
                ._playPauseStyle;
            },

            @muteStyle:{
                ._muteStyle;
            },

            @ccStyle:{
                ._ccStyle;
            },

            @currentTimeStyle:{
                ._currentTimeStyle;
            },

            @durationStyle:{
                ._durationStyle;
            },

            @trackStyle:{
                ._trackStyle;
            }) when not (@controlType = default){

            .ivx-video-controls{
                .ivx-video-controls-container.ivx-video-controls-@{controlType}{
                    @containerStyles();
                    .createPlayPauseButton(@playPauseStyle);
                    .createMuteButton(@muteStyle);
                    .createCCButton(@ccStyle);
                    .createScrubBar(@scrubStyle, @timeLapseStyle);
                    .createTimeStamp(@currentTimeStyle,@durationStyle);
                    .createTrackSelect;
                    .createChapterList(@trackStyle);
                }
            }

        }

        .createPlayPauseButton(@playPauseStyle: {}, @playIconContent: "\f04b", @pauseIconContent: "\f04c"){
            .ivx-video-controls-play-pause{
                ._defaultButtonStyles;
                .ivx-color-primary;
                @playPauseStyle();
            }

            .ivx-video-controls-play-icon{
                display: inline;
                &:before{
                    content: @playIconContent;
                }
            }
            .ivx-video-controls-pause-icon{
                display: inline;
                &:before{
                    content: @pauseIconContent;
                }
            }
        }

        .createMuteButton(@muteStyles: {}, @muteIconContent: "\f026", @unmuteIconContent: "\f028"){
            .ivx-video-controls-mute{
                ._defaultButtonStyles;
                .ivx-color-primary;
                @muteStyles();
            }

            .ivx-video-controls-mute-icon{
                display: inline;
                &:before{
                    content: @muteIconContent;
                }
            }
            .ivx-video-controls-unmute-icon{
                display: inline;
                &:before{
                    content: @unmuteIconContent;
                }
            }
        }

        .createCCButton(@ccStyle: {}, @ccIcon: "\f20a"){
            .ivx-video-controls-tracks-toggle{
                ._defaultButtonStyles;
                @ccStyle();
            }

            .ivx-video-controls-tracks-on{
                .ivx-color-primary;
            }

            .ivx-video-controls-tracks-off{
                .ivx-color-secondary;
            }

            .ivx-video-controls-tracks-toggle-icon{
                display: inline;
                &:before{
                    content: @ccIcon;
                }
            }
        }

        .createScrubBar(@scrubStyle: {}, @timeLapseStyle: {}){
            .ivx-video-controls-scrub-bar{
                width: 100%;
                height: 1rem;
                .ivx-color-secondary;
                @scrubStyle();

                .ivx-video-controls-scrub-bar-timelapse{
                    .ivx-color-primary;
                    @timeLapseStyle();
                }
            }
        }

        .createTimeStamp(@currentTimeStyle: {}, @durationStyle: {}){
            .ivx-video-controls-timestamp-current-time{
                @currentTimeStyle();
            }

            .ivx-video-controls-timestamp-duration{
                @durationStyle();
            }
        }

        .createTrackSelect(){
            .ivx-video-controls-tracks-select{
                ._defaultOptionsInputStyles;
            }

            .ivx-video-controls-tracks-select-off{
                display: none;
            }
        }

        .createChapterList(@chapterStyle: {}){
            .ivx-video-controls-chapters{
                list-style: none;
                @chapterStyle();

                .ivx-video-controls-chapters-item-control{
                    ._defaultButtonStyles;
                    width: 100%;
                }
            }
        }

    }

    /*=====================
    8 Form Inputs
    ======================*/
    .form-input-mixins(){

        //error message containers
        ._defaultInputContainerErrorStyles{
            margin: .5em 0;
        }

        .genErrorMessageContainers(@containerStyle:default) when (@containerStyle = default){
            .ivx-input-error-container{
                ._defaultInputContainerErrorStyles;
            }
        }

        //error messages
        ._defaultErrorMessageStyles{
            color: @red;
            font-size: .75em;
        }

        .genErrorMessages(@inputStyle:default) when (@inputStyle = default){
            .ivx-input-error-message{
                ._defaultErrorMessageStyles;
            }
        }

        .genTextInputs(@inputStyle, @customProperties) when (@inputStyle = custom){
            .ivx-input-error-message{
                ._defaultErrorMessageStyles;
            }
            .setErrorMessageProperties(@inputStyle, @customProperties);
        }

        .setErrorMessageProperties(@inputType, @list) when (@inputType = custom){
            .ivx-input-error-message{
                .setPropertyFromList(@list);
            }
        }

        .setErrorMessageProperties(@inputType, @list) when not (@inputType = default){
            .ivx-input-error-message-@{inputType}{
                .setPropertyFromList(@list);
            }
        }

        //text input containers
        ._defaultInputContainerTextStyles{
            margin-top: 1em;

            .ivx-input-label{
                display: block;
                text-transform: uppercase;
                font-weight: bold;
                font-size: .75em;
                color: @primary;
                padding-bottom: .5em;
            }
        }

        .genTextInputContainers(@containerStyle:default, @label:show) when (@containerStyle = default){
            .ivx-input-container-text{
                ._defaultInputContainerTextStyles;
            }
        }

        //text inputs
        ._defaultTextInputStyles{
            font-size: 1rem;
            border: 1px solid #BDBDBD;
            padding: .5em .75em;
            width: 100%;
        }

        .genTextInputs(@inputStyle:default) when (@inputStyle = default){
            .ivx-input-text{
                ._defaultTextInputStyles;
            }
        }

        .genTextInputs(@inputStyle, @borderRadius: 4px) when (@inputStyle = rounded){
            .ivx-input-text{
                ._defaultTextInputStyles;
                border-radius: @borderRadius;
            }
        }

        .genTextInputs(@inputStyle, @customProperties) when (@inputStyle = custom){
            .ivx-input-text{
                ._defaultTextInputStyles;
            }
            .setTextInputProperties(@inputStyle, @customProperties);
        }

        .setTextInputProperties(@inputType, @list) when (@inputType = custom){
            .ivx-input-text{
                .setPropertyFromList(@list);
            }
        }

        .setTextInputProperties(@inputType, @list) when not (@inputType = default){
            .ivx-input-text-@{inputType}{
                .setPropertyFromList(@list);
            }
        }

        //textarea input containers
        ._defaultInputContainerTextareaStyles{
            margin-top: 1em;

            .ivx-input-label{
                display: block;
                text-transform: uppercase;
                font-weight: bold;
                font-size: .75em;
                color: @primary;
                padding-bottom: .5em;
            }
        }

        .genTextareaInputContainers(@containerStyle:default, @label:show) when (@containerStyle = default){
            .ivx-input-container-textarea{
                ._defaultInputContainerTextareaStyles;
            }
        }

        //textarea inputs
        ._defaultTextareaInputStyles{
            font-size: 1rem;
            border: 1px solid #BDBDBD;
            padding: .5em .75em;
            width: 100%;
        }

        .genTextareaInputs(@inputStyle:default) when (@inputStyle = default){
            .ivx-input-textarea{
                ._defaultTextareaInputStyles;
            }
        }

        .genTextareaInputs(@inputStyle, @borderRadius: 4px) when (@inputStyle = rounded){
            .ivx-input-textarea{
                ._defaultTextareaInputStyles;
                border-radius: @borderRadius;
            }
        }

        .genTextareaInputs(@inputStyle, @customProperties) when (@inputStyle = custom){
            .ivx-input-textarea{
                ._defaultTextareaInputStyles;
            }
            .setTextareaInputProperties(@inputStyle, @customProperties);
        }

        .setTextareaInputProperties(@inputType, @list) when (@inputType = custom){
            .ivx-input-textarea{
                .setPropertyFromList(@list);
            }
        }

        .setTextareaInputProperties(@inputType, @list) when not (@inputType = default){
            .ivx-input-textarea-@{inputType}{
                .setPropertyFromList(@list);
            }
        }

        //radio input containers
        ._defaultInputContainerRadioStyles{
            margin-top: 1em;

            .ivx-input-label{
                margin-top: .5em;
            }

            .ivx-input-label + .ivx-input-label{
                margin-left: .5em;
            }
        }

        .genRadioInputContainers(@containerStyle:default, @label:show) when (@containerStyle = default){
            .ivx-input-container-radio{
                ._defaultInputContainerRadioStyles;
            }
        }

        //radio inputs
        ._defaultRadioInputStyles{
            margin-right: .5em;
        }

        .genRadioInputs(@inputStyle:default) when (@inputStyle = default){
            .ivx-input-radio{
                ._defaultRadioInputStyles;
            }
        }

        .genTextInputs(@inputStyle, @customProperties) when (@inputStyle = custom){
            .ivx-input-radio{
                ._defaultRadioInputStyles;
            }
            .setRadioInputProperties(@inputStyle, @customProperties);
        }

        .setRadioInputProperties(@inputType, @list) when (@inputType = custom){
            .ivx-input-radio{
                .setPropertyFromList(@list);
            }
        }

        .setRadioInputProperties(@inputType, @list) when not (@inputType = default){
            .ivx-input-radio-@{inputType}{
                .setPropertyFromList(@list);
            }
        }

        //checkbox input containers
        ._defaultInputContainerCheckboxStyles{
            margin-top: 1em;

            .ivx-input-label{
                margin-top: .5em;
            }

            .ivx-input-label + .ivx-input-label{
                margin-left: .5em;
            }
        }

        .genCheckboxInputContainers(@containerStyle:default, @label:show) when (@containerStyle = default){
            .ivx-input-container-checkbox{
                ._defaultInputContainerCheckboxStyles;
            }
        }

        //checkbox inputs
        ._defaultCheckboxInputStyles{
            margin-right: .5em;
        }

        .genCheckboxInputs(@inputStyle:default) when (@inputStyle = default){
            .ivx-input-checkbox{
                ._defaultCheckboxInputStyles;
            }
        }

        .genCheckboxInputs(@inputStyle, @customProperties) when (@inputStyle = custom){
            .ivx-input-checkbox{
                ._defaultCheckboxInputStyles;
            }
            .setCheckboxInputProperties(@inputStyle, @customProperties);
        }

        .setCheckboxInputProperties(@inputType, @list) when (@inputType = custom){
            .ivx-input-checkbox{
                .setPropertyFromList(@list);
            }
        }

        .setCheckboxInputProperties(@inputType, @list) when not (@inputType = default){
            .ivx-input-checkbox-@{inputType}{
                .setPropertyFromList(@list);
            }
        }

        //options containers
        ._defaultInputContainerOptionsStyles{
            margin-top: 1em;

            .ivx-input-label{
                display: block;
                font-size: .75em;
                padding-bottom: .5em;
            }

            .ivx-input-label + .ivx-input-label{

            }
        }

        .genOptionsInputContainers(@containerStyle:default, @label:show) when (@containerStyle = default){
            .ivx-input-container-options{
                ._defaultInputContainerOptionsStyles;
            }
        }

        //options input
        ._defaultOptionsInputStyles{
            font-size: 1rem;
            border: 1px solid #BDBDBD;
            background: @white;
            height: 2.25em;
            width: 100%;
        }

        .genOptionsInputs(@inputStyle:default) when (@inputStyle = default){
            .ivx-input-options{
                ._defaultOptionsInputStyles;
            }
        }

        .genCheckboxInputs(@inputStyle, @customProperties) when (@inputStyle = custom){
            .ivx-input-options{
                ._defaultOptionsInputStyles;
            }
            .setOptionsInputProperties(@inputStyle, @customProperties);
        }

        .setOptionsInputProperties(@inputType, @list) when (@inputType = custom){
            .ivx-input-options{
                .setPropertyFromList(@list);
            }
        }

        .setOptionsInputProperties(@inputType, @list) when not (@inputType = default){
            .ivx-input-options-@{inputType}{
                .setPropertyFromList(@list);
            }
        }

        //submit button containers
        ._defaultSubmitButtonContainerCheckboxStyles{
            margin-top: 1em;
        }

        .genSubmitButtonInputContainers(@containerStyle:default) when (@containerStyle = default){
            .ivx-input-container-submit-button{
                ._defaultSubmitButtonContainerCheckboxStyles;
            }
        }

        //submit buttons
        ._default-submit-button-styles(){
            font-size: 1rem;
            border: none;
            background: black;
            color: white;
            padding: .75em 2em;
        }

        .genSubmitButtonInputs(@inputStyle:default){
            .ivx-input-submit-button when (@inputStyle = default){
                ._default-submit-button-styles;
            }
        }

        .genSubmitButtonInputs(@inputStyle, @borderRadius: 4px) when (@inputStyle = rounded){
            .ivx-input-submit-button{
                ._default-submit-button-styles;
                border-radius: @borderRadius;
            }
        }

        .genSubmitButtonInputs(@inputStyle, @customProperties) when (@inputStyle = custom){
            .ivx-input-submit-button{
                ._default-submit-button-styles;
            }
            .setSubmitButtonProperties(@inputStyle, @customProperties);
        }

        .setSubmitButtonProperties(@inputStyle, @list) when (@inputStyle = custom){
            .ivx-input-submit-button{
                .setPropertyFromList(@list);
            }
        }

        .setSubmitButtonProperties(@inputStyle, @list) when not (@inputStyle = default){
            .ivx-input-submit-button-@{buttonType}{
                .setPropertyFromList(@list);
            }
        }

        .createIconSubmitButtons(@icons){
            .ivx-input-submit-button-icon{
                ._iconStyle();
                padding: .75em;
            }
            .ivx-input-submit-button-icon-labeled{
                ._iconStyle();
                i{
                    margin-right: .5em;
                }
            }
            .ivx-input-submit-button-icon-labeled-right{
                ._iconStyle();
                i{
                    margin-left: .5em;
                }
            }
            ._iconStyle(){
                i{
                    height: 1.2em;
                    width: 1.2em;
                    margin: -.2em;
                    font-family: @icons;
                    font-size: 1.25em;
                }
                i:before{
                    vertical-align: middle;
                }
            }
        }

    }

    /*=====================
    9 Grid
    ======================*/

    .grid-mixins(){

        .make-grids(@breakPoints) {
            .iter(length(@breakPoints));
            .iter(@i) when (@i = 1) {
                .iter(@i - 1);
                @pair:  extract(@breakPoints, @i);
                @key:   extract(@pair, 1);
                @value: extract(@pair, 2);
                @mobilePair: extract(@breakPoints, (@i+1));
                @mobileMax: extract(@mobilePair, 2);
                //set the base grid
                .generate-grid(default, @gridtype, @columnCount);
                //force base grid to single column at mobile breakpoint
                @media only screen and (max-width: @mobileMax) {
                    .generate-grid(mobile, @gridtype, @columnCount);
                }
            }
            .iter(@i) when (@i > 1) {
                .iter(@i - 1);
                @pair:  extract(@breakPoints, @i);
                @key:   extract(@pair, 1);
                @value: extract(@pair, 2);
                //create media query and grid
                @media only screen and (min-width: @value) {
                    .generate-grid(@key, @gridtype, @columnCount);
                    .generate-fixed-container(@value);
                }
            }
        }

        .generate-grid-container(@maxContainerWidth){

            .ivx-grid-wrap {
                box-sizing: border-box;
                max-width: @maxContainerWidth;
                margin: 0 auto;
            }

            .ivx-grid-container-fluid {
                padding-right: ~"calc(@{gutterWidth} * 2)";
                padding-left: ~"calc(@{gutterWidth} * 2)";
            }

            .ivx-grid-container,
            .ivx-grid-container-fluid {
                margin-right: auto;
                margin-left: auto;
            }

        }

        .generate-fixed-container(@width){

            .ivx-grid-container{
                width: ~"calc(@{width} + (@{gutterWidth} * 2))";
            }

        }

        .generate-grid-framework(@type:default, @gutterWidth: 2rem, @maxWidth:1200px) when (@type = default){

            .clearfix:before,
            .clearfix:after,
            .ivx-grid-row:before,
            .ivx-grid-row:after {
                content: " ";
                display: table;
            }

            .clearfix:after,
            .ivx-grid-row:after {
                clear: both;
            }

            .ivx-grid-row {
                margin-right: -@gutterWidth;
                margin-left: -@gutterWidth;
                box-sizing: border-box;
            }

            [class^="ivx-grid-"] {
                box-sizing: border-box;
                padding-left: @gutterWidth;
                padding-right: @gutterWidth;
            }

        }

        .generate-grid-framework(@type:default, @gutterWidth: 2rem, @maxWidth:1200px) when (@type = flexbox){

            .ivx-grid-row {
                box-sizing: border-box;
                display: -webkit-box;
                display: -ms-flexbox;
                display: flex;
                -webkit-box-flex: 0;
                -ms-flex: 0 1 auto;
                flex: 0 1 auto;
                -webkit-box-orient: horizontal;
                -webkit-box-direction: normal;
                -ms-flex-direction: row;
                flex-direction: row;
                -ms-flex-wrap: wrap;
                flex-wrap: wrap;
                margin-right: -@gutterWidth;
                margin-left: -@gutterWidth;
            }

            [class^="ivx-grid-"] {
                box-sizing: border-box;
                -webkit-box-flex: 0;
                -ms-flex: 0 0 auto;
                flex: 0 0 auto;
                padding-right: @gutterWidth;
                padding-left: @gutterWidth;
            }

        }

        //generate the columns for default grid
        .generate-columns(@size:default, @type:default, @n:12, @i: 1) when (@i =< @n) and (@type = default) and (@size = default) {
            .ivx-grid-@{i}-@{n}{
                width: (@i/@n * 100%);
                float: left;
            }
            .generate-columns(@size, @type, @n, (@i + 1));
        }

        .generate-columns(@size, @type, @n:12, @i: 1) when (@i =< @n) and (@type = default) and not (@size = default) and not (@size = mobile) {
            .ivx-grid-@{size}-@{i}-@{n}{
                width: (@i/@n * 100%);
                float: left;
            }
            .generate-columns(@size, @type, @n, (@i + 1));
        }

        .generate-columns(@size:default, @type:default, @n:12, @i: 1) when (@i =< @n) and (@type = default) and (@size = mobile) {
            .ivx-grid-@{i}-@{n}{
                width: 100%;
            }
            .generate-columns(@size, @type, @n, (@i + 1));
        }

        //generate the columns for flexbox grid
        .generate-columns(@size:default, @type:default, @n:12, @i: 1) when (@i =< @n) and (@type = flexbox) and (@size = default) {
            .ivx-grid-@{i}-@{n}{
                flex-basis: (@i/@n * 100%);
                max-width: (@i/@n * 100%);
            }
            .generate-columns(@size, @type, @n, (@i + 1));
        }

        .generate-columns(@size:default, @type:default, @n:12, @i: 1) when (@i =< @n) and (@type = flexbox) and not (@size = default) and not (@size = mobile) {
            .ivx-grid-@{size}-@{i}-@{n}{
                flex-basis: (@i/@n * 100%);
                max-width: (@i/@n * 100%);
            }
            .generate-columns(@size, @type, @n, (@i + 1));
        }

        .generate-columns(@size:default, @type:default, @n:12, @i: 1) when (@i =< @n) and (@type = flexbox) and (@size = mobile) {
            .ivx-grid-@{i}-@{n}{
                flex-basis: 100%;
                max-width: 100%;
            }
            .generate-columns(@size, @type, @n, (@i + 1));
        }

        //create grid
        .generate-grid(@size:default, @type:default, @n, @i: 1) when (@i =< @n) {
            .generate-columns(@size, @type, @i);
            .generate-grid(@size, @type, @n, (@i + 1));
        }

    }

    /*=====================
    10 Embedded Scenes
    ======================*/
    .embedded-scene-mixins(){

        ._parentSceneStyles{

        }

        ._parentSceneVideoStyles{
            position: relative;
        }

        ._parentSceneQuestionStyles{

        }

        ._parentSceneMenuStyles{

        }

        ._parentSceneFormStyles{

        }

        .genParentSceneClasses(@type: default,

            @parentSceneStyles: {
                ._parentSceneStyles;
            },

            @parentSceneVideoStyles: {
                ._parentSceneVideoStyles;
            },

            @parentSceneQuestionStyles: {
                ._parentSceneQuestionStyles;
            },

            @parentSceneMenuStyles: {
                ._parentSceneMenuStyles;
            },

            @parentSceneFormStyles:{
                ._parentSceneFormStyles;
            }

            ) when (@type = default){

            .ivx-scene-parent{
                @parentSceneStyles();
                .genParentSceneVideoClasses(@parentSceneVideoStyles);
                .genParentSceneQuestionClasses(@parentSceneQuestionStyles);
                .genParentSceneMenuClasses(@parentSceneMenuStyles);
                .genParentSceneFormClasses(@parentSceneFormStyles);
            }

        }

        .genParentSceneClasses(@type,

            @parentSceneStyles: {
                ._parentSceneStyles;
            },

            @parentSceneVideoStyles: {
                ._parentSceneVideoStyles;
            },

            @parentSceneQuestionStyles: {
                ._parentSceneQuestionStyles;
            },

            @parentSceneMenuStyles: {
                ._parentSceneMenuStyles;
            },

            @parentSceneFormStyles:{
                ._parentSceneFormStyles;
            }

            ) when not (@type = default){

                .ivx-scene-parent-@{type}{
                    @parentSceneStyles();
                    .genParentSceneVideoClasses(@parentSceneVideoStyles);
                    .genParentSceneQuestionClasses(@parentSceneQuestionStyles);
                    .genParentSceneMenuClasses(@parentSceneMenuStyles);
                    .genParentSceneFormClasses(@parentSceneFormStyles);
                }

        }

        .genParentSceneVideoClasses(@parentVideoStyles){
            &.ivx-scene-parent-video{
                @parentVideoStyles();
            }
        }

        .genParentSceneQuestionClasses(@parentQuestionStyles){
            &.ivx-scene-parent-question{
                @parentQuestionStyles();
            }
        }

        .genParentSceneMenuClasses(@parentMenuStyles){
            &.ivx-scene-parent-menu{
                @parentMenuStyles();
            }
        }

        .genParentSceneFormClasses(@parentFormStyles){
            &.ivx-scene-parent-form{
                @parentFormStyles();
            }
        }

        ._childSceneStyles{

        }

        ._childSceneVideoStyles{

        }

        ._childSceneQuestionStyles{
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;
        }

        ._childSceneMenuStyles{

        }

        ._childSceneFormStyles{

        }

        .genChildSceneClasses(@type: default,

            @childSceneStyles: {
                ._childSceneStyles;
            },

            @childSceneVideoStyles: {
                ._childSceneVideoStyles;
            },

            @childSceneQuestionStyles: {
                ._childSceneQuestionStyles;
            },

            @childSceneMenuStyles: {
                ._childSceneMenuStyles;
            },

            @childSceneFormStyles: {
                ._childSceneFormStyles;
            }

            ) when (@type = default){

                .ivx-scene-child{
                    @childSceneStyles();
                    .genChildSceneVideoClasses(@childSceneVideoStyles);
                    .genChildSceneQuestionClasses(@childSceneQuestionStyles);
                    .genChildSceneMenuClasses(@childSceneMenuStyles);
                    .genChildSceneFormClasses(@childSceneFormStyles);
                }
        }

        .genChildSceneClasses(@type,

            @childSceneStyles: {
                ._childSceneStyles;
            },

            @childSceneVideoStyles: {
                ._childSceneVideoStyles;
            },

            @childSceneQuestionStyles: {
                ._childSceneQuestionStyles;
            },

            @childSceneMenuStyles: {
                ._childSceneMenuStyles;
            },

            @childSceneFormStyles: {
                ._childSceneFormStyles;
            }

            ) when not (@type = default){

                .ivx-scene-child-@{type}{
                    @childSceneStyles();
                    .genChildSceneVideoClasses(@childSceneVideoStyles);
                    .genChildSceneQuestionClasses(@childSceneQuestionStyles);
                    .genChildSceneMenuClasses(@childSceneMenuStyles);
                    .genChildSceneFormClasses(@childSceneFormStyles);
                }
        }

        .genChildSceneVideoClasses(@childSceneVideoStyles){
            &.ivx-scene-child-video{
                @childSceneVideoStyles();
            }
        }

        .genChildSceneQuestionClasses(@childSceneQuestionStyles){
            &.ivx-scene-child-question{
                @childSceneQuestionStyles();
            }
        }

        .genChildSceneMenuClasses(@childSceneMenuStyles){
            &.ivx-scene-child-menu{
                @childSceneFormStyles();
            }
        }

        .genChildSceneFormClasses(@childFormStyles){
            &.ivx-scene-child-form{
                @childFormStyles();
            }
        }

    }

    /*=====================
    11 Responsive
    ======================*/
    .responsive-mixins(){

        .responsive(@view, @settings ) when (@view = portrait) {
            @media only screen and (min-width: 320px) and (max-width: 812px) and (orientation: portrait) {
                @settings();
            }
        }

        .responsive(@view, @settings ) when (@view = landscape) {
            @media only screen and (min-width: 320px) and (max-width: 812px) and (orientation: landscape) {
                @settings();
            }
        }

        .responsive(@view, @settings ) when (@view = mobile) {
            @media only screen and (min-width: 320px) and (max-width: 812px) and (orientation: landscape) {
                @settings();
            }

            @media only screen and (min-width: 320px) and (max-width: 812px) and (orientation: portrait) {
                @settings();
            }
        }

        .responsive(@view, @settings ) when (@view = desktop) {
            @media only screen and (min-width: 46.0625em) and (min-height: 30.0625em) {
                @settings();
            }
        }

    }


}//end base mixins


///////////////////////
/*
Style Guide Specific
*/
///////////////////////

.styleGuideStyles(){
    @spTextColor : #666;

    #player-services {
        display: none;
    }

    body{
        width:100vw;
    }

    .sp-framework-scene {
        font-family: 'Roboto', sans-serif;
    }

    .sp-framework-colors{
        display:flex;
        flex-direction:row;
        flex-wrap:wrap;
    }

    * {
        box-sizing: border-box;
    }

    .sp-framework-color-display{
        @padding:8px 16px;
        width:100%;
        .sp-framework-color-display-section{
            .sp-framework-color-display-section-header{
                padding: @padding;
            }
        }

        .sp-framework-color-display-section{
            width:100%;
            .sp-framework-color-display-content{
                padding: @padding;
            }
        }

        .sp-framework-color-display-additional-pallets-container, .sp-framework-color-display-accents, .sp-framework-color-display-main{
            display:flex;
            flex-flow:row;
            flex-wrap:wrap;
            .sp-framework-color-display-content{
                width:50%;
                padding: @padding;

                .responsive(portrait, {
                    width:100%;
                });

                .responsive(landscape, {
                    width:100%;
                });

            }
        }

        .sp-framework-color-display-grey{
            .sp-framework-color-display-content{
                width:100%;
            }
        }

    }

    .sp-framework-color-viewer, .sp-framework-color-accent-pallet-container {
        display: flex;
        flex-flow: row;
        font-size:14px;
        width:100%;

        .responsive(portrait, {
            flex-flow: column;
        });

        .responsive(landscape, {
            flex-flow: column;
        });

        .sp-framework-color-viewer-hex-value, .sp-framework-color-accent-hex-value {
            font-weight:300;
        }

        .sp-framework-color-viewer-default, .sp-framework-color-accent-default {
            width: 33%;
            display:flex;
            flex-flow:column;
            padding:12px;

            .responsive(portrait, {
                width:100%;
            });

            .responsive(landscape, {
                width:100%;
            });
        }

        .sp-framework-color-viewer-variatiants, .sp-framework-color-accent-variatiants {
            width: 67%;

            .responsive(portrait, {
                width:100%;
            });

            .responsive(landscape, {
                width:100%;
            });


            .sp-framework-color-viewer-container, .sp-framework-color-accent-container {
                padding:10px;
                display:flex;
                flex-flow:row;
                justify-content:space-between;
            }
        }

    }

    .sp-framework-color-accent-pallet-container{
        margin:10px 0px;
    }


    .sp-framework-typography-text-elements-desktop{
        .responsive(portrait, {
           display:none;
        });

        .responsive(landscape, {
           display:none;
        });
    }


    .sp-framework-typography-view{
        padding:12px;


        .sp-framework-typography-info-title, .sp-framework-typography-header, .sp-framework-typography-info-font-family, .sp-framework-typography-info-font-size, .sp-framework-typography-info-font-weight {
            color:@spTextColor;
        }

        .sp-framework-typography-info-title{
            font-weight:700;
        }

        .sp-framework-typography-info-other-elements{
            .sp-framework-typography-info-table{
                margin:20px 0px;
            }
        }

        .sp-framework-typography-info-table{
            .sp-framework-typography-info-row{
                display:flex;
                flex-flow:row;
                align-items:baseline;
                justify-contents:center;
                border-bottom:dotted 1px @spTextColor;

                .sp-framework-typography-info-column{
                    padding:10px 5px;
                    width:100%;
                }
            }
        }
    }

    .sp-framework-typography-text-elements.sp-framework-typography-text-elements-mobile{
        .responsive(desktop, {
            display:none;
         });

         .sp-framework-typography-info-column-label{
             padding:0;
             margin:0;
             margin:5px 0px;
             font-size:0.95em;
         }
         .sp-framework-typography-info-row{
                display:flex;
                flex-flow:row;
                align-items:center;


                border-bottom:dotted 1px @spTextColor;

                .sp-framework-typography-info-column{
                    padding:10px 10px;
                    width:100%;
                }
            }
    }

    .sp-framework-button-container{
        button{
            margin: 1rem;
        }
    }

    .sp-framework-image-table{
        padding:10px 10px;
        width:100%;
        max-width:1080px;
        overflow-x:scroll;
        .sp-framework-image-row{
            ._sp-row-settings;
            align-items:center;
            .sp-framework-image-column, .sp-framework-image-column-header{
                padding:10px 5px;
                width:100%;
            }
            .sp-framework-image-header{
                font-size:1rem;

            }
        }

        .sp-image-framework-image-info{
            .sp-image-framework-image-info-label{
                font-weight:900;
                margin-right:5px;
            }
            .sp-image-framework-impage-info-label-x{
                margin:0px 1px;
                font-size:.75rem;
            }
        }


    }

    .sp-framework-icon-container{
        padding:20px;
    }

    .sp-framework-icon-card-container{
        display:flex;
        flex-flow:row;
        flex-wrap:wrap;
        .sp-framework-icon-readout-card{
            width:320px;
            border:solid 1px;
            margin-right:10px;

            .responsive(mobile,{
                 margin-top:10px;
                 width:100%;
            });


            .sp-framework-icon-readout-sample{
                display:flex;
                justify-content:center;
                align-items:center;
                background: #DADADA;
                flex-flow:row;
                .sp-framework-icon-readout-sample-display{
                    width:100%;
                    padding:20px;
                    display:flex;
                    justify-content:center;
                    align-items:center;
                }
                .ivx-icon{
                    font-size:2rem;
                }
            }
            .sp-framework-icon-readout-info{
               padding:10px;
               .sp-framewok-icon-label{
                   font-weight:700;
                   display:block;
                   padding:5px 0px;
               }
            }
        }
    }

    ._sp-row-settings{
        display:flex;
        flex-flow:row;
        align-items:baseline;
        justify-contents:center;
        border-bottom:dotted 1px @spTextColor;
    }
};